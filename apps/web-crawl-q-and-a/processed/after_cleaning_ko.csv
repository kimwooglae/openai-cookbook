,text,n_tokens
0,"WebSquare.uiplugin.tabControl은 탭 컨트롤을 구현하는 HTML 컴포넌트이다. 이 컴포넌트는 동적으로 탭을 생성하거나 삭제할 수 있으며, 웹 접근성 지원 기능을 사용할 수 있다. 또한 adaptive 모드로 브라우저의 너비에 따라 레이아웃을 변경할 수 있으며, 탭 스크롤 버튼을 클릭하여 옆의 탭으로 이동하여 해당 탭을 활성화하는 기능을 사용할 수 있다.
이 컴포넌트의 속성으로는 accessibility, adaptive, adaptiveThreshold, alwaysDraw, changeActiveTab, changeActiveTabBeforeselect, class, closable, confirmFalseAction, confirmMessage, confirmTrueAction, focusOnStart, frameModal, id, keepDisabledTab, noUseTitle, preventTabClickEvent, processMsgFrame, selectedIndex, tableRender, tabMove, tabPosition, tabRole, tabScroll, tabScrollAuto, useAccessibilityMenu, useATagBtn, useConfirmMessage, useLocale, useMoveNextTabFocus, userData1, userData2, userData3, useTitleTooltip, windowMaxNum 등이 있다.
이 컴포넌트의 이벤트로는 onaftertabmove, onbeforeselect, onbeforetabclose, onbeforetabmove, onchange, ondrawcomplete, onscrollleftbtnclick, onscrollrightbtnclick, onsubmenubtnclick, ontabclick, ontabclose, ontabload 등이 있다.
이 컴포넌트의 메소드로는 activateTab, addClass, addTab, bind, changeClass, createFrame, deleteAllTabs, deleteTab, disableTab, enableTab, focus, getDisabled, getFrame, getGenerator, getID, getInitStyle, getLabelText, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope 등이 있다.",462
1,"이 함수들은 웹스퀘어 컴포넌트에서 사용할 수 있는 다양한 기능을 제공한다. getScopeWindow() 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. getSelectedTabID() 함수는 현재 선택된 tab의 ID를 반환하며, getSelectedTabIndex() 함수는 현재 선택된 tab의 index를 반환한다. getSize(sizeName) 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 반환하며, getStyle(propertyName) 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getTabCount(options) 함수는 현재 tab 개수를 반환하며, getTabID(tabIndex) 함수는 tab index에 해당하는 ID를 리턴한다. getTabIndex(tabID) 함수는 tab의 ID로 해당 tab의 index를 반환하며, getTabInfo() 함수는 각 tab에 대한 정보를 배열에 담아 리턴한다. getTitle() 함수는 컴포넌트의 title 속성 값을 반환하며, getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData(key) 함수는 setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다. getWindow(idx) 함수는 tab index 또는 id에 해당하는 window 객체를 반환한다. hasClass(className) 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하며, hide() 함수는 웹스퀘어 컴포넌트를 화면에서 숨긴다. hideTab(tabIndex) 함수는 tab을 숨김(hidden)처리 한다. isLoaded(idx) 함수는 tab의 index에 해당하는 화면의 출력유무를 반환한다. removeClass(className) 함수는 웹스퀘어 컴포넌트에서 class를 삭제하며, setContentsHeight(height) 함수는 컨텐츠 영역의 높이(px단위)를 설정한다. setDisabled(disabled) 함수는 웹스퀘어 컴포넌트의 disabled 속성을 설정하며, setEventPause(evList, flag) 함수는 지정한 이벤트를 중단한다. setHeight(height) 함수는 tabControl의 height를 설정하며 px단위로 적용된다. setInitStyle(property) 함수는 컴포넌트의 초기 스타일을 복구한다. setLabelText(idx, label) 함수는 tab의 label을 설정한다. setOpacity(value) 함수는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition(left, top, mode) 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. setReadOnly(readOnly) 함수는 웹스퀘어 컴포넌트의 readOnly 속성을 설정하며, setSelectedTabIndex(tabIndex) 함수는 tab의 index에 해당하는 tab을 선택한다. setStyle(propertyName, value) 함수는 웹스퀘어 컴포넌트의 CSS 속성을 설정하며, setTabHTML(tabID, tabHTML) 함수는 tabHTML 값을 동적으로 변경한다. setTabOrder(tabOrderArr) 함수는 새로운 tab순서에 대한 배열을 받아 해당 순서대로 tab을 재배치시킨다. setUserData(key, value) 함수는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. setWidth(width) 함수는 tabControl의 width를 설정하며 px단위로 적용된다. setWindowMaxNum(windowMaxNum) 함수는 tabControl에서 열 수 있는 최대 window 개수를 설정한다. show(displayType) 함수는 웹스퀘어 컴포넌트를 화면에 표시하며, showTab(tabIndex) 함수는 hide된 tab을 보여둔다. toggleClass(className) 함수는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다. trigger(type, array) 함수는 컴포넌트에서 특정 이벤트를 발생시킨다. unbind(type, function) 함수는 컴포넌트에서 이벤트를 제거한다. accessibility 속성은 웹 접근성 지원 기능을 사용할지에 대한 여부를 설정한다. adaptive 속성은 browser의 width에 따른 적응형 웹 모드로 adaptiveThreshold 속성값(width값)을 참조하여 동작한다. alwaysDraw 속성은 TabControl 컴포넌트가 포함하는 모든 탭의 컴포넌트의 렌더링 여부를 결정한다. changeActiveTab 속성은 탭 스크롤 버튼(tabScroll=""true"")을 클릭할 경우 옆의 탭으로 이동하여 해당 탭을 활성화하는 기능 사용 여부를 설정한다. class 속성은 HTML의 class 속성과 동일한 기능을 제공한다.",1362
2,"tabControl 컴포넌트는 여러 개의 탭을 관리하고, 각 탭에 대한 설정을 제공한다. closable 속성은 개별 tab에서 닫기 버튼을 활성화할지 여부를 설정하며, confirmFalseAction은 중복 확인 confirm에서 취소를 선택했을 때의 컨텐츠 로딩 방식을 설정한다. confirmTrueAction은 중복 확인 confirm에서 확인을 선택했을 때의 컨텐츠 로딩 방식을 설정하며, focusOnStart은 화면 로딩 시 활성화된 탭에 포커스를 이동시킬지 여부를 설정한다. tabScroll은 상단 탭들의 이동과 선택의 편의성을 제공하는 기능의 사용 여부를 설정하며, tabMove는 드래그-앤-드롭을 통해 탭 순서 변경을 허용할지 여부를 설정한다. 이외에도 다양한 속성들이 제공되며, 각 속성의 기본값과 사용 방법을 알아두면 유용하다. 또한, onaftertabmove 이벤트를 통해 tab이동이 발생한 직후에 추가적인 작업을 수행할 수 있다.",342
3,"이벤트
- onbeforeselect: tab이 선택되기 전에 발생되며, return을 통해 tab의 이동을 제어할 수 있다. selectedIndex, index를 parameter로 받는다.
- onbeforetabclose: tab이 close되기 전에 발생되며, return을 통해 close여부를 제어할 수 있다. tabID, idx를 parameter로 받는다.
- onbeforetabmove: tab이동이 발생하기 직전에 발생한다. info.startTabID, startTabIndex, endTabID, endTabIndex를 포함한 오브젝트를 반환한다.
- onchange: 선택된 tab이 변경된 경우에 발생한다. tabID, idx, userTabID를 parameter로 받는다.
- ondrawcomplete: alwaysDraw=""false""일 때, content의 wframe 또는 iframe이 화면에 load되는 시점에 발생한다. tabID, idx, userID를 parameter로 받는다.
- onscrollleftbtnclick: 왼쪽 tab 이동 버튼을 클릭하면 발생한다.
- onscrollrightbtnclick: 오른쪽 tab 이동 버튼을 클릭하면 발생한다.
- onsubmenubtnclick: submenu 버튼을 클릭하면 발생한다.
- ontabclick: tab이 클릭된 경우 발생한다. tabID, idx를 parameter로 받는다.
- ontabclose: close버튼이 클릭된 경우 발생한다. tabID, idx를 parameter로 받는다.
- ontabload: content의 wframe 또는 iframe이 화면에 완전히 load되는 시점에 발생한다. tabID, idx, userID를 parameter로 받는다.
메소드
- activateTab(idx): 지정한 index의 탭이 비활성화 상태인 경우(alwaysDraw=false) 활성화 상태로 변경.
- addClass(className): 컴포넌트에 CSS class를 추가.
- addTab(id, tabOpt, contOpt): tab을 추가하는 기능으로 tab과 content의 세부 생성 옵션을 설정할 수 있다. id, tabOpt, contOpt를 parameter로 받으며, Promise 객체를 반환한다.",521
4,"이 함수들은 웹스퀘어 컴포넌트에서 사용되는 함수들이며, 각 함수의 기능과 사용 방법이 설명되어 있다. 함수의 이름, 매개변수, 반환 값 등을 확인하여 사용하면 된다. 예제 코드를 참고하여 함수를 사용하는 방법을 익힐 수 있다. 함수의 이름과 매개변수를 정확히 입력하고, 반환 값의 형식을 확인하여 사용해야 한다. 함수의 사용 방법을 잘 익혀서 웹스퀘어 컴포넌트를 효율적으로 개발할 수 있도록 하자.",179
5,"getPosition( ) 함수: 컴포넌트의 위치 값을 반환한다. positionName 파라미터에 ""left"" 또는 ""top"" 값을 입력하여 각각 x, y 좌표 값을 반환할 수 있다.
getReadOnly( ) 함수: 컴포넌트의 readOnly 속성 값을 반환한다.
getScope( ) 함수: scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. 그렇지 않은 경우, null을 반환한다.
getScopeWindow( ) 함수: scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. 그렇지 않은 경우, 전역 window 객체를 반환한다.
getSelectedTabID( ) 함수: 현재 선택된 tab의 ID를 반환한다.
getSelectedTabIndex( ) 함수: 현재 선택된 tab의 index를 반환한다.
getSize( ) 함수: 컴포넌트의 크기 값을 반환한다. sizeName 파라미터에 ""height"", ""innerHeight"", ""outerHeight"", ""outerMarginHeight"", ""width"", ""innerWidth"", ""outerWidth"", ""outerMarginWidth"" 값을 입력하여 각각 높이, 너비 값을 반환할 수 있다.
getStyle( ) 함수: 컴포넌트의 CSS 속성 값을 반환한다. propertyName 파라미터에 CSS 속성 이름을 입력하여 해당 속성 값을 반환할 수 있다.
getStyleValue( ) 함수: [deprecated]getStyle 함수를 사용하는 것이 권장된다. 컴포넌트에 적용된 해당 CSS 속성 값을 반환한다.
getTabCount( ) 함수: 현재 tab의 개수를 반환한다. options 파라미터에 ""hiddenTab"" 값을 입력하여 hideTab으로 숨겨진 탭을 전체 개수에 포함할지 여부를 설정할 수 있다.
getTabID( ) 함수: tab index에 해당하는 ID를 반환한다.
getTabIndex( ) 함수: tab의 ID로 해당 tab의 index를 반환한다.
getTabInfo( ) 함수: 각 tab에 대한 정보를 배열에 담아 반환한다. id, label, defaultTabIndex, currentTabIndex, src, alwaysDraw 정보를 포함한다.
getTitle( ) 함수: 컴포넌트의 title 속성 값을 반환한다.
getUdcHome( ) 함수: UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. 파일명은 마지막 .xml까지 포함한다. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환한다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환된다.
getUdcRoot( ) 함수: UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. 파일명을 포함하지 않는다. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환한다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환된다.
getUserData( ) 함수: setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다.
getWindow( ) 함수: tab index 또는 id에 해당하는 window 객체를 반환한다. 반환된 객체를 통해 웹스퀘어 컴포넌트 및 function, 변수 등에 접근이 가능하다. idx 인자가 없을 경우 현재 선택된 tab의 window content를 반환한다.
hasClass( ) 함수: 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다.
hide( ) 함수: 웹스퀘어 컴포넌트를 화면에서 숨긴다. display:none; 및 visibility:hidden; CSS를 적용한다.",949
6,"이 문서는 웹스퀘어 컴포넌트에서 사용되는 함수들에 대한 설명을 제공한다. 각 함수는 파라미터와 리턴 타입을 가지며, SP5에서는 일부 함수가 비동기 함수로 변경되었다. 이에 따라 호출하는 함수들은 async function이 되어야 한다. 함수들은 각각 hideTab, isLoaded, removeClass, setContentsHeight, setDisabled, setEventPause, setHeight, setInitStyle, setLabelText, setOpacity, setPosition, setReadOnly, setSelectedTabIndex, setStyle, setTabHTML, setTabOrder 등이 있다. 각 함수의 파라미터와 리턴 타입은 문서에서 확인할 수 있다.",177
7,"tabControl1.setTabOrder() 함수는 탭의 순서를 변경하는 함수이다. 이 함수는 배열을 인자로 받으며, 해당 배열의 길이는 tab 전체의 길이와 같아야 하고, 각 원소는 탭의 id여야 한다.
setUserData() 함수는 웹스퀘어 컴포넌트에 임의의 데이터를 설정하는 함수이다. 이 함수는 컴포넌트에 설정 가능한 key를 입력해야 하며, 설정 가능한 key가 아닌 경우 해당 내용이 로그에 출력된다.
setWidth() 함수는 tabControl의 width를 설정하는 함수이다. 이 함수는 px 단위로 적용되며, 숫자가 아닌 값이 오면 무시된다.
setWindowMaxNum() 함수는 tabControl에서 열 수 있는 최대 window 개수를 설정하는 함수이다.
show() 함수는 웹스퀘어 컴포넌트를 화면에 표시하는 함수이다. 이 함수는 CSS display 속성을 주어진 값으로 설정하고 ""visibility: show;""를 적용한다.
showTab() 함수는 (SP5 async) hide된 tab을 보여주는 함수이다. 이 함수는 비동기 함수로 변경되었으며, 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.
toggleClass() 함수는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가하는 함수이다. 이 함수는 웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우 해당 class를 제거하고, 파라미터로 주어진 class가 없는 경우 해당 class를 추가한다.
trigger() 함수는 컴포넌트에서 특정 이벤트를 발생시키는 함수이다. 이 함수는 이벤트 핸들러에 전달할 파라미터 배열을 인자로 받는다.
unbind() 함수는 컴포넌트에서 이벤트를 제거하는 함수이다. 이 함수는 제거할 이벤트와 핸들러 함수를 인자로 받는다.
visible() 함수는 (deprecated) 엔진 내부적으로 CSS visibility 속성을 설정하는 함수이다. 이 함수는 show/hide 혹은 setStyle 사용을 권장하며, true/false 값을 인자로 받는다.",602
8,"이 문서는 Snippets 템플릿 기본 구성에 대한 가이드이다. Snippets는 웹스퀘어에서 제공하는 템플릿 파일로, 화면 구성을 쉽게 할 수 있도록 도와준다. 이 가이드에서는 Snippets 템플릿 파일의 구성 요소와 폴더명, Class명, 설명 등을 설명한다.
Snippets 템플릿 구성 요소는 화면 시작(Layout), 화면 분할(Layout), 화면 상단 공통, 검색 영역, 화면 타이틀, Table, GridView, 전체 버튼, 컴포넌트 등이 있다. 각 구성 요소는 다양한 기능을 제공하며, 화면 구성을 쉽게 할 수 있도록 도와준다.
Snippets 폴더명과 Class명은 각 구성 요소의 이름을 나타낸다. 예를 들어, 화면 시작(Layout)의 폴더명은 ""00.화면시작(Layout)""이고, Class명은 ""sub_content""이다. 이와 같이 각 구성 요소의 폴더명과 Class명을 이용하여 Snippets를 사용할 수 있다.
이 가이드에서는 Snippets 템플릿 파일의 구성 요소와 폴더명, Class명, 설명 등을 설명하였다. Snippets를 사용하면 화면 구성을 쉽게 할 수 있으며, 각 구성 요소의 다양한 기능을 활용하여 원하는 화면을 만들 수 있다.",430
9,"Snippets 불러오기는 Snippets View에서 Import Snippets 아이콘을 클릭하여 수행합니다. 이때, 가져올 Snippets가 있는 위치를 설정하고 등록되어 있지 않은 Snippets 목록만 보여집니다. import가 완료되면 자동으로 Snippets View에 등록되며, 경로를 수정하기 위해서는 선택한 Snippet을 마우스 우클릭하여 수정 메뉴에서 경로를 수정할 수 있습니다. 새로운 Project를 생성하거나 기존 Project에 Snippets를 Import할 경우, Snippets에 사용되는 CSS가 존재해야 합니다.",163
10,"WebSquare.uiplugin.fwSparkChart는 FusionWidget에 포함된 7종의 차트 중 하나로, 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있는 형태입니다. WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원하며, 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. 
fwSparkChart의 웹접근성 지원 여부, 차트 유형, 컴포넌트 ID, label 데이터로 사용할 DataCollection의 column의 ID값, fwSparkChart와 DataCollection 데이터 연동 시 사용하는 속성 등이 제공됩니다. 또한, fwSparkChart를 화면에 출력하거나 export하는 함수, 속성 값을 반환하는 함수, 이벤트를 동적으로 할당하거나 제거하는 함수 등이 제공됩니다. 
이외에도, CSS class를 추가하거나 삭제하는 함수, 컴포넌트의 위치나 크기를 설정하는 함수, 데이터를 변경하는 함수 등이 제공됩니다. 이를 통해 사용자는 fwSparkChart를 쉽게 커스터마이징할 수 있습니다.",324
11,"이 문서는 웹스퀘어 컴포넌트의 공통적인 기능들에 대한 설명을 제공합니다. 각 함수들의 파라미터, 반환값, 예제 코드 등이 포함되어 있습니다.
함수들은 다음과 같습니다.
- addClass(className): 컴포넌트에 클래스를 추가합니다.
- bind(eventType, function): 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다.
- changeClass(oldClassName, newClassName): 컴포넌트의 클래스를 변경합니다.
- draw(): fwSparkChart를 화면에 출력합니다.
- exportJSChart(): fwSparkChart를 jpg, png, pdf 형식으로 export합니다.
- fc(): fwSparkChart 타입의 fusionWidget 객체를 반환합니다.
- focus(): 웹스퀘어 컴포넌트에 포커스를 줍니다.
- getChartAttribute(name): fwSparkChart의 attribute 값을 반환합니다.
- getDisabled(): 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다.
- getGenerator(): 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다.
- getID(): 웹스퀘어 컴포넌트의 ID를 반환합니다.
- getInitStyle(CSS): 컴포넌트의 초기 스타일을 반환합니다.
- getJSONData(): fwSparkChart의 차트 데이터를 JSON 객체로 반환합니다.
- getOpacity(): 웹스퀘어 컴포넌트의 불투명도를 반환합니다.
- getOriginalID(): 웹스퀘어 컴포넌트의 originalID를 반환합니다.
- getPluginName(): 웹스퀘어 컴포넌트의 이름(pluginName)을 반환합니다.
- getPosition(positionName): 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다.
- getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다.
- getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다.
- getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환합니다.
각 함수들의 파라미터와 반환값, 예제 코드 등이 자세히 설명되어 있습니다.",669
12,"이 함수들은 웹스퀘어 컴포넌트에서 사용 가능한 함수들이다. getSize 함수는 웹스퀘어 컴포넌트의 크기를 반환하며, getStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getSVGString 함수는 차트로부터 SVG를 string 형태로 반환하며, getTitle 함수는 컴포넌트의 title 속성 값을 반환한다. getUdcHome 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환하며, getUdcRoot 함수는 파일명을 포함하지 않은 경로를 반환한다. getUserData 함수는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, hasClass 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide 함수는 웹스퀘어 컴포넌트를 화면에서 숨기며, removeClass 함수는 웹스퀘어 컴포넌트에서 class를 삭제한다. setAccessibility 함수는 fwSparkChart에 웹접근성을 지원하며, setChartAttribute 함수는 fwSparkChart의 attribute의 value값을 변경한다. setChartColumnRef 함수는 fwSparkChart의 DataCollection 바인딩 속성을 셋팅하며, setChartColumnSimpleRef 함수는 seriesType이 simple인 차트의 fwSparkChart dataList 바인딩 속성을 셋팅한다. setDisabled 함수는 웹스퀘어 컴포넌트의 disabled 속성을 설정하며, setEventPause 함수는 지정한 이벤트를 중단한다. setInitStyle 함수는 컴포넌트의 초기 스타일을 복구한다.",477
13,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. property 속성을 지정하지 않으면 모든 속성의 초기 값으로 복구된다. setJSONData(json)은 지정된 json 객체로 fwSparkChart의 차트 데이터를 변경한다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정하며, 값은 0과 1 사이의 실수이다. setPosition(left, top, mode)은 웹스퀘어 컴포넌트의 위치를 설정한다. mode는 위치 설정 방법으로, absolute와 delta가 있다. setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setSize(width, height)는 웹스퀘어 컴포넌트의 크기를 설정한다. setStyle(propertyName, value)는 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. show(displayType)는 웹스퀘어 컴포넌트를 화면에 표시한다. toggleClass(className)는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다. trigger(type, array)는 컴포넌트에서 특정 이벤트를 발생시킨다. unbind(type, function)은 컴포넌트에서 이벤트를 제거한다. visible(flag)는 엔진 내부적으로 CSS visibility 속성을 설정한다.",436
14,"WebSquare.uiplugin.accordion은 여러 개의 패널에 컨텐츠를 표시할 수 있는 아코디언 컴포넌트입니다. 각 패널은 서로 다른 컨텐츠를 담고 있으며, 추가, 삭제, 열기/닫기가 가능합니다. 이 컴포넌트는 서로 다른 컨텐츠를 패널 별로 분리해서 한 화면에 표시할 때 유용합니다.
이 컴포넌트의 속성 중 일부는 다음과 같습니다. accessibility는 웹접근성 지원 여부를 나타내며, class는 HTML의 class 속성과 동일한 기능을 제공합니다. collapseAll은 컴포넌트를 처음 로딩할 때, 모든 패널이 닫혀 있도록 설정하며, collapsible은 패널의 타이틀을 클릭할 경우, 패널이 닫힐 수 있도록 설정합니다. enterKeyPanelToggle은 enter key로 panel 열고 닫기를 사용할지 여부를 결정합니다. id는 컴포넌트 ID를 나타내며, independentPanel은 패널 클릭시 다른 패널의 열림/닫힘 상태에 영향을 주지 않는 속성입니다.
이 컴포넌트의 메소드 중 일부는 다음과 같습니다. addClass는 컴포넌트에 CSS class를 추가하며, bind는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다. closePanel은 패널을 닫으며, focus는 컴포넌트에 포커스를 줍니다. getDisabled는 현재 컴포넌트에 설정된 disabled 속성 값을 반환하며, getID는 컴포넌트의 ID를 반환합니다. openPanel은 패널을 열어주며, removeClass는 컴포넌트에서 class를 삭제합니다. setDisabled는 컴포넌트의 disabled 속성을 설정하며, setPanelTitle은 패널의 Title을 설정합니다. trigger는 컴포넌트에서 특정 이벤트를 발생시키며, unbind는 컴포넌트에서 이벤트를 제거합니다.",639
15,"Accordion 컴포넌트는 각 패널을 클릭하여 열고 닫을 수 있는 UI 컴포넌트입니다. Script에서는 각 컴포넌트 ID를 통해 해당 컴포넌트에 접근할 수 있습니다. independentPanel 속성은 패널 클릭시 다른 패널의 열림/닫힘 상태에 영향을 주지 않는 속성입니다. panelMoveSpeed 속성은 패널을 클릭하거나 openPanel 혹은 closePanel 함수를 이용하여 패널의 열고 닫히는 속도를 설정합니다. selectedPanel 속성은 panel id를 입력받아 맨 처음 열릴 panel을 설정합니다. tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정합니다. titleDivTag 속성은 Accordion 컴포넌트를 처음 로딩할 때, 모든 패널의 태그를 <div>로 변경합니다. unCollapseAll 속성은 Accordion 컴포넌트를 처음 로딩할 때, 모든 패널이 펼쳐져 있도록 설정합니다.
이벤트 Detail에서는 onclick 이벤트가 발생할 때의 Parameter와 Method를 설명합니다. Parameter는 클릭된 패널 객체와 클릭된 패널의 열림 여부입니다. Method에서는 addClass, bind, changeClass, closePanel, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOpenPanelInfo, getOpenPanelListInfo, getOriginalID, getPanelInfo, getPluginName, getPosition 등의 함수를 설명합니다. 이 함수들은 각각의 기능을 수행하며, 예제 코드를 통해 사용 방법을 설명합니다.",494
16,"이 기술 문서는 웹스퀘어 컴포넌트에서 사용 가능한 메소드들에 대한 설명을 제공합니다. 각 메소드는 해당 기능을 수행하며, 필요한 파라미터와 반환 타입이 명시되어 있습니다. 
- getPosition(positionName): 컴포넌트의 위치 값을 반환합니다. 
- getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. 
- getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. 
- getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. 
- getSize(sizeName): 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. 
- getStyle(propertyName): 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. 
- getStyleValue(style): [deprecated] 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환합니다. 
- getTitle(): 컴포넌트의 title 속성 값을 반환합니다. 
- getUdcHome(): UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다. 
- getUdcRoot(): UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. 
- getUserData(key): setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다. 
- hasClass(className): 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. 
- hide(): 웹스퀘어 컴포넌트를 화면에서 숨깁니다. 
- openPanel(id): ID에 해당하는 Panel을 엽니다. 
- removeClass(className): 웹스퀘어 컴포넌트에서 class를 삭제합니다. 
- setColor(options): 패널 title 배경색 변경, borderColor : 아코디언 border색 변경 
- setDisabled(disabled): 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다. 
- setDisabledPanel(id, flag): 개별 패널을 잠금 시킵니다. 
각 메소드의 사용 방법과 예제 코드는 해당 메소드의 설명에서 확인할 수 있습니다.",669
17,"해당 문서는 웹스퀘어 컴포넌트에서 사용 가능한 메소드들에 대한 설명을 제공하고 있다. 각 메소드들은 해당 컴포넌트의 속성을 변경하거나 이벤트를 발생시키는 등의 기능을 수행한다. 메소드들은 각각의 파라미터를 가지며, 이를 통해 메소드가 수행할 작업을 지정할 수 있다. 
메소드들 중에서는 disable 처리를 수행하는 메소드는 없으며, 이를 위해서는 각 패널과 하위 컴포넌트들을 개별적으로 disable 처리해야 한다. 
또한, visible 메소드는 deprecated 되었으며, 대신 show/hide 혹은 setStyle을 사용하는 것이 권장된다. 
각 메소드들은 예제 코드를 통해 사용 방법을 보여주고 있다.",256
18,"파라미터 이름: flag
타입: Boolean
필수 여부: Y
설명: CSS visibility 속성 값을 설정합니다. true일 경우 visibility: visible; false일 경우 visibility: hidden;으로 설정됩니다.",55
19,"WebSquare.uiplugin.article은 HTML5의 Article과 동일한 기능을 제공하는 UI 플러그인으로, class와 id 속성을 이용하여 CSS를 제어할 수 있습니다. 각 컴포넌트는 내부에서 지정된 class를 적용하며, Script에서 해당 컴포넌트에 접근하기 위해 컴포넌트 ID를 사용할 수 있습니다. 이 UI 플러그인은 Property, Event, Method를 제공합니다. Property는 class와 id 속성을 제어하는 기능을 제공하며, Event와 Method는 각각 이벤트와 메소드를 제어하는 기능을 제공합니다.",177
20,"이 문서는 WebSquare5 Studio에서 제공하는 Radio 컴포넌트에 대한 설명서이다. Radio 컴포넌트는 HTML의 input 태그의 type=""radio""와 같은 역할을 하며, 여러 항목 중 하나를 선택할 수 있다. 주의할 점은 이 컴포넌트가 브라우저에 표현될 때는 input 태그가 아닌 최상위에 div 태그로 감싸고, 하위에 복합 태그를 이용하여 표현하고 있으므로 input 태그로 표현하고자 할 때는 별도의 설정을 통해 변경해야 한다.
이 컴포넌트의 속성 중 class는 HTML의 class 속성과 동일한 기능을 제공하며, css 파일이나 style 블록에 정의한 class를 1개 또는 공백(space)을 이용하여 다중 적용이 가능하다. cols는 항목을 나열할 열의 수로, 2로 정의할 경우 2열씩 자동 개행되어 표현된다. disabled는 HTML의 disabled 속성과 동일한 기능을 제공하며, 컴포넌트를 비활성화 시킨다. escape는 <>&""와 같은 특수문자를 HTML Escape 문자로 변환하여 화면에 표시한다. id는 컴포넌트의 ID로 전역객체로 할당되며, script에서 해당 ID로 컴포넌트에 접근이 가능하다. ignoreTabIndex는 tab 이동 시 포커스를 무시한다. itemTagName은 renderType이 ""radiogroup""일 때, 아이템의 tagnamename 항목의 group이 되는 이름으로 HTML에서의 name 속성과 동일한 기능을 제공한다. nextTabID는 tab으로 이동할 컴포넌트 ID를 설정한다. renderType은 본 컴포넌트가 브라우저에 표현될 레이아웃 구조를 표현하며, 기본값은 table이다. rows는 항목을 나열할 행의 수로, 2로 정의할 경우 전체 항목이 2행으로 나뉘어 표현된다. selectedIndex는 초기 선택될 항목의 index로, 항목이 하드코딩되어 있거나 DataList에 data가 미리 정의되어 있을 경우에만 동작된다. 주의할 점은 이 속성은 초기 컴포넌트가 브라우저에 표현되는 시점에 할당된 Data를 기준으로 selected를 해주는 기능으로, 화면 로딩 이후 API를 이용하여 항목을 생성하거나 통신 후 DataList에 data가 할당되는 경우는 이 속성이 적용되지 않는다. style은 CSS 스타일 속성을 inline으로 적용한다. tagName은 renderType이 ""radiogroup""일 때, 렌더링 될 객체의 tagName을 설정한다. title은 HTML의 title 속성과 동일한 기능으로, 명시된 값을 브라우저에서 마우스 over 시 툴팁 형태로 표현한다.
Radio 컴포넌트의 class 적용과 스타일 변경은 .usersample .w2radio_main { background-color:#cfe6f2; border:1px solid #93a7b2; }와 같이 CSS를 변경하여 적용할 수 있다. row와 col의 설정으로 보이는 항목 개수 설정은 마우스 오른쪽 버튼을 클릭하여 항목 편집 메뉴에서 Span Direction에서 rows(세로)나 cols(가로) 중 선택하고 Span Count에 표시될 갯수를 적어주면 된다. CSS Overriding은 w2radio, rad, w2radio_main, w2radio_row, w2radio_td_input, w2radio_td_label, w2radio_item, w2radio_input, w2radio_label, inline 등의 클래스를 이용하여 overriding할 수 있다.
Radio 컴포넌트는 기본적으로 HTML에 파싱되는 태그가 table 구조이지만, 웹접근성 프로젝트에서는 renderType 속성을 radioGroup으로 설정하는 것을 권장한다. 이 속성은 native, table, checkboxGroup, radioGroup 등을 제공하며, 각각의 값에 따라 렌더링 방식이 달라진다.",1202
21,"이 문서는 웹스퀘어에서 제공하는 Progressbar 컴포넌트에 대한 설명서이다. Progressbar는 hyperlink를 정의할 수 있는 컴포넌트로, CSS를 적용하여 버튼으로 사용할 수 있다. outerDiv 속성이 true일 경우 최상위는 div Tag로 이루어지며, false일 경우 a Tag 단독으로 이루어진다. 
이 컴포넌트의 Property는 autoCloss, class, duration, id, min, progressClass, ref, step 등이 있다. 이 중 class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, 다중 적용이 가능하다. 
브라우저 캡쳐화면을 보면, progressbar의 디자인을 변경할 수 있는 것을 확인할 수 있다. 클래스명을 새로 지정하여 스타일을 주는 것이 권장된다. CSS Overriding에서는 w2progressbar, w2progressbar_bar 등의 클래스를 변경할 수 있다. 
이 컴포넌트는 버튼을 그릴 때 기본적으로 권장되는 컴포넌트 중 하나이다.",312
22,"WebSquare.session은 브라우저에 저장되는 세션 정보를 관리하는 객체이다. WebSquare.session.getAttribute 메소드는 브라우저 세션에서 값을 가져오고, WebSquare.session.removeAttribute 메소드는 브라우저 세션에서 값을 삭제한다. WebSquare.session.removeSession 메소드는 브라우저 세션 전체를 삭제하며, WebSquare.session.setAttribute 메소드는 브라우저 세션에 값을 설정한다. 
WebSquare.session.getAttribute 메소드는 key 매개변수로 지정한 브라우저 세션에서의 값을 반환한다. WebSquare.session.removeAttribute 메소드는 key 매개변수로 지정한 브라우저 세션에서의 값을 삭제하고, 삭제된 세션의 값을 반환한다. WebSquare.session.setAttribute 메소드는 key 매개변수로 지정한 이름과 value 매개변수로 지정한 값을 브라우저 세션에 설정한다. 만약 이미 해당 이름으로 값이 저장되어 있다면, 새로운 값으로 덮어쓰여진다. 
따라서, WebSquare.session 객체를 사용하여 브라우저 세션 정보를 관리할 수 있다. 예를 들어, WebSquare.session.getAttribute(""custInfo"")는 ""custInfo""라는 이름으로 저장된 브라우저 세션의 값을 반환하고, WebSquare.session.removeAttribute(""custInfo"")는 ""custInfo""라는 이름으로 저장된 브라우저 세션의 값을 삭제하며, WebSquare.session.setAttribute(""userName"", ""홍길동"")은 ""userName""이라는 이름으로 ""홍길동""이라는 값을 브라우저 세션에 설정한다.",442
23,"80. 웹스퀘어 가이드 웹 접근성 OPS 파트 05.html. 레이아웃 가이드 파트 V. 레이아웃 가이드 34. 레이아웃 공통 35. 문서 구조 36. 메뉴와 메뉴 건너뛰기 구성 37. 사용자 입력 양식 38. 웹스퀘어.html 39. HTML 태그 및 속성 사용 가이드
이 문서는 웹 접근성을 고려한 웹사이트 제작을 위한 웹스퀘어 가이드의 일부입니다. 이번 파트에서는 레이아웃과 관련된 가이드라인을 제공합니다. 레이아웃은 웹사이트의 시각적인 구성을 결정하는 중요한 요소 중 하나입니다. 따라서 웹 접근성을 고려하여 레이아웃을 구성하는 것은 매우 중요합니다.
이 가이드에서는 레이아웃을 구성할 때 고려해야 할 사항들을 다룹니다. 레이아웃 공통 가이드에서는 웹사이트 전체적인 레이아웃 구성에 대한 가이드라인을 제공합니다. 문서 구조 가이드에서는 웹사이트의 문서 구조를 결정하는 방법에 대해 다룹니다. 메뉴와 메뉴 건너뛰기 구성 가이드에서는 웹사이트 내의 메뉴와 메뉴 건너뛰기를 구성하는 방법에 대해 다룹니다. 사용자 입력 양식 가이드에서는 웹사이트 내의 사용자 입력 양식을 구성하는 방법에 대해 다룹니다.
또한, 이 가이드에서는 웹스퀘어와 HTML 태그 및 속성 사용 가이드도 제공합니다. 이를 통해 웹스퀘어를 사용하여 웹사이트를 제작할 때 웹 접근성을 고려한 태그와 속성을 사용하는 방법에 대해 알아볼 수 있습니다.",590
24,"이번 파트에서는 사용이 금지되는 컴포넌트에 대해 다룹니다. 이러한 컴포넌트는 화면낭독기 사용자가 사용할 수 없도록 구성되어 있습니다. 사용이 금지되는 컴포넌트 목록은 <표 4>와 같습니다. 
<표 4>에서는 사용이 금지되는 컴포넌트와 그 이유가 나열되어 있습니다. ActiveX는 W3C 표준이 아니며, 사용되는 ActiveX 컴포넌트에 따라 접근성 정도가 달라집니다. Applet은 <applet> 태그를 지원하는 브라우저가 거의 없으며 W3C 표준 태그가 아닙니다. Canvas는 HTML5 속성으로 자바 스크립트 즉석에서 그래픽을 그리는 데 사용됩니다. WebSquare 기본 chart 컴포넌트는 접근성 지원에 많은 어려움이 있어 오픈소스인 jFreeChart와 image 컴포넌트를 적절히 연계해 사용하는 방안을 제공하고 있습니다. Checkcombobox, DatePicker, Gauge, Menu, MutiSelect, RoundedRectangle, Slidehide, TreeView, WindowContainer는 각각 접근성 지원이 어려운 상황의 컴포넌트이며, 사용을 권장하지 않습니다. Flash는 내부적으로 플래시를 사용하는 구조이며, 플래시의 접근성 구현 정도에 따라 의존해야 합니다. 
이러한 컴포넌트들은 화면낭독기 사용자가 사용할 수 없도록 구성되어 있으므로, 대체할 수 있는 다른 컴포넌트를 사용하는 것이 좋습니다.",525
25,"WFrame은 WebSquare에서 외부 XML을 include하기 위해 사용되는 컴포넌트입니다. 주로 공통적으로 사용되는 top, left 메뉴나 copyright 부분 등에서 사용됩니다. WFrame을 사용할 때 주의해야 할 점은 웹스퀘어의 ID를 기준으로 생성되는 컴포넌트들의 ID 중복을 피해야 합니다. 또한, CSS도 작업이 완료되면 삭제해야 합니다. 만약 CSS가 WFrame에 남아 있으면 중복으로 CSS를 불러와서 페이지 로딩 시간에 영향을 줄 수 있습니다. 일반적으로 WFrame에 로딩된 화면을 동적으로 변경해야 하는 경우는 iframe 컴포넌트를 사용하는 것이 권장됩니다. WFrame 화면 내에서 DataCollection과 Script 사용을 제한하고 있으며, WFrame이 로딩된 뒤 수행해야 하는 스크립트는 본 컴포넌트의 initScript 속성에 작성합니다. 추가로 WFrame 화면에서 사용할 function이나 변수의 경우 JS 파일에 작성하여 JS 파일을 import하여 사용하는 것을 권장합니다. 
WFrame의 최상위는 div Tag로 감싸고 하위로 src에 해당하는 화면 XML에 배치됩니다. 최상위 Tag는 tagname 속성을 통해 변경 가능합니다. 본 컴포넌트는 SPA 모드 적용이 가능한 컴포넌트이며 제약사항을 반드시 숙지해야 합니다. 
WFrame에 삽입된 객체는 현재 페이지에 포함(merge)되어 전체가 하나의 소스로 간주됩니다. 그러나 IFrame 컴포넌트에 삽입된 객체는 현재 웹 페이지와 무관한 독립적인 객체입니다. 
WFrame 컴포넌트를 designView에 그리고 property의 Class에 사용자 정의 class를 정의한 다음 Preview 합니다. W2frame는 웹스퀘어 엔진에서 정의된 클래스이며, header는 사용자 정의 클래스입니다. 해당 클래스를 이용하여 디자인을 바꿀 수 있습니다. 사용자 정의 클래스로 Stylesheet_ext.css 다음에 적용됩니다. 동일한 스타일 시트를 정의함으로써 overriding(덮어쓰기) 됩니다.",644
26,"WebSquare.uiplugin.dataCollection은 데이터 수집을 위한 UI 플러그인입니다. 이 플러그인은 attributeMap과 baseNode이라는 두 가지 속성을 가지고 있습니다. 
attributeMap은 데이터 수집을 위한 속성을 정의하는 데 사용됩니다. baseNode은 데이터 수집을 위한 노드를 정의하는 데 사용됩니다. 
또한, WebSquare.uiplugin.dataCollection은 이벤트와 메소드를 가지고 있습니다. 이벤트는 데이터 수집 시 발생하는 이벤트를 정의하는 데 사용됩니다. 메소드는 데이터 수집을 위한 기능을 정의하는 데 사용됩니다. 
속성과 메소드에 대한 자세한 내용은 해당 문서를 참조하시기 바랍니다.",211
27,"위젯 컨테이너는 내부에 위젯들을 포함하고, 위젯들의 상호작용을 관리하는 컴포넌트입니다. 이 컴포넌트는 이차원 격자 구조로 이루어져 있으며, cols 속성을 통해 열의 갯수를 설정할 수 있습니다. 또한, unitHeightPixel 속성을 통해 단위 높이를 설정할 수 있습니다. 위젯 컨테이너를 사용하면 이차원 격자 구조 내에서 위젯들을 옮기거나 크기를 조절할 수 있습니다. 또한, JSON을 통해 내부의 위젯들의 정보를 추출하고 원복할 수 있습니다. 
위젯 컨테이너의 속성으로는 cols, horizontalMargin, id, maxUnitHeight, maxUnitWidth, minUnitHeight, minUnitWidth, mode, params, threshold, unitHeightPixel, widgetMove, widgetResize 등이 있습니다. 이 중 threshold는 위젯 컨테이너의 가로 사이즈가 설정값보다 작아지면, 하나의 칼럼에 위젯들을 나열하고, 설정값을 넘었을 경우 위젯들의 이동과 크기 조절이 불가능해집니다. 
위젯 컨테이너의 스타일은 w2widget 클래스를 통해 변경할 수 있습니다. w2widget_title 클래스는 위젯의 타이틀 영역, w2widget_content 클래스는 위젯의 내용 영역을 나타냅니다. 이 외에도 w2widget_icon, w2widget_title_text, w2widget_title_buttons, w2widget_btnFix, w2widget_btnMinimize, w2widget_btnMaximize, w2widget_btnClose 등의 클래스가 있습니다. 
위젯 컨테이너의 스타일을 변경하기 위해서는 CSS Overriding 기능을 사용할 수 있습니다. 이를 통해 위젯 컨테이너의 기본 스타일을 덮어쓰거나, 추가적인 스타일을 적용할 수 있습니다.",567
28,"WebSquare.uiplugin.datePicker는 모바일 전용 달력 컴포넌트로, Calendar 컴포넌트와 InputCalendar 컴포넌트의 대체로 사용할 수 있습니다. CalendarValueType 속성을 이용하여 연월일시간, 연월일, 연월 등을 선택할 수 있도록 지원합니다. 컴포넌트의 최상위는 HTML <div>를 사용합니다.
Property Summary:
- accessibility: 접근성 관련 속성, 키보드 동작 여부
- ampm: calendarValueType 속성이 yearMonthDateTime인 경우 오전, 오후에 해당하는 문자열을 ,로 구분하여 작성합니다.
- calendarValueType: UI 표시 형식, default 값은 yearMonthDate, yearMonth, yearMonthDateTime, hourMinute 중 하나입니다.
- class: HTML의 class 속성과 동일한 기능을 제공합니다. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다.
- dateSuffix: 일(date)에 해당하는 숫자 뒤에 설정할 문자열로, 빈값을 넣을 경우 $blank를 사용합니다.
- id: 컴포넌트 ID입니다. 
- monthNames: 월에 해당하는 숫자를 대체할 문자열로, ,로 구분하여 작성합니다.
- ref: DataCollection의 value 경로입니다. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용합니다.
- tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서입니다.
- title: HTML의 title 속성과 동일합니다.
- userData1~3: 사용자 정의 데이터 속성입니다.
- yearSuffix: 연도(year)에 해당하는 숫자 뒤에 설정할 문자열로, 빈값을 넣을 경우 $blank를 사용합니다.
Event Summary:
- onchange: datePicker의 값이 바뀐 경우에 발생합니다.
- onviewchange: 키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생합니다.
Method Summary:
- getDataListInfo(): 컴포넌트와 바인딩된 DataList를 반환합니다.
- getValue(): 현재 선택된 값을 반환합니다.
- setRef(설정할): ref 속성을 설정합니다. DataCollection과 연동시 ""data:""라는 prefix를 꼭 붙여야 합니다.
- setValue(value): 컴포넌트에 인자로 넘겨진 value와 같은 값을 가진 항목을 선택합니다.
- unbindRef(): ref 바인딩을 해제합니다.
Property Detail:
- accessibility: 접근성 관련 속성, 키보드 동작 여부
- ampm: calendarValueType 속성이 yearMonthDateTime인 경우 오전, 오후에 해당하는 문자열을 ,로 구분하여 작성합니다.
- calendarValueType: UI 표시 형식, default 값은 yearMonthDate, yearMonth, yearMonthDateTime, hourMinute 중 하나입니다.
- class: HTML의 class 속성과 동일한 기능을 제공합니다. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다.
- dateSuffix: 일(date)에 해당하는 숫자 뒤에 설정할 문자열로, 빈값을 넣을 경우 $blank를 사용합니다.
- id: 컴포넌트 ID입니다.
- monthNames: 월에 해당하는 숫자를 대체할 문자열로, ,로 구분하여 작성합니다.
- ref: DataCollection의 value 경로입니다. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용합니다.
- tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서입니다.
- title: HTML의 title 속성과 동일합니다.
- userData1~3: 사용자 정의 데이터 속성입니다.
- yearSuffix: 연도(year)에 해당하는 숫자 뒤에 설정할 문자열로, 빈값을 넣을 경우 $blank를 사용합니다.
Event Detail:
- onchange: datePicker의 값이 바뀐 경우에 발생합니다.
- onviewchange: 키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생합니다.
Method Detail:
- getDataListInfo(): 컴포넌트와 바인딩된 DataList를 반환합니다.
- getValue(): 현재 선택된 값을 반환합니다.
- setRef(설정할): ref 속성을 설정합니다. DataCollection과 연동시 ""data:""라는 prefix를 꼭 붙여야 합니다.
- setValue(value): 컴포넌트에 인자로 넘겨진 value와 같은 값을 가진 항목을 선택합니다.
- unbindRef(): ref 바인딩을 해제합니다.",1242
29,"WebSquare.uiplugin.textbox는 간단한 텍스트를 출력하는 컴포넌트로, Output 컴포넌트의 경량화 버전입니다. Output과 비교하여 속도가 빠르지만, Formatter, Validator, Align 등을 지원하지 않습니다. HTML <div> 태그로 표현되며, WebSquare에서 제공하지 않는 HTML 태그(li, dt, dd, h1, p 등)는 tagname 속성을 이용하여 표현할 수 있습니다. TextBox는 자식을 가질 수 없으므로, 자식을 포함하는 태그의 경우 Group 컴포넌트와 함께 사용해야 합니다.
이 컴포넌트의 속성으로는 class, dataType, displayFormat, displayFormatter, escape, escapeFormatter, for, id, label, localeRef, ref, tabIndex, tagname, tooltip, tooltipDisplay, tooltipFormatter, tooltipLocaleRef, tooltipPositionX, tooltipPositionY, tooltipShowAlways, tooltipTime, useLocale, userData1, userData2, userData3이 있습니다.
또한, 이 컴포넌트의 이벤트로는 onclick, ondblclick, onmouseout, onmouseover, ontooltiphide, ontooltipshow가 있으며, 메소드로는 addClass, bind, changeClass, focus, getAttributeNode, getDataListInfo, getDataType, getDisabled, getFormatValue, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, getValue, hasClass, hide, removeAttributeNode, removeClass, setAttributeNode, setDisabled, setDisplayFormat, setDisplayFormatter, setEventPause, setInitStyle, setLocaleRef, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setTitle, setUserData, setValue, show이 있습니다.",475
30,"웹스퀘어 컴포넌트에서는 toggleClass( className ) 함수를 사용하여 클래스를 추가하거나 제거할 수 있습니다. trigger( type , array ) 함수를 사용하여 특정 이벤트를 발생시킬 수 있으며, unbind( type , function ) 함수를 사용하여 이벤트를 제거할 수 있습니다. unbindRef( ) 함수는 ref 바인딩을 해제합니다. visible( flag ) 함수는 HTML의 class 속성과 동일한 기능을 제공합니다. dataType 속성은 컴포넌트 value의 데이터 타입을 지정하며, displayFormat 속성은 value의 표시 형태를 지정합니다. displayFormatter 속성은 컴포넌트의 value를 포맷하는 함수 명을 지정합니다. escape 속성은 <>&""를 HTML Escape 문자로 변환하여 화면에 표시합니다. for 속성은 컴포넌트(label)를 클릭할 때 포커스를 주려는 컴포넌트의 ID를 지정합니다. id 속성은 컴포넌트 ID를 지정합니다. label 속성은 컴포넌트의 value로 화면에 출력하려는 텍스트를 지정합니다. localeRef 속성은 클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key를 지정합니다. ref 속성은 DataCollection의 value 경로를 지정합니다. tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 지정합니다. tooltip 속성은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 지정합니다. tooltipDisplay 속성은 데이터가 width보다 긴 경우, 마우스-오버 시 해당 데이터를 툴팁으로 표시합니다. tooltipFormatter 속성은 툴팁 내용을 변경할 사용자 함수명을 지정합니다. tooltipLocaleRef 속성은 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 지정합니다. tooltipPositionX 속성은 툴팁의 X 좌표를 지정합니다. tooltipPositionY 속성은 툴팁의 Y 좌표를 지정합니다. tooltipShowAlways 속성은 데이터가 width보다 긴 경우가 아니더라도 마우스-오버 시 해당 데이터를 툴팁으로 표시합니다. useLocale 속성은 선택 항목의 label에 표현되는 값을 클라이언트의 다국어 key를 이용하여 표현합니다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성을 지정합니다. addClass( className ) 함수는 컴포넌트에 클래스를 추가합니다. bind( eventType , function ) 함수는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다.",781
31,"이 문서는 웹스퀘어 컴포넌트의 공통적인 기능들에 대한 설명을 제공합니다. 각 함수들의 파라미터, 반환값, 예제 코드 등이 포함되어 있습니다.
함수들의 이름과 각각의 기능에 대한 설명은 다음과 같습니다.
- bind(eventType, function): 이벤트와 핸들러 함수를 할당합니다.
- changeClass(oldClassName, newClassName): 클래스를 변경합니다.
- getAttributeNode(attributeName): 속성값을 반환합니다.
- getDataListInfo(): 컴포넌트와 바인딩된 DataList를 반환합니다.
- getDataType(): dataType 속성 값을 반환합니다.
- getDisabled(): disabled 속성 값을 반환합니다.
- getFormatValue(): format이 적용된 값을 반환합니다.
- getGenerator(): 부모 Generator 객체를 반환합니다.
- getID(): 웹스퀘어 컴포넌트의 ID를 반환합니다.
- getInitStyle(CSS): 초기 스타일을 반환합니다.
- getOpacity(): 불투명도 값을 반환합니다.
- getOriginalID(): originalID를 반환합니다.
- getPluginName(): 컴포넌트의 이름을 반환합니다.
- getPosition(positionName): 위치 값을 반환합니다.
- getReadOnly(): readOnly 속성 값을 반환합니다.
- getScope(): 부모 WFrame 객체를 반환합니다.
- getScopeWindow(): 부모 WFrame 객체 또는 전역 window 객체를 반환합니다.
각 함수들의 파라미터와 반환값, 예제 코드 등은 문서에서 확인할 수 있습니다.",391
32,"이 코드는 웹스퀘어 컴포넌트에서 사용 가능한 메소드들을 설명하고 있다. getSize() 메소드는 웹스퀘어 컴포넌트의 크기를 반환하며, getStyle() 메소드는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getTitle() 메소드는 컴포넌트의 title 속성 값을 반환하며, getUdcHome() 메소드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUdcRoot() 메소드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUserData() 메소드는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getValue() 메소드는 포맷이 적용되지 않은 value를 반환하며, hasClass() 메소드는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide() 메소드는 웹스퀘어 컴포넌트를 화면에서 숨기며, removeAttributeNode() 메소드는 하위 노드를 삭제한다. removeClass() 메소드는 컴포넌트에서 클래스를 삭제하며, setAttributeNode() 메소드는 하위 노드에 값을 설정한다. setDisabled() 메소드는 웹스퀘어 컴포넌트의 disabled 속성을 설정하며, setDisplayFormat() 메소드는 컴포넌트의 displayFormat 속성을 설정한다. setDisplayFormatter() 메소드는 컴포넌트의 displayFormatter 속성을 설정하며, setEventPause() 메소드는 지정한 이벤트를 중단한다.",472
33,"이 함수들은 웹스퀘어 컴포넌트에서 사용되는 함수들이다. 각 함수는 특정한 기능을 수행하며, 각각의 파라미터를 받는다. 이 함수들은 각각의 컴포넌트에서 사용될 수 있으며, 컴포넌트의 초기 스타일, 위치, 속성 등을 설정할 수 있다. 또한, 이벤트를 발생시키거나 제거할 수 있으며, CSS 속성을 설정하거나, 데이터를 설정할 수 있다. 이 함수들은 웹스퀘어 컴포넌트에서 자주 사용되는 함수들이다.",189
34,"이 문서는 웹스퀘어의 Accordion 컴포넌트에 대한 설명서이다. Accordion은 여러 컨텐츠를 패널 별로 분리하여 한 화면에 표시하는 컴포넌트이다. 이 컴포넌트는 class, collapseAll, collapsible, id, selectedPanel, style, tabIndex, titleDivTag 등의 속성을 가지고 있다. 
class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, css 파일이나 style 블록에서 정의한 class를 1개 또는 공백(space)을 이용하여 다중 적용이 가능하다. collapseAll 속성은 accordion이 처음 로딩될 때 모든 panel이 닫혀있도록 설정한다. collapsible 속성은 panel title을 클릭하면 panel이 닫힐 수 있도록 설정한다. id 속성은 컴포넌트의 ID로 전역객체로 할당되며 script에서 해당 id로 컴포넌트에 접근이 가능하다. selectedPanel 속성은 panel id를 입력받아 맨 처음 열릴 panel을 설정한다. style 속성은 사용자 정의 스타일시트를 적용한다. tabIndex 속성은 Tab Key를 이용한 컴포넌트의 포커스 순서로 HTML의 tabindex 속성과 동일한 기능을 제공한다. titleDivTag 속성은 accordion 처음 로딩 시 모든 panel의 title 영역 태그를 div로 변경한다.
이 컴포넌트의 스타일을 변경하려면 w2accordion, w2panels, w2panels_title, w2panels_content_closed, w2panels_content_open 등의 클래스를 사용할 수 있다. 이 클래스들은 웹스퀘어 엔진에서 정의되어 있으며, accordion 전체를 감싸는 그룹, accordion panel을 감싸는 그룹, accordion title 영역, accordion이 닫혔을 때 지정할 수 있는 클래스, accordion이 열렸을 때 지정할 수 있는 클래스 등을 나타낸다.
이 컴포넌트는 그림 10-1에서 볼 수 있듯이 default 스타일을 가지고 있다. 이 스타일을 변경하려면 그림 10-2에서 보이는 CSS 코드를 사용하면 된다. 또한, 그림 10-3에서 볼 수 있듯이 CSS Overriding을 통해 스타일을 변경할 수도 있다.",679
35,"11. ActiveXWebSquare에서 ActiveX와 같은 외부 모듈을 사용하기 위한 컴포넌트인 ActiveX11에 대해 설명합니다. ActiveX에서 사용되는 파라미터는 ActiveX 컴포넌트를 더블클릭하면, 파라미터 대화창에서 설정할 수 있습니다. 이 컴포넌트는 html의 object와 유사합니다.
11.1 Property
- align: 태그에 대한 align 값을 지정하며, 브라우저 윈도우 내에 파일의 위치를 지정하는 방식을 결정합니다.
- classid: 윈도우 레지스트리나 URL에서 설정된 Class ID 값입니다.
- codebase: ActiveX 컨트롤이 아직 설치되지 않은 경우에 브라우저가 이 컨트롤을 자동으로 다운로드할 수 있도록 컨트롤의 위치를 확인합니다. 이 값은 정확하게 입력해야 합니다.
- codetype: 삽입된 컨텐츠의 형식을 정의합니다.
- data: url이 포함된 객체 요소에 필요한 데이터를 지정합니다.
- groupid: groupid 값을 지정합니다.
- hspace: 왼쪽과 오른쪽에 삽입할 공백의 크기(픽셀)를 설정합니다.
- id: 사용자가 임의의 id를 정의할 때 사용합니다.
- standby: 객체를 읽어 들이는 동안 출력될 문장을 지정합니다.
- toolTip: 툴팁에 들어가는 내용을 작성합니다.
- type: 데이터의 MIME 유형을 지정합니다.
- usemap: 이미지맵에 사용되는 주소값입니다.
- viewastext: 객체의 viewastext 속성을 지정합니다.
- vspace: 위쪽과 아래쪽에 삽입할 공백의 크기(픽셀)를 설정합니다.
11.2 주의사항 및 팁
- ActiveX에서 사용되는 파라미터는 ActiveX 컴포넌트를 더블클릭하면, 파라미터 대화창에서 설정할 수 있습니다.",575
36,"WebSquare.uiplugin.fwPyramidChart는 FusionWidget에 포함된 7종의 차트 중 하나로, Pyramid Chart를 구현할 수 있습니다. FusionWidgets의 데이터는 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있는 형태입니다. WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원하며, 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다.
이 컴포넌트의 Type은 uiplugin이며, Property로는 accessibility, id, labelNode, plotColor, ref, seriesColumns, seriesNode, seriesType, valueNode가 있습니다. 각 Property의 자세한 내용은 상세 설명을 참고하세요.
이 컴포넌트의 Event로는 addClass, bind, changeClass, draw, exportJSChart, fc, focus, getChartAttribute, getDataListInfo, getDisabled, getGenerator, getID, getInitStyle, getJSONData, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getSVGString, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, setAccessibility, setChartAttribute, setChartColumnRef, setChartColumnSimpleRef, setDisabled, setEventPause, setInitStyle, setJSONData, setOpacity, setPlotColor, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind, visible이 있습니다. 각 Event의 자세한 내용은 상세 설명을 참고하세요.",409
37,"이벤트와 관련된 메서드와 웹스퀘어 컴포넌트의 속성을 다루는 메서드들이 포함된 FusionChart의 API 목록이다. addClass()는 컴포넌트에 CSS 클래스를 추가하고, bind()는 이벤트와 핸들러 함수를 동적으로 할당한다. changeClass()는 컴포넌트의 클래스를 변경하며, draw()는 fwPyramidChart를 화면에 출력한다. exportJSChart()는 fwPyramidChart를 jpg, png, pdf 형식으로 export하는 함수이다. fc()는 fwFunnelChart 타입의 fusionWidget 객체를 반환하며, focus()는 웹스퀘어 컴포넌트에 포커스를 준다. getChartAttribute()는 fwPyramidChart의 속성 값을 반환하고, getDataListInfo()는 컴포넌트와 바인딩된 DataList를 반환한다. getDisabled()는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하며, getGenerator()는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다. getID()는 웹스퀘어 컴포넌트의 ID를 반환하고, getInitStyle()은 컴포넌트의 초기 스타일을 반환한다. getJSONData()는 fwPyramidChart의 차트 데이터를 JSON 객체로 반환하며, getOpacity()는 웹스퀘어 컴포넌트의 불투명도 값을 반환한다. getOriginalID()는 웹스퀘어 컴포넌트의 originalID를 반환하고, getPluginName()은 웹스퀘어 컴포넌트의 이름을 반환한다. getPosition()은 웹스퀘어 컴포넌트의 위치 값을 반환하며, getReadOnly()는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환한다. getScope()는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, getScopeWindow()는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다.",607
38,"이 함수들은 웹스퀘어 컴포넌트에서 사용 가능한 함수들이다. getScopeWindow() 함수는 scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환한다. getSize(sizeName) 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 반환한다. getStyle(propertyName) 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getSVGString() 함수는 차트로부터 SVG를 string 형태로 반환한다. getTitle() 함수는 컴포넌트의 title 속성 값을 반환한다. getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData(key) 함수는 setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다. hasClass(className) 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide() 함수는 웹스퀘어 컴포넌트를 화면에서 숨긴다. removeClass(className) 함수는 웹스퀘어 컴포넌트에서 class를 삭제한다. setAccessibility(flag) 함수는 fwPyramidChart에 웹접근성을 지원한다. setChartAttribute(options) 함수는 fwPyramidChart의 attribute의 value값을 변경한다. setChartColumnRef(ref, labelNode, seriesColumns) 함수는 fwPyramidChart의 DataCollection 바인딩 속성을 셋팅한다. setChartColumnSimpleRef(ref, labelNode, seriesNode, valueNode) 함수는 seriesType이 simple인 차트의 fwPyramidChart dataList 바인딩 속성을 셋팅한다. setDisabled(disabled) 함수는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause(evList, flag) 함수는 지정한 이벤트를 중단한다. setInitStyle(property) 함수는 컴포넌트의 초기 스타일을 복구한다.",592
39,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. propertyStringN: CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). setJSONData(json) 함수는 지정된 json 객체로 fwPyramidChart의 차트 데이터를 변경한다. setOpacity(value) 함수는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPlotColor() 함수는 차트의 dataplot 색상을 지정한다. setPosition(left, top, mode) 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. setReadOnly(readOnly) 함수는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setSize(width, height) 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. setStyle(propertyName, value) 함수는 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. setUserData(key, value) 함수는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. show(displayType) 함수는 웹스퀘어 컴포넌트를 화면에 표시한다. toggleClass(className) 함수는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다. trigger(type, array) 함수는 컴포넌트에서 특정 이벤트를 발생시킨다. unbind(type, function) 함수는 컴포넌트에서 이벤트를 제거한다. visible(flag) 함수는 엔진 내부적으로 CSS visibility 속성을 설정한다.",447
40,"WebSquare.uiplugin.floatingLayer는 팝업 형태의 화면을 생성하는 컴포넌트입니다. 일반 팝업과의 차이점은 팝업을 띄울 화면에 컨텐츠를 미리 배치시키고 show/hide API를 이용하여 숨기거나 보일 수 있다는 것입니다. 컴포넌트 하위(안쪽)로 직접 컴포넌트를 배치하거나 WFrame 또는 IFrame 컴포넌트를 배치시켜 화면을 링크할 수 있습니다. 일반적으로 body 하위에 배치하며, 최상위는 <div>로 하위에 복합 태그를 포함합니다. 
WebSquare.uiplugin.floatingLayer는 다양한 속성과 이벤트를 제공합니다. accessibility, bodyBottomClass, bodyCenterClass, bodyLeftBottomClass, bodyLeftClass, bodyRightBottomClass, bodyRightClass, class, closeButtonClass, documentTitle, dragResizable, fixed, headerCenterClass, headerHTML, headerLeftClass, headerRightClass, id, movable, tabIndex, title, titleClass, useModal, useModalStack, userData1, userData2, userData3 등이 있습니다. 
또한, 다양한 메소드를 제공합니다. addClass, bind, changeClass, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, setDisabled, setEventPause, setHeaderHTML, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setTitle, setUserData, show, toggleClass 등이 있습니다. 
또한, onbeforeclose, onclose, onlayerclick, onlayermove 등의 이벤트를 제공합니다.",490
41,"웹스퀘어 컴포넌트의 trigger(type, array)는 특정 이벤트를 발생시키며, unbind(type, function)는 이벤트를 제거합니다. visible(flag)는 더 이상 사용되지 않는 속성이며, accessibility와 floatingLayer는 웹접근성을 지원합니다. bodyBottomClass, bodyCenterClass, bodyLeftBottomClass, bodyLeftClass, bodyRightBottomClass, bodyRightClass, class, closeButtonClass, documentTitle, dragResizable, fixed, headerCenterClass, headerHTML, headerLeftClass, headerRightClass, id, movable, tabIndex, title, titleClass, useModal, useModalStack, userData1, userData2, userData3은 각각 컴포넌트의 속성입니다. onbeforeclose, onclose, onlayerclick, onlayermove은 각각 컴포넌트의 이벤트입니다. addClass(className)는 컴포넌트에 CSS class를 추가하며, bind(eventType, function)는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다. changeClass(oldClassName, newClassName)는 컴포넌트의 class를 변경하며, getDisabled()는 현재 컴포넌트의 disabled 속성 값을 반환합니다. getGenerator()는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다.",367
42,"이 코드는 웹스퀘어 컴포넌트에서 사용 가능한 함수들을 설명하고 있다. 
- getID(): 웹스퀘어 컴포넌트의 ID를 반환한다.
- getInitStyle(CSS): 컴포넌트의 초기 스타일을 반환한다.
- getOpacity(): 컴포넌트의 불투명도를 반환한다.
- getOriginalID(): 컴포넌트의 originalID를 반환한다.
- getPluginName(): 컴포넌트의 이름(pluginName)을 반환한다.
- getPosition(positionName): 컴포넌트의 위치(left, top)를 반환한다.
- getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환한다.
- getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다.
- getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다.
- getSize(sizeName): 컴포넌트의 크기(width, height)를 반환한다.
- getStyle(propertyName): 컴포넌트의 CSS 속성 값을 반환한다.
- getTitle(): 컴포넌트의 title 속성 값을 반환한다.
- getUdcHome(): UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다.
- getUdcRoot(): UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다.
이 함수들은 각각의 기능에 따라 다른 값을 반환하며, 사용 방법에 따라 다양한 예제가 제공되고 있다.",442
43,"UDC 객체의 여러 메소드들에 대한 설명이다. getUdcHome() 메소드는 UDC 파일 경로를 반환하며, getUserData() 메소드는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. hasClass() 메소드는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하며, hide() 메소드는 컴포넌트를 화면에서 보이지 않도록 숨긴다. removeClass() 메소드는 웹스퀘어 컴포넌트에서 class를 삭제하며, setDisabled() 메소드는 컴포넌트의 disabled 속성을 설정한다. setEventPause() 메소드는 지정한 이벤트를 중단하거나 중단을 해제한다. setHeaderHTML() 메소드는 headerHTML 값을 동적으로 변경한다. setInitStyle() 메소드는 컴포넌트의 초기 스타일을 복구한다. setOpacity() 메소드는 웹스퀘어 컴포넌트의 불투명도를 설정하며, setPosition() 메소드는 웹스퀘어 컴포넌트의 위치를 설정한다. setReadOnly() 메소드는 웹스퀘어 컴포넌트의 readOnly 속성을 설정하며, setSize() 메소드는 컴포넌트의 크기를 설정한다. setStyle() 메소드는 웹스퀘어 컴포넌트의 CSS 속성을 설정하며, setTitle() 메소드는 헤더의 title 속성을 설정한다. setUserData() 메소드는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. show() 메소드는 컴포넌트를 화면에 보이도록 설정하며, toggleClass() 메소드는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다.",540
44,"addClass를 통해 추가된 class만 삭제할 수 있다. 웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 한다. removeDefaultClass value=""true"" Parameter 이름 타입 필수 여부 설명 className String Y 추가/삭제할 class Sample inputBox 컴포넌트에 class가 속성으로 직접 정의됨. config.xml 파일에 위 설정을 추가하면 tmpInputClass class를 삭제할 수 있다. input1.toggleClass(""tmpInputClass"")를 사용하여 삭제한 후, input1.toggleClass(""tmpInputClass"")를 사용하여 다시 추가할 수 있다. trigger(type, array)는 컴포넌트에서 특정 이벤트를 발생시킨다. 이벤트 핸들러에 전달할 파라미터 배열을 array로 전달할 수 있다. unbind(type, function)은 컴포넌트에서 이벤트를 제거한다. type을 생략하면 해당 컴포넌트의 모든 이벤트를 제거하고, function을 생략하면 해당 이벤트에 등록된 모든 핸들러 함수를 제거한다. visible(flag)는 엔진 내부적으로 CSS visibility 속성을 설정한다. 이 메서드는 show/hide 혹은 setStyle 사용을 권장하며, flag를 true로 설정하면 visibility: visible;을, false로 설정하면 visibility: hidden;을 설정한다.",381
45,"WebSquare.net - 5.0_5.4826M.20230213.171915
WebSquare.net은 Property, Event, Method를 제공합니다. 이 중 Method에는 ajax, download, getAllBASE64Parameter, getAllParameter, getBASE64Parameter, getParameter가 있습니다.
ajax는 ajax 요청을 보내는 함수로, options 객체를 인자로 받습니다. options 객체에는 ajax 요청 주소, 요청 방식, 요청 본문, 요청 헤더 등을 설정할 수 있습니다. ajax 요청이 성공하면 success callback 함수가 실행되고, 실패하면 error callback 함수가 실행됩니다.
download는 서버에서 파일을 다운로드 받는 함수입니다. actionUrl, XML, sendMethod, isXHR을 인자로 받습니다.
getAllBASE64Parameter는 Base64로 Encoding 된 get방식의 전체 parameter를 Base64 Decoding하여 JSON 형태로 반환합니다.
getAllParameter는 전체 parameter를 JSON 형태로 반환합니다.
getBASE64Parameter는 Base64로 Encoding 된 get방식의 parameter를 Base64 Decoding하여 반환합니다.
getParameter는 get방식으로 넘어온 parameter를 String으로 반환합니다.",282
46,이 부록은 Snippets UI Guide에서 사용된 예제 Snippets Template을 다운로드할 수 있는 파일입니다. 아래 링크를 클릭하여 파일을 다운로드하실 수 있습니다.,50
47,"WebSquare.uiplugin.aliasDataList는 메인(혹은 부모) 화면에 있는 DataList를 참조할 수 있는 기능을 제공하는 uiplugin입니다. 이 uiplugin은 id, scope, studioSrc, userData1, userData2, userData3의 속성과 getObj(), setScope(scope)의 메소드를 가지고 있습니다. 
id는 aliasDataList의 ID를 나타내며 전역객체로 할당됩니다. scope는 메인(혹은 부모) 페이지에 존재하는 참조 대상 DataList의 ID를 나타내며, 상대 경로 혹은 절대 경로로 지정 가능합니다. studioSrc는 부모 페이지의 정보를 가져오기 위한 Studio 전용 속성입니다. userData1, userData2, userData3은 사용자 정의 데이터 속성입니다. 
getObj()는 현재 aliasDataList가 참조하고 있는 dataList 객체를 반환합니다. setScope(scope)는 Scope를 동적으로 변경하는 함수로, 현재 참조하는 dataList를 동적으로 바꿀 수 있습니다. 실행 후, aliasDataList와 바인딩된 컴포넌트들은 자동으로 값이 초기화됩니다. 
예시) 
- 최상위페이지에 있는 dataList1_main1 참조 (상대 경로) : scope=""../../dataList1_main1""
- 최상위페이지에 있는 dataList1_main2 참조 (절대 경로) : scope=""/dataList1_main2""
- 상위 페이지에 있는 dataList1_wframe1 참조 (상대 경로) : scope=""../dataList1_wframe1""
- wframe1에 있는 dataList1 참조. (절대 경로) : scope=""/wframe1/dataList1_wframe1""",425
48,"이 문서는 웹스퀘어에서 팝업을 생성하는 방법과 관련된 내용을 다룹니다. $p.openPopup() 함수를 사용하여 세 가지 종류의 팝업을 생성할 수 있습니다. 이 중 wframePopup은 WFrame 내에서 팝업 화면을 호출하며, iframePopup은 IFrame 내에서 팝업 화면을 호출합니다. browserPopup은 브라우저가 제공하는 native 윈도우에 팝업 화면을 호출합니다. 
팝업을 생성할 때 options.modal 옵션을 통해 모달 혹은 모달리스 팝업으로 생성할 수 있습니다. 또한, 프레임 모달 팝업을 생성할 때는 options.frameModal 옵션 속성 설정을 통해 팝업을 표시할 프레임을 지정할 수 있습니다. 
WFrame으로 생성한 팝업은 $p.getPopupWindow 및 $p.parent API를 통해 참조할 수 있습니다. 또한, $p.openPopup() 함수로 새로 생성하는 팝업으로 dataObject를 통해 파라미터를 전달할 수 있습니다. 
마지막으로, 팝업 내부 혹은 외부에 서브미션 상태창을 표시할 수 있습니다. 이를 위해서는 options.processMsagFrame=""true"" 옵션으로 $p.openPopup() 함수를 실행하여 팝업을 생성하고, 팝업 페이지 로딩 후에 즉시 $p.executeSubmission() 함수를 실행해야 합니다.",407
49,"이 문서는 팝업, 탭, WFrame, WindowContainer 등에서 서브미션 상태창을 표시하는 방법과 관련된 내용을 다룹니다. 팝업 내부에 상태창을 표시하거나, WFrame, WindowContainer 등에서 서브미션 실행 시 상태창을 표시할 수 있습니다. 또한, 팝업창 버튼을 제어하거나, 최소화, 최상단 팝업 등의 기능을 사용할 수 있습니다. 팝업 윈도우 객체를 반환하여 해당 팝업 내의 컴포넌트에 접근할 수도 있습니다.",176
50,"이 코드는 팝업 윈도우와 관련된 함수들을 제공합니다. 
현재 열려 있는 모든 팝업 객체를 반환하고 해당 팝업 객체에 접근할 수 있는 getAllPopupList() 함수와, WFrame 팝업을 확인하고 각 팝업에 접근할 수 있는 getPopupWindowList() 함수가 있습니다. 
또한, 현재 화면 혹은 부모 화면의 팝업 여부를 확인할 수 있는 isPopup() 함수와 WFrame 팝업인지 여부를 확인할 수 있는 isWFramePopup() 함수가 있습니다. 
마지막으로, 팝업을 생성하고 해당 팝업을 닫을 때 호출할 사용자 정의 함수를 options.closeAction 옵션을 통해 지정할 수 있는 openPopup() 함수가 있습니다.",216
51,"이 문서는 WebSquare에서 지원하는 여러 컴포넌트들에 대한 설명을 제공합니다. ActiveX, Applet, Flash, Output, ProgressBar, RoundedRectangle, Tag, XHTML, XSL, 그리고 유틸리티 등이 포함됩니다. 각 컴포넌트들은 간단한 설명과 함께 제공되며, 예제 코드와 함께 사용 방법을 설명합니다. 특히, WebSquare.date 유틸리티는 날짜 및 시간 관리용 API를 제공하며, 양력 ↔ 음력 날짜 변환 기능을 제공합니다. 이 문서는 WebSquare 사용자들에게 도움이 될 것입니다.",196
52,"웹스퀘어를 이용한 웹사이트 개발 시, 접근성을 고려하여 지켜야 할 공통 지침은 다음과 같습니다.
34.1. 절대좌표(Absolute Positioning) 방식은 사용하지 마세요.
컴포넌트의 위치를 설정할 때, CSS Style의 position 속성을 absolute로 설정하여 절대좌표로 위치를 정하면 논리적인 TabIndex의 순서가 예측 불가능해져 사용자에게 혼란을 줄 수 있습니다.
34.2. TabIndex를 설정하지 마세요.
여러 개의 웹스퀘어 XML 파일을 하나의 화면에 담는 구조로 구성할 때, 인위적으로 설정한 TabIndex로 인해 사용자에게 혼란을 줄 수 있습니다.
34.3. 내용이 반복되는 콘텐츠 앞에는 건너뛰기 링크를 제공하세요.
메뉴나 비슷한 형식이 여러 번 반복되는 링크 묶음의 앞에 건너뛸 수 있는 링크를 제공하지 않으면, 키보드 사용자는 반복되는 링크들의 수만큼 매번 Tab키를 눌러야만 원하는 콘텐츠로 접근할 수 있습니다.
34.4. 사용자로부터 마우스 입력을 받지 않는 컴포넌트에는 마우스 이벤트(onclick, onmouseover, onmouseout)를 사용하지 마세요.
div, img, span과 같은 태그는 사용자의 입력을 받기 위해 만들어진 태그가 아니기 때문에 마우스를 사용하지 않는 사용자는 onclick 이벤트가 원천적으로 발생할 수 없어 의도한 기능을 사용할 수 없습니다.
34.5. 시각적으로 인식할 수 있도록 테두리(outline)를 숨기지 마세요.
키보드만으로 네비게이션을 하는 사용자는 현재 포커스를 받은 엘리먼트가 무엇인지 인지할 수 있어야 합니다.",583
53,"SelectBox는 HTML의 select 태그와 같은 기능을 제공하는 컴포넌트로, 여러 개의 항목 중 하나를 선택할 수 있다. 주의할 점은 이 컴포넌트가 브라우저에 표현될 때 select 태그가 아닌 최상위에 div 태그로 감싸고, 하위에 복합 태그를 이용하여 표현하고 있다는 것이다. 만약 select 태그로 표현하고자 한다면 별도의 설정을 통해 변경해야 한다.
SelectBox의 속성 중 allOption은 전체 항목 표시 여부로, label은 ""-전체-""로 value는 ""all""로 설정된다. chooseOption은 선택 항목 표시 여부로, chooseOptionLabel 속성이 설정되어 있지 않으면 label은 ""-선택-""으로 value는 빈 문자열로 설정된다. class는 HTML의 class 속성과 동일한 기능을 제공하며, css 파일이나 style 블록에 정의한 class를 1개 또는 공백(space)을 이용하여 다중 적용이 가능하다.
direction은 항목의 열림 방향을 설정하고, disabled는 컴포넌트를 비활성화 시킨다. emptyItem은 항목에 없는 value나 index가 설정되는 경우 빈 label과 빈 value(empty string)로 설정할지에 대한 여부이다. emptyValue는 emptyItem 속성이 true로 설정된 경우, 빈 value를 설정한다. escape는 <>&""를 HTML Escape 문자로 변환하여 화면에 표시한다.
id는 컴포넌트의 ID로 전역 객체로 할당되며, script에서 해당 id로 컴포넌트에 접근이 가능하다. labelWidthAuto는 컴포넌트에 정의된 width을 무시하고 항목 중 text가 가장 긴 크기에 맞게 출력할지 여부이다. nextTabID는 tab으로 이동할 컴포넌트 ID를 설정하고, optionOrder는 전체 항목과 선택 항목을 동시에 사용하는 경우 출력 순서를 설정한다.
enderType은 본 컴포넌트가 브라우저에 표현될 레이아웃 구조를 결정한다. component는 select 태그를 사용하지 않고 div 태그 하위로 table 태그를 이용하여 항목을 표현한다. native는 주로 웹 접근성 지원을 위해 사용되는 속성으로, 모든 브라우저 환경에서 완벽하게 동일한 모양과 기능을 제공하면서도 title 속성과 함께 제공한다면 접근성 지원에도 전혀 문제가 없다. select는 단순히 select 태그로만 렌더링되는 모드로서, 접근성 지원에는 완벽한 사용법이지만, 모든 브라우저에서 동일한 모양으로 보여지지 않는 문제가 발생한다. auto는 모바일 브라우저인 경우 native, 그렇지 않을 경우 component로 동작한다.
sortOption은 항목을 label 또는 value를 기준으로 정렬할 때 사용되며, 기본적으로 ascending으로 정렬된다. sortMethod는 sortOption에서 참조하며, sortOption에 정의된 값에 대한 정렬 방법을 결정한다. submenuSize는 labelWidthAuto 속성이 true인 경우, 목록(항목)창 크기를 label에 맞출지 기본 width로 고정할지에 대한 설정이다. tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 설정한다. textAlign는 항목의 text 정렬 방법을 설정하고, title은 명시된 값을 브라우저에서 마우스 over시 툴팁 형태로 표현한다. style은 CSS 스타일 속성을 inline으로 적용하며, visibleRowNum은 표시할 항목 행 수를 설정할 수 있다.",1112
54,"이 문서는 WebSquare에서 사용되는 selectbox 컴포넌트의 CSS 클래스에 대한 설명을 제공합니다. selectbox 컴포넌트는 기본적으로 table 태그로 구성되며, 마우스 오버나 선택된 요소를 처리할 때 :hover, :active, :focus와 같은 가상 클래스를 사용할 수 있지만, 이는 제약이 많습니다. WebSquare에서는 관련 CSS 클래스를 제공하므로, 이를 사용하는 것이 수월합니다.
selectbox 컴포넌트의 기본값은 5이며, all로 설정하면 모든 item을 보여줍니다. 단, 브라우저 overflow에 주의해야 합니다.
selectbox 컴포넌트의 CSS 클래스는 다음과 같습니다.
- w2selectbox: 웹스퀘어 엔진에서 정의된 클래스로, 컴포넌트의 최상위 클래스입니다.
- w2selectbox_table_main: 테이블 레이아웃의 최상위 클래스입니다.
- w2selectbox_row: Label 버튼 전체를 감싸고 있는 TR의 클래스입니다.
- w2selectbox_col_label: Label 버튼을 감싸고 있는 TD의 클래스입니다.
- w2selectbox_label: Label 버튼을 정의하는 클래스입니다.
- w2selectbox_col_button: 우측 삼각형 버튼에 관한 클래스입니다.
- w2table_sb_w2table: Choose Option과 관련된 Item table의 최상위 클래스입니다.
- w2table_sb_main: Choose Option과 관련된 레이아웃 테이블의 최상위 클래스입니다.
- w2table_sb_row: Choose Option과 관련된 item table의 TR 클래스를 지정하는 클래스입니다.
- w2table_sb_col: Choose Option과 관련된 item table의 TD 클래스를 지정하는 클래스입니다.
또한, renderType이 native로 설정됐을 때는 w2selectbox_native, fixedWidth, w2selectbox_native_innerDiv, w2selectbox_native_select 클래스가 자동으로 추가됩니다. renderType이 select로 설정됐을 때는 w2selectbox_select 클래스가 자동으로 추가됩니다.
CSS 클래스를 수정하려면 inlinewebsquare의 style 편집기에서 해당 style을 직접 수정하면 됩니다.",585
55,"66. 섹션 (HTML5)
<section> 태그는 문서를 챕터, 헤더, 푸터 또는 다른 섹션으로 나누는 역할을 합니다. 이 태그의 속성은 다음과 같습니다.
66.1 속성
속성 설명 
id 컴포넌트의 ID로 전역 객체로 할당되며, script에서 해당 ID로 컴포넌트에 접근할 수 있습니다. 
66.2 브라우저 캡쳐화면
그림 66-1.01
66.3 CSS Overriding
그림 66-2.02
클래스 없음 설명 
1 inline websquare의 style 편집기에서 해당 style을 직접 수정합니다. 
66.4 주의사항 및 팁
HTML5에서 추가된 요소로, 웹스퀘어에서는 컴포넌트로서 별도의 속성이 없습니다. 필요한 경우 Attribute Add 버튼을 사용하여 속성을 추가해야 합니다.",281
56,"이 문서는 웹사이트의 일반적인 구성과 웹스퀘어에서의 구현 방법에 대해 설명합니다. 웹사이트는 대게 상단 메뉴, 좌측 서브 메뉴, 본문 콘텐츠, 하단 메뉴로 구성되며, 이러한 구조를 기반으로 작성된 지침이 제공됩니다. 웹스퀘어에서는 공통적으로 사용되는 화면을 독립적인 파일로 만들어놓고 필요한 화면에서 wframe 컴포넌트를 이용해 포함시키는 방식을 사용합니다. 이러한 방식은 생산성이나 자원관리의 효율성 등에서 많은 이점이 있습니다. 또한, 이러한 공통화면들은 group 컴포넌트가 맨 가장자리에서 묶어주는데, 이렇게 단일화된 화면들이 전체적인 화면 구성에서 어떤 역할을 하는지에 관해서 스크린리더와 같은 보조공학 소프트웨어가 시각장애인에게 알려줄 수 있도록 ARIA의 role 속성을 기술합니다. 
ARIA의 role 속성은 수십여 개의 값 중에서 전체적인 화면 네비게이션 요소에 관한 role 8개를 묶어 landmark roles라고 부릅니다. 이에 포함된 role과 그에 대한 설명은 아래 표에서 확인할 수 있습니다. 이러한 role들 중 application을 제외한 나머지 role들은 group 컴포넌트에 포함된 콘텐츠의 역할에 적합한 role을 선택해 기술합니다. 
예를 들어, search form 영역은 키워드 입력과 검색을 위한 submit 버튼으로 구성된 영역으로, 이러한 역할에 적합한 role은 ""search""입니다. 따라서, group 컴포넌트에 해당 role을 지정하여 구현할 수 있습니다. 
위의 내용을 바탕으로 웹스퀘어에서의 구현 예시를 보면, group 컴포넌트에 ""search"" role을 지정하고, textbox, input, trigger 등의 컴포넌트를 이용하여 search form을 구현하는 것을 확인할 수 있습니다.",674
57,"WebSquare.uiplugin.span은 HTML <span> 태그와 동일한 기능을 제공하는 컴포넌트입니다. TextBox에서 tagname 속성을 통해 <span> 태그를 표현하던 번거로움을 개선하기 위해 만들어졌습니다. TextBox와 비슷한 기능을 제공하지만, tagname 속성은 지원하지 않습니다.
이 컴포넌트는 class, dataType, displayFormat, displayFormatter, escape, id, label, localeRef, ref, tabIndex, useLocale, userData1, userData2, userData3 속성을 가지고 있습니다. class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, dataType 속성은 컴포넌트 value의 데이터 타입을 지정합니다. displayFormat 속성은 Excel의 서식처럼 value의 표시 형태를 지정하며, displayFormatter 속성은 컴포넌트의 value를 포맷하는 함수 명을 지정합니다. escape 속성은 <>&""를 HTML Escape 문자로 변환하여 화면에 표시합니다.
또한, 이 컴포넌트는 onclick, ondblclick, onmouseout, onmouseover 이벤트를 지원하며, addClass, bind, changeClass, focus, getDataListInfo, getDataType, getDisabled, getFormatValue, getGenerator, getID, getInitStyle, getLabel, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, setValue, hasClass, hide, removeClass, setDisabled, setDisplayFormat, setDisplayFormatter, setEventPause, setInitStyle, setLabel, setLocaleRef, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind, unbindRef, visible 메소드를 가지고 있습니다. 이 중, setLabel, setValue, show, hide, toggleClass, addClass, removeClass 메소드는 화면에 출력되는 텍스트를 변경하거나 컴포넌트의 CSS를 제어하는 데 사용됩니다.",551
58,"해당 속성은 웹스퀘어 컴포넌트에서 사용되는 속성들을 설명하는 문서입니다. false 값은 escape 문자로 변환하여 화면에 표시하며, escapeFormatter는 사용자가 정의한 포맷 변환 함수 명입니다. id는 컴포넌트 ID를 의미하며, label은 컴포넌트의 value로 화면에 출력하려는 텍스트를 정의합니다. localeRef는 클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key를 의미하며, ref는 DataCollection의 value 경로를 의미합니다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 지정합니다. useLocale는 다국어 사용 여부를 설정하며, userData1~3은 사용자 정의 데이터 속성입니다. Event Detail은 onclick, ondblclick, onmouseout, onmouseover 등의 이벤트를 설명하며, Method Detail은 addClass, bind, changeClass, focus, getDataListInfo, getDataType, getDisabled, getFormatValue, getGenerator, getID, getInitStyle, getLabel, getOpacity, getOriginalID, getPluginName 등의 메소드를 설명합니다.",338
59,"이 기술 문서는 웹스퀘어 컴포넌트에서 사용 가능한 함수들에 대한 설명을 제공합니다. 각 함수는 파라미터와 반환 값이 있으며, 각각의 기능을 수행합니다. 함수들은 웹스퀘어 컴포넌트 공통으로 사용 가능합니다.
- getPluginName(): 웹스퀘어 컴포넌트의 이름을 반환합니다.
- getPosition(positionName): 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환합니다.
- getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다.
- getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환합니다.
- getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환합니다.
- getSize(sizeName): 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. %로 설정된 경우, 픽셀로 변환된 값을 반환합니다.
- getStyle(propertyName): 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다.
- getTitle(): 컴포넌트의 title 속성 값을 반환합니다.
- getUdcHome(): UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다. 파일명은 마지막 .xml까지 포함합니다. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환합니다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됩니다.
- getUdcRoot(): UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. 파일명을 포함하지 않습니다. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환합니다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됩니다.
- getUserData(key): setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다.
- getValue(): format이 적용 되지 않은 value(label 속성에 정의 된 값)를 반환합니다.
- hasClass(className): 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다.
- hide(): 웹스퀘어 컴포넌트를 화면에서 숨깁니다. display:none; 및 visibility:hidden; CSS를 적용합니다.
- removeClass(className): className 클래스를 삭제합니다.
- setDisabled(disabled): 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다.
- setDisplayFormat(format): displayFormat 속성을 설정합니다.",835
60,"이름 타입 필수 여부 설명 
formatString Y 새로 설정할 displayFormat 
setDisplayFormat( formatString ) span 컴포넌트의 value format을 설정한다. 
formatter String Y 새로 설정할 formatter 함수명 
setDisplayFormatter( formatter ) displayFormatter 속성을 설정한다. 
evList String N 중단할 이벤트 목록. 
flag Boolean Y 이벤트 중단 여부. 
setEventPause( evList, flag ) 지정한 이벤트를 중단한다. 
property String N CSS 속성 
setInitStyle( property ) 컴포넌트의 초기 스타일을 복구한다. 
label String Y 출력할 텍스트 
setLabel( label ) label 값을 변경한다. 
localeRef String Y 새로 설정할 localeRef 값 
setLocaleRef( localeRef ) localeRef 속성값을 설정한다. 
value Number Y Opacity 값 
setOpacity( value ) 웹스퀘어 컴포넌트의 불투명도를 설정한다. 
left Number Y 설정할 left 위치 값 또는 null 
top Number Y 설정할 top 위치 값 또는 null 
mode String N 위치 설정 방법 
setPosition( left, top, mode ) 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. 
eadOnly Boolean Y readOnly 속성 활성화 여부 
setReadOnly( readOnly ) 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. 
path String Y ref의 경로 
setRef( path ) ref 속성을 설정한다. 
width Number Y 새로 설정할 컴포넌트의 width 값 또는 null 
height Number Y 새로 설정할 컴포넌트의 height 값 또는 null 
setSize( width, height ) 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. 
propertyName String Y 설정할 CSS 속성 
value String Y 해당 CSS 속성에 적용할 값 
setStyle( propertyName, value ) 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. 
key String Y 설정할 데이터의 key 
value String Y 설정한 데이터의 value 
setUserData( key, value ) 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. 
label String Y 화면에 출력할 텍스트 
setValue( label ) 화면에 출력될 텍스트를 설정한다. 
displayType String N 적용할 CSS display 속성의 값 
show( displayType ) 웹스퀘어 컴포넌트를 화면에 표시한다. 
className String Y 제거하거나 추가할 클래스 
toggleClass( className ) className 클래스를 제거하거나 추가한다. 
type String Y 발생시킬 이벤트 
array Array N 이벤트 핸들러에 전달할 파라미터 배열 
trigger( type, array ) 컴포넌트에서 특정 이벤트를 발생시킨다. 
type String N 제거할 이벤트 
function Function N 제거할 이벤트 핸들러 함수",787
61,"함수 unbind( )는 등록된 이벤트를 제거하는 함수입니다. 이벤트를 제거할 때는 이벤트 이름과 이벤트 핸들러 함수를 지정할 수 있습니다. 만약 이벤트 핸들러 함수를 지정하지 않으면 해당 이벤트에 등록된 모든 핸들러 함수를 제거합니다. 
함수 unbindRef( )는 ref 바인딩을 해제하는 함수입니다. 
함수 visible( flag )는 엔진 내부적으로 CSS visibility 속성을 설정하는 함수입니다. 이 함수는 show/hide 혹은 setStyle 사용을 권장합니다. 
예제 1) input1에 등록된 모든 이벤트를 제거합니다. 
input1.unbind(); 
예제 2) input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거합니다. 
input1.unbind(""onviewchange""); 
예제 3) input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거합니다. 
input1.unbind(""onviewchange"", func1);",277
62,"이 문서는 웹스퀘어5 스니핏 가이드의 커버 페이지입니다. 이 가이드는 웹스퀘어5에서 사용 가능한 다양한 스니핏들을 설명하고 있습니다. 스니핏은 웹스퀘어5에서 자주 사용되는 코드 조각으로, 개발자들이 자신의 웹 애플리케이션을 더욱 쉽게 개발할 수 있도록 도와줍니다.
이 가이드는 다음과 같은 내용을 다룹니다.
- 웹스퀘어5 스니핏의 개요
- 스니핏 사용 방법
- 다양한 유형의 스니핏 예제
이 가이드는 개발자들이 웹스퀘어5에서 스니핏을 사용하는 방법을 배우고, 자신의 웹 애플리케이션을 더욱 효율적으로 개발할 수 있도록 도와줍니다.",278
63,"WebSquare는 Utility 성격의 API를 제공하며, 각 API는 WebSquare 객체 하위에 패키지 단위로 구성되어 있습니다. 하지만 개발자 편의를 위해 API를 단축 제공합니다. $( ) 함수는 jQuery selector를 인자로 받아 jQuery 객체를 반환하며, ajax( options ) 함수는 submission과 비슷한 기능을 제공하는 통신 모듈로 submission에 비해 자유도가 높습니다. clearInterval( keyName , force ) 함수는 등록한 Interval 객체를 해제하며, clearPage( ) 함수는 브라우저를 초기상태로 되돌리는 함수입니다. clearTimeout( key , force ) 함수는 setTimer API를 이용하여 등록한 함수를 직접 clearTimeout시킵니다. createSubmission( submissionObj ) 함수는 동적으로 submission을 생성하며, dateAdd( day1 , offset ) 함수는 날짜에 지정된 수만큼 더합니다. deleteSubmission( submissionID ) 함수는 등록된 submission을 삭제하며, download( actionUrl , XML , sendMethod , isXHR ) 함수는 서버에 download 모듈이 구현 되어있는 url을 호출하여 화면에서 download 할 수 있는 인터페이스를 제공합니다. executeParallel( submission , processMsg , resolveCallback , rejectCallback , id ) 함수는 workflow 를 생성하지 않고 기존 submission들을 parallel 하게 순서를 보장하여 처리하고자 할 때 사용하며, executeSerial( submission , processMsg , resolveCallback , rejectCallback , id ) 함수는 workflow 를 생성하지 않고 기존 submission들을 serial 하게 순서를 보장하여 처리하고자 할 때 사용합니다. executeSubmission( submissionID , requestData , obj ) 함수는 submissionID에 해당하는 submission을 실행시킵니다. executeWhilst( submission , condFn , maxRepeat , processMsg , resolveCallback , rejectCallback , id ) 함수는 workflow 를 생성하지 않고 특정 submission을 반복적으로 호출하고자 할 때 사용합니다. executeWorkflow( workflowId ) 함수는 workflowId or workflowObj 을 받아서 workflow를 실행합니다. getAllBASE64Parameter( ) 함수는 Base64로 Encoding 된 get방식의 전체 parameter를 Base64 Decoding하여 JSON 형태로 반환하며, getAllParameter( ) 함수는 get방식으로 넘어 온 parameter 전체를 JSON 형태로 반환합니다. getAllPopupList( id ) 함수는 현재 열려있는 모든 popup 객체를 반환하며, getAllPopupWindowList( bMain ) 함수는 현재 열려있는 모든 popup 객체의 window를 반환합니다. getBASE64Parameter( param ) 함수는 Base64로 Encoding 된 get방식의 parameter(param)를 Base64 Decoding하여 반환합니다. getComponentById( ) 함수는 주어진 id에 해당하는 웹스퀘어 컴포넌트를 찾아 반환합니다. getCurrentServerDate( pattern ) 함수는 서버(WAS)의 현재 시간을 반환합니다. getEventTarget( ) 함수는 호출한 컴포넌트 정보를 반환합니다. getFormattedDate( dateObj , pattern ) 함수는 javascript의 Date객체를 받아서 지정 된 format으로 반환합니다. getFrame( ) 함수는 자신을 감싼 wframe object를 반환합니다. getFrameId( ) 함수는 자신을 감싼 wframe id를 반환합니다. getIntervalKeyList( ) 함수는 setInterval API의 key로 등록 된 값 전부를 array로 반환합니다. getMaxMinYear( ) 함수는 config파일에 설정 된 date 설정의 maxYear 와 minYear 값을 JSON로 반환합니다. getMetaValue( key ) 함수는 head영역에 정의한 Meta key에 해당하는 value를 반환합니다. getParameter( param ) 함수는 get방식으로 넘어 온 parameter 또는 openPopup API의 dataObject에 정의 한 값을 반환합니다. getPopupParam( ) 함수는 openPopup API를 이용하여 popup을 만들때 dataObject 속성 또는 xml 속성에 정의 한 값을 string으로 반환합니다. getPopupUrl( ) 함수는 popup으로 열린 화면에서 현재 화면의 url을 가져옵니다. getPopupWindow( id ) 함수는 openPopup API에 정의한 id로 검색하여 해당 popup의 window를 반환합니다. getPopupWindowList( useFrameModal , scope , bMain ) 함수는 $p와 동일한 scope를 가진 wframePopup 및 iframePopup 객체의 window를 반환합니다. getRunningWorkflow( workflowID ) 함수는 실행중인 첫번째 Workflow 객체를 반환합니다. getRunningWorkflowID( ) 함수는 실행중인 Workflow ID를 반환합니다. getRuntimeId( id ) 함수는 컴포넌트의 id(화면내에서의 id)를 입력받아 컴포넌트의 실제 id를 반환합니다. getStringByteSize( str ) 함수는 주어진 string의 byte size를 반환합니다. getSubmission( submissionID ) 함수는 submissionID에 해당하는 submission 객체를 반환합니다. getTimeoutKeyList( ) 함수는 setTimeout API의 key로 등록 된 값 전부를 array로 반환합니다. getWorkflow( id ) 함수는 id에 해당하는 Workflow 객체를 반환합니다. hideModal( ) 함수는 웹스퀘어의 Modal Layer를 hide시킵니다. hideProcessMessage( ) 함수는 웹스퀘어의 process 메시지를 hide시킵니다. isPopup( closest ) 함수는 현재 Window(화면)가 popup인지의 여부를 반환합니다. isRunningWorkflow( workflowID ) 함수는 실행중인 Workflow 가 있는지 여부를 반환합니다. isWFramePopup( ) 함수는 현재 화면이 wframe popup으로 열린 화면인지를 판별합니다. js( scriptUrl , callback ) 함수는 여러 개의 외부 script를 로드할 때 스크립트별 순서제어가 필요한 경우 사용합니다. log( msg ) 함수는 브라우저에서 로그를 출력합니다. main( ) 함수는 현재 window 내의 최상위 페이지에 해당하는 scope 객체를 반환합니다. mirrorView( ) 함수는 현재 화면을 새로운 화면에러 미러링하는 기능입니다. openPopup( url , options , params , target ) 함수는 popup을 속성에 따라 생성합니다. parent( ) 함수는 부모의 frame window",1549
64,"이 함수는 AJAX 통신을 수행하는데 사용되며, 응답이 없을 경우 error callback 함수가 실행됩니다. options.type이 xml인 경우, success callback 함수의 인자 객체의 responseBody 속성에 xml 객체가 설정되고, json인 경우 자바스크립트 객체가 설정됩니다. 나머지 경우는 text 형식이 설정됩니다. options.beforeAjax는 요청 전에 실행되는 함수로, 이 함수 내에서 false를 반환하면 AJAX 요청을 하지 않습니다. options.success는 요청이 성공한 경우 실행되는 callback 함수이며, options.error는 요청이 실패한 경우 실행되는 callback 함수입니다.
clearInterval 함수는 등록한 Interval 객체를 해제합니다. clearInterval 함수는 $p.setInterval 함수로 등록한 keyName을 인자로 받으며, force 인자를 true로 설정하면 해당 함수를 한 번 실행한 후 Interval 객체를 해제합니다.
clearPage 함수는 브라우저를 갱신하여 초기 상태로 되돌리는 함수입니다. 이 함수는 SPA 모드에서 브라우저 초기화가 필요한 경우 onpageunload 이벤트에서 사용됩니다. Editor 컴포넌트나 Chart 컴포넌트 등 SPA 모드에서 메모리 누수가 존재하는 컴포넌트 사용 시 해당 페이지의 body에 onpageunload 이벤트를 등록하고 이 함수를 호출합니다.
clearTimeout 함수는 $p.setTimer 함수로 등록한 함수를 직접 clearTimeout합니다. clearTimeout 함수는 $p.setTimer 함수로 등록한 key를 인자로 받으며, force 인자를 true로 설정하면 해당 함수를 한 번 실행한 후 Timer 객체를 해제합니다.
closePopup 함수는 웹스퀘어에서 제공하는 openPopup, createPopup 함수를 이용하여 팝업의 id를 할당한 경우 해당 id의 popup을 찾아 닫습니다.
createSubmission 함수는 동적으로 submission을 생성합니다. submissionObj는 등록할 submission 객체로, id, ref, target, action, method, mediatype, mode, encoding, replace, processMsg, errorHandler, customHandler, submitHandler, submitDoneHandler, submitErrorHandler 속성을 가집니다.
dateAdd 함수는 날짜에 지정된 수만큼 더합니다. day1은 지정 날짜이며, offset은 목표 날짜와의 편차입니다.
dateDiff 함수는 두 날짜 사이의 차이를 반환합니다.
deleteSubmission 함수는 등록된 submission을 삭제합니다.
download 함수는 서버에 download 모듈이 구현되어 있는 url을 호출하여 화면에서 download 할 수 있는 인터페이스를 제공합니다. actionUrl은 파일 다운로드가 구현되어 있는 url이며, XML은 문자열로 서버로 올라갑니다. sendMethod는 전송 방식을 나타내며, 기본값은 post입니다. isXHR은 xhr 통신 유무를 나타내며, 기본값은 false입니다.",755
65,"$p.download(url)과 $p.dynamicCreate(id, tagName, options, parent, itemSet)는 웹스퀘어의 기본 모듈에는 제공되지 않는다. $p.dynamicCreate은 웹스퀘어 객체를 동적으로 생성하며, wframe scope=true인 자식 화면에서 호출 시에는 wframe prefix를 자동으로 붙이고 생성된 객체를 wframe의 scope로 등록한다. $p.executeParallel(submission, processMsg, resolveCallback, rejectCallback, id)는 기존 submission들을 parallel하게 순서를 보장하여 처리하고자 할 때 사용하며, $p.executeSerial(submission, processMsg, resolveCallback, rejectCallback, id)는 기존 submission들을 serial하게 순서를 보장하여 처리하고자 할 때 사용한다. $p.executeSubmission(submissionID, requestData, obj)는 submissionID에 해당하는 submission을 실행시킨다. $p.executeWhilst(submission, condFn, maxRepeat, processMsg, resolveCallback, rejectCallback, id)는 특정 submission을 반복적으로 호출하고자 할 때 사용한다. $p.executeWorkflow(workflowId)는 workflowId나 workflowObj를 받아서 workflow를 실행한다. $p.getAllBASE64Parameter()는 Base64로 Encoding된 get방식의 전체 parameter를 Base64 Decoding하여 JSON 형태로 반환한다. $p.getAllPopupList(id)는 현재 열려있는 모든 popup 객체를 반환한다. $p.getAllPopupWindowList(bMain)는 현재 열려있는 모든 popup 객체의 window를 반환한다. $p.getBASE64Parameter(param)는 Base64로 Encoding된 get방식의 parameter(param)를 Base64 Decoding하여 반환한다. $p.getComponentById(id)는 주어진 id에 해당하는 웹스퀘어 컴포넌트를 찾아 반환한다. $p.getCurrentServerDate(pattern)는 서버(WAS)의 현재 시간을 반환한다. $p.getEventTarget()는 이벤트로 등록된 함수에서 인자로 this를 넘겨 getEventTarget API를 호출할 경우 호출한 컴포넌트 정보를 반환한다. $p.getFormattedDate(dateObj, pattern)는 javascript의 Date객체를 받아서 지정된 format으로 반환한다. $p.getFrame()은 wframe 안의 스크립트 영역에서 이 함수를 호출할 경우 자신을 감싼 wframe object를 반환한다.",587
66,"- $p.getFrame( ) : main.xml에 있을 경우 null을 반환하고, sub.xml에서 실행 시 wframe1 객체를 반환합니다.
- $p.getFrameId( ) : wframe 객체 안에서 호출 시 자신을 감싼 wframe id를 반환하고, 전역 스크립트에서 호출 시 null을 반환합니다.
- $p.getIntervalKeyList( ) : setInterval API로 등록된 key 값을 전부 array로 반환합니다.
- $p.getMaxMinYear( ) : config 파일에 설정된 date 설정의 maxYear와 minYear 값을 JSON으로 반환합니다.
- $p.getMetaValue( key ) : head 영역에 정의한 Meta key에 해당하는 value를 반환합니다.
- $p.getParameter( param ) : get 방식으로 넘어온 parameter 또는 openPopup API의 dataObject에 정의한 값을 반환합니다.
- $p.getPopupParam( ) : openPopup API를 이용하여 popup을 만들 때 dataObject 속성 또는 xml 속성에 정의한 값을 string으로 반환합니다.
- $p.getPopupUrl( ) : popup으로 열린 화면에서 현재 화면의 url을 가져오는 함수입니다.
- $p.getPopupWindow( id ) : openPopup API에 정의한 id로 검색하여 해당 popup의 window를 반환합니다.
- $p.getPopupWindowList( useFrameModal, scope, bMain ) : $p와 동일한 scope를 가진 wframePopup 및 iframePopup 객체의 window를 반환합니다.
- $p.getRunningWorkflow( workflowID ) : 실행 중인 첫 번째 Workflow 객체를 반환합니다.
- $p.getRunningWorkflowID( ) : 실행 중인 Workflow ID를 반환합니다.
- $p.getRuntimeId( id ) : 컴포넌트의 id(화면 내에서의 id)를 입력받아 컴포넌트의 실제 id를 반환하는 함수입니다.
- $p.getStringByteSize( str ) : 주어진 string의 byte size를 반환합니다.
- $p.getSubmission( submissionID ) : submissionID에 해당하는 submission 객체를 반환합니다.
- $p.getTimeoutKeyList( ) : setTimeout API로 등록된 key 값을 전부 array로 반환합니다.
- $p.getWorkflow( id ) : id에 해당하는 Workflow 객체를 반환합니다.",530
67,"$p.getWorkflow( id ) : workflow 아이디를 통해 workflow 객체를 반환한다. 실행 전이라도 객체를 구할 수 있으며, 동적으로 생성된 경우에는 실행이 진행되는 구간에서만 객체를 구할 수 있다. 완료된 submission들의 실행결과 객체는 workflowObj.result 로 구할 수 있다.
$p.hideModal() : 웹스퀘어의 Modal Layer를 숨긴다.
$p.hideProcessMessage() : 웹스퀘어의 process 메시지를 숨긴다.
$p.isPopup( closest ) : 현재 Window(화면)가 popup인지의 여부를 반환한다. closest가 true인 경우, 중첩된 wframe 팝업 또는 browser 팝업안에 wframe이 있을 경우, 부모 frame의 팝업 여부를 체크한다.
$p.isRunningWorkflow( workflowID ) : 실행중인 Workflow가 있는지 여부를 반환한다. workflowID가 전달된 경우에는 해당 id의 workflow 실행여부를 반환한다.
$p.isWFramePopup() : 현재 화면이 wframe popup으로 열린 화면인지를 판별하는 함수이다. wframe popup으로 사용된 경우 true, 그렇지 않을 경우 false를 반환한다.
$p.js( scriptUrl , callback ) : 여러 개의 외부 script를 로드할 때 스크립트별 순서제어가 필요한 경우 사용한다. 인자로 넘어온 script들 loading은 병렬로 진행하면서 실행은 순서대로 실행하는 기능을 제공한다. 마지막 인자의 type이 function인 경우, 모든 스크립트 로딩이 끝난 후 해당 function을 실행한다.
$p.log( msg ) : 브라우저에서 로그를 출력한다. 출력하는 값 중 객체의 Type이 Object인 경우는 String으로 변환한다. 브라우저 console에 로그를 출력하기 위해서는 config.xml에 console=""true"" 설정이 필요하다.
$p.main() : 현재 window 내의 최상위 페이지에 해당하는 scope 객체를 반환한다.
$p.mirrorView() : 현재 화면을 새로운 화면에 미러링하는 기능이다. (canvas를 이용하여 구형 브라우저에서 동작하지 않는다.)
$p.openPopup( url , options , params , target ) : popup을 속성에 따라 생성한다. url은 popup창의 url이며, options는 popup의 속성을 설정한다. options.id는 popup의 id, options.type은 팝업의 종류를 설정한다. options.width, options.height, options.top, options.left는 팝업의 크기와 위치를 설정한다. options.popupName은 팝업 객체의 이름이며, options.modal은 modal을 이용해서 뒤 쪽 배경을 동작하지 않도록 만들기 위한 인자이다. options.frameModal은 modal을 표시해줄 frame을 지정한다. options.useModalStack은 여러 개의 팝업을 생성할 경우, 제일 마지막에 표시되는 팝엄만 활성화한다. options.style은 팝업의 스타일을 설정한다. options.srcData와 options.destData는 deprecated되었으며, options.dataObject를 사용할 것을 권장한다. options.xml은 deprecated되었으며, options.dataObject를 사용할 것을 권장한다. options.dataObject는 popup에 설정할 변수의 데이터 타입과 데이터, 변수명을 입력하는 객체이다.",881
68,"WebSquare.uiplugin.popup.getPopupParam() API를 사용하여 Document의 string popup 창에서 가져올 수 있다. options.resizable은 크기 조절 유무를 나타내며, type이 iframePopup 또는 wframePopup인 경우 해당된다. options.status는 status 출력 유무를 나타내며, type이 browserPopup(분리된 창)인 경우 해당된다. options.menubar는 menubar 출력 유무를 나타내며, type이 browserPopup(분리된 창)인 경우 해당된다. options.scrollbars는 scrollbar 출력 유무를 나타내며, type이 browserPopup(분리된 창)인 경우 해당된다. options.title은 title 출력 유무를 나타내며, type이 browserPopup(분리된 창)인 경우 해당된다. options.useMaximize는 type이 iframePopup 또는 wframePopup인 경우, 상단 title 영역을 더블클릭 할 경우 최대화 시킬지 유무를 나타낸다. options.useModalDisable는 type이 iframePopup 또는 wframePopup인 경우 부모창의 컴포넌트들을 disabled 처리 유무를 나타낸다. options.closeAction은 type이 iframePopup 또는 wframePopup인 경우, 닫기 버튼을 클릭 할 경우 팝업을 닫기전 호출된 사용자 정의 function 이름을 나타낸다. 사용자 정의 함수에서 return true;시 팝업을 닫는다. options.className은 type이 iframePopup 또는 wframePopup인 경우, 팝업의 디자인을 변경하기 위한 class를 나타낸다. options.fullscreen은 type이 iframePopup 또는 wframePopup인 경우, fullscreen: true 설정시 전체화면으로 팝업을 띄운다. (IE전용) options.useControl은 type이 iframePopup 또는 wframePopup인 경우, 최소화, 최대화, 닫기 버튼을 사용할 수 있는지 여부를 나타낸다. options.foldOnMinimized는 foldOnMinimized: true 설정시 최소화 동작이 팝업 접기 동작으로 바뀐다. options.controls는 특정 컨트롤 버튼을 보이거나 숨길 수 있다. (useControl 속성이 true일 때 동작) options.foldSize는 minimize(fold) 동작시의 크기를 지정할 수 있다. (controls 옵션에서 ""minimize:true""이고 ""foldOnMinimize:true""인 경우 유효.) options.useATagBtn은 popup에서 a tag를 사용하는 close button을 사용할지 여부를 나타낸다. options.disableCloseButton은 type이 iframePopup 또는 wframePopup인 경우 닫기 버튼을 비활성화할지 여부를 나타낸다. options.alwaysOnTop은 type이 iframePopup 또는 wframePopup인 경우 기존 팝업이 항상 위에 떠있게 하는 속성을 나타낸다. options.popupUrl은 popup 페이지 자체의 url을 나타낸다. 기본값은 popup.html이다. options.windowDragMove은 popup 창을 마우스로 이동시킬 때 마우스를 움직일 때마다 실시간으로 창이 마우스를 따라 이동하는 기능을 나타낸다. options.processMsgFrame은 type이 wframePopup인 경우 processMessage를 popup 내부에 띄울지에 대한 설정을 나타낸다. options.fixPosition은 type이 wframePopup 또는 iframePopup인 경우 popup창이 움직이지 않도록 설정을 나타낸다. paramsNull은 사용되지 않는 파라미터로 4번째 파라미터를 사용 할 경우 null로 입력한다. targetObject는 window 객체이며, default로 window이다. setDocumentLang(lang)는 html태그의 lang 속성에 언어 코드를 설정한다. parseDate(dateStr, format)는 날짜 포맷을 Date로 변환한다. reinitialize(browserRefresh)는 브라우저 refresh 없이 페이지를 다시 로딩하거나 또는 브라우저를 refresh한다. rejectWorkflow(reject, workflowID)는 실행중인 Workflow를 Reject 시킨다. setDisabled(obj)는 지정한 컴포넌트의 하위로 disabled를 처리한다.",1105
69,"$p.setDocumentLang(""ko""); 함수는 문서의 언어를 설정하는 함수이다. 
$p.setDomain(domain) 함수는 document.domain 속성값을 변경하는 함수이다. www.inswave.com을 inswave.com으로 변경이 가능하지만, support.inswave.com으로는 변경이 불가능하다. 일반적으로 frame 및 popup 연동 시 host가 다른 domain끼리의 data 통신을 위해 사용된다. (parent 또는 opener의 domain과 iframe, popup의 domain을 동일하게 정의해야 한다.) 
cross-domain이란? 호출하는 도메인과 호출받는 도메인이 다른 경우, 다시 말해 서로 다른 도메인에서 자바스크립트로 접근하려 했을 때 혹은 다른 서버에 Ajax통신의 결과를 받을 때 브라우저에서 보안상 접근을 거부하며 ""권한이 없습니다.""와 같은 오류 메세지를 출력한다. 
$p.setInterval(func, options) 함수는 사용자가 지정한 함수가 주기적으로 실행되도록 하는 함수이다. SPA모드에서 페이지 이동 시 자동으로 제거된다. 
$p.setTimeout(func, options) 함수는 사용자가 지정한 함수가 일정 시간 후에 실행되도록 하는 함수이다. SPA모드에서 페이지 이동 시 자동으로 제거된다. 
$p.showModal(popupComponents) 함수는 Modal Layer를 띄우고 지정한 componentID는 popup(enabled)처리한다. 
top() 함수는 frame 중첩구조에서 최상위 frame window를 반환하는 객체이다. iframe 중첩구조에서는 top을 반환한다. 
$p.toTimestampString(dateObj) 함수는 javascript의 Date 객체를 java sql의 Timestamp에서 사용되는 형태와 동일하게 반환한다. (yyyy-mm-dd hh:mm:ss.fffffffff) 
$p.updateServerTime(pattern, resource) 함수는 서버(WAS)의 시간을 갱신한다. 비동기 네트워크 요청을 통해 갱신하며, 이 때 헤더 요청만 보낸다. 
$p.updateSuffix(options) 함수는 suffix.txt 파일을 갱신한다. 
$p.url(w2xPath, options) 함수는 화면 전환 시 웹스퀘어 화면(w2xPath에 해당하는)의 경로만 전달하여 페이지를 이동할 수 있게 해주는 함수이다. 
$p.URLEncoder(str) 함수는 주어진 문자열을 application/x-www-form-urlencoded MIME Format 문자열로 변환한다. 
$p.watermark(str) 함수는 현재 화면에 Watermark를 추가하는 기능이다. (canvas를 이용하여 구형 브라우저에서 동작하지 않는다.)",689
70,"웹스퀘어 가이드 SP4 릴리즈 노트 OPS 5장 요약
1. 엔진 정보
- 엔진 버전: 5.0_4.4778B.20221212.133351
- 릴리즈 날짜: 2022년 12월 12일
2. 변경 내역
2.1. 버그 수정
- $p.openPopup() 버그 (options.useATagBtn / WESD-1278)
  - 수정 전: 모바일 디바이스에서 보이스오버 및 토크백과 같은 접근성 기능을 사용할 경우 포커스가 잘못된 위치로 이동
  - 수정 후: 포커스 정상 동작
- GridView 기능
  - 행 단위 복사하기 & 붙여넣기 (WESD-1146)
    - rowCopy 구분속성 추가
    - focusMode=""row"" 속성 설정을 사용할 경우, 복사하기 & 붙여넣기 동작을 행 단위로 수행
- SelectBox 버그 (renderType / WESD-1231)
  - 수정 전: renderType=""native"" SelectBox 뒤에 renderType=""component"" SelectBox가 위치할 경우, 뒤에 위치한 SelectBox의 renderType 속성이 ""native""로 적용됨
  - 수정 후: renderType=""component"" 속성 설정이 정상 적용됨
- TabControl 버그 (탭에 마우스 오버 / WESD-1279)
  - 수정 전: 탭에 마우스를 이동한 후 탭을 다시 벗어난 이후에도, 마우스 오버 상태가 유지됨
  - 수정 후: 마우스 오버 상태가 해제됨
3. 추가 API
- GridView
  - rowCopy (WESD-1146)
  - scrollXNative (WESD-1267)
  - scrollXNativeMobile (WESD-1267)
- $p.openPopup()
4. GridView 기능
- 행 단위 복사하기 & 붙여넣기 (WESD-1146)
  - rowCopy 속성은 현재 비공개. 추후 공개 예정
- 브라우저의 가로 스크롤 사용 (WESD-1267)
  - scrollXNative 속성과 함께 사용할 수 없음. fixedColumn=""true"" 속성 설정은 무시됨
5. SelectBox 기능
- renderType=""native"" SelectBox 뒤에 renderType=""component"" SelectBox가 위치할 경우, 뒤에 위치한 SelectBox의 renderType 속성이 ""native""로 적용됨
6. TabControl 기능
- 탭에 마우스 오버 (WESD-1279)
  - 탭에 마우스를 이동한 후 탭을 다시 벗어난 이후에도, 마우스 오버 상태가 유지됨",751
71,"$p.top 객체는 웹스퀘어에서 최상위 객체로, 사용자 정의 정보를 관리합니다. 화면 전환 시마다 새로 생성되므로, $w.top에 설정된 정보도 초기화됩니다. 
아래는 $p.top 객체의 Property, Event, Method에 대한 요약입니다.
Property:
- 없음
Event:
- 없음
Method:
- getAttribute(key): 최상위 웹스퀘어 객체의 사용자 정의 값을 가져옵니다. key는 브라우저 세션에서의 키값입니다. 반환값은 Object 타입입니다. 예시: $p.top.getAttribute(""custInfo"");
- removeAttribute(key): 최상위 웹스퀘어 객체의 사용자 정의 값을 삭제합니다. 기존에 저장된 값은 반환됩니다. key는 브라우저 세션에서의 키값입니다. 반환값은 Object 타입입니다. 예시: $p.top.removeAttribute(""custInfo"");
- removeSession(): 최상위 웹스퀘어 객체의 사용자 정의 정보를 전체 삭제합니다. 예시: $p.top.removeSession();
- setAttribute(key, value): 최상위 웹스퀘어 객체의 사용자 정의 정보 값을 설정합니다. 기존 값이 존재하면 덮어쓰여집니다. key는 브라우저 세션에서의 이름, value는 브라우저 세션에서의 키값입니다. 예시: $p.top.setAttribute(""userName"", ""홍길동"");",375
72,"엔진 정보표
1-1. 엔진 정보
엔진 버전: 5.0_4.4781B.20221219.151544
릴리즈 날짜: 2022년 12월 19일
변경 내역
컴포넌트 구분 항목 추적 ID 
config.xml 버그 autoupdateinterval WESD-1250 
websquare.xml 항목 추가 로그 파일 생성 없이 로그만 출력 WESD-1234 
AutoComplete 기능 displayMode 동적 변경 WESD-1253 
delimiter 동적 변경 WESD-1253 
CheckComboBox 기능 displayMode 동적 변경 WESD-1253 
delimiter 동적 변경 WESD-1253 
GridView 기능 displayMode 동적 변경 WESD-1253 
delimiter 동적 변경 WESD-1253 
그룹핑 시 헤더에 마지막 단계만 표시 WESE-281 
버그 멀티 헤더에서 정렬 아이콘 표시 WESE-268 
gridView.column 버그 maxLength WESD-1276 
InputCalendar 버그 달력 위치 WESE-294 
MultiUpload 버그 callbackSync WESD-1248 
SelectBox 기능 displayMode 동적 변경 WESD-1253 
delimiter 동적 변경 WESD-1253 
Submission 버그 processsMsg WESD-1286 
추가 설정 항목
설정 파일 항목 추적 ID 
websquare.xml 항목 추가 log logFile WESD-1234 
추가 API
컴포넌트 API 추적 ID 
AutoComplete setDisplayMode() WESD-1253 
setDelimiter() WESD-1253 
CheckComboBox setDisplayMode() WESD-1253 
setDelimiter() WESD-1253 
GridView setDisplayMode() WESD-1253 
setDelimiter() WESD-1253 
groupby() - options.showOnlyLastDepth WESE-281 
SelectBox setDisplayMode() WESD-1253 
setDelimiter() WESD-1253 
버그 수정
autoupdateinterval / WESD-1250
수정 전: WebSquare/date/serverDate/@autoupdateinterval 설정이 정상 동작하지 않는 경우 발생.
수정 후: 정상 동작.
멀티 헤더에서 정렬 아이콘 표시 / WESE-268
수정 전: GridView의 헤더가 2줄이고, 두번째 줄의 헤더에 setHeaderUserObject() 함수를 이용하여 헤더에 InputBox를 생성하고, showSortableImage=""true"" 속성 설정을 적용할 경우, 정렬 아이콘이 두번째 헤더에 표시되고, 정렬 기능이 동작하지 않음.
수정 후: 동일.
maxLength / WESD-1276
수정 전: GridView의 셀 데이터를 복사해서 붙여넣기 할 경우 maxLength 속성 설정이 적용되지 않음.
수정 후: maxlength 속성 설정이 적용됨.
달력 위치 / WESE-294
수정 전: FullView 기능을 사용할 경우, InputCalendar의 달력 아이콘을 클릭하면 달력이 InputCalendar를 벗어난 위치에 표시됨.
수정 후: 달력이 InputCalendar 위치에 표시됨.
callbackSync / WESD-1248
수정 전: callbackSync=""true"" 속성 설정을 적용해도 파일 업로드 순서대로 callback 함수가 호출되지 않는 경우 발생.
수정 후: 파일 업로드 순서대로 callback 함수가 호출됨.
기능 추가
displayMode 동적 변경 / WESD-1253
AutoComplete, CheckComboBox, GridView, SelectBox 컴포넌트에서 displayMode 속성값을 동적으로 변경할 수 있도록 setDisplayMode() 함수를 추가함.
delimiter 동적 변경 / WESD-1253
AutoComplete, CheckComboBox, GridView, SelectBox 컴포넌트에서 선택 항목 목록에 value와 label을 함께 표시할 때 사용하는 구분자(delimiter 속성)를 동적으로 변경할 수 있도록 setDelimiter() 함수를 추가함.
그룹핑 시 헤더에 마지막 단계만 표시 / WESE-281
GridView 컴포넌트에서 groupby() 함수를 통해 그룹핑을 수행할 경우, 헤더에 마지막 단계만 표시할 수 있도록 options.showOnlyLastDepth 옵션을 추가함.
코드 6-7. 사용 예
var options = {
  sortIndex: [0, 1, 2],
  closeGroup: true,
  showOnlyLastDepth: true,
  groupbyHeader: [{
    inputType: ""expression"",
    expression: 'toggle() + depthStr() + "" [ "" + count() + "" Cases ] ""',
    align: ""left"",
    colSpan: ""4""
  }],
  groupbyFooter: {
    depth_0: [{
      colSpan: ""3"",
      value: ""Total"",
      align: ""right""
    }, {
      inputType: ""expression"",
      expression: 'SUM(""col4"")'
    }],
    depth_1: [{
      colSpan: ""3"",
      value: ""Sub Total"",
      align: ""right""
    }, {
      inputType: ""expression"",
      expression: 'SUM(""col4"")'
    }]
  }
};
gridView1.groupby(options);
Submission 컴포넌트에서 팝업에 모달이 적용되도록 수정함.",1394
73,"12번 탭 컨트롤러에서 발생한 두 가지 버그가 수정되었습니다. 첫 번째 버그는 adaptive=""layout"" 속성 설정이 정상적으로 동작하지 않는 경우였으며, 이제는 정상적으로 동작합니다. 두 번째 버그는 탭 포커싱 관련 이슈였으며, 이제는 비활성화된 탭으로 이동할 수 없도록 수정되었습니다.",122
74,"이 문서는 WebSquare의 SP4 사용자 가이드의 백매터 중 일부입니다. 여기에는 A, D, E, G, J, L, S로 시작하는 용어들이 포함되어 있습니다.
AAWD: WebSquare에서 데이터 수집을 위한 API입니다.
DataCollection: WebSquare에서 데이터 수집을 위한 객체입니다.
DataMap: WebSquare에서 데이터 매핑을 위한 객체입니다.
Design 뷰 분리: WebSquare에서 디자인과 로직을 분리하여 개발할 수 있는 기능입니다.
Each(): jQuery에서 제공하는 함수 중 하나로, 각 요소에 대해 지정된 함수를 실행합니다.
Get(wqAPI, value): WebSquare에서 데이터를 가져오는 API입니다.
Jq(): jQuery를 사용하여 HTML 문서를 조작하는 함수입니다.
jQuerySupport: WebSquare에서 jQuery를 지원하는 기능입니다.
LinkedDataList: WebSquare에서 제공하는 데이터 리스트 객체입니다.
Selector: jQuery에서 사용하는 선택자입니다.
SPA: WebSquare에서 제공하는 Single Page Application 개발을 위한 기능입니다.
그리드 에디터: WebSquare에서 제공하는 그리드 편집기입니다.",288
75,"WebSquare.uiplugin.body는 HTML의 body와 동일한 역할을 하는 클래스이다. 이 클래스는 HTML의 class 속성과 동일한 기능을 제공하며, firstTabID와 useExternalClass 등의 속성과 onbeforepageunload와 onpageload 등의 이벤트를 제공한다. 
또한, addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind 등의 메소드를 제공한다. 
addClass 메소드는 컴포넌트에 CSS class를 추가하고, bind 메소드는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당한다. changeClass 메소드는 웹스퀘어 컴포넌트의 class를 변경하며, focus 메소드는 웹스퀘어 컴포넌트에 포커스를 준다. getDisabled 메소드는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하고, getGenerator 메소드는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다. 
그 외에도 다양한 메소드와 이벤트가 제공되며, 이를 활용하여 웹스퀘어 애플리케이션을 개발할 수 있다.",451
76,"이 기술 문서는 웹스퀘어 컴포넌트에서 사용 가능한 메서드들에 대한 설명을 제공합니다. 각 메서드는 이름, 매개변수, 반환값, 예제 코드로 구성되어 있습니다. 
- removeDefaultClass(value) : 컴포넌트의 기본 클래스를 제거하고 새로운 클래스를 적용합니다.
- changeClass(oldClassName, newClassName) : 컴포넌트의 클래스를 변경합니다.
- focus() : 웹스퀘어 컴포넌트에 포커스를 줍니다.
- getDisabled() : 컴포넌트의 disabled 속성 값을 반환합니다.
- getGenerator() : 컴포넌트를 생성한 부모 Generator 객체를 반환합니다.
- getID() : 컴포넌트의 ID를 반환합니다.
- getInitStyle(CSS) : 컴포넌트의 초기 스타일을 반환합니다.
- getOpacity() : 컴포넌트의 불투명도 값을 반환합니다.
- getOriginalID() : 컴포넌트의 originalID 값을 반환합니다.
- getPluginName() : 컴포넌트의 이름(pluginName)을 반환합니다.
- getPosition(positionName) : 컴포넌트의 위치(left, top) 값을 반환합니다.
- getReadOnly() : 컴포넌트의 readOnly 속성 값을 반환합니다.
- getScope() : scope=""true""인 WFrame의 부모 WFrame 객체를 반환합니다.
- getScopeWindow() : scope=""true""인 WFrame의 부모 WFrame 객체 또는 전역 window 객체를 반환합니다.
- getSize(sizeName) : 컴포넌트의 크기(width, height) 값을 반환합니다.
- getStyle(propertyName) : 컴포넌트의 CSS 속성 값을 반환합니다.
- getStyleValue(style) : [deprecated] getStyle() 메서드를 사용하세요.
- getTitle() : 컴포넌트의 title 속성 값을 반환합니다.",516
77,"이 기술 문서는 웹스퀘어 컴포넌트에서 사용 가능한 메소드들에 대한 설명을 제공합니다. 각 메소드는 해당 컴포넌트의 속성을 설정하거나 반환하는 역할을 합니다. 
예를 들어, input 컴포넌트의 title 속성을 ""이름 입력""으로 정의한 경우, getTitle() 메소드를 사용하여 해당 속성 값을 반환할 수 있습니다. 
또한, UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하는 메소드인 getUdcHome()과 getUdcRoot()도 제공됩니다. 
다른 메소드로는, setUserData()를 사용하여 웹스퀘어 컴포넌트에 임의의 데이터를 설정하거나, hasClass()를 사용하여 특정 class를 포함하는지 확인할 수 있습니다. 
또한, setDisabled()를 사용하여 컴포넌트의 disabled 속성을 설정하거나, setEventPause()를 사용하여 지정한 이벤트를 중단할 수 있습니다. 
마지막으로, setSize()를 사용하여 컴포넌트의 크기를 설정하거나, setStyle()을 사용하여 CSS 속성을 설정할 수 있습니다. 
이러한 메소드들은 웹스퀘어 컴포넌트에서 자주 사용되며, 이 문서를 참고하여 효율적인 개발을 진행할 수 있습니다.",398
78,"해당 문서는 웹스퀘어 컴포넌트에서 사용되는 함수들에 대한 설명이다. 
첫 번째 함수는 show(displayType) 함수로, 웹스퀘어 컴포넌트를 화면에 표시하는 함수이다. 이 함수는 CSS display 속성을 주어진 값으로 설정하고 ""visibility: show;""를 적용한다. 파라미터로는 적용할 CSS display 속성의 값이 들어간다. block, inline, none, """" 중 하나의 값을 가진다. 이 함수를 사용하면 컴포넌트를 화면에 보이게 하거나, 숨길 수 있다. 
두 번째 함수는 toggleClass(className) 함수로, 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가하는 함수이다. 이 함수를 사용하면 웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함하고 있는 경우, 해당 class를 제거하고, 포함하고 있지 않은 경우, 해당 class를 추가한다. 기본적으로 addClass를 통해 추가된 class만 삭제 가능하다. 만약 웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하려면 config.xml 파일에 설정을 추가해야 한다. 
세 번째 함수는 trigger(type, array) 함수로, 컴포넌트에서 특정 이벤트를 발생시키는 함수이다. 이 함수를 사용하면 type 파라미터로 지정한 이벤트를 발생시키고, array 파라미터로 지정한 배열을 이벤트 핸들러에 전달하여 호출한다. 
네 번째 함수는 unbind(type, function) 함수로, 컴포넌트에서 이벤트를 제거하는 함수이다. 이 함수를 사용하면 type 파라미터로 지정한 이벤트를 제거하고, function 파라미터로 지정한 이벤트 핸들러 함수를 제거한다. 
마지막 함수는 visible(flag) 함수로, 엔진 내부적으로 CSS visibility 속성을 설정하는 함수이다. 이 함수는 show/hide 혹은 setStyle 사용을 권장하며, flag 파라미터로 true나 false 값을 받는다. true일 경우 visibility: visible;을, false일 경우 visibility: hidden;을 설정한다. 이 함수는 deprecated 되었으므로 사용을 권장하지 않는다.",647
79,"WebSquare.uiplugin.tag은 HTML 태그를 관리하기 위한 상위 객체로, 일반 HTML 태그를 WebSquare에서 관리할 수 있습니다. 이 객체는 class, id, tagname 등의 속성을 가지며, class 속성은 CSS 파일이나 style 블록에서 정의한 여러 개의 class를 공백으로 구분하여 적용할 수 있습니다. 또한, 각 컴포넌트 별로 지정된 class를 적용하거나, class 속성을 이용하여 컴포넌트의 CSS를 제어할 수 있습니다. 
id 속성은 컴포넌트 ID를 나타내며, 전역 객체로 할당됩니다. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근할 수 있습니다. tagname 속성은 렌더링될 태그명을 나타냅니다. 
또한, WebSquare.uiplugin.tag은 Property, Event, Method를 가지고 있습니다. Property는 class, id, tagname 속성을 제공하며, Event는 컴포넌트에서 발생하는 이벤트를 제공합니다. Method는 컴포넌트에서 사용할 수 있는 메소드를 제공합니다. 
이 객체는 WebSquare 5.0_5.4826M.20230213.171915 버전에서 사용할 수 있습니다.",372
80,"이 문서는 WebSquare Studio의 Design Guide OPS chapter 53.html에 대한 내용입니다. 이 문서에서는 HTML div 태그로 표현되는 Output 컴포넌트에 대한 속성과 CSS Overriding, 그리고 주의사항과 팁에 대해 설명합니다.
Output 컴포넌트는 Text 출력과 출력된 데이터에 Format을 적용하는 등의 주요 기능을 제공합니다. 이 컴포넌트의 Property는 다음과 같습니다.
- class: HTML의 class 속성과 동일한 기능을 제공하며, css 파일이나 style 블록에 정의한 class를 1개 또는 공백(space)을 이용하여 다중 적용이 가능합니다.
- dataType: 컴포넌트 value의 data type을 명시하며, 해당 값은 엔진에서 제공하는 displayFormat 등의 속성에서 참조합니다. 기본값은 text, number, date, time, bigDecimal이 있습니다.
- id: 컴포넌트의 ID로 전역 객체로 할당되며, script에서 해당 id로 컴포넌트에 접근이 가능합니다.
- disabled: HTML의 disabled 속성과 동일한 기능을 제공하며, 컴포넌트를 비활성화 시킵니다.
- displayFormat: 엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며, value의 format을 적용하는 방식으로 동작합니다. displayFormatter와 동시 적용이 불가능합니다.
- label: 컴포넌트의 value로 화면에 출력하고자 하는 text를 정의합니다.
- src: 이미지 파일의 URL을 지정합니다.
- style: InputBox의 style 속성을 지정합니다.
- tabIndex: Tab Key를 이용한 컴포넌트의 포커스 순서로, HTML의 tabindex 속성과 동일한 기능을 제공합니다.
- toolTip: 웹스퀘어에서 만든 toolTip으로, 컴포넌트의 추가 정보를 명시합니다. 마우스 over시 표현됩니다.
CSS Overriding은 Output 컴포넌트의 스타일을 변경하는 방법입니다. 그림 53-1.02에서는 w2output 클래스를 사용하여 Output 컴포넌트의 스타일을 변경하는 예시를 보여줍니다.
주의사항과 팁으로는, Output 컴포넌트는 textbox 컴포넌트와 거의 동일하지만, ""for"" 속성을 제공하지 않는다는 점이 차이점입니다. 이러한 이유로 웹 접근성 작업시에는 ""for"" 속성을 제공하는 ""textbox""를 사용하는 것이 좋습니다.",740
81,"이 문서는 웹스퀘어5 심화 가이드의 커버 페이지입니다. 해당 가이드는 웹스퀘어5를 사용하는 개발자들을 대상으로 작성된 문서입니다. 이 가이드는 웹스퀘어5의 고급 기능과 개발 방법에 대해 다루고 있으며, 웹스퀘어5를 사용하여 더욱 복잡하고 다양한 웹 애플리케이션을 개발할 수 있도록 도와줍니다. 이 가이드는 웹스퀘어5의 다양한 기능과 개발 방법을 설명하며, 예제 코드와 함께 제공됩니다.",197
82,"52. Navigation (HTML5)
<nav> tag plays a role in navigation links. It typically includes links to important documents rather than all links in a document.
52.1 Property
Property Description 
id It is assigned as a global object as the component's ID, and the component can be accessed by the ID in the script. 
52.2 Browser Capture
Figure 52-1.01
52.3 CSS Overriding
Figure 52-2.02
No Class Description 
1 inline Edit the style directly in the websquare style editor. 
52.4 Precautions and Tips
As an additional element in HTML5, there are no specific attributes for websquare components, and if necessary, attributes can be added as a button through Attribute Add.",157
83,"이 문서는 정보기술 발달로 인해 발생하는 정보격차 문제를 해결하기 위해 웹사이트 접근성을 보장하는 한국형 웹콘텐츠 접근성 지침 2.0을 소개합니다. 이에 따라 웹스퀘어의 컴포넌트별 접근성 지원 현황을 설명하고, 이를 이용해 접근성을 지원하는 웹사이트를 제작하는 방법을 안내합니다. 이 문서를 이용하려면 웹스퀘어 스튜디오 2017년 2월 22일 이후 버전과 웹스퀘어 엔진 2017년 5월 22일 이후 버전, 그리고 한국형 웹 콘텐츠 접근성 지침 2.1을 준수해야 합니다.",259
84,"이 문서는 GridView 컴포넌트에 대한 설명서이다. GridView는 표 형태의 자료를 그리드로 표시하는 기능을 제공한다. Body와 Header로 구분되며, 다양한 데이터 형식을 지원하며, 페이징, 정렬, 필터링, 그룹핑 등의 기능을 제공한다. 또한, 대량의 데이터를 처리하는 데 적합하며, Total, Subtotal, Footer를 지원하며, 클립보드를 지원하여 데이터 바인딩이 용이하다. 주요 용도로는 복잡한 테이블 구성, 대용량 파일 업로드/다운로드 등이 있다. GridView의 여러 가지 유용한 기능을 사용하기 위해서는 GridView의 속성을 지정해야 한다. GridView에 데이터를 표시하기 위해서는 DataList와의 바인딩이 필요하며, DataCollection과 Submission 부분을 참고해야 한다. GridView의 구조는 Body와 Header로 구분되며, Header 셀도 Body와 마찬가지로 inputType 지정을 통해 다양한 형식을 지정할 수 있다. SubTotal을 추가하여, 특정 컬럼에 속한 일부 데이터의 통계값을 계산할 수 있다. SubTotal 컬럼의 expression 속성에는 SUM, AVG, MIN, MAX, COUNT 등의 계산식을 사용할 수 있다.",385
85,"GridView에서 subTotal과 footer를 사용하는 방법에 대한 설명입니다. subTotal은 특정 컬럼의 소계를 표시하고, footer는 특정 컬럼의 통계값을 계산하여 표시합니다. subTotal을 표시하거나 숨기는 함수와, subTotal 데이터에 따라 서로 다른 CSS를 적용하는 함수를 사용할 수 있습니다. footer는 푸터 내용과 푸터 요약을 생성할 수 있으며, 소수점 숫자의 합계와 평균을 계산할 때 부동 소수점 오류를 처리하기 위한 설정이 필요합니다. 각 컬럼의 inputType을 서로 다르게 지정할 수 있습니다.",198
86,"GridView에서 사용 가능한 inputType 종류와 각각의 주요 속성에 대해 설명하고 있다. inputType은 text, image, calendar, checkbox, select, textarea, drilldown, textImage, checkcombobox, autoComplete, secret, custom 등이 있다. inputType이 custom인 경우 typeGetter 함수를 사용하여 각 행마다 다른 inputType을 지정할 수 있다. 또한, inputType이 autoComplete인 경우 directOpen 속성을 사용하여 아이템 목록을 바로 펼칠 수 있다. inputType이 calendar인 경우 setColumnIoFormat 함수를 사용하여 날짜 입력 형식과 출력 형식을 지정할 수 있다. inputType이 checkbox인 경우 checkboxLabelColumn 속성을 사용하여 다른 칼럼의 값을 조합하여 CheckBox 라벨 값을 사용할 수 있다. 또한, 헤더가 inputType이 checkbox인 경우 checkAllType 속성을 사용하여 disabled이거나 readOnly 상태의 셀을 셀 상태 판단에 포함할지 여부를 결정할 수 있다.",263
87,"GridView에서 inputType 속성을 이용하여 다양한 형태의 입력 컬럼을 설정할 수 있습니다. inputType=""checkbox"" 컬럼에서는 전체 선택 기능과 일부 선택 기능을 제공하며, 체크박스를 이용하여 행을 선택할 수 있습니다. inputType=""checkcombobox"" 컬럼에서는 체크박스와 콤보박스를 함께 사용할 수 있습니다. inputType=""drilldown"" 컬럼에서는 각 행을 메뉴 형식으로 접고 펼칠 수 있는 드릴다운 형태의 컬럼을 설정할 수 있습니다. inputType=""expression"" 컬럼에서는 직접 계산식을 정의하여 사용할 수 있습니다. inputType=""radio"" 컬럼에서는 Radio 라벨 값을 다른 칼럼의 값을 조합하여 사용할 수 있습니다. inputType=""select"" 컬럼에서는 콤보박스를 사용할 수 있습니다. 또한, GridView 컬럼과 바인딩된 DataList의 특정 컬럼의 값을 기준으로 일부 선택 항목을 숨길 수 있습니다.",310
88,"GridView 컬럼 설정하기
GridView는 각 컬럼의 속성을 설정할 수 있습니다.
14.5.1 GridView 컬럼의 dataType 확인 및 변경
setDataType 및 getDataType 함수를 사용하여 GridView 컬럼의 dataType을 변경할 수 있습니다.
14.5.2 컬럼 숨기기
hidden 속성을 이용하여 열을 숨길 수 있습니다. 또한, setColumnVisible(colIndex, colVisible) API를 사용하여 열 숨기기 기능을 동적으로 사용할 수 있습니다.
14.5.3 텍스트 정렬
textAlign 속성으로 텍스트를 좌, 우, 중앙으로 정렬할 수 있습니다. 기본 값은 중앙(center)입니다.
14.5.4 포맷/포맷터
GridView.colum의 displayFormat 속성을 사용하여 해당 컬럼의 데이터 표시 형식을 설정할 수 있습니다. 또한, displayFormatter 속성으로 함수명을 지정한 후 해당 함수를 별도로 정의하여, 해당 컬럼의 데이터 표시 형식을 설정할 수 있습니다. 단, 해당 컬럼의 inputType이 특정한 경우에만 유효합니다. 또한, customFormatter 속성으로 함수명을 지정한 후 해당 함수를 별도로 정의하여, 해당 컬럼의 데이터 표시 형식을 설정할 수 있습니다. 이 경우에도 해당 컬럼의 inputType이 특정한 경우에만 유효합니다. 각 셀의 displayFormatter 및 customerFormatter 속성을 동적으로 변경할 수도 있습니다.",415
89,"GridView 이벤트 추가
GridView에 이벤트를 추가하는 방법에 대해 설명합니다. onsort, oncellclick, oncelldblclick, onscrollstart, ondateselect, onmonthselect, onyearselect, oncontextopen 이벤트에 대한 설명과 예제를 제공합니다.
onsort
sortable=""true"" 속성이 적용된 헤더를 클릭하거나 더블 클릭하여 정렬을 수행할 경우 onsort 이벤트가 발생합니다.
oncellclick
GridView 셀을 클릭할 경우 oncellclick 이벤트가 발생하며 클릭된 셀의 행 인덱스, 열 인덱스, 컬럼 ID를 인자로 전달합니다.
oncelldblclick
GridView 셀을 더블-클릭할 경우 oncelldblclick 이벤트가 발생하며 클릭된 셀의 행 인덱스, 열 인덱스, 컬럼 ID를 인자로 전달합니다.
onscrollstart
onscrollstart 이벤트는 세로 스크롤이 그리드뷰 상단에 닿을 때 발생합니다. alwaysTriggerScrollStart=""true"" 설정을 적용하면 세로 스크롤이 상단에 닿을 때마다 onscrollstart 이벤트가 발생합니다.
ondateselect & onmonthselect & onyearselect
날짜 선택, 월 선택, 년도 선택 시 각각 ondateselect, onmonthselect, onyearselect 이벤트가 발생합니다.
oncontextopen
GridView의 컨텍스트 메뉴가 표시될 때 oncontextopen 이벤트가 발생하며, 클릭된 셀의 행 인덱스, 열 인덱스, 포커스된 셀의 좌표, 클릭된 셀이 헤더인지 여부, 클릭된 셀이 헤더일 경우 헤더의 ID를 반환합니다.
틀 고정
GridView에서 열 고정, 행 고정, 스크롤 숨기기 기능을 제공합니다.
컬럼 폭 조정
GridView에서 자동 맞춤, 드래깅을 통한 조정, 행 번호 컬럼 폭 조정, 최소 폭 지정 기능을 제공합니다.",618
90,"GridView에서 minWidth 속성을 사용하면 컬럼의 최소 너비를 지정할 수 있습니다. 이 경우, 마우스 드래깅을 수행해도 컬럼 폭이 해당 너비 이하로 줄어들지 않습니다. rowNumVisible 및 rowStatusVisible 속성을 사용하면 행 번호와 상태를 나타내는 컬럼을 표시할 수 있습니다. 이때, 각 컬럼의 헤더 값과 폭, 배경색을 지정할 수 있습니다. 또한, 다국어 지원을 위해 WebSquare.WebSquareLang에 각 언어의 key 값 별로 텍스트를 정의하여 행 번호 및 행 상태 컬럼의 헤더를 다국어로 표시할 수 있습니다. GridView의 헤더를 드래깅하여 해당 컬럼을 이동할 수 있으며, 세로 틀로 고정된 컬럼의 경우 드래깅 가능 여부를 별도로 지정할 수 있습니다. 마지막으로, GridView와 DataList가 바인딩된 경우, insertRow() 및 removeRows() 함수를 사용하여 행을 동적으로 추가하거나 삭제할 수 있습니다. 또한, visibleRowNum 속성을 사용하여 GridView에 표시할 행 수를 지정하거나, setRowVisible 및 clearRowVisible 함수를 사용하여 행을 숨기거나 표시할 수 있습니다. 이러한 기능들은 Trigger나 다른 컴포넌트로 나타낼 수 있습니다.",411
91,"이들 컴포넌트는 다른 컴포넌트와 연계하여 사용할 수 있으며, 이벤트를 사용하여 그리드를 조작할 수 있습니다. setRowBackgroundColor() 함수를 사용하여, 필터에 의해 숨겨진 행을 포함한 특정 행의 배경색을 동적으로 변경할 수 있습니다. 행을 드래그-앤-드롭을 통해 이동할 수 있으며, 이때 rowStatus를 유지할 수 있습니다. 셀의 너비와 높이를 조절할 수 있으며, 새로 추가되는 셀의 기본 값은 defaultValue를 통해 설정할 수 있습니다. setFocusedMultiCell() 함수를 이용하여 특정 칼럼의 데이터 혹은 특정 영역의 데이터만 선택할 수 있습니다.",230
92,"GridView에서 셀을 선택하는 방법과 관련된 내용입니다. setFocusedMultiCell() 함수를 사용하여 특정 영역의 셀을 선택할 수 있으며, 드래깅이나 Shift 키를 사용하여 여러 개의 셀을 선택하고 삭제할 수 있습니다. Ctrl 키나 Shift 키를 사용하여 셀을 선택하는 방법도 있으며, 마우스 드래깅으로 셀을 선택할 때 GridView가 자동으로 스크롤링되는 기능도 있습니다. 또한, 셀 선택을 금지하는 방법도 있습니다. 각 셀에 title 속성을 추가하여 셀 제목, 데이터, label, inputType 등을 조합하여 표시할 수 있습니다. titleAuto 속성을 사용하여 자동으로 생성할 수도 있습니다.",220
93,"GridView에서 특정 셀에 스타일 클래스를 적용하거나, 특정 셀을 비활성화하거나, 배경색을 설정하는 방법에 대해 설명합니다. 또한, 포커싱, 포커스 이동, 편집 모드와 관련된 설정 방법과 키 이동 방법에 대해 설명합니다.
setCellClass() 함수를 사용하여 특정 GridView 셀에 스타일 클래스를 적용할 수 있습니다. setCellDisabled() 함수를 사용하여 필터에 의해 숨겨진 셀을 포함한 특정 셀을 동적으로 비활성화할 수 있습니다. setCellBackgroundColor() 함수를 사용하여 필터에 의해 숨겨진 셀을 포함한 특정 셀의 배경색을 동적으로 설정할 수 있습니다.
포커싱, 포커스 이동, 편집 모드와 관련된 설정 방법은 다음과 같습니다. focusMode 속성을 사용하여 사용자가 GridView 상에서 셀을 선택할 경우, 선택된 셀 및 해당 셀이 속한 행을 포커싱하는 방법을 설정할 수 있습니다. focusFlow 속성을 사용하여 포커스가 GridView의 맨 왼쪽, 맨 오른쪽, 상단, 혹은 하단에 있을 경우 이후 포커스 이동 방식을 설정할 수 있습니다. arrowMove 속성을 사용하여 방향키를 사용하여 편집 모드로 셀 간의 이동이 가능하도록 설정할 수 있습니다. moveKeyEditMode 속성을 사용하여 좌/우 방향키 선택을 통해 편집 모드로 진입할 수 있도록 설정할 수 있습니다. moveKeyEditModeAll 속성을 사용하여 상/하/좌/우 방향키 선택을 통해 편집 모드로 진입할 수 있도록 설정할 수 있습니다. enterKeyMove 속성을 사용하여 사용자가 셀에서 Enter 키를 입력할 경우 포커스가 이동하는 방향 및 편집 모드 진입 여부를 설정할 수 있습니다.",597
94,"GridView의 enterKeyMove 속성은 Enter 키 입력 시 포커스 이동 방향을 설정하는 속성입니다. ""down""은 아래쪽 셀로 이동, ""right""는 오른쪽 셀로 이동, ""none""은 포커스 이동이 없고, ""edit""는 편집 모드로 이동하며, ""editRight""는 편집 모드로 진입한 후 오른쪽 셀로 이동하고, ""editDown""은 편집 모드로 진입한 후 아래쪽 셀로 이동합니다. 
GridView의 데이터는 Excel 등으로 복사하여 붙여넣기가 가능합니다. 하지만 특정 칼럼이나 그리드 전체의 데이터의 복사하기 및 붙여넣기를 금지할 수 있습니다. 이를 위해 PreventCopy, PreventCopyColumn, PreventPaste, PreventPasteColumn, checkReadOnlyOnPaste, checkReadOnlyOnPasteEnable 속성을 사용할 수 있습니다. 또한 customPasteFormatter 속성을 지정하면 클립 보드에 복사한 데이터를 붙여넣기 할 때 데이터 모양과 값을 변환할 수 있습니다.
GridView와 DataList가 바인딩된 경우, setData(), setJSON(), setXML() 함수를 사용하여 데이터를 설정하거나 추가할 수 있습니다. 또한 GridView와 바인딩된 DataList, LinkedDataList, 혹은 AliasLinkedDataList에 데이터가 없는 경우, noResultMessage 및 noResultMessageVisibleAlways 속성 설정을 통해 ""데이터 없음"" 메시지를 표시할 수 있습니다.
GridView의 정렬 기능은 여러 열의 데이터를 기준으로 오름차순/내림차순 정렬이 가능합니다. sortable, sortEvent, showSortableImage 속성을 사용하여 정렬 가능한 컬럼의 헤더에 화살표 아이콘을 표시할 수 있습니다. 또한 useCtrlOnMultisort 속성을 사용하여 여러 개의 컬럼을 선택한 후 정렬할 수 있습니다. orderByColumn 속성을 사용하여 헤더 컬럼이 병합된 경우 정렬 기준이 되는 컬럼을 지정할 수 있습니다. 라벨 값을 기준으로 정렬할 경우 gridView.column의 sortLabel 속성을 ""true""로 설정하면 됩니다.",621
95,"GridView에서 데이터가 없을 경우 정렬 버튼을 숨기려면 hideSortIconOnNoData=""true"" 속성을 설정합니다. 필터 아이콘을 표시하려면 useFilter=""true"" 속성을 추가하고, 필터링 항목을 목록으로 표시하려면 useFilterList=""true"" 속성을 설정합니다. 정렬 기능과 필터링 기능을 모두 사용하려면 showSortableUseFilter=""true"" 속성을 적용합니다. 사용자가 지정한 필터링 조건을 저장하려면 customFilterBox=""true"" 속성을 사용합니다. 필터링을 수행한 후 필터링 결과만 반환하려면 getFilteredColData() 함수를 사용합니다. 필터링 조건을 목록으로 표시하려면 useFilterList=""true"" 속성을 사용하고, 검색 기능을 함께 제공하려면 useFilterSearch=""true"" 속성을 추가합니다. 필터 상자의 폭을 자동으로 조절하려면 autoFitFilterList=""true"" 속성을 적용합니다. 데이터가 없을 경우 필터 버튼을 숨기려면 hideFilterIconOnNoData=""true"" 속성을 설정합니다. 그룹핑 기능을 사용하려면 groupby() 함수를 사용하거나 groupbyZone=""true"" 속성을 적용합니다.",359
96,"이 문서는 그리드뷰(Gridview)에서 그룹핑(Grouping) 기능을 사용하는 방법에 대해 설명합니다. 그룹핑 기능을 사용하면 데이터를 그룹으로 묶어서 표시할 수 있습니다. 
코드 14-30은 그룹핑 기능을 사용하는 예제 코드입니다. options 객체를 생성하여 그룹핑에 필요한 옵션을 설정한 후, gridView1.groupby(options) 함수를 호출하여 그룹핑을 수행합니다. 
코드 14-31은 showOnlyLastDepth 옵션을 true로 설정하여 그룹핑 헤더에 마지막 단계만 표시하는 예제 코드입니다. 
그룹핑된 각 컬럼의 데이터에 대해 계산식을 사용할 수 있습니다. 표 14-37에서는 지원되는 계산식을 설명합니다. 
그룹핑 영역으로 드래그-앤-드롭하여 그룹핑을 수행할 수 있습니다. 이때, ongroupby 이벤트를 추가하여 그룹핑 조건을 지정해야 합니다. 
그룹핑 영역의 높이와 그룹핑 영역에 표시할 메시지는 groupbyZoneHeight 및 groupbyZoneMessage 속성을 사용하여 지정할 수 있습니다. 
그룹핑을 위해 드래깅할 수 있는 컬럼의 최대 개수는 groupbyMaxCount 속성을 사용하여 지정할 수 있습니다. 
그룹핑 후 선택한 필터 조건을 표시하는 필터 박스가 표시됩니다. 필터 박스는 groupbyFilterBox, groupbyFilterBoxLocation, filterBoxVisibleRowNum 속성을 사용하여 설정할 수 있습니다. 
GridView에 필터링이 설정된 경우, 필터링 조건을 선택한 후 해당 조건으로 필터링된 데이터에 대해서만 그룹핑을 수행할 수 있습니다.",514
97,"customFilterBox=""true"" 속성을 추가하십시오. 필터링과 관련된 useFilterList=""true""와 useFilter=""true"" 속성, 그룹핑과 관련된 groupbyZone=""true""와 groupbyFilterBox=""true"" 속성, 그리고 필터 유지와 관련된 customFilterBox=""true"" 속성이 있습니다. customFilterBox=""true""로 설정하면 필터링이 유지된 채로 그룹핑이 수행됩니다. 필터링 조건과 필터링 + 그룹핑 조건이 모두 표시되며, customFilterBox=""false""로 설정하면 필터링이 풀리고 전체 데이터에 대해 그룹핑이 수행됩니다. 
그룹핑을 취소하려면 clearGroupby() 함수를 사용하면 되며, getGroupbyData() 함수를 사용하면 현재 적용된 그룹핑 조건을 반환합니다. advancedExcelDownload 함수를 이용하여 그룹핑된 상태의 GridView를 Excel 파일로 다운로드할 수 있습니다. 이때 options.groupby=""true""로 설정해야 합니다.
또한, 동일한 데이터가 연속적으로 반복될 경우, 동일한 데이터가 반복되는 셀을 병합할 수 있습니다. 열 병합과 행 병합이 가능합니다.",364
98,"병합 기능에 대한 설명입니다. 열 병합, 행 병합, 열 병합 후 행 병합, 행 병합 후 열 병합, 왼쪽 열 기준 열 병합, 윗 행 기준 행 병합 등 다양한 방법으로 병합이 가능합니다. 병합된 셀들을 해제할 수도 있습니다. 또한, 특정 셀들만 병합하거나 병합을 해제할 수 있으며, 틀 고정된 부분에서만 병합이 이루어지도록 설정할 수도 있습니다. 병합에서 제외할 컬럼을 지정할 수 있는 API도 제공됩니다.",211
99,"14.7.15.6 병합 상태 확인
아래 API를 사용하여 특정 셀의 병합 상태를 확인할 수 있습니다.
표 14-50. 병합 상태 확인 관련 API
getMerged(rowIndex, colIndex);
- rowIndex: 병합 여부를 확인하고 싶은 셀의 행 인덱스
- colIndex: 병합 여부를 확인하고 싶은 셀의 열 인덱스
사용 예
gridView1.getMerged(4, 4);
- (4, 4) 셀의 셀 병합 상태를 반환. (True/False)
14.7.15.7 동일 데이터를 갖는 행 병합
표 14-51. 기능 설명
설명
- 하나의 열, 연속된 행의 공통된 값에 의한 데이터를 병합
- 데이터 간의 연관성을 시각적으로 표현하여 정보 전달 효과를 높임
관련 API
- colMerge(바디): ""true""로 설정
- upperColumn (바디): 하나의 셀 병합 열을 기준으로 다른 열을 병합하도록 기준을 설정
코드 14-45. colMerge & upperColumn
<w2:column id=""pubDate"" style=""height:70px"" inputType=""select"" width=""60"" rowSpan=""2"" dataType="""" allOption="""" chooseOption="""" colMerge=""true"">
    <w2:choices>
        <w2:itemset nodeset=""pubYear/item"">
            <w2:label ref=""label""></w2:label>
            <w2:value ref=""value""></w2:value>
        </w2:itemset>
    </w2:choices>
</w2:column>
<w2:column id=""genre"" style=""height:70px"" inputType=""text"" width=""70"" rowSpan=""2"" displayType=""all"" colMerge=""true"" upperColumn=""pubDate"">
</w2:column>
14.7.16 Excel 업로드 (Import)
Excel 업로드 → GridView 참조.
14.7.17 Excel 다운로드 (Export)
GridView → Excel 다운로드 참조.
14.7.18 CSV 업로드
CSV 업로드 → GridView 참조.
14.7.19 CSV 다운로드
GridView → CSV 다운로드 참조.
14.7.20 여러 GridView를 Excel 파일로 다운로드
GridView 여러 개 → Excel 다운로드 참조.
14.7.21 일반 페이징
표 14-52. 기능 설명
설명
- 별도의 설정 없이 서버로부터 데이터를 받아 페이지로 나누어 표현.
- 그리드를 페이지 별로 표시할 경우 PageList 혹은 PageControl 컴포넌트와 함께 사용 가능.
필요 정보
- 그리드에 표현하는 전체 데이터 건수
- 한 페이지 당 표현하는 데이터 건수
- 각 페이지의 시작 행에 대한 정보
사용 방법
- 페이지 수를 구합니다.
- PageList (혹은 PageControl) 컴포넌트의 setCount(count) API의 인자 값으로 설정합니다.
- 선택된 페이지에 표현할 데이터를 Submission을 통해 서버로 부터 가져옵니다. (PageList 혹은 PageControl 컴포넌트의 onchange 이벤트를 사용.)
<w2:pageList pageSize=""2"" displayFormat=""#"" id=""pageList1"" style=""position:absolute;left:1px;top:410px;width:600px;height:30px;"" buttonShowType=""3"">
    <script ev:event=""onchange(current,before)"" type=""javascript"">
        <![CDATA[
            start = current;
            $p.executeSubmission(""getMovies"");
        ]]>
    </script>
</w2:pageList>
<xf:submission id=""getMovies"" ref=""reqMovies"" target=""resMovies"" action="""" method=""get"" mediatype=""text/xml"" encoding=""UTF-8"" instance="""" replace=""instance"" errorHandler="""" customHandler="""" mode=""asynchronous"" processMsg=""조회중입니다."">
    <script type=""javascript"" ev:event=""xforms-submit-done"">
        <![CDATA[
            var totalCnt = WebSquare.ModelUtil.getInstanceValue('resMovies/rss/channel/total/@filmoTotal');
            if (totalSetYn != true) {
                var quotient = parseInt(totalCnt / display, 10);
                var remainderYn = (totalCnt % display) ? 1 : 0;
                var count = quotient + remainderYn;
                pageList1.setCount(count);
                totalSetYn = true;
            }
            var dataCnt = WebSquare.ModelUtil.getInstanceValue('resMovies/rss/channel/total/@filmoDisplay');
            if (dataCnt != 0) {
                var item = WebSquare.ModelUtil.findInstanceNode(""resMovies/rss/channel/item"");
                grid1.setXML(item);
            }
        ]]>
    </script>
    <script type=""javascript"" ev:event=""xforms-submit"">
        <![CDATA[
            var sub = WebSquare.ModelUtil.getSubmission(""getMovies"");
            sub.action = ""/developGuide/getPagingData.jsp?start="" + start + ""&display="" + display;
        ]]>
    </script>
</xf:submission>
14.7.22 무한 그리드
표 14-53. 기능 설명
설명
- Y축 스크롤이 끝에 이르렀을 때 다음 데이터를 서버로 부터 가져와 그리드에 이어쓰는 방법
관련 API
- loadCount: onscrollend 이벤트 발생 조건으로 사용되는 잔여 행 수 (예: loadCount=""1"" 인 경우 onscrollend 이벤는 스크롤 다운으로 행이 1개 남았을 때 발생.)
<w2:grid baseNode=""item"" repeatNode=""filmo"" id=""grid1"" style=""position: absolute ;left:0px;top:0px;width: 600px;height: 340px;"" valueNode="""" sortable=""true"" resize=""true"" readOnlyBackgroundColor=""#D9E6F3"" readOnly=""false"" hideHeader=""false"" rowNumVisible=""true"" rowNumHeaderValue=""No."" rowStatusVisible=""false"" rowStatusHeaderValue=""상태"" fixedColumn=""2"" focusMode=""both"" focusMove=""true"" keyMoveEditMode=""true"" editModeEvent=""ondblclick"" enterKeyMove=""down"" tooltipDisplay=""true"" oddEvenColorDisplay=""false"" loadCount=""1"">
    ...
    <script type=""javascript"" ev:event=""onscrollend"">
        <![CDATA[
            start++;
            $p.executeSubmission(""getMovies"");
        ]]>
    </script>
</w2:grid>
<xf:submission id=""getMovies"" ref=""reqMovies"" target=""resMovies"" action="""" method=""get"" mediatype=""text/xml"" encoding=""UTF-8"" instance="""" replace=""instance"" errorHandler="""" customHandler="""" mode=""asynchronous"" processMsg=""조회중입니다."">
    <script type=""javascript"" ev:event=""xforms-submit-done"">
        <![CDATA[
            var totalCnt = WebSquare.ModelUtil.getInstanceValue('resMovies/rss/channel/total/@filmoTotal');
            if (totalSetYn != true) {
                output2.setValue(totalCnt);
                totalSetYn = true;
            }
            var dataCnt = WebSquare.ModelUtil.getInstanceValue('resMovies/rss/channel/total/@filmoDisplay');
            if (dataCnt != 0) {
                var item = WebSquare.ModelUtil.findInstanceNode(""resMovies/rss/channel/item"");
                grid1.setXML(item, true);
                output1.setValue(grid1.getRowCount());
            }
        ]]>
    </script>
    <script type=""javascript"" ev:event=""xforms-submit"">
        <![CDATA[
            var sub = WebSquare.ModelUtil.getSubmission(""getMovies"");
            sub.action = ""/developGuide/getPagingData.jsp?start="" + start + ""&display="" + display;
        ]]>
    </script>
</xf:submission>
14.7.23 읽기 전용
eadOnly 속성을 통해 특정 열을 읽기 전용으로 설정할 수 있습니다. 행, 열, 셀에 대한 읽기 전용 설정은 API를 통해서도 가능합니다.",1968
100,"GridView에서 readOnly 설정은 그리드 전체, 행, 열, 셀 별로 적용 가능하며, 각각의 API는 readOnly=""true""/""false"" (기본값: ""false"")로 설정합니다. 또한, 읽기 전용 셀인 경우, 상/하 방향키를 통한 셀간의 이동을 허용하거나 제어할 수 있으며, 이를 위한 API는 readOnly=""true"" ignoreNonEditableCell=""true"" ignoreNonEditableCellTabnter=""true""입니다.
GridView의 표 제목은 captionAuto와 captionTitle 속성을 사용하여 자동으로 생성할 수 있습니다. 이때, captionTitle 속성에 텍스트를 입력하면 해당 텍스트를 기반으로 제목이 생성됩니다. 또한, 각 컬럼의 inputType이 ""text""인 경우, titleAuto=""true"" 설정을 통해 각 셀의 <td>에 title 속성을 자동으로 생성할 수 있습니다. 단, 헤더 또는 바디의 셀들이 합쳐진 경우, 헤더가 두 줄인 경우, inputType=""text""를 제외한 다른 경우에는 titleAuto 속성을 지원하지 않으므로 각 셀의 title 속성을 직접 설정해야 합니다.
GridView에서 각 컬럼의 데이터를 서로 다른 컴포넌트와 맵핑할 수 있습니다. 이를 통해 GridView의 특정 행을 선택할 경우, 해당 행 각 컬럼의 값을 서로 다른 컴포넌트에 표시할 수 있습니다.
마지막으로, GridView에서 contextMenu=""true"" 설정을 추가하면, 그리드를 우클릭하면 컨텍스트 메뉴가 표시됩니다. 이때, 바디에 있는 셀을 우클릭할 때만 컨텍스트 메뉴가 표시되며, 헤더에서는 지원하지 않습니다.",528
101,"GridView 컴포넌트의 다양한 기능과 속성을 설명하고 있다. useHeaderContextMenu 속성을 추가하면 헤더의 셀을 우클릭해도 컨텍스트 메뉴를 표시할 수 있으며, contextMenuAltClick 속성을 추가하면 Alt 키 + 마우스 좌클릭을 통해 컨텍스트 메뉴를 표시할 수 있다. autoFit 속성을 사용하여 컨텍스트 메뉴를 통해 컬럼 폭을 조정할 수 있으며, visibleRowNumFix 속성을 추가하면 GridView의 높이를 설정할 수 있다. drawType 속성을 사용하여 GridView를 그리는 방법을 결정할 수 있으며, Pivot 컴포넌트는 다차원 데이터 분석, 드릴다운, 축 변환, 통계 함수 등 다양한 기능을 제공한다. 그러나 IE10 버전 이상에서만 지원되며, 조회 건수는 약 400,000 Cell을 기준으로 제한하는 것이 좋다. 또한, GridView 조회 시간은 전체 셀의 개수에 영향을 받으므로 셀이 많을수록 조회 시간이 증가한다.",347
102,"이 문서는 Pivot 컴포넌트의 다양한 기능에 대한 설명을 제공합니다. showGrandTotal 속성을 사용하여 총 합계를 표시하거나 숨길 수 있으며, grandTotalDisplayType 속성을 통해 총 합계 표시 위치를 선택할 수 있습니다. allTotalName과 grandTotalName 속성을 사용하여 전체 행 합계와 전체 열 합계의 라벨 값을 지정할 수 있습니다. pivotExcelDownload 함수를 사용하여 Pivot을 Excel 파일로 다운로드하고, autoSizeColumn 속성을 사용하여 컬럼 너비를 자동으로 조정할 수 있습니다. headerYMerge 속성을 사용하여 헤더의 컬럼을 병합하고, noColumnMove 속성을 사용하여 헤더 컬럼 이동을 방지할 수 있습니다.",236
103,"15장. 컨테이너
15.1 FloatingLayer
- 새로운 창을 생성하여 화면에 출력하는 컴포넌트
- 최상위 층에 출력되며, 이동 제어가 가능하다
- 팝업 창 등에 사용된다
15.2 Generator
- 여러 개의 컴포넌트로 구성된 그룹을 한 번에 생성하는 컴포넌트
- 동적으로 컴포넌트를 추가하거나 삭제할 수 있다
- 입력 상자 추가 등 여러 컴포넌트로 구성된 웹 UI를 생성하는 데 사용된다
15.3 Group
- 여러 컴포넌트를 그룹핑하는 컴포넌트
- 그룹에 속한 컴포넌트 전체를 초기화하거나, 그룹에 속한 컴포넌트 전체에 대한 함수 호출이 가능하다
- 전체 레이아웃을 구성하거나, 복잡한 계층 구조를 구현하는 데 사용된다
15.4 ScrollView
- 모바일 전용 터치 스크롤링을 제공하는 컴포넌트
- Group 컴포넌트처럼 하위에 여러 컴포넌트를 포함할 수 있다
15.5 SlideHide
- 슬라이딩을 통해 숨김/표시 기능을 제공하는 컴포넌트
- 이벤트에 따라 특정 layer를 animation으로 표시한다
- 퀵 메뉴와 같이 마우스를 올리면 UI를 잠시 표시하는 상황에서 사용된다
15.6 Switch
- 여러 상황이 가능한 경우, 각 상황에 대한 화면을 구성하고 해당 상황에 맞는 화면을 출력하는 컴포넌트
- 각 상황 별 동적 화면 표시, 슬라이딩 효과 등이 가능하다
- 페이지 이동, 목록 이동 등에 사용된다
15.7 TabControl
- 탭 형태의 화면을 구성하는 컴포넌트
- TabControl 컴포넌트를 그리면 최초 1개의 Tab과 해당 Content 영역이 생성된다
- 각 Content는 Group처럼 하위에 컴포넌트를 포함할 수 있다
- src 속성을 이용하여 외부의 XML을 포함할 수 있으며, 탭 닫기 버튼, 웹 접근성, 키보드 제어 등을 지원한다
15.7.1 탭 프레임 종류 (frameMode)
- IFrame 혹은 WFrame으로 탭을 생성할 수 있다
- wframePreload는 로딩은 하지 않지만, 탭이 비활성화된 상태에서도 해당 탭에 포함된 객체 참조가 가능하다
코드 15-1은 TabControl 내에서 동일한 frameMode 사용을 권장하는 사용 예제이다.",823
104,"이 문서는 WebSquare의 TabControl 기능에 대한 설명서이다. TabControl은 여러 개의 탭을 생성하여 각각의 탭에 다른 화면을 표시할 수 있는 기능을 제공한다. 이 문서에서는 TabControl의 다양한 기능들에 대해 설명한다.
먼저, 탭을 생성하는 방법에 대해 설명한다. WFrame 탭을 생성할 때는 scope 속성을 추가해야 하며, dataObject 옵션을 통해 탭 생성 시 호출할 페이지의 파라미터를 전달할 수 있다. 생성된 탭에서는 $p.getParameter() 함수를 통해 전달받은 파라미터를 확인할 수 있다.
또한, WFrame 탭에서 서브미션을 포함할 경우, 서브미션 실행 시 표시되는 상태창을 WFrame 탭 내부에 표시할 수 있다. 또한, Config.xml 파일의 설정을 변경하여 해당 상태창의 소스를 변경할 수도 있다.
WFrame 탭은 getWindow와 $p.parent API를 통해 참조할 수 있으며, content에 지정된 페이지의 경로를 동적으로 바꿀 경우 getFrame API를 이용할 수 있다.
탭이 여러 개인 경우, tabPosition 속성을 통해 탭을 표시할 위치를 설정할 수 있으며, tabScroll=""true"" 설정을 추가하면 상단에 스크롤과 탭 목록을 표시할 수 있다. 또한, changeActiveTab=""true"" 설정을 추가하면 탭 스크롤 버튼을 통해 선택한 탭을 활성화할 수 있다. 마지막으로, keepDisabledTab=""true"" 설정을 추가하면 부모 TabControl의 탭이 또 다른 TabControl을 포함한 경우, 자식 TabControl의 탭 비활성화 상태를 부모 TabControl 탭의 활성화 상태에 상관없이 유지할 수 있다.
마지막으로, WFrame 탭에서 $open.popUp() 함수를 통해 팝업을 생성할 경우, 팝업을 표시한 프레임을 지정할 수 있다.",563
105,"15.7.10.2 부모-자식 팝업 닫기
$p.openPopup() 함수를 사용하여 탭 화면에서 팝업을 생성하고, 부모 팝업과 해당 부모에 속하는 모든 자식 팝업을 함께 닫을 수 있습니다. 이 기능은 WFrame 탭에서만 동작하며, frameMode=""wframe"" 혹은 frameMode=""wframePreload""로 탭을 생성한 후 TabControl의 frameModal 속성을 ""true""로 설정해야 합니다.
15.7.11 이벤트
15.7.11.1 스크롤 바 버튼을 클릭할 때 호출되는 이벤트
tabScroll=""true"" 속성 설정을 적용할 경우, 스크롤 바에 3개의 버튼이 표시되고, 각 버튼을 클릭할 때마다 이벤트가 발생합니다.
15.8 TableLayout
TableLayout은 HTML5 태그(<colgroup>, <tr>, <td>, <th>)를 추가하여 <table> 태그로 묶어 여러 셀에 컴포넌트를 추가할 수 있는 컴포넌트입니다. 주로 폼 양식 구성에 사용됩니다.
15.9 WidgetContainer
WidgetContainer는 여러 개의 웹 위젯을 한 화면에서 제공하는 컴포넌트입니다. 서버 통신 등을 포함한 업무 화면을 웹 위젯으로 사용할 수 있으며, 업무 화면 및 유틸리티 사용 환경을 개인화할 수 있습니다. WidgetContainer는 2차원 좌표계를 생성하여 위젯을 추가하고, 모든 위젯의 위치 및 크기는 좌표계를 기준으로 결정됩니다.",475
106,"위젯 컨테이너(WidgetContainer)는 동적으로 위젯을 생성하고 관리하는 기능을 제공합니다. 좌표계를 설정하여 위젯을 배치할 수 있으며, 위젯을 추가하거나 삭제하고, 전체 또는 개별 위젯을 가져오는 등의 기능을 제공합니다.
좌표계는 행과 열의 개수로 구성되며, 열의 개수는 고정되어 있고 행의 개수만 증가합니다. mode=""pushpull"" 속성을 사용할 경우, 행의 개수는 고정되어 있고 열의 개수만 증가합니다.
위젯은 WidgetContainer의 addWidgets 함수를 통해서만 동적으로 생성할 수 있으며, XML 상에서는 추가할 수 없습니다. addWidgets 함수는 options 객체 혹은 배열로 지정하여 해당 위젯을 생성합니다. optionsArr에는 unitHeight, unitWidth, x, y, title 등의 속성을 지정할 수 있습니다.
현재 존재하는 위젯 전체를 export하거나, 새로운 위젯 여러 개를 추가할 수 있습니다. exportWidgets 함수를 사용하여 현재 생성된 모든 위젯을 반환하거나, removeWidgetsAll 함수를 사용하여 모든 위젯을 삭제할 수 있습니다. 또한, 개별 위젯을 export하거나 import할 수도 있습니다.
위젯 내부 객체에 접근하기 위해서는 setSrc, getObj, getObjList 함수를 사용할 수 있습니다. 또한, WFrame의 scope=""true"" 설정을 사용할 경우 WidgetContainer 및 포함된 위젯 간의 상호 참조가 가능합니다.
$p.widget 객체는 위젯을 위한 전용 함수로, 위젯으로 사용되는 화면에 대해서만 존재합니다. 위젯으로 사용된 화면의 정보를 얻기 위해서는 $p.widget.getWidgetId, $p.widget.getWidgetContainerId, $p.widget.getWidgetContainer 함수를 사용할 수 있습니다.",518
107,"위젯 컨테이너에서 위젯의 타이틀을 동적으로 변경하거나, 각 위젯에 서로 다른 스타일을 적용하거나, 위젯의 타이틀을 숨기거나, 최대화/최소화를 제어하거나, 위젯을 이동하거나, 리사이징하거나, 버튼을 추가할 수 있습니다. 또한, 윈도우 컨테이너를 사용하여 여러 개의 윈도우를 생성하고, 프레임 종류를 지정할 수 있으며, 윈도우를 고정하거나 고정을 취소할 수 있습니다. 윈도우 생성 시 dataObject 옵션을 사용하여 페이지의 파라미터를 전달할 수 있습니다.",214
108,"윈도우 컨테이너(WindowContainer)는 다양한 윈도우를 생성하고 관리할 수 있는 기능을 제공합니다. 이 기능을 사용하면 윈도우의 생성, 크기 조정, 파라미터 전달, 포커스 제어, 팝업 생성 등을 쉽게 구현할 수 있습니다.
윈도우 생성 시에는 createWindow() 함수를 사용하며, 이 함수를 통해 윈도우의 크기, 제목, 경로, 데이터 등을 설정할 수 있습니다. 윈도우의 크기는 defaultWidth와 defaultHeight 옵션으로 지정할 수 있으며, 윈도우를 생성할 때마다 인덱스가 ""1""씩 증가하고, 윈도우를 닫으면 인덱스가 초기화됩니다.
윈도우 생성 후에는 getFrame() 함수를 사용하여 윈도우의 프레임을 가져올 수 있습니다. 이를 통해 윈도우의 경로를 동적으로 변경하거나, 윈도우에 파라미터를 전달할 수 있습니다. 전달된 파라미터는 $p.getParameter() 함수를 통해 확인할 수 있습니다.
윈도우의 포커스는 setFocus() 함수를 사용하여 지정할 수 있으며, 윈도우 ID나 윈도우 인덱스를 파라미터로 지정합니다. 또한, 윈도우의 인덱스는 getSelectedIndex() 함수를 사용하여 확인할 수 있습니다.
WFrame 윈도우에서는 $open.popUp() 함수를 사용하여 팝업을 생성할 수 있으며, 이 때 프레임을 지정할 수 있습니다. 또한, $p.openPopup() 함수를 사용하여 탭 화면에서 생성한 팝업과 함께 부모 팝업을 닫을 수 있습니다.
마지막으로, WFrame 윈도우의 src 화면이 서브미션을 포함할 경우, 상태창을 WFrame 탭 내부에 표시할 수 있습니다. 이 때, Config.xml 파일의 <processMsgFrameURL> 항목 설정을 변경하여 해당 상태창의 소스를 변경할 수도 있습니다.",568
109,"윈도우 정렬, 자동 정렬, 정렬 아이콘 위치 설정, 최대 윈도우 수 동적 변경, 윈도우를 항상 열린 상태로 유지, 윈도우 최대화, 윈도우 최소화, 윈도우 드래깅 시 윈도우 표시, 현재 선택된 윈도우 구분, 전체 윈도우 닫기, 특정 윈도우를 제외한 나머지 윈도우 닫기, 윈도우 닫기 방지 등 WindowContainer에서 사용 가능한 기능들이 소개되어 있다. setArrangeWindows() 함수를 사용하여 윈도우를 네 가지 방법으로 정렬할 수 있으며, autoArrange 속성을 사용하면 여러 개의 윈도우를 정렬해서 표시한 후 특정 윈도우를 닫을 경우, 남아 있는 윈도우를 다시 정렬할 수 있다. controlIconPosition 속성을 사용하여 윈도우 정렬 아이콘의 표시 위치를 결정할 수 있으며, setWindowMaxNum() 함수를 이용하면 WindowContainer에서 열 수 있는 최대 윈도우 개수를 동적으로 변경할 수 있다. stopMinimizeOnNameLayer=""true"" 설정을 적용하면, 네임레이어 클릭에 상관 없이 윈도우를 항상 열린 상태로 유지할 수 있다. WindowContainer에서 생성한 윈도우는 최대화 버튼을 클릭하거나 윈도우 타일을 더블-클릭하여 최대화할 수 있으며, 최소화 버튼을 클릭하거나 네임 레이어를 클릭하여 최소화할 수 있다. windowMoveType=""overflow""인 경우, WindowContainer 밖으로 윈도우를 드래깅 하고 마우스 커서 위치에 따라 윈도우를 표시할 수 있으며, closeOthers() 함수를 사용하여 현재 활성화된 윈도우, 혹은 주어진 windowID나 uniqueID에 해당하는 윈도우를 제외한 모든 윈도우를 닫을 수 있다. useFixButton=""true"" 설정을 사용할 경우 네임 레이어에 표시되는 각 창의 이름 옆에 창 닫기 방지 버튼을 표시할 수 있으며, 전체 창 닫기 버튼을 통해 창 닫는 방법을 설정할 수 있다.",652
110,"WindowContainer는 다양한 기능을 제공합니다. fixWindow 및 unfixWindow 함수를 사용하면 창 닫기 방지 버튼을 동적으로 활성화/비활성화할 수 있습니다. nameLayerMove 속성을 사용하여 네임 레이어 상의 윈도우 순서 변경 가능 여부를 설정할 수 있습니다. nameLayerMove=""true"" 및 nameLayerRearrange=""true"" 설정을 추가하면 핀 버튼으로 고정한 윈도우를 네임레이어의 맨 앞으로 이동할 수 있습니다. changeActiveWindow=""true"" 속성을 적용하면 네임 레이어 상의 스크롤 버튼을 클릭하여 윈도우를 선택하고 활성화할 수 있습니다. useWindowScrollButton 속성을 사용하여 현재 윈도우 목록을 확인할 수 있는 버튼을 툴바에 표시할 수 있습니다. onwindowload/onwindowunload 이벤트를 지정할 수 있으며, onminimizebtnclick/onrestorebtnclick 이벤트는 창 크기 최소화/복원 버튼을 클릭할 때 발생합니다.",302
111,"WebSquare.uiplugin.secret은 사용자 입력을 ""*""로 표시하는 InputBox 형태의 컴포넌트이다. HTML <input> 태그의 type=password와 유사한 인터페이스를 제공하며, Type uiplugin Property를 통해 class 속성과 동일한 기능을 제공한다. disabled 속성을 통해 컴포넌트를 비활성화할 수 있으며, displaymessage 속성을 통해 검증 결과가 실패일 경우 메시지를 표시할 수 있다. 컴포넌트 ID는 id 속성을 통해 설정하며, mandatory 속성을 통해 필수 선택 여부를 설정할 수 있다. 입력 가능한 최대 Byte길이와 최대 길이는 각각 maxByteLength와 maxLength 속성을 통해 설정할 수 있으며, 최소 Byte길이와 최소 길이는 각각 minByteLength와 minlength 속성을 통해 설정할 수 있다. 이외에도 readOnly, placeholder, ref, tabIndex, tooltip 등의 속성을 제공하며, commit, getDataType, setValue, validate 등의 메서드를 사용할 수 있다.",303
112,"Secret 컴포넌트는 입력한 값을 안전하게 보호하기 위해 사용되며, 다양한 속성과 이벤트를 제공한다. 
- nextTabID: Tab 키를 눌렀을 때 선택되는 컴포넌트의 ID
- onFocusClass: onFocus시 적용할 class명
- placeholder: HTML5의 placeholder와 동일한 기능을 제공하여 사용자에게 알려줘야 할 힌트 문구 등을 명시
- readOnly: readonly의 여부로 HTML의 readonly속성과 동일한 기능을 제공
- readOnlyClass: readOnly 상태 일때 적용할 class명
- ref: DataCollection의 value 경로. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용
- refSync: Secret이 ref와 연동된 경우, key가 입력되는 즉시 ref를 갱신
- tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서
- title: HTML의 title 속성과 동일하여 마우스 오버 시, title로 저장한 값이 툴팁으로 표시됨
- tooltip: 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트로, 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시
- tooltipLocaleRef: 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key
- userData1~3: 사용자 정의 데이터 속성으로, getUserData() API를 통해 설정한 값을 얻어올 수 있음
- validator: 유효성 체크 함수 이름으로, 컴포넌트에서 blur가 발생하는 시점에 실행됨
- onblur, onchange, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, onviewchange: 각각의 이벤트가 발생할 때 실행되는 함수
- commit(): secret이 ref와 연동된 경우 secret창에 보이는 값을 ref에 반영하는 함수
- getDataType(): dataType 속성값을 반환
- getValue(): 컴포넌트의 value를 반환
- setDisabled(): 컴포넌트의 disabled 속성을 설정
- setStyle(): 컴포넌트의 property별 style을 설정
- setValue(): 컴포넌트의 value를 설정
- show(): 컴포넌트를 화면에 보이도록 설정
- trigger(): 컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",720
113,"secret.trigger(""onviewchange"", [1,2]); 메소드는 ""onviewchange"" 이벤트를 발생시킵니다. 
validate() 메소드는 컴포넌트의 유효성 검사를 실행합니다. 이 메소드는 다음과 같은 유효성 관련 속성값을 사용합니다: displaymessage=""true"", mandatory, minlength, maxlength, minByteLength, maxByteLength, typedescription. 
아래는 validate() 메소드의 반환 값 샘플입니다. 
 mandatory 속성을 지정합니다. 
var returnValue = secret1.validate(); 
 (반환 값) - false (input의 값이 없을 경우) 
 (반환 값) - true (input의 값이 있을 경우) 
만약 displaymessage=""true"" 속성을 지정하고 유효성 검사에서 false가 반환될 경우, 엔진에서 내부에서 설정한 ""필수 입력 항목입니다""가 표시됩니다.",244
114,"WebSquare.uiplugin.mapchart는 데이터를 지도로 시각화하는 컴포넌트이다. 이 컴포넌트는 대한민국의 전국 지도 데이터를 다양한 형태로 시각화하여 표현할 수 있다. 
이 컴포넌트의 속성 중 일부는 다음과 같다. accessibility는 웹 접근성을 지원하기 위해 select 태그를 이용하여 별도의 정보 제공 유무를 설정한다. dataLists는 지도와 연동할 dataList들을 ,를 구분자로 나열한다. dataMapPath는 지도를 표현하는 json데이터가 위치한 폴더 경로를 설정한다. event_deselect는 이벤트가 발생한 지점의 지도에 선택이 해제된 효과를 표현하는 이벤트를 지정한다. event_select는 이벤트가 발생한 지점의 지도에 선택된 효과를 표현하는 이벤트를 지정한다. 
이 컴포넌트의 메소드 중 일부는 다음과 같다. addClass는 컴포넌트에 CSS class를 추가한다. addMapEvent는 지도에 필요한 이벤트를 직접 추가한다. changeMap은 인자로 넘겨준 code에 해당하는 지도가 그려지도록 화면을 변경한다. getCurrentMap은 현재 그려진 지도의 코드값을 가져온다. hide는 웹스퀘어 컴포넌트를 화면에서 숨긴다. setDisabled는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setSize는 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. show는 웹스퀘어 컴포넌트를 화면에 표시한다.",494
115,"웹스퀘어 컴포넌트에서는 toggleClass, trigger, unbind, visible 등의 메소드를 사용하여 특정 class를 추가하거나 제거하고, 이벤트를 발생시키거나 제거할 수 있습니다. accessibility 속성을 이용하여 웹 접근성을 지원하며, dataLists와 dataMapPath를 이용하여 지도와 연동할 dataList들을 지정할 수 있습니다. 또한, dataMapRatio_level0, dataMapRatio_level1, dataMapRatio_level2를 이용하여 지도의 간략화 비율을 설정할 수 있습니다. 이벤트 관련 속성으로는 event_deselect, event_drag, event_drilldown, event_drillup, event_select, event_tooltipoff, event_tooltipon, event_zoom 등이 있으며, 각각의 이벤트에 대한 처리를 지정할 수 있습니다. 컴포넌트 ID를 이용하여 Script에서 해당 컴포넌트에 접근할 수 있으며, setTooltipStrFunc 메소드를 이용하여 tooltip을 보여줄 때, 사용자 정의 string을 가져오기 위한 함수명을 설정할 수 있습니다. onaftermapchange, onbeforemapchange, onmapclick, onmapdatachange, onmapdblclick, onmapmousemove, onmapmouseout, onmapmouseover 등의 이벤트가 발생할 때, 각각의 이벤트 핸들러 함수에서 필요한 처리를 지정할 수 있습니다. addClass 메소드를 이용하여 컴포넌트에 CSS class를 추가할 수 있으며, addMapEvent 메소드를 이용하여 지도에 필요한 이벤트를 직접 추가할 수 있습니다.",439
116,"d3에서 지원하는 이벤트만 사용 가능하며, 이벤트를 추가하거나 핸들러 함수를 추가할 수 있는 함수인 addMapEvent(), bind() 등과 함께 사용할 수 있다. svg에 패턴을 만들기 위한 함수인 addPattern()을 사용하여 하나의 패턴을 만들 수 있다. 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당할 수 있는 함수인 bind()를 사용하여 이벤트를 할당할 수 있다. 컴포넌트의 class를 변경할 수 있는 함수인 changeClass()를 사용하여 class를 변경할 수 있다. changeMap() 함수를 사용하여 현재 지도를 변경할 수 있으며, changeMapPath() 함수를 사용하여 path의 지도로 변경할 수 있다. createPattern() 함수를 사용하여 svg에 적용할 패턴을 생성할 수 있다. drillup() 함수를 사용하여 현재 지도의 부모 지도가 그려지도록 지도를 변경할 수 있다. focus() 함수를 사용하여 웹스퀘어 컴포넌트에 포커스를 줄 수 있다. getCurrentMap() 함수를 사용하여 현재 그려진 지도의 코드값을 가져올 수 있다. getDisabled() 함수를 사용하여 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환할 수 있다. getGenerator() 함수를 사용하여 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환할 수 있다. getID() 함수를 사용하여 웹스퀘어 컴포넌트의 ID를 반환할 수 있다. getInitStyle() 함수를 사용하여 컴포넌트의 초기 스타일을 반환할 수 있다. getOpacity() 함수를 사용하여 웹스퀘어 컴포넌트의 불투명도를 반환할 수 있다. getOriginalID() 함수를 사용하여 웹스퀘어 컴포넌트의 originalID를 반환할 수 있다. getParentMap() 함수를 사용하여 현재 지도의 부모 지도의 코드값을 가져올 수 있다. getPluginName() 함수를 사용하여 웹스퀘어 컴포넌트의 이름(pluginName)을 반환할 수 있다. getPosition() 함수를 사용하여 웹스퀘어 컴포넌트의 위치(left, top)를 반환할 수 있다.",612
117,"이 기술 문서는 웹스퀘어 컴포넌트에서 사용 가능한 메소드들에 대한 설명을 제공한다. 각 메소드는 해당 컴포넌트에서 사용 가능하며, 반환 값과 매개 변수 등이 명시되어 있다. 
- getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환한다. 
- getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환한다. 
- getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환한다. 
- getSize(sizeName): 웹스퀘어 컴포넌트의 크기(width, height)를 반환한다. %로 설정된 경우, 픽셀로 변환된 값을 반환한다. 
- getStyle(propertyName): 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. 
- getStyleValue(style): [deprecated] getStyle 사용 권장. 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환한다. 
- getTitle(): 컴포넌트의 title 속성 값을 반환한다. 
- getUdcHome(): UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. 파일명은 마지막 .xml까지 포함하며, .xml을 제외한 경로는 getUdcRoot를 사용해서 반환한다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환된다. 
- getUdcRoot(): UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. 파일명을 포함하지 않으며, 파일명을 포함한 경로는 getUdcHome을 사용해서 반환한다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환된다. 
- getUserData(key): setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다. 
- hasClass(className): 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. 
- hide(): 웹스퀘어 컴포넌트를 화면에서 숨긴다. display:none; 및 visibility:hidden; CSS를 적용한다. 
- removeClass(className): 웹스퀘어 컴포넌트에서 class를 삭제한다. 기본적으로 addClass를 통해 추가된 class만 삭제 가능하며, 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 설정을 추가해야 한다. 
- setDisabled(disabled): 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. 
- setEventPause(evList, flag): 지정한 이벤트를 중단한다. evList에 null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제된다. 
- setInitStyle(property): 컴포넌트의 초기 스타일을 복구한다.",929
118,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. property 속성을 지정하지 않으면 모든 속성의 초기 값으로 복구된다. setOpacity 함수는 웹스퀘어 컴포넌트의 불투명도를 설정하며, opacity(불투명도)를 설정한다. setPosition 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. setReadOnly 함수는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setScale 함수는 지도의 배율을 설정한다. setSize 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. setStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. setUserData 함수는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. show 함수는 웹스퀘어 컴포넌트를 화면에 표시한다. toggleClass 함수는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시킨다. unbind 함수는 컴포넌트에서 이벤트를 제거한다. visible 함수는 엔진 내부적으로 CSS visibility 속성을 설정한다.",390
119,"이 문서는 WebSquare Studio의 Design Guide OPS chapter 24.html을 다루고 있습니다. 이 문서에서는 CKEditor를 사용한 컴포넌트에 대한 속성과 CSS Overriding, 그리고 주의사항과 팁에 대해 설명합니다.
컴포넌트의 속성으로는 id, imageLoadURL, language, menubar, style, subDir, tabIndex, transParentDisabled이 있습니다. 이 중 id는 컴포넌트의 고유한 식별자이며, imageLoadURL은 업로드된 이미지를 조회하는 URL을 설정합니다. language는 언어셋을 설정하며, menubar는 에디터의 툴바 종류를 설정합니다. style은 에디터의 스타일을 inline으로 추가하며, subDir은 업로드된 파일이 저장될 디렉토리를 설정합니다. tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 설정하며, transParentDisabled는 disabled 상태일 때 색이 변하지 않도록 설정합니다.
CSS Overriding에서는 w2editor, cke_skin_office2003, cke_editor, cke_top, cke_contents, cke_bottom, inlineweb 등의 클래스를 사용하여 CKEditor의 디자인을 수정할 수 있습니다.
주의사항과 팁으로는 WebSquare에서 자동으로 제공되는 에디터가 CKEditor이며, imageLoadURL에서는 ""fileName""을 parameter로 받아서 처리해야 한다는 점이 있습니다. 또한, subDir을 설정할 때는 websquare.xml에 정의된 경로를 사용해야 합니다.",423
120,"이 문서는 FlashWebSquare에서 Flash를 사용하는 방법에 대한 설명입니다. Flash 컴포넌트는 embed 태그로 표현됩니다. 이 컴포넌트에서 사용되는 속성들은 다음과 같습니다.
- accesskey: 객체의 단축 접속키(key)를 지정합니다.
- align: 태그에 대한 align 값을 지정하며 브라우저 윈도우 내에 파일의 위치를 지정하는 방식을 결정합니다.
- atomicselection: 객체의 전체선택 가능 여부를 지정합니다.
- autostart: 자동시작 여부를 지정합니다.
- bgcolor: 객체의 배경색을 지정합니다.
- class: 사용자가 임의의 class를 정의할 때 사용합니다.
- dir: 객체의 내용을 읽는 순서를 지정합니다.
- disabled: 객체의 비활성화 여부를 지정합니다.
- groupid: groupid 값을 지정합니다.
- hidden: 객체의 숨김 처리 여부를 지정합니다.
- hidefocus: 객체의 포커싱 인식 여부를 지정합니다.
- id: 사용자가 임의의 id를 정의할 때 사용합니다.
- lang: 사용된 언어 코드를 지정합니다.
- language: 작성된 스크립트 언어를 지정합니다.
- loop: 객체의 반복 재생 횟수 및 여부를 지정합니다.
- name: 객체의 Name 속성을 지정합니다.
- palette: 객체에 전경 또는 배경색을 지정합니다.
- pluginspage: 객체에 사용된 plug-in의 주소를 입력합니다.
- quality: 객체의 품질을 지정합니다.
- ShowControls: 콘트롤 영역 표시 여부를 지정합니다.
- ShowDisplay: 디스플레이 영역 표시 여부를 지정합니다.
- ShowStatusBar: 상태바 영역 표시 여부를 지정합니다.
- src: 객체의 로딩 주소(URL)를 지정합니다.
- title: 일반적인 title 값입니다.
- units: Width와 Height 속성의 단위를 지정합니다.
- unselectable: Element의 선택 비활성 유무를 지정합니다.
- wmode: 객체의 z-index를 처리하는 방법을 지정합니다.
주의사항 및 팁으로, Flash 컴포넌트를 더블클릭하면 파라미터 대화창에서 설정이 가능하다는 것이 있습니다.",639
121,"WebSquare.uiplugin.autoComplete는 검색 결과를 선택 목록에 표시하는 기능을 제공하는 컴포넌트이다. SelectBox의 확장 버전으로 사용자가 입력한 값을 초성 검색하여 그 결과를 표시하며, 사용자가 입력한 값을 기반으로 실시간 서버 통신을 수행한 후 항목을 나열하는 기능도 제공한다. AutoComplete의 최상위는 <div>를 하위는 복합 태그를 이용한다. 
AutoComplete의 속성 중 interactionMode가 true인 경우, 빈 문자열의 검색을 허용할 수 있다. 또한, 사용자가 입력한 값이 선택 목록의 값과 정확하게 일치할 경우, nextTabID로 지정된 컴포넌트로 포커스를 이동할 수 있다. 
AutoComplete는 선택 안내 메시지를 표시할 수 있는데, chooseOptionLabel로 선택 안내 메시지로 표시할 텍스트의 label을 정의하고, chooseOptionValue로 선택 안내 메시지로 표시할 텍스트의 value를 정의할 수 있다. 
AutoComplete는 선택 항목 목록에 적용할 애니메이션 효과를 설정할 수 있으며, 선택 항목 목록이 열리는 방향도 지정할 수 있다. 또한, 선택 항목 목록에서 특정 항목을 disable 처리하는 기능도 제공한다. 
AutoComplete는 사용자 입력에 따라 서버로부터 데이터를 동적으로 받아 항목을 생성할 수 있는 interactionMode 속성을 제공한다. 또한, 사용자 입력 값을 기반으로 선택 항목을 제안하기 위해 검색할 대상을 지정할 수 있다. 
AutoComplete는 선택 항목 목록 정렬 방법과 기준을 설정할 수 있으며, 선택 항목 목록에서 특정 항목을 감추는 기능도 제공한다. 
AutoComplete는 사용자 정의 데이터 속성을 설정할 수 있으며, 선택 항목 목록에서 마우스 휠 사용 허용 여부도 설정할 수 있다. 
AutoComplete는 사용자가 선택 항목을 변경하거나, 값이 변경될 때 발생하는 이벤트와 핸들러 함수를 동적으로 할당할 수 있다. 또한, 컴포넌트에 CSS class를 추가하거나, 웹스퀘어 컴포넌트의 class를 변경할 수 있다.",659
122,"이 문서는 웹스퀘어 컴포넌트의 다양한 메서드와 속성에 대한 설명을 제공합니다. disableEdit(onoff)는 사용자가 마우스 클릭 시 편집 상태로 들어가지 않고 항목 목록만 표시합니다. focus()는 웹스퀘어 컴포넌트에 포커스를 줍니다. getDataListInfo()는 AutoComplete와 바인딩된 DataList를 반환합니다. getDisabled()는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다. getGenerator()는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다. getID()는 웹스퀘어 컴포넌트의 ID를 반환합니다. getInitStyle(CSS)는 컴포넌트의 초기 스타일을 반환합니다. getItem(index)는 주어진 index에 해당하는 항목의 정보를 담은 객체를 반환합니다. getItemCount()는 선택 항목 개수를 반환합니다. getNextTabID()는 nextTabID 속성의 설정 값을 반환합니다. getOpacity()는 웹스퀘어 컴포넌트의 불투명도를 반환합니다. getOriginalID()는 웹스퀘어 컴포넌트의 originalID를 반환합니다. getPluginName()은 웹스퀘어 컴포넌트의 이름(pluginName)을 반환합니다. getPosition(positionName)은 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. getReadOnly()는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. getScope()는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. getScopeWindow()는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. getSearchedItems()는 검색된 모든 항목을 배열로 반환합니다. getSelectedIndex()는 선택된 항목의 인덱스를 반환합니다. getSelectedRow()는 선택된 항목의 정보를 담은 객체를 반환합니다. getSize(sizeName)은 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. getStyle(propertyName)은 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getText(isOriginal)은 선택된 항목의 label 값을 반환합니다. getTitle()은 컴포넌트의 title 속성 값을 반환합니다. getUdcHome()은 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다. getUdcRoot()는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. getUserData(key)는 setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다. getValue()는 현재 선택된 항목의 value 값을 반환합니다. hasClass(className)는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide()는 컴포넌트를 화면에서 숨깁니다. initAutoComplete()는 AutoCompelete 컴포넌트에 대해 초기화를 실행합니다. openTable()은 선택 항목 목록을 여는 기능입니다. removeClass(className)은 웹스퀘어 컴포넌트에서 class를 삭제합니다. setDelimiter()는 autoComplete delimiter를 동적으로 변경합니다. setDisabled(disabled)는 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다. setDisplyaMode()는 autoComplete displayMode를 동적으로 변경합니다. setDummyData(value, label)는 임의의 선택 항목 값(value와 label)을 설정합니다. setEditMode()는 입력 창에 포커스를 표시합니다. setEnableColumn(columnId, enableColumnFalseValue)는 enableColumn 속성을 동적으로 설정합니다. setEventPause(evList, flag)는 지정한 이벤트를 중단합니다. setGridItemset(obj)는 바인딩된 gridViewItemset을 변경합니다. setInitStyle(property)는 컴포넌트의 초기 스타일을 복구합니다. setItem(label, value, nodest, index)는 주어진 값으로 선택 항목을 설정합니다. setItemSet(nodeset, label, value)는 선택 항목 목록을 설정합니다. setMaxLength(maxlength)는 maxlength를 설정합니다. setNextTabID(componentID, componentScope)는 nextTabID 속성을 설정합니다. setNodeSet(nodeset, label, value)는 선택 항목 목록을 설정합니다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정합니다. setPosition(left, top, mode)는 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. setRef(path)는 ref 속성을 설정합니다. setStyle(propertyName, value)는 명시한 스타일을 주어진 값으로 설정합니다. setText(label, isOriginal)은 인자로 받은 label에 해당하는 항목을 선택합니다. setTitle(title)는 컴포넌트의 title 속성을 설정합니다. setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. setValue(value)는 인자로 받은 value에 해당하는 값을 갖는 항목을 선택합니다. setVisibleColumn(columnId, visibleColumnFalseValue)는 visibleColumn 속성을 동적으로",1495
123,"AutoComplete 컴포넌트의 속성들에 대한 설명이다. chooseOption은 선택 안내 메시지를 표시할 때 사용하는 속성이며, chooseOptionValue는 선택 안내 메시지로 표시할 텍스트의 value를 정의한다. class는 HTML의 class 속성과 동일하며, closeonmouseleave은 subLayer로 열린 경우, 선택 항목 목록에서 마우스 커서가 빠져나갈 때 목록을 닫을지 여부를 설정한다. delimiter는 선택 항목 목록에 value와 label을 함께 표시할 때 사용하는 구분자를 설정하며, displayMode는 선택 항목의 표현 방법을 설정한다. disableEdit은 마우스 클릭 시, 목록만 표시하고 수정 모드로 진입하지 않도록 설정한다. displayFormatter는 컴포넌트의 value를 포맷하는 함수의 이름을 설정하며, enableColumn은 선택 항목 목록에서 특정 항목을 disable 처리하는 기능을 설정한다. escape는 <>&""를 HTML Escape 문자로 변환하여 화면에 표시하도록 설정한다. hideListOnFocus는 편집 모드 진입 시 목록을 보여줄지에 대한 여부를 설정하며, mandatory는 필수 선택 적용 여부를 설정한다.",356
124,"AutoComplete 컴포넌트의 옵션 설명입니다. ""false""는 필수 선택 적용하지 않음을 의미하고, ""true""는 필수 선택 적용을 의미합니다. nextTabByEnter은 Enter키 입력시 다음 탭으로 포커스를 이동시킬지 여부를 결정하며, nextTabID는 Tab 키로 이동할 경우 선택되는 컴포넌트의 ID를 지정합니다. noResult은 사용자가 입력한 값에 대한 검색 결과가 없을 때, 화면에 표현하는 텍스트 처리 방식을 결정합니다. ref는 DataCollection과 바인딩되고 noResult=""first""인 경우 유효합니다. placeholder는 HTML5의 placeholder와 동일한 기능을 제공합니다. preventKeyList는 웹스퀘어 엔진 내부에서 처리하는 키 동작을 막는 기능입니다. preventWheelEvent는 마우스 휠 이벤트 금지 여부를 결정하며, readOnly는 읽기 전용 적용 여부를 결정합니다. renderType은 브라우저에 표현될 레이아웃 구조를 결정하며, search는 사용자 입력 값 검색 방법을 결정합니다. selectedData는 선택한 값이 바인딩된 DataList의 목록에 없을 경우 선택한 값 유지 여부를 결정합니다. sortMethod는 선택 항목 목록 정렬 방법을 결정하며, submenuSize는 선택 항목 목록 크기 결정 방법을 결정합니다. submission은 interactioMode=""true""인 경우 호출할 submission의 ID를 결정하며, submissionFunc은 interactioMode=""true""인 경우 호출할 함수를 결정합니다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 결정하며, textAlign은 선택 항목 목록 상의 텍스트 정렬을 결정합니다. title은 마우스 오버 시, 툴팁으로 표시될 값입니다. tooltipClass는 툴팁에 적용할 스타일 class를 결정하며, tooltipDisplay는 사용자가 선택한 값에 대한 툴팁 표시 여부를 결정합니다. tooltipTime은 툴팁 표시 시간을 결정하며, type은 HTML의 type 속성과 동일합니다. useItemLocale은 아이템 목록 다국어 사용 여부를 결정합니다.",651
125,"useKeywordHighlight: 검색 결과 중 사용자 입력값에 별도의 class를 적용하여 다르게 표시할지 여부를 설정하는 옵션입니다. 기본 값은 false이며, true로 설정하면 검색된 키워드에 ""w2autoComplete_keyword"" class가 적용됩니다.
useLocale: 다국어 사용 여부를 설정하는 옵션입니다. 기본 값은 false이며, true로 설정하면 선택 항목의 label에 클라이언트의 다국어 key를 이용하여 표현할 수 있습니다. chooseOptionLabel에 대해서도 다국어 key가 필요합니다.
useMousewheel: 선택 항목 목록 상에서 마우스 휠 사용 허용 여부를 설정하는 옵션입니다. 기본 값은 true이며, false로 설정하면 마우스 휠 사용이 불가능합니다.
userData1~3: 사용자 정의 데이터 속성을 설정하는 옵션입니다. 각각의 속성은 getUserData 함수를 통해 값을 얻어올 수 있습니다.
visibleColumn: 선택 항목 목록에서 특정 항목을 감추는 기능을 설정하는 옵션입니다. 선택 항목 목록이 DataList와 바인딩된 경우, 표시 여부를 알려주는 컬럼을 지정할 수 있습니다. 해당 속성은 setVisibleColumn 함수를 통해 동적으로 설정 가능합니다.
visibleColumnFalseValue: visibleColumn 사용 시 목록에서 특정 항목을 감추기 위한 조건에 해당하는 값입니다. 기본 값은 ""0"", ""false"", ""FALSE"", 혹은 ""F""입니다.
visibleRowNum: 표현 될 항목 행수를 설정하는 옵션입니다. ""1""로 설정하는 것은 비권장합니다.
wmode: wmode를 사용하여 선택 항목 목록을 object 태그보다 상위에 표시하는 옵션입니다. 기본 값은 false이며, true로 설정하면 선택 항목 목록이 object(ActiveX, Flash 등)에 가려질 경우 사용할 수 있습니다.
onafteredit: 사용자가 선택 항목을 변경하고, 해당 변경이 완전히 처리된 후에 발생하는 이벤트입니다.
onchange: 사용자가 선택 항목을 변경할 경우 발생하는 이벤트입니다.
oneditenter: 엔터키를 눌렀을 때 발생하는 이벤트입니다.
oneditkeyup: 키보드에서 키를 눌렀다 놓았을 때 발생하는 이벤트입니다.
onitemclick: 선택 항목 목록(itemTable) 상에서 항목이 클릭된 경우 발생하는 이벤트입니다.
onselected: 선택 항목 목록(itemTable)에서 항목이 클릭된 이후에 발생하는 이벤트입니다.
ontoggleclick: 토글 버튼(▼)이 클릭된 경우 발생하는 이벤트입니다.
onviewchange: 키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생하는 이벤트입니다.
addClass: 컴포넌트에 CSS class를 추가하는 함수입니다.
addItem: 선택 항목을 추가하는 함수입니다.
bind: 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하는 함수입니다.
changeChooseOption: chooseOption 속성을 변경하는 함수입니다.
changeClass: 웹스퀘어 컴포넌트의 class를 변경하는 함수입니다.",903
126,"웹스퀘어 컴포넌트의 class 속성에서 직접 정의된 class를 삭제하려면 config.xml 파일에 <removeDefaultClass value=""true"" /> 설정을 추가해야 합니다. oldClassName과 newClassName을 입력하여 class를 변경할 수 있습니다. 
disableEdit(onoff) 함수는 사용자가 마우스를 클릭할 때, 편집 상태로 들어가지 않고 항목 목록만 표시되도록 합니다. 
웹스퀘어 컴포넌트에 포커스를 주려면 focus() 함수를 사용합니다. 
getDataListInfo() 함수는 AutoComplete와 바인딩된 DataList를 반환합니다. 반환되는 객체는 nodeset, label, value, id를 포함합니다. 
getDisabled() 함수는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다. 
getGenerator() 함수는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다. 
getID() 함수는 웹스퀘어 컴포넌트의 ID를 반환합니다. 
getInitStyle(CSS) 함수는 컴포넌트의 초기 스타일을 반환합니다. initStyle 속성을 true로 설정한 컴포넌트만 유효합니다. CSS를 지정하지 않으면 모든 정보를 출력합니다. 
getItem(index) 함수는 주어진 index에 해당하는 항목의 정보를 담은 객체를 반환합니다. 반환되는 객체는 label, orgLabel, value를 포함합니다. 
getItemCount() 함수는 선택 항목 개수를 반환합니다. 
getNextTabID() 함수는 nextTabID 속성의 설정 값을 반환합니다. 
getOpacity() 함수는 웹스퀘어 컴포넌트의 불투명도를 반환합니다. 반환 값은 0 ~ 1 사이의 실수입니다. 
getOriginalID() 함수는 웹스퀘어 컴포넌트의 originalID를 반환합니다. originalID는 Scope 기능을 사용할 경우 존재합니다. 
getPluginName() 함수는 웹스퀘어 컴포넌트의 이름(pluginName)을 반환합니다. 
getPosition(positionName) 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환합니다. 
getReadOnly() 함수는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. 
getScope() 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환합니다. 
getScopeWindow() 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환합니다.",789
127,"변수 scope에 textbox1의 ScopeWindow를 할당하고, scope.wframe11과 textbox1의 Scope가 같은지 비교한 결과는 true이다. getSearchedItems() 함수는 검색된 모든 항목을 배열로 반환하며, 반환되는 배열은 label, value, orgLabel, index를 속성으로 가지는 객체를 원소로 갖는다. getSelectedIndex() 함수는 선택된 항목의 인덱스를 반환하며, 선택된 항목이 없는 경우 -1을 반환한다. getSelectedRow() 함수는 선택된 항목의 정보를 담은 객체를 반환하며, gridViewItemset으로 바인딩된 경우 선택된 행을 반환한다. getSize(sizeName) 함수는 웹스퀘어 컴포넌트의 크기를 반환하며, sizeName에 따라 반환되는 값이 달라진다. getStyle(propertyName) 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getStyleValue(style) 함수는 getStyle 함수를 사용하는 것을 권장하며, 해당 CSS 속성 값을 반환한다. getText(isOriginal) 함수는 현재 선택된 항목의 label 값을 반환하며, isOriginal이 true인 경우 원래의 label 값을 반환한다. getTitle() 함수는 컴포넌트의 title 속성 값을 반환한다. getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, 파일명을 포함하지 않는다. getUserData(key) 함수는 setUserData로 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다. getValue() 함수는 현재 선택된 항목의 value 값을 반환한다. hasClass(className) 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide() 함수는 컴포넌트를 화면에서 숨긴다. initAutoComplete() 함수는 AutoComplete 컴포넌트에 대해 초기화를 실행한다. openTable() 함수는 선택 항목 목록을 여는 기능을 수행한다.",578
128,"웹스퀘어 컴포넌트에서 제공하는 다양한 메서드들에 대해 설명하고 있다. removeClass 메서드는 웹스퀘어 컴포넌트에서 class를 삭제하는데 사용되며, config.xml 파일에 설정을 추가하여 컴포넌트의 속성으로 직접 정의된 class를 삭제할 수 있다. setDisabled 메서드는 웹스퀘어 컴포넌트의 disabled 속성을 설정하는데 사용되며, setDummyData 메서드는 임의의 선택 항목 값(value와 label)을 설정하는데 사용된다. setEnableColumn 메서드는 enableColumn 속성을 동적으로 설정하는데 사용되며, setEventPause 메서드는 지정한 이벤트를 중단하는데 사용된다. setGridItemset 메서드는 바인딩된 gridViewItemset을 변경하는데 사용되며, setInitStyle 메서드는 컴포넌트의 초기 스타일을 복구하는데 사용된다. setItem 메서드는 선택 항목을 설정하는데 사용되며, setItemSet 메서드는 선택 항목 목록을 설정하는데 사용된다. setMaxLength 메서드는 maxlength를 설정하는데 사용되며, setNextTabID 메서드는 nextTabID 속성을 설정하는데 사용된다. 마지막으로, setOpacity 메서드는 웹스퀘어 컴포넌트의 불투명도를 설정하는데 사용된다.",406
129,"이름 타입 필수 여부 설명 
value Number Y 불투명도를 0과 1 사이의 실수 값으로 설정합니다. 
setPosition(left, top, mode) 
 
Number Y 
 
웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. 
left Number Y 설정할 left 위치 값 또는 null. 
top Number Y 설정할 top 위치 값 또는 null. 
mode String N 위치 설정 방법. [default: absolute, delta] 
absolute: 입력된 값을 위치로 설정합니다. 
delta: 현재 위치에 입력된 left 및 top 값을 추가합니다. 
 
setReadOnly(readOnly) 
 
Boolean Y 
 
웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. 
eadOnly Boolean Y readOnly 속성 활성화 여부. (""true"": 활성화, ""false"": 비활성화) 
 
setRef(path) 
 
String Y 
 
ef 속성을 설정합니다. DataCollection과 연동시 ""data:""라는 prefix를 꼭 붙여야 합니다. 명시하지 않을 경우, InstanceData의 XPath로 인식됩니다. 
path String Y ref의 경로 
 
setStyle(propertyName, value) 
 
String Y 
 
명시한 스타일을 주어진 값으로 설정합니다. 
propertyName String Y 설정하려는 스타일 명 
value String Y 설정할 값 
 
setText(label, isOriginal) 
 
String Y 
 
인자로 받은 label에 해당하는 항목을 선택합니다. 
label String Y 선택하려는 항목의 label 
isOriginal Boolean N [default: false, true] label을 포맷팅이 적용되지 않은 원래 값으로 찾을 것인지에 대한 여부. ""false"" (기본 값) 포매팅이 적용된 값을 반환합니다. ""true"" 원래 값을 반환합니다. 
 
setTitle(title) 
 
String Y 
 
컴포넌트의 title 속성을 설정합니다. 
title String Y 속성으로 설정할 값 
 
setUserData(key, value) 
 
String Y 
 
웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. 
key String Y 설정할 데이터의 key 
value String Y 설정한 데이터의 value 
 
setValue(value) 
 
String Y 
 
인자로 받은 value에 해당하는 값을 갖는 항목을 선택합니다. 
value String Y 선택하려는 항목의 값 
 
setVisibleColumn(columnId, visibleColumnFalseValue) 
 
String Y 
 
visibleColumn 속성을 동적으로 설정합니다. visibleColumn 속성으로 설정된 컬럼은 AutoComplete와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있습니다. visibleColumn 속성은 AutoComplete의 선택 항목 목록 중 특정 항목을 감추기 위한 용도로 사용됩니다. selectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작합니다. 
columnId String Y visibleColumn으로 설정할 컬럼의 ID. (감출 항목에 대한 데이터를 가지고 있는 컬럼) 
visibleColumnFalseValue String N 목록을 감추기 위한 조건에 해당하는 값. 
 
show(displayType) 
 
String N 
 
웹스퀘어 컴포넌트를 화면에 표시합니다. CSS display 속성을 주어진 값으로 설정하고 ""visibility: show;""를 적용합니다. 
displayType String N 적용할 CSS display 속성의 값. 
block : display: block;을 적용합니다. (기본 값) 
inline : display: inline;을 적용합니다. 
none : display: none;을 적용합니다. 
"""" : show 수행 이전의 display 속성 값으로 복구합니다. 
 
toggleClass(className) 
 
String Y 
 
웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가합니다. 
className String Y 추가/삭제할 class 
 
trigger(type, array) 
 
String Y 
 
컴포넌트에서 특정 이벤트를 발생시킵니다. 
type String Y 발생시킬 이벤트 
array Array N 이벤트 핸들러에 전달할 파라미터 배열 
 
unbind(type, function) 
 
String N 
 
컴포넌트에서 이벤트를 제거합니다. 
type String N 제거할 이벤트.",1139
130,"이 함수는 컴포넌트를 화면에서 보이거나 숨기는 기능을 합니다. 그러나 이 함수는 더 이상 권장되지 않으며, 대신 show/hide 함수나 setStyle 함수를 사용하는 것이 좋습니다. 이 함수는 CSS의 visibility 속성을 설정하는 역할을 하며, flag 값이 true인 경우 visibility: visible;로 설정되고, false인 경우 visibility: hidden;으로 설정됩니다.",118
131,"이 문서는 WebSquare의 사용자 가이드의 4번째 파트인 컴포넌트 파트를 다루고 있습니다. 이 파트에서는 13개의 다양한 컴포넌트에 대해 설명합니다. 이 중에는 폼, 그리드, 컨테이너, 네비게이션, 차트, 프레임, HTML5, 팝업 등이 있습니다. 이 컴포넌트들은 웹 애플리케이션을 구축하는 데 필수적인 요소들입니다. 이 가이드는 이러한 컴포넌트들의 사용 방법과 예제 코드를 제공하여 사용자들이 쉽게 이해하고 적용할 수 있도록 도와줍니다.",209
132,"데이터 통신
데이터 통신은 웹스퀘어에서 서버와 클라이언트 간의 데이터 교환을 의미합니다. 데이터 통신은 데이터 수집, 별칭 데이터 수집 및 제출로 구성됩니다.
22. Data Collection
데이터 수집은 사용자가 입력한 데이터를 수집하는 프로세스입니다. 웹스퀘어는 다양한 유형의 데이터 수집을 지원합니다. 예를 들어, 텍스트 상자, 라디오 버튼, 드롭다운 목록 등이 있습니다.
23. Alias Data Collection
별칭 데이터 수집은 데이터 수집을 보다 쉽게 만드는 기능입니다. 별칭 데이터 수집을 사용하면 사용자가 입력한 데이터를 다른 이름으로 저장할 수 있습니다. 이 기능은 데이터 수집을 보다 효율적으로 만들어 줍니다.
24. Submission
제출은 사용자가 입력한 데이터를 서버로 보내는 프로세스입니다. 웹스퀘어는 다양한 방법으로 데이터를 제출할 수 있습니다. 예를 들어, HTTP POST, 이메일, FTP 등이 있습니다.",315
133,"본문:
80 websquare guide Snippets Guide OPS back matter 01.html. 찾아보기찾아보기
해석:
이 문장은 웹스퀘어 가이드의 Snippets Guide OPS back matter 01.html 파일을 찾아보라는 지시를 내리는 것입니다.",74
134,"WebSquare.uiplugin.input은 HTML의 <input type=""text"">와 유사한 인풋 박스로, 포맷 지정, 입력 가능 문자 지정, 입력값 검증 등의 기능을 제공합니다. adjustMaxLength는 dataType이 number이며 제일 처음이 부호(-, +)일 때 maxlength값 조절 여부를 나타내며, allowChar는 허용 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어 있으며 한글/한자 등의 경우 blur 시점에 적용됩니다. applyFormat은 formated 된 value의 값의 적용 범위로, all의 경우, value와 display된 값이 동일하게 적용되며 입력하는 동안에 format이 적용됩니다. autocomplete는 HTML5의 자동완성 기능 사용 여부를 나타내며, autoFocus는 nextTabID가 지정되어 있는 경우, maxByteLength 지정값과 일치할 경우 자동으로 focus를 이동시킬지 여부를 나타냅니다. byteCheckIgnoreChar는 maxByteLength를 사용하여 입력값의 길이를 계산할 때, 제외할 문자를 지정하며, class는 HTML의 class 속성과 동일한 기능을 제공합니다. customModelFormatter는 dataCollection과 바인딩 시, dataCollection에 값이 저장되기 전에 실행되는 사용자 정의 함수이고, customModelUnformatter는 dataCollection과 바인딩 시, dataCollection에서 값을 읽어올 때 값을 반환하기 전에 실행되는 사용자 정의 함수입니다. dataType은 컴포넌트 value의 dataType을 명시하며, disabled는 컴포넌트 비활성 여부를 나타냅니다. displayFormat은 엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며 excel의 서식을 적용하는 방식처럼 value의 format을 적용 할 수 있습니다. displaymessage는 validate() 검증 결과가 실패일 경우, 메세지를 표시합니다. editType은 사용자가 컴포넌트 클릭 시 결과 동작을 지정하며, enterBlur은 엔터키 입력시 blur시키고 blur 이벤트를 발생 시킬지의 여부를 나타냅니다. escape는 <>&""를 HTML Escape 문자로 변환하여 화면에 표시합니다. fireEventOnInvalid은 validation에 실패했을 때 이벤트를 발생시킬지의 여부를 나타내며, id는 컴포넌트 ID를 나타냅니다. ignoreChar는 무시 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어 있으며 한글/한자 등의 경우 blur 시점에 적용됩니다. imeMode는 ime-mode(css) 값을 설정하며, initValue는 초기의 input에 설정된 초기값을 나타냅니다. inputMode는 웹표준 속성으로 데이터 유형에 따른 키보드 유형을 제공하며, invalidMessage는 displaymessage=""true""이고 validate() 검증 결과가 실패인 경우 표시되는 메시지를 나타냅니다. invalidMessageFunc은 validate() 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름입니다. ioFormat은 사용자가 data를 입력하는 순서와 format 매칭시켜주는 기능이며, ltrim은 문자열 왼쪽 공백 제거 여부를 나타냅니다. mandatory는 필수 선택 적용 여부를 나타내며, validate 함수를 통해 입력값을 검증할 경우 필수 입력을 확인합니다. maskFormat은 jQuery Mask Plugin과 유사한 기능을 제공하며 # 대신 숫자를 대신 바꿉니다. maskFormatModelExcludeChar는 maskFormat을 사용하고 dataCollection과 바인딩 시, dataCollection에 저장할 때 제외할 char을 지정하며, maskFormatModelExcludeCharValue는 maskFormatModelExcludeChar가 적용되어 있을 때 getValue() 실행 시 헤딩 문자열을 제외하고 결과값을 리턴할지에 대한 여부를 나타냅니다. maxByteLength는 입력 가능한 최대 Byte 길이로 엔진에서 maxByteLength 이상의 글자를 입력하면 자동으로 잘라냅니다. maxlength는 입력 가능한 최대 길이로 엔진에서 maxLength 이상의 글자를 입력하면 자동으로 잘라냅니다. minByteLength은 validate API를 호출 할 때 엔진에서 최소 Byte 길이 체크 시에 참조하며, minlength는 validate API를 호출 할 때 엔진에서 최소 길이 체크 시에 참조합니다. nextTabByEnter는 nextTabID가 지정되어 있는 경우, Enter 키 입력시 nextTabID-컴포넌트로 포커스를 이동시킬지에 대한 여부를 나타내며, nextTabID는 Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID를 나타냅니다. numberMask는 화폐 단위 변경을 위해 dataType = ""number"" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값입니다. onFocusClass는 onFocus시 적용할 class명을 나타내며, placeholder는 HTML5의 placeholder와 동일한 기능을 제공합니다. preventCopyPaste는 컴포넌트의 value에 대해 copy&paste 방지 여부를 나타내며, readOnly는 readonly의 여부로 HTML의 readonly 속성과 동일한 기능을 제공합니다. readOnlyClass는 readOnly 상태 일때 적용할 class명을 나타내며, readOnlyFocusEvent는 input 객체가 readOnly 상태일 때 focus 이벤트를 발생시킬지에 대한 여부를 나타냅니다. ref는 바인딩한 DataMap의 Key 혹은 DataList의 Column을 나타내며, refSync는 Input이 ref와 연동된 경우",1558
135,"이벤트 종류에 대한 설명과 함께 각 이벤트가 발생하는 상황을 나열하고 있다. Method Summary는 웹스퀘어 컴포넌트에서 사용 가능한 함수들을 간략하게 설명하고 있다. 각 함수는 해당 컴포넌트의 속성값을 변경하거나 반환하는 역할을 한다. adjustMaxLength는 dataType이 number이며 부호(-, +)가 입력될 때 maxlength값을 조절하는 속성이다. allowChar는 입력 가능한 문자를 정규식으로 지정하는 속성이다. applyFormat은 formated된 값의 적용 범위를 설정하는 속성이다. dataType이 ""text""인 경우는 display만 가능하다.",197
136,"HTML5의 autocomplete 속성은 브라우저마다 동작 방식이 다르며, autoFocus, nextTabID, maxByteLength, byteCheckIgnoreChar, class, customModelFormatter, customModelUnformatter, dataType, disabled, displayFormat, displayFormatter, displaymessage, editType, enterBlur, escape, euroMask, fireEventOnInvalid, id, ignoreChar, imeMode, initValue, inputMode, invalidMessage, invalidMessageFunc, ioFormat, ltrim, mandatory, maskFormat, maskFormatModelExcludeChar, maskFormatModelExcludeCharValue, maxByteLength 등의 속성을 제공한다. 이 중 일부 속성은 다음과 같다.
- autoFocus: nextTabID가 지정되어 있고, maxByteLength 지정값과 일치할 경우 자동으로 focus를 이동시킬지 여부를 결정한다. 단, 한글이 마지막으로 입력된 경우에는 글자가 완성된 이후 추가 입력이 일어났을 때 focus를 이동시킨다.
- byteCheckIgnoreChar: maxByteLength를 사용하여 입력값의 길이를 계산할 때, 제외할 문자를 지정한다.
- class: HTML의 class 속성과 동일한 기능을 제공하며, CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다.
- dataType: 컴포넌트 value의 dataType을 명시하며, 해당 값은 엔진에서 제공하는 displayFormat 등의 속성에서 참조한다.
- disabled: 컴포넌트 비활성 여부를 결정한다.
- displayFormat: 엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며, excel의 서식을 적용하는 방식처럼 value의 format을 적용할 수 있다.
- displayFormatter: 컴포넌트의 value를 포맷하는 함수 명을 지정한다.
- displaymessage: validate() 검증 결과가 실패일 경우, 메세지를 표시한다.
- editType: 사용자가 컴포넌트 클릭 시 결과 동작을 지정한다.
- enterBlur: 엔터키 입력시 blur시키고 blur이벤트를 발생 시킬지의 여부를 결정한다.
- escape: <>&""를 HTML Escape 문자로 변환하여 화면에 표시할지 여부를 결정한다.
- euroMask: 화폐단위 변경을 위해 dataType = ""euro"" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값을 지정한다.
- id: 컴포넌트 ID를 지정한다.
- imeMode: ime-mode(css) 값을 설정한다.
- initValue: 초기의 input에 설정된 초기값을 지정한다.
- inputMode: 웹표준 속성으로 데이터 유형에 따른 키보드유형을 제공한다.
- invalidMessage: validate() 검증 결과가 실패일 경우, 메시지를 표시한다.
- ltrim: 문자열 왼쪽 공백 제거 여부를 결정한다.
- mandatory: 필수 선택 적용 여부를 결정한다.
- maskFormat: jQuery Mask Plugin과 유사한 기능을 제공하며, # 대신 숫자를 대신 바꾼다.
- maxByteLength: 입력 가능한 최대 Byte길이를 지정한다.",856
137,"이 속성들은 Input 컴포넌트에서 사용되는 속성들이다. maxLength 속성은 입력 가능한 최대 길이를 설정하며, maxByteLength 속성은 최대 Byte 길이를 설정한다. 이때, byteCheckEncoding 설정 값에 따라 한글은 2byte 또는 3byte로 계산된다. minLength 속성은 최소 길이를 설정하며, nextTabByEnter 속성은 Enter키 입력시 다음 컴포넌트로 포커스를 이동시킬지 여부를 설정한다. numberMask 속성은 화폐 단위 변경을 위해 dataType이 ""number""로 설정되었을 때 적용되는 마스킹 값이다. onFocusClass 속성은 onFocus시 적용할 class명을 설정하며, placeholder 속성은 InputBox의 값이 비어 있을 때 표시되는 힌트 문구를 설정한다. preventCopyPaste 속성은 value에 대해 copy&paste 방지 여부를 설정하며, readOnly 속성은 readonly 여부를 설정한다. readOnlyClass 속성은 readOnly 상태 일때 적용할 class명을 설정하며, readOnlyFocusEvent 속성은 input객체가 readOnly 상태일 때 focus 이벤트를 발생시킬지 여부를 설정한다. ref 속성은 바인딩한 DataMap의 Key 혹은 DataList의 Column을 설정하며, refSync 속성은 Input이 DataMap과 ref로 연동되고 refSync=""true""인 경우, key가 입력되는 즉시 ref를 갱신한다. rtrim 속성은 문자열 오른쪽 공백 제거 여부를 설정하며, rupeeMask 속성은 화폐 단위 변경을 위해 dataType이 ""rupee""로 설정되었을 때 적용되는 마스킹 값이다. showPlaceHolderOnReadOnly 속성은 읽기전용 모드에서도 placeholder 속성으로 지정된 값을 표시할지 여부를 설정한다. tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정한다. title 속성은 마우스 오버 시, title로 저장한 값이 툴팁으로 표시되며, tooltip 속성은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 설정한다. tooltipFormatter 속성은 tooltip 값을 변환에 사용될 사용자 함수명을 정의하며, tooltipLocaleRef 속성은 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정한다. trim 속성은 문자열 양쪽 공백 제거 여부를 설정하며, type 속성은 HTML의 type속성과 동일한 기능을 제공한다. useMonthYearFormat 속성은 dataType이 ""date""이고 useMonthYearFormat 속성이 적용된 inputCalendar와 바인딩 시 동일한 기능을 제공할 수 있도록 설정한다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성으로, getUserData API를 통해 설정한 값을 얻어올 수 있다. validateOnCheckMaxByteLength 속성은 ignoreChar 및 allowChar 설정을 통해 허락된 문자만 maxByteLength만큼 검증할지 여부를 설정하며, validateOnInput 속성은 oninput 이벤트 시점에 input 컴포넌트의 유효성을 검사할지의 여부를 설정한다. 마지막으로, validator 속성은 유효성 체크 함수 이름을 설정한다.",953
138,"이벤트
- onclick: 컴포넌트를 클릭했을 때 발생
- ondblclick: 컴포넌트를 더블 클릭했을 때 발생
- oneditenter: 엔터키를 눌렀을 때 발생
- oneditfull: 입력된 값이 maxByteLength과 같을 경우 발생
- oneditkeyup: 키보드에서 키를 눌렀다 놓았을 때 발생
- onfocus: 포커스를 얻었을 때 발생
- oninputinvalid: validation에 실패했을 때 발생하는 이벤트
- onkeydown: 키보드에서 키를 눌렀을 때 발생
- onkeypress: 키보드에서 키를 눌렀을 때(누르고 있는 동안에도) 발생
- onkeyup: 키보드에서 키를 눌렀다 놓았을 때 발생
- onmousedown: 마우스를 클릭 했을 때(마우스를 누르는 순간) 발생
- onmousemove: 마우스 포인터가 이동될 때 발생
- onmouseout: 마우스가 지정된 영역이나 링크 위에서 벗어났을 때 발생
- onmouseover: 마우스가 지정된 영역이나 링크 위에 놓일 때 발생
- onmouseup: 마우스 버튼을 눌렀다 놓을 때 발생
- ontooltiphide: 툴팁이 사라질 때 발생
- ontooltipshow: 툴팁이 나타날 때 발생
- onviewchange: 값이 변경된 경우 발생
메소드
- addClass(className): 컴포넌트에 CSS class를 추가
- bind(eventType, function): 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당
- changeClass(oldClassName, newClassName): 웹스퀘어 컴포넌트의 class를 변경
- commit(): input이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수
- focus(): 웹스퀘어 컴포넌트에 포커스를 줌
- focusNextTabOrder(): nextTabID가 설정되어 있는 경우, nextTabID에 해당하는 컴포넌트로 포커스를 이동
- focusPreTabOrder(): 자신이 nextTabID로 설정되어 있는 경우, 자신을 nextTabID로 지정한 컴포넌트로 포커스를 이동
- getDataType(): dataType 속성값을 반환
- getDisabled(): 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환
- getDisplayFormat(): 현재 컴포넌트에 설정 된 displayFormat을 반환
- getDisplayFormatter(): 현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환
- getDisplayValue(): 현재 보여지는(format이 적용 된) 값을 반환
- getFormattedValue(): formatted된 input의 값을 반환",801
139,"getFormattedValue( )
- Return 타입: String
- formatted된 input의 값 반환
- Sample
```javascript
input1컴포넌트의 dataType이 number이고 displayFormat을 ""#,###""으로 적용하고 1000000을 입력 한 경우
var returnValue = input1.getFormattedValue();
eturn 예시 )""1,000,000""
```
getGenerator( )
- Return 타입: Object
- 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)
- Sample
```javascript
부모 Generator가 자식으로 Trigger를 생성한 예제
 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨.
scwin.trigger1.onclick = function(){
    console.log(this.getGenerator());
}
```
getID( )
- Return 타입: String
- 웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)
- Sample
```javascript
 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.
function fn_validCheck(tmpObj){
    var compID = tmpObj.getID();
}
 위의 예제 에서 tmpObj가 ""input1"" ID를 가지고 있는 경우,
 (반환 값) ""input1""
```
getInitStyle( CSS )
- Return 타입: String
- 컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)
- Parameter
  - CSS: String, N, 속성 (지정하지 않으면 모든 정보 출력)
- Sample
```javascript
 사용 예
var initStyle = input1.getInitStyle(""background-color"");
```
getNextTabID( )
- Return 타입: String
- nextTabID 속성의 설정 값을 반환. (관련 속성) nextTabID
- Sample
```javascript
 사용 예
var nextTabID = input1.getNextTabID();
```
getOpacity( )
- Return 타입: Integer
- 웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS의 opacity 속성 값을 반환.
- Sample
```javascript
 inputBox 컴포넌트에 opacity CSS를 적용.
 inputBox 컴포넌트의 opacity 값을 반환.
var returnValue = input1.getOpacity();
 returnValue는 0 ~ 1 사이의 실수.
 (반환 값) ""0.2""
```
getOriginalID( )
- Return 타입: String
- 웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)originalID는 Scope 기능을 사용할 경우 존재. scope=""true""인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + ""_"")가 추가되는 방식으로 변경됨. originalID는 이 때, prefix가 추가되기 전 ID를 의미.
- Sample
```javascript
 WFrame을 사용하는 다중 화면 구조 예시
 WFrame을 포함한 메인 화면 (main.xml)
 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)
 text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.
 getID 실행
textbox1.getID(); // 실행 결과는 ""wframe1_textbox1""
 getOriginalID 실행
textbox1.getOriginalID(); // 실행 결과는 ""textbox1""
```
getPluginName( )
- Return 타입: String
- 웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)
- Sample
```javascript
 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.
var commObj = {};
commObj.fn_makeReqData = function(tmpObj){
    var tmpID = tmpObj.getID(); // 컴포넌트 ID
    var tmpCompType = tmpObj.getPluginName(); // 컴포넌트 이름
    if(tmpCompType == ""input""){
        //..로직..
    }else if(tmpCompType == ""gridView""){
        //..로직 ..
    }else{
        //..로직..
    }
};
```
getPosition( positionName )
- Return 타입: Number
- 웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.
- Parameter
  - positionName: String, Y[left, top] 위치 종류
- Sample
```javascript
 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,
 (예제) 위의 inputBox 컴포넌트의 top 값을 확인
var returnValue = input1.getPosition(""top"");
 픽셀 단위의 위치 값이 반환됨.
 (반환 값) 10
```
getReadOnly( )
- Return 타입: Boolean
- 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)
- Sample
```javascript
 컴포넌트의 readOnly 속성 값 확인 예제
var returnValue = componentId.get",1505
140,"getUdcHome( )는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot( )는 UDC 파일 경로를 반환한다. getUserData( key )는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, getValue( )는 컴포넌트의 value를 반환한다. hasClass( className )는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하며, hide( )는 컴포넌트를 화면에서 숨긴다. removeClass( className )는 웹스퀘어 컴포넌트에서 class를 삭제하며, setAllowChar( allowChar )는 allowChar 속성값을 변경한다. setDefaultValue( initValue )는 컴포넌트의 initValue를 설정하며, setDisabled( disabled )는 컴포넌트의 disabled 속성을 설정한다. setDisplayFormat( format )는 컴포넌트의 displayFormat 속성을 설정하며, setDisplayFormatter( formatter )는 컴포넌트의 displayFormatter 속성을 설정한다. setEventPause( evList, flag )는 지정한 이벤트를 중단하거나 중단을 해제한다. setInitStyle( property )는 컴포넌트의 초기 스타일을 복구한다. setIoFormat( ioFormat, displayFormat )는 input의 ioFormat 속성을 설정한다. setMaxByteLength( maxByteLength )는 maxByteLength를 동적으로 설정하며, setMaxLength( maxLength )는 maxLength를 설정한다. setNextTabID( componentID, componentScope )는 nextTabID 속성을 설정한다. setOpacity( value )는 웹스퀘어 컴포넌트의 불투명도를 설정한다.",474
141,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. opacity, placeholder, 위치, readonly, ref, 크기, CSS 속성, 임의의 데이터, 값 설정, 화면 표시, class 추가/삭제, 이벤트 발생, 이벤트 제거, ref 바인딩 해제, 유효성 검사 등이 가능합니다. 각 기능에 대한 파라미터와 예제 코드가 제공됩니다. 유효성 검사에서는 관련 속성값을 통해 검사를 실행하며, 결과값은 Boolean으로 반환됩니다.",164
142,"유효성 검사와 관련된 속성으로, displaymessage=""true""는 검사 실패 시 Engine에 설정된 메시지를 alert으로 표시하도록 설정하는 것이다. mandatory, minLength, maxLength, minByteLength, maxByteLength은 검사 항목을 정의하는 속성으로, validateObject() 함수를 사용하여 유효성 검사 결과 객체를 반환한다. 반환된 객체에는 callerId, type, value 등의 속성이 있으며, 이를 통해 검사 대상 컴포넌트 ID, 검사 항목, 검사 결과 값 등을 확인할 수 있다. visible(flag)는 CSS visibility 속성을 설정하는 함수로, show/hide 혹은 setStyle 사용을 권장한다.",187
143,"WebSquare.uiplugin.audio는 오디오 사용을 지원하는 UI 플러그인이다. 이 플러그인은 autoplay, class, controls, id, loop, muted, preload와 같은 속성을 제공한다. autoplay는 오디오를 자동으로 재생하며, class는 HTML의 class 속성과 동일한 기능을 제공한다. controls는 브라우저가 제공하는 재생 도구를 표시하고, id는 컴포넌트 ID를 지정한다. loop는 오디오를 반복 재생하며, muted는 음소거로 재생한다. preload는 오디오 버퍼링에 대한 정의를 제공한다. 이 플러그인은 CSS 파일이나 style 블록에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다. 또한, 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능하다. 이 플러그인은 PropertyEventMethod을 지원하며, 자세한 내용은 찾아보기를 통해 확인할 수 있다.",302
144,"외부 CSS 파일을 참조할 때 주의할 점은, 현재 WebSquare XML에서는 @import 구문을 지원하지 않는다는 것입니다. 따라서 import 구문 대신 개별 파일을 별도로 import하거나 하나의 파일로 통합하여 사용해야 합니다. 또한 WebSquare에서 CSS 적용 순서는 stylesheet.css가 가장 먼저 적용되며, 사용자가 작성한 참조 CSS 파일은 프로젝트 Explorer에서 추가하여 XML이 참조하게끔 해야 합니다. 이를 위해 직접 참조하는 구문을 넣거나, Design View에서 CSS 파일을 끌어 넣는 방법을 사용할 수 있습니다.",189
145,"컨텍스트 루트는 프로젝트의 최상위 루트 경로이며, 루트('/') 이외의 이름으로 설정하면 프로젝트 내에서 참조하는 경로(링크 타입의 외부 js 및 css 참조)와 xml, css, js 내의 이미지 경로 등 모두 컨텍스트 루트를 포함한 경로여야 합니다. 프로젝트 내에 파일을 열어 외부 파일들의 경로를 살펴보고 컨텍스트 루트를 변경하는 것이 좋습니다. 컨텍스트 루트는 Project Explorer -> 해당 프로젝트 오른쪽 클릭 -> Properties -> WebSquare -> Context Root에서 설정할 수 있습니다.",201
146,"WebSquare.uiplugin.multiselect는 다중 선택을 지원하는 SelectBox 형태의 컴포넌트이다. appearance, class, dataListAutoRefresh, defaultClass, disabled, displaymessage, escape, id, invalidMessage, invalidMessageFunc, mandatory, nextTabID, ref, renderType, separator, tabIndex, tooltip, tooltipLocaleRef, useItemLocale, useLocale, userData1, userData2, userData3, validator 등의 속성을 가진다. onblur, onchange, onclick, ondblclick, onfocus, onrowclick, onviewchange 등의 이벤트를 발생시키며, addClass, addItem, bind, changeClass, deleteItem, deleteSelectedItems, focus, getAllValue, getDisabled, getGenerator, getID, getIdxValue, getInitStyle, getItemCount, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSelectedIndex, getSize, getStyle, getStyleValue, getText, getTitle, getUdcHome, getUdcRoot, getUserData, setValue, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setRef, setSelectedIndex, setSize, setStyle, setText, setUserData, show, toggleClass 등의 메소드를 제공한다.",296
147,"웹스퀘어 컴포넌트의 trigger(type, array) 함수는 특정 이벤트를 발생시키고, unbind(type, function) 함수는 이벤트를 제거합니다. unbindRef() 함수는 ref 바인딩을 해제하며, validate() 함수는 컴포넌트의 유효성 검사를 실행합니다. visible(flag) 함수는 선택 항목의 표현 방식을 설정합니다. appearance 속성은 선택 항목의 표현 방식을 설정하며, defaultClass 속성은 기본적으로 적용할 class를 설정합니다. dataListAutoRefresh 속성은 SelectBox의 선택 대상 목록이 DataList와 바인딩된 경우, DataList 자동 갱신 여부를 설정합니다. mandatory 속성은 필수 선택 적용 여부를 설정하며, nextTabID 속성은 Tab 키로 이동할 경우 선택되는 컴포넌트의 ID를 설정합니다. separator 속성은 선택된 항목들이 여러 개인 경우 구분자로 사용할 문자를 설정합니다. tooltip 속성은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 설정합니다. validator 속성은 유효성 체크 함수 이름을 설정합니다. addItem(value, label, index, refresh) 함수는 선택 항목을 추가합니다.",354
148,"이 함수들은 웹스퀘어 컴포넌트에서 사용 가능하며, 각각의 기능을 수행한다. addItem() 함수는 항목을 추가하고, bind() 함수는 이벤트와 핸들러 함수를 동적으로 할당한다. changeClass() 함수는 컴포넌트의 class를 변경하고, deleteItem() 함수는 주어진 index에 해당하는 항목을 삭제한다. deleteSelectedItems() 함수는 선택된 항목을 삭제하고, focus() 함수는 컴포넌트에 포커스를 준다. getAllValue() 함수는 모든 항목의 value를 반환하고, getDisabled() 함수는 컴포넌트의 disabled 속성 값을 반환한다. getGenerator() 함수는 컴포넌트를 생성한 부모 Generator 객체를 반환하고, getID() 함수는 컴포넌트의 ID를 반환한다. getIdxValue() 함수는 해당 index의 항목의 value를 반환하고, getInitStyle() 함수는 컴포넌트의 초기 스타일을 반환한다. getItemCount() 함수는 선택 항목 개수를 반환하고, getOpacity() 함수는 컴포넌트의 불투명도를 반환한다. getOriginalID() 함수는 컴포넌트의 originalID를 반환하고, getPluginName() 함수는 컴포넌트의 이름(pluginName)을 반환한다.",365
149,"getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.
getReadOnly( ) : 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환.
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.
getSelectedIndex( separator ) : 선택된 항목의 인덱스를 반환. 여러 항목이 선택된 경우, separator를 사용하여 반환함. separator를 설정하지 않을 경우, 공백(space)이 구분자로 사용됨.
getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환. %로 설정된 경우, 픽셀로 변환된 값을 반환.
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환.
getStyleValue( style ) : [deprecated] getStyle 사용 권장. 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.
getText( separator ) : 현재 선택된 항목의 label을 반환. 항목이 여러 개인 경우, separator를 구분자로 하여 반환. separator를 설정하지 않은 경우 space를 구분자로 사용.
getTitle( ) : 컴포넌트의 title 속성 값을 반환.
getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. 파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.
getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환. 파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.
getUserData( key ) : setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환.
getValue( separator ) : 컴포넌트의 선택된 항목들의 value를 반환. 항목이 여러 개인 경우, separator를 구분자로 하여 반환. separator를 설정하지 않은 경우 space를 구분자로 사용.
hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인.
hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨김.",822
150,"웹스퀘어 컴포넌트에서는 CSS의 display:none; 및 visibility:hidden;을 적용하여 컴포넌트를 숨길 수 있습니다. 또한, removeClass()를 통해 컴포넌트에서 class를 삭제할 수 있습니다. 이때, config.xml 파일에 <removeDefaultClass value=""true"" /> 설정을 추가하여 직접 정의된 class를 삭제할 수 있습니다. setDisabled()를 사용하여 컴포넌트의 disabled 속성을 설정할 수 있으며, setEventPause()를 사용하여 이벤트를 중단할 수 있습니다. setInitStyle()를 사용하여 초기 스타일을 복구할 수 있고, setOpacity()를 사용하여 불투명도를 설정할 수 있습니다. setPosition()을 사용하여 컴포넌트의 위치를 설정하고, setReadOnly()를 사용하여 readOnly 속성을 설정할 수 있습니다. setRef()를 사용하여 ref 속성을 설정하고, setSelectedIndex()를 사용하여 인덱스에 해당하는 항목을 선택할 수 있습니다. setSize()를 사용하여 컴포넌트의 크기를 설정하고, setStyle()을 사용하여 스타일 값을 설정할 수 있습니다. setText()를 사용하여 label에 해당하는 항목을 선택하고, setUserData()를 사용하여 임의의 데이터를 설정할 수 있습니다. 마지막으로, show()를 사용하여 컴포넌트를 화면에 표시할 수 있습니다.",386
151,"inline : display: inline;을 적용하고, none : display: none;을 적용한다. """" : show 수행 이전의 display 속성 값으로 복구한다. toggleClass( className )는 특정 class를 추가하거나 제거한다. trigger( type , array )는 특정 이벤트를 발생시킨다. unbind( type , function )는 이벤트를 제거한다. unbindRef( )는 ref 바인딩을 해제한다. validate( )는 컴포넌트의 유효성 검사를 실행한다. validateObject( )는 컴포넌트의 유효성 검사 결과 객체를 반환한다. visible( flag )는 CSS visibility 속성 값을 설정한다.",186
152,"WebSquare5는 Project Explorer, Palette, Design, Script, Source, Property, Outline, 도움말, Perspective으로 구성됩니다. Project Explorer는 Workspace에 있는 프로젝트와 파일을 확인할 수 있으며, Palette에서는 컴포넌트와 UDC, TTC, Snippet을 검색하여 확인할 수 있습니다. Design에서는 WYSIWYG 방식으로 컴포넌트를 디자인할 수 있으며, Script에서는 개발자가 이벤트 및 함수를 정의하여 기능을 구현할 수 있습니다. Source에서는 Design에서 작업한 내용에 대해 자동으로 XML 소스가 생성되어 표시되며, Property와 Outline은 각각 기능과 특징을 제공합니다. 도움말에서는 웹스퀘어 도움말을 확인할 수 있으며, Perspective에서는 화면 Perspective를 설정할 수 있습니다.",241
153,"웹스퀘어 가이드 SP4 사용자 가이드 OPS 8장에서는 주요 API에 대해 설명하고 있다. $p.main은 현재 window 내의 최상위 페이지에 해당하는 scope 객체를 반환하며, $jQuery는 selector를 인자로 받아 jQuery 객체를 반환한다. $p.debug.getScope는 dom 객체를 인자로 받아 해당 dom이 위치한 페이지의 scope 객체를 반환하며, getFrame은 dom 객체를 인자로 받아 해당 dom이 위치한 페이지의 WFrame id를 반환한다. TabControl.getWindow은 idx에 해당하는 탭의 Scope 객체를 반환하며, WindowContainer.getFrame은 windowId에 해당하는 window의 frame 객체를 반환한다. 
API 변경 부분에서는 $w.top과 $p.top, $w.parent와 $p.parent, 그리고 windowContainer.getWindow의 변경 내용이 설명되어 있다. 
WFrame의 주요 API에는 getWindow, getSrc, setSrc, remove 등이 있다. 
마지막으로 $w와 $p의 API 비교에서는 ajax, clearInterval, clearPage, clearTimeout, createSubmission, createWorkflow, dateAdd, dateDiff, deleteSubmission, deleteWorkflow, download, dynamicCreate, executeParallel, executeSerial, executeSubmission, executeWhilst, executeWorkflow, getAllBASE64Parameter, getAllParameter, getBASE64Parameter, getComponentById, getCurrentServerDate, getFormattedDate, getFrame, getFrameId, getIntervalKeyList, getMaxMinYear, getMetaValue, getParameter, getPopup, getPopupId, getPopupParam, getPopupUrl, getPopupWindow, getRunningWorkflow, getRunningWorkflowID, getRuntimeId, getStringByteSize, getSubmission, getTimeoutKeyList, getWorkflow, hideModal, isPopup, isRunningWorkflow, isWFramePopupjs, log, mirrorView, openPopup, parent, parseDate, reinitialize, rejectWorkflow, setDisabled, setDocumentLang, setDomain, setFullView, setInterval, setTimeout, showModal, top, toTimestampString, url, URLEncoder, watermark 등의 API가 비교되었다. 
$p.data는 실행된 페이지를 기준으로 동작하는 DataCollection API이며, $w.bigDecimal은 실행된 페이지를 기준으로 동작하는 bigDecimal API이다. 마지막으로 $p.ModelUtil은 실행된 페이지를 기준으로 동작하는 XML 인스턴스 API이다.",544
154,"WebSquare.uiplugin.group는 레이아웃용 컴포넌트로, 하위에 컴포넌트들을 배치할 수 있으며, 입력용 컴포넌트의 value 초기화기능(init) 또는 하위 컴포넌트들에 특정 API, Function 실행기능(invoke)을 사용할 수 있습니다. 기본적으로 HTML div Tag로 표현되며, div Tag 이외의 child를 가질 수 있는 HTML Tag(ul, dl, ol, table 등)들을 tagname 속성을 이용하여 표현할 수 있습니다. Group컴포넌트는 value를 가질 수 없는 컴포넌트이므로, value를 설정해야 하는 경우 Textbox컴포넌트와 함께 사용합니다. adaptive, adaptiveThreshold, captionAuto, captionTitle, class, id, localeRef, summaryOnlyAuto, tabIndex, tagname, text, tooltip, tooltipDisplay, tooltipFormatter, tooltipLocaleRef, tooltipPositionX, tooltipPositionY, tooltipTime, useLocale, userData1, userData2, userData3 등의 속성을 가지며, onblur, onclick, ondblclick, onfocus, onmousedown, onmouseenter, onmouseleave, onmousemove, onmouseout, onmouseover, onmouseup, ontooltiphide, ontooltipshow 등의 이벤트를 가집니다. addClass, bind, changeClass, focus, getAttributeNode, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, init, invoke, removeAttributeNode, removeClass, setAttributeNode, setDisabled, setEventPause, setInitStyle, setOpacity 등의 메소드를 사용할 수 있습니다.",463
155,"웹스퀘어 컴포넌트의 위치, 크기, CSS 속성, title, 데이터, class, ID, 다국어, 툴팁, 이벤트 등을 설정하거나 제어할 수 있는 다양한 속성과 API가 제공됩니다. adaptive 속성을 이용하여 적응형 웹 모드를 지원하며, tagname 속성을 이용하여 Group 컴포넌트를 <div>가 아닌 다른 태그로 표현할 수 있습니다. 이벤트는 포커스, 클릭, 더블 클릭, 마우스 이동 등 다양한 종류가 제공됩니다.",184
156,"ontooltipshow : 툴팁이 나타날 때 발생하는 이벤트를 처리하는 함수
addClass(className) : 컴포넌트에 CSS class를 추가하는 함수
bind(eventType, function) : 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하는 함수
changeClass(oldClassName, newClassName) : 웹스퀘어 컴포넌트의 class를 변경하는 함수
focus() : 웹스퀘어 컴포넌트에 포커스를 줌
getAttributeNode(attributeName) : HTML attributes로 정의된 속성의 값을 반환하는 함수
getGenerator() : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하는 함수
getID() : 웹스퀘어 컴포넌트의 ID를 반환하는 함수
getInitStyle(CSS) : 컴포넌트의 초기 스타일을 반환하는 함수
getOpacity() : 웹스퀘어 컴포넌트의 불투명도를 반환하는 함수
getOriginalID() : 웹스퀘어 컴포넌트의 originalID를 반환하는 함수
getPluginName() : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하는 함수
getPosition(positionName) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환하는 함수
getReadOnly() : 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하는 함수
getScope() : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 함수
getScopeWindow() : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 함수
getSize(sizeName) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환하는 함수",513
157,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. getSize 함수는 %로 설정된 경우, 픽셀로 변환된 값을 반환하며, getStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getUdcHome 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환하며, getUdcRoot 함수는 파일명을 포함하지 않은 경로를 반환합니다. getUserData 함수는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, hasClass 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide 함수는 웹스퀘어 컴포넌트를 화면에서 숨기며, init 함수는 Group 하위에 존재하는 입력 가능한 컴포넌트의 value를 초기화합니다. invoke 함수는 Group 하위의 모든 컴포넌트에 대해 API 또는 사용자 정의 함수를 호출하며, removeAttributeNode 함수는 attributes 노드에서 nodeName에 해당하는 하위 노드를 삭제합니다.",321
158,"nodeName: 하위 노드의 이름을 설정하는 함수
emoveClass: 웹스퀘어 컴포넌트에서 class를 삭제하는 함수
setDisabled: 그룹 하위 component에 disabled 속성을 적용하는 함수
setEventPause: 지정한 이벤트를 중단하는 함수
setInitStyle: 컴포넌트의 초기 스타일을 복구하는 함수
setOpacity: 웹스퀘어 컴포넌트의 불투명도를 설정하는 함수
setPosition: 웹스퀘어 컴포넌트의 위치(left, top)를 설정하는 함수
setReadOnly: Group에 속한 하위 컴포넌트에 readOnly 속성을 적용하는 함수
setSize: 웹스퀘어 컴포넌트의 크기(width, height)를 설정하는 함수
setStyle: 웹스퀘어 컴포넌트의 CSS 속성을 설정하는 함수
setTitle: 컴포넌트의 title 속성을 설정하는 함수
setUserData: 웹스퀘어 컴포넌트에 임의의 데이터를 설정하는 함수
show: 웹스퀘어 컴포넌트를 화면에 표시하는 함수
toggleClass: 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가하는 함수
trigger: 컴포넌트에서 특정 이벤트를 발생시키는 함수
unbind: 컴포넌트에서 이벤트를 제거하는 함수",409
159,"unbind() 함수는 컴포넌트에서 이벤트를 제거하는 함수이다. 함수의 첫 번째 인자로 이벤트 이름을, 두 번째 인자로는 제거할 이벤트 핸들러 함수를 전달한다. 만약 두 번째 인자를 생략하면 해당 이벤트에 등록된 모든 핸들러 함수를 제거한다. visible() 함수는 show/hide 혹은 setStyle 사용을 권장하며, 엔진 내부적으로 CSS visibility 속성을 설정한다. 함수의 인자로는 설정할 CSS visibility 속성 값(true: visibility: visible; false: visibility: hidden;)을 전달한다.",173
160,"WebSquare.uiplugin.spinner는 스피너를 구현하는 UI 플러그인입니다. 이 플러그인은 화살표를 사용하여 값을 선택할 수 있습니다. autoFocus 속성은 dateType이 ""date""인 경우, dateIncrementType 설정에 따라 정해진 길이 만큼의 날짜값이 입력되면 nextTabID로 지정된 컴포넌트로 포커스를 이동합니다. buttonSize 속성은 2개의 버튼이 차지하는 공간(넓이)을 설정합니다. class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다. dataType 속성은 data의 값의 type을 설정하며, dataTypeTimeSecond는 dataType이 ""time""인 경우, ""초 단위""까지 입력해야 되고 dateIncrementType에 설정된 값에 따라 dateIncrementType을 설정합니다. dateMask 속성은 input에 값을 표시하는 format을 설정하며, displayFormat 속성은 input에 값을 표시하는 format을 설정합니다. editType 속성은 사용자가 컴포넌트 클릭 시 결과 동작을 지정합니다. id 속성은 컴포넌트 ID를 설정하며, increment 속성은 버튼 클릭시에 증감 값을 설정합니다. initValue 속성은 dataType이 ""number""인 경우에 초기값을 설정하며, inputReadOnly 속성은 input의 readOnly 여부를 설정합니다. max 속성은 dataType이 ""number""인 경우에 최대 값을 설정하며, min 속성은 dataType이 ""number""인 경우에 최소 값을 설정합니다. nextTabByEnter 속성은 nextTabID가 지정되어 있는 경우, Enter키 입력시 nextTabID 컴포넌트로 포커스를 이동시킬지에 대한 여부를 설정합니다. readOnly 속성은 readOnly 유무를 설정하며, ref 속성은 model instance의 바인딩 정보를 설정합니다. skin 속성은 상, 하 버튼 위치를 좌우로 배치할지 오른쪽에 배치할지를 정의합니다. tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정합니다. title 속성은 HTML의 title 속성과 동일합니다. useAlert 속성은 dataType이 ""date""인 경우 유효하지 않은 날짜를 입력할 경우 브라우저 경고창을 출력할지에 대한 여부를 설정합니다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성을 설정합니다. onDownButtonClick, oneditenter, oneditfull, oneditkeyup, onUpButtonClick, onviewchange 이벤트는 각각 마우스 휠 동작(아래), 엔터키를 눌렀을 때 발생, 값이 입력된 경우 발생, 키보드에서 키를 눌렀다 놓았을 때 발생, 마우스 휠 동작(위), Spinner의 버튼 클릭 후, 값이 변경될 때 발생합니다. addClass, bind, changeClass, focus, focusNextTabOrder, focusPreTabOrder, getDisabled, getGenerator, getID, getInitStyle, getNextTabID, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, getValue, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setNextTabID, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, setValue, show, toggleClass, trigger, unbind, visible 메서드는 각각 컴포넌트에 대한 다양한 기능을 제공합니다. autoFocus, buttonSize, class, dataType, dateIncrementType, dateMask, displayFormat, editType, id, increment, initValue, inputReadOnly, max, min, nextTabByEnter, nextTabID, readOnly, ref, skin, tabIndex, title, useAlert, userData1, userData2, userData3 속성은 각각 컴포넌트의 속성을 설정합니다.",1100
161,"CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다. dataType이 time인 경우, ""초 단위""까지 입력해야 되고 dateIncrementType에 설정된 값에 따라 증감되는 단위가 달라진다. dateMask는 input에 값을 표시하는 format을 설정하며, disabled는 컴포넌트 비활성 여부를 설정한다. displayFormatter는 컴포넌트의 value를 포맷하는 함수 명을 설정하며, editType은 사용자가 컴포넌트 클릭 시 결과 동작을 지정한다. skin은 상, 하 버튼 위치를 정의하며, tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정한다. addClass는 컴포넌트에 CSS class를 추가하며, bind는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당한다. focus는 컴포넌트로 포커스를 이동하며, getDisabled는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환한다.",338
162,"웹스퀘어 컴포넌트의 여러 메서드에 대한 설명이다. getID()는 컴포넌트의 ID를 반환하고, getInitStyle(CSS)는 초기 스타일을 반환한다. getNextTabID()는 nextTabID 속성 값을 반환하며, getOpacity()는 불투명도 값을 반환한다. getOriginalID()는 originalID 값을 반환하고, getPluginName()은 컴포넌트의 이름을 반환한다. getPosition(positionName)은 위치 값을 반환하며, getReadOnly()는 readOnly 속성 값을 반환한다. getScope()와 getScopeWindow()는 scope=""true""인 WFrame의 부모 객체를 반환한다. getSize(sizeName)은 크기 값을 반환하고, getStyle(propertyName)은 CSS 속성 값을 반환한다. getTitle()은 title 속성 값을 반환하며, getUdcHome()은 UDC 파일 경로를 반환한다. getUdcRoot()는 UDC 파일 경로에서 파일명을 제외한 경로를 반환한다.",256
163,"UDC 객체가 아닌 컴포넌트에서 호출된 경우, getUdcHome() 함수는 undefined를 반환합니다. getUserData(key) 함수는 웹스퀘어 컴포넌트에 설정된 key의 value를 반환하거나, 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다. hasClass(className) 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide() 함수는 웹스퀘어 컴포넌트를 화면에서 숨깁니다. removeClass(className) 함수는 웹스퀘어 컴포넌트에서 class를 삭제합니다. setDisabled(disabled) 함수는 컴포넌트의 disabled 속성을 설정합니다. setEventPause(evList, flag) 함수는 지정한 이벤트를 중단하거나 중단을 해제합니다. setInitStyle(property) 함수는 컴포넌트의 초기 스타일을 복구합니다. setNextTabID(componentID, componentScope) 함수는 nextTabID 속성을 설정합니다. setOpacity(value) 함수는 웹스퀘어 컴포넌트의 불투명도를 설정합니다. setPosition(left, top, mode) 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. setReadOnly(readOnly) 함수는 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. setSize(width, height) 함수는 컴포넌트의 크기를 설정합니다. setStyle(propertyName, value) 함수는 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다. setUserData(key, value) 함수는 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. setValue(value) 함수는 spinner의 값을 설정합니다. show(displayType) 함수는 웹스퀘어 컴포넌트를 화면에 표시합니다.",519
164,"웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거하는 toggleClass() 함수와, 이벤트를 발생시키는 trigger() 함수, 그리고 이벤트를 제거하는 unbind() 함수가 있다. toggleClass() 함수는 파라미터로 주어진 class를 포함하고 있으면 해당 class를 제거하고, 없으면 추가한다. trigger() 함수는 파라미터로 주어진 이벤트를 발생시키며, 배열을 전달하면 이벤트 핸들러에 파라미터로 전달된다. unbind() 함수는 이벤트를 제거하는데, type 파라미터를 생략하면 해당 컴포넌트의 모든 이벤트를 제거하고, function 파라미터를 생략하면 해당 이벤트에 등록된 모든 핸들러 함수를 제거한다. visible() 함수는 CSS visibility 속성을 설정하는데, show/hide 혹은 setStyle 사용을 권장하며, deprecated 되었다.",273
165,"이 Snippet은 조회 조건 영역을 그리는데 사용되며, 기본 구조는 table 구조를 가지고 있습니다. 검색 영역 1단은 6x1 형태의 기본 검색 영역으로 구성되어 있고, 검색 영역 2단은 6x2 형태의 검색 영역으로 구성되어 있습니다. 위 그림은 Snippets의 구성 요소를 설명하고 있습니다.",128
166,"화면 타이틀11.1 Snippet은 Table, GridView, Group과 같은 Page 내 컴포넌트에 대한 타이틀 영역을 제공한다. 이 Snippet은 좌측에 텍스트(아이콘 포함)가 있는 영역을 만드는데 사용되며, 우측에는 버튼이나 텍스트가 위치할 수 있다. Snippet의 구성요소는 기본 좌_텍스트, 좌_텍스트 우_버튼, 좌_텍스트 우_텍스트, 우_버튼추가로 구성되어 있다. 우_버튼 추가 Snippet은 Group 안에 버튼이 위치하며, float:right를 의미하는 fr 클래스가 지정되어 있어 오른쪽에 위치한다. 만약 해당 버튼을 타이틀의 바로 오른쪽에 배치하고 싶다면, Group의 클래스를 fl(float:left)로 수정하면 된다.",259
167,이 문서는 웹스퀘어5 SP4 사용자 가이드의 표지입니다. 이 가이드는 웹스퀘어5 SP4의 기능과 사용 방법에 대한 자세한 설명을 제공합니다. 이 가이드는 웹스퀘어5 SP4를 사용하는 모든 사용자들에게 유용한 정보를 제공할 것입니다.,98
168,"Grid39.GridGrid 컴포넌트는 GridView 컴포넌트와 유사하며, 데이터 형식과 표현 방식만 다릅니다. Grid는 data API와 view API를 포함하고 있으며, autofit, autofitMinWidth, inputType, visibleRowNum 등의 속성을 설정할 수 있습니다. Grid API를 사용하여 UI에서 행을 추가할 수 있으며, CSS Overriding을 통해 스타일을 변경할 수 있습니다. 그리드는 header, body, subTotal, footer 요소를 가지며, 열에 대한 제어는 4가지 요소에 공통적인 영향을 미칩니다. Header는 주로 각 열에 대한 제목을 표현하는데 사용되며, Body는 실제 데이터와 연관되어 여러 가지 타입으로 표현할 수 있습니다. SubTotal은 특정 열의 값을 기준으로 그룹별 합, 평균 등의 소계를 나타내고, Total은 특정 열 전체의 합, 평균 등의 총계를 나타냅니다.",309
169,"그리드 생성 후 컬럼 추가는 body 요소에서 셀을 선택하고 ""우클릭""하여 ""왼쪽에 열 삽입"", ""오른쪽에 열 삽입"", 행 추가, 행 삭제, 셀 병합 등을 선택하거나 웹스퀘어 상단의 메뉴 아이콘을 통해 가능합니다. 셀의 너비와 높이는 inline-style, Property, 디자인 창에서 설정 가능합니다. Grid(2.0)와 Gridview(5.0) Property를 비교하면 dataList, ignoreCellClick, ignoreNonEditableCell, ignoreToggleOnDisabled, moveKeyEditMode, scrollByColumnAdaptive 등이 추가됩니다. DataCollection에서 그리드뷰의 데이터를 설정하고 Excel 복사도 가능합니다. Grid 생성 후 autoFit 속성을 allColumn으로 선택하면 브라우저에서 그리드뷰가 생성됩니다.",244
170,"Generator 컴포넌트는 Websquare 컴포넌트를 동적으로 생성하여 반복하여 출력하는 역할을 합니다. 이 컴포넌트는 일반적인 웹 프로그래밍 MVC모델의 view 단의 for문과 유사합니다. Generator 컴포넌트는 예제를 보는 것이 이해하기 쉬우므로, Table 코딩 심화의 Table 데이터가 모두 동적이며 row가 반복되는 경우 예제와 리스트형 코딩하기의 데이터가 동적이며 요소(li)의 개수가 동적이며 반복되는 경우 예제를 참고하면 좋습니다. 
Generator 컴포넌트의 Property로는 사용자가 임의의 class나 id를 정의할 수 있는 class와 id가 있으며, 반복되는 부분을 감싸는 태그의 태그명을 지정할 수 있는 tagname이 있습니다. 
Generator API로는 insertChild(), getChild(), removeChild()가 있습니다. insertChild()는 index에 해당하는 위치에 반복부를 삽입하며, index가 생략된 경우 마지막에 삽입됩니다. getChild()는 컴포넌트의 ID와 해당 컴포넌트가 속해 있는 반복부의 index를 기반으로 컴포넌트 객체를 반환합니다. removeChild()는 index에 해당하는 반복부를 삭제하며, index가 없을 경우 마지막 반복부를 삭제합니다. 
Generator 컴포넌트에서는 Chart, Grid, Menu, Switch, TabContainer, TabControl, Treeview, WindowContainer와 같은 컴포넌트를 사용할 수 없으며, 웹스퀘어 API를 통해 주로 제어합니다. Generator을 추가, 삭제하거나 컨트롤할 수 있습니다. CSS Overriding을 위해서는 사용자 정의 클래스인 ger_list를 정의하고, Stylesheet_ext.css 다음에 적용해야 합니다.",523
171,"WebSquare.uiplugin.video는 비디오 사용을 지원하는 UI 플러그인이다. autoplay, class, controls, id, loop, muted, poster, preload 등의 속성을 제공한다. autoplay는 동영상을 자동으로 재생하며, class는 HTML의 class 속성과 동일한 기능을 제공한다. controls는 브라우저가 제공하는 재생 도구를 표시하며, id는 컴포넌트 ID를 지정한다. loop는 동영상을 반복 재생하고, muted는 음소거로 동영상을 재생한다. poster는 동영상 대표 이미지의 URL을 지정하며, preload는 동영상 버퍼링에 대한 정의를 제공한다. 각 속성은 CSS 파일이나 style 블록에서 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다. 또한, 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능하다. 이 UI 플러그인은 PropertyEventMethod를 지원하며, 자세한 내용은 해당 문서를 참조하면 된다.",326
172,"웹스퀘어 가이드 웹 접근성 OPS 23장에서는 라디오 버튼을 구성하는 방법에 대해 설명합니다. ""renderType = 'radiogroup'"" 형식으로 구성된 라디오 버튼과 순수 HTML의 라디오 버튼을 사용할 수 있습니다. 그러나 ""renderType = 'native'""로 렌더링되는 순수 HTML의 경우 웹스퀘어 API를 사용할 수 없으므로 ""renderType = 'radiogroup'""를 사용하는 것이 좋습니다. 또한, 포커스 상태의 테두리(outline)가 명확하게 나타나는지, 라디오 버튼에 대응하는 title 또는 label을 제공하는지, tagname과 itemTagname이 올바르게 적용되었는지 확인해야 합니다. ""renderType = 'native'""의 경우 레이아웃 구조를 위한 태그가 없이 순수 <input type = 'radio'> 태그 하나만 생성되므로 레이블 텍스트는 textbox 컴포넌트를 이용해 직접 생성해야 합니다. 반면, ""renderType = 'radiogroup'""의 경우 radio와 label이 결합되어 label의 for 속성이 자동으로 연결되며, tagname과 itemTagname 속성을 이용하여 mark-up 구조를 변경할 수 있습니다.",375
173,"Span70은 HTML span 태그와 동일한 기능을 제공하는 컴포넌트로, 브라우저에서는 span 태그로 표현됩니다. Textbox의 tagname 속성을 이용하여 span 태그를 표현하던 번거로움을 개선하기 위해 생성된 컴포넌트입니다. Span70은 class, dataType, displayFormat, id, label, style, tabIndex, html attributes 등의 속성을 가지고 있으며, span 태그의 기본 display 타입은 ""display:inline"" 입니다. CSS Overriding 시에는 span 클래스를 사용하면 됩니다. Span70은 Textbox의 tagname 속성을 span으로 표현하는 번거로움을 개선하기 위해 만들어진 컴포넌트이므로 tagname과 같은 속성은 없으며, 컴포넌트를 생성하면 span 태그로 파싱됩니다.",251
174,"Spinner 컴포넌트는 버튼을 이용하여 텍스트 필드의 숫자를 조절할 수 있습니다. Property 중 buttonSize는 2개의 버튼이 차지하는 공간(넓이)을 설정하며, dataType은 data의 값의 type을 설정합니다. dataType이 time인 경우, ""초 단위""까지 입력해야 하며, dateIncrementType에 설정된 값에 따라 증감되는 단위가 달라집니다. dataType이 date인 경우에는 dateIncrementType에 설정된 값에 따라 증감되는 값이 달라집니다. displayFormat은 input에 값을 표시하는 format을 설정하며, displayFormatter는 input에 값을 표시하는 포맷터 함수를 설정합니다. increment 버튼 클릭시에 증감 값이 설정되며, max와 min은 dataType이 number인 경우에 최대 값과 최소 값이 설정됩니다. skin은 버튼 배열 타입을 설정하며, type1은 버튼이 우측에 위치하고, type2는 버튼이 좌측에 위치합니다. tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 설정합니다. Spinner 컴포넌트를 designView에 그린 후, property의 Class에 사용자 정의 class를 정의하여 overriding하여 디자인을 변경할 수 있습니다.",356
175,"이 컴포넌트는 대량의 데이터를 페이지 단위로 조회할 수 있도록 링크를 생성합니다. 각 페이지 번호로 접근할 수 있도록 탭 키를 사용할 수 있습니다. 이미지로 표현된 버튼에는 대체 텍스트가 제공되며, 시각장애인도 페이지 목록을 인지할 수 있도록 renderType 속성을 ""list""로 설정합니다. 이를 위해, 포커스 상태의 테두리(outline)가 명확하게 나타나고, 현재 페이지 번호가 다른 기본 페이지번호와 시각적으로 명확히 구분되어야 합니다. 이 컴포넌트는 1.3.5. (콘텐츠 간의 구분) 및 2.1.2. (초점 이동) 관련 지침을 준수해야 합니다. 아래는 예시 코드입니다.
<Xml source>
<w2:pageList pageSize=""10"" displayButtonType=""display"" id="""" displayFormat=""#"" style="""" renderType=""list""></w2:pageList>",294
176,"WebSquare Studio 설치를 위한 준비사항으로, 사용자 PC 사양에 맞는 인스톨러를 받고 Java 1.8 이상을 설치해야 한다. 기존에 설치된 스튜디오가 있을 경우, 먼저 제거하되 workspace 폴더는 삭제하지 않고 계속 사용한다. 64-bit OS에서 32-bit JRE를 사용하려면 32-bit 인스톨러를 실행한다. Eclipse 플러그인 설치를 위해 WebSquare-feature 파일을 준비하고, Eclipse에서 Install New Software를 선택한 후 Add 버튼을 클릭하여 WebSquare-feature 파일을 추가한다. WebSquare 플러그인이 설치되면 Open Perspective 메뉴를 사용하여 WebSquare 설치를 확인한다. 전역 설정은 WebSquare Preference를 통해 관리할 수 있으며, 프로젝트 환경 설정은 Project Explorer에서 프로젝트를 우클릭하여 Properties를 선택한 후 WebSquare를 선택하여 각 항목을 설정한다.",266
177,"WebSquare5 엔진 설치 가이드를 참고하여 엔진을 설치합니다. WebSquare5 엔진은 config.xml과 websquare.xml 두 가지 설정 파일을 사용합니다. config.xml은 브라우저 상의 UI 화면 출력과 관련된 내용을 설정하고, websquare.xml은 WebSquare5 Engine의 동작과 관련된 내용을 설정합니다. 업데이트를 위해서는 WebSquare Studio에서 [Window]-[Preferences]-[WebSquare]-[Embedded Engine]을 선택하여 현재 설치된 Engine 버전을 확인하고, Add를 클릭하여 새 Engine 파일을 추가합니다. 설치 관련 문제 해결을 위해 표 2-3을 참고합니다. 이슈에 대한 해결책을 확인하고, MIME-Type이나 .wq 관련 설정 등을 확인합니다. 또한, WebServer와 WAS를 분리해서 사용할 경우, .jar 및 .jsp 파일은 WAS에, 나머지 파일은 WebServer에 저장하고, 동일한 폴더 구조를 구성합니다.",271
178,"2.4.10 설치 시 확인해야 할 content-Type은 다음과 같다. websquare 기동 시 오류가 발생하면 아래 내용을 확인하고, 잘못된 경우 WebsServer 또는 WAS의 mime-type을 확인한다. confg.xml - application/xml, websquare.html - text/html, javascriptPluginAll.wq - text/javascript, 화면 xml - application/xml. 2.4.11 웹로직 설치 시 web.xml 파일에 mime-mapping 설정을 추가해야 한다. 2.4.12 JEUS에서 한글이 깨지는 경우, 서버쪽의 인코딩 설정을 확인하고, 한글 주석 등이 깨져있는지, XML 파일만 응답 헤더가 contentType = application/xml;charSet=ISO_8859_1인지 확인한다. 2.4.13 웹서버가 SUN iplanet(혹은 웹티어)인 경우, .wq 확장자에 대한 처리 및 mime-type 설정이 복잡하므로 설정 파일 위치를 확인하고, mime.types 및 XXXX_obj.conf 파일을 변경해야 한다. 2.4.14 WAS가 websphere 일 경우, web.xml 추가 설정이 필요하며, 다른 곳에 있는 web.xml에 websquare servlet을 설정하여 정상 작동을 확인한다.",331
179,"하나의 논리적 입력 단위가 두 개 이상의 inputBox 컴포넌트로 구성된 경우, title 속성에 내용을 적절히 기술하거나, 하나로 구성될 경우 <label> 태그와 함께 사용해야 합니다. 주민번호를 입력 받는 inputBox 컴포넌트의 예제에서는 label과 title을 중복으로 사용하지 않습니다. 또한, Input 컴포넌트의 id값과 textbox를 사용한 label의 for값이 서로 동일하게 연결되어 있는지 확인해야 합니다. 만약 Label을 사용할 수 없는 디자인일 경우, input에 title 속성을 제공해야 합니다. 이와 관련된 지침은 초점 이동과 레이블 제공입니다. 
<Xml source>
<w2:textbox id="""" label=""주민번호"" tagname=""label"" for=""input1""></w2:textbox>
<xf:input id=""input1"" maxlength=""6"" title=""주민번호 앞6자리"" />
<xf:input id="""" maxlength=""7"" title=""주민번호 뒷7자리"" />",304
180,"IFrame 컴포넌트는 HTML의 iframe과 같은 기능을 제공합니다. allowTransparency 속성은 IE 브라우저에서만 적용 가능하며 컴포넌트에 투명한 배경을 사용할 지 여부를 지정합니다. class와 id 속성은 사용자가 임의로 정의할 수 있습니다. relativePath 속성은 xml이 아닌 다른 주소에 대해서도 src 상대경로를 지원하는 속성입니다. scrolling 속성은 src에 해당하는 화면의 width/height가 iframe의 width/height보다 클 때 스크롤바를 표시할 지 여부를 지정합니다. spa 속성은 링크를 통해 이동하거나 화면을 다시 로딩하였을 때 해당 컴포넌트가 동일하게 존재할 경우 변경된 부분만 로딩합니다. userData1~3 속성은 사용자 정의 데이터 속성으로, getUserData API를 통해 설정한 값을 얻어올 수 있습니다. SPA 모드를 지원하므로 리소스를 절약하고 로딩 속도를 향상시킬 수 있습니다.",312
181,"이미지 컴포넌트는 웹스퀘어에서 제공하는 Img 컴포넌트로, 일반 HTML의 img와 동일하게 사용할 수 있다. class 속성은 HTML의 class와 동일한 기능을 제공하며, 다중 적용이 가능하다. id 속성은 컴포넌트의 ID로 전역객체로 할당되며 script에서 해당 ID로 컴포넌트에 접근이 가능하다. disabled 속성은 컴포넌트를 비활성화 시킨다. longdesc 속성은 이미지의 자세한 설명이 담긴 URI을 지정한다. src 속성은 이미지 파일의 URL을 입력한다. style 속성은 InputBox의 style 속성과 동일하게 사용할 수 있다. tabIndex 속성은 Tab Key를 이용한 컴포넌트의 포커스 순서를 지정한다. title 속성은 HTML의 title 속성과 동일한 기능으로, 마우스 over시 툴팁 형태로 표현된다. toolTip 속성은 웹스퀘어에서 제공하는 toolTip으로, 마우스 over시 표현된다. usemap 속성은 HTML의 usemap 속성과 동일한 기능을 제공하며, 이미지 내의 영역을 지정하여 사용자가 해당 영역을 클릭하면 지정된 페이지로 이동할 수 있다. 주의사항으로, src 프로퍼티에 값을 입력할 경우 Context Root에서 지정한 절대경로가 사용자가 입력한 값 앞에 더해져 삽입된다.",445
182,"이미지에 대한 대체 텍스트는 의미 있게 기술되어야 하며, 길 경우 longdesc 속성을 사용하여 정보를 제공해야 합니다. 마우스 이벤트 처리는 사용하면 안 되며, 의미가 없는 이미지에는 alt 속성이 있어야 하지만 생략 가능합니다. config.xml을 통해 alt 값을 빈 값으로 처리할 수 있습니다. 체크포인트는 의미 있는 이미지에 대체 텍스트가 제공되었는지, 의미 없는 이미지에는 빈 값의 대체 텍스트가 존재하는지 확인해야 합니다. 이러한 가이드라인은 적절한 대체 텍스트 제공, 색에 무관한 콘텐츠 인식, 명확한 지시 사항 제공과 관련이 있습니다. 예시 코드에서는 config.xml에서 alt 값을 빈 값으로 처리하는 방법을 보여주고 있습니다.",263
183,"WebSquare.uiplugin.iframe는 HTML의 IFrame과 유사한 컴포넌트로, WebSquare 파일, 일반 웹 컨텐츠, 다른 사이트를 화면에 출력할 수 있습니다. SPA 모드를 적용할 수 있으나, 제약사항을 준수해야 합니다. allowTransparency 속성은 IE만 지원하며, class, id, name, relativePath, scrolling, src, spa, spaReplaceHistory, title, tooltip, userData1, userData2, userData3 속성을 제공합니다. oniframeload, oniframeunload 이벤트와 addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getSrc, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, getWindow, hasClass, hide, removeClass, setEventPause, setInitStyle, setOpacity, setPosition, setSize, setSrc, setStyle, setUserData, show, toggleClass, trigger, unbind, visible 메서드를 제공합니다. allowTransparency, class, id, name, relativePath, scrolling, spa, spaReplaceHistory, title, tooltip, userData1, userData2, userData3 속성은 각각 투명 배경 적용 여부, CSS class, 컴포넌트 ID, name 속성, 상대 경로 지원 여부, 스크롤 바 표시 여부, SPA 모드 적용 여부, SPA 내부 history 동작 금지 여부, title 속성, tooltip, 사용자 정의 데이터 속성을 제공합니다.",416
184,"이 속성은 iframe 컴포넌트의 속성을 설명합니다. src 속성은 iframe이 표시할 화면의 URL을 지정하며, title 속성은 웹 접근성을 지원하기 위한 속성으로, 마우스 오버 시 툴팁으로 표시됩니다. tooltip 속성은 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시합니다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성으로, API를 통해 값을 얻어올 수 있습니다. oniframeload 이벤트는 IFrame 내부 영역이 완전히 그려지고 스크립트가 모두 수행된 후 발생하며, oniframeunload 이벤트는 IFrame 내부가 제거될 때 발생합니다. addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition 메서드는 웹스퀘어 컴포넌트 공통 메서드입니다. 각 메서드의 기능과 사용 방법이 설명되어 있습니다.",321
185,"getReadOnly( ) : 현재 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환한다. 
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 아닌 경우 null을 반환한다.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 아닌 경우 전역 window 객체를 반환한다.
getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환한다. %로 설정된 경우, 픽셀로 변환된 값을 반환한다.
getSrc( ) : src 속성에 정의된 URL의 full 경로를 반환한다.
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다.
getTitle( ) : 컴포넌트의 title 속성 값을 반환한다.
getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다.
getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다.
getUserData( key ) : 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다.
getWindow( ) : IFrame 페이지의 window 객체를 반환한다.
hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다.
hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨긴다.
emoveClass( className ) : 웹스퀘어 컴포넌트에서 class를 삭제한다.
setEventPause( evList , flag ) : 지정한 이벤트를 중단한다.",496
186,"input1.setEventPause(""onclick"", true); // (예제 2) // onfocus 및 onblur 이벤트의 중단을 해제. input1.setEventPause(""onfocus,onblur"", false); // (예제 3) // input1에 등록된 모든 사용자 이벤트를 중단. input1.setEventPause(null, true); 
setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)
setOpacity( value ) : 웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)
setPosition( left , top , mode ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)
setSize( width , height ) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)
setSrc( pageURL ) : src 페이지를 설정.
setStyle( propertyName , value ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)
setUserData( key , value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.)
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)
trigger( type , array ) : 컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)
unbind( type , function ) : 컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)
visible( flag ) : [deprecated] show/hide 혹은 setStyle 사용을 권장.",671
187,"웹스퀘어5 SP4 릴리즈 노트는 웹스퀘어5의 새로운 업그레이드 버전에 대한 정보를 제공합니다. 이 업그레이드 버전은 웹스퀘어5의 기능을 개선하고 버그를 수정하여 사용자 경험을 향상시킵니다. 이번 릴리즈 노트에서는 새로운 기능, 개선된 기능, 버그 수정 및 알려진 문제점에 대한 정보가 포함되어 있습니다. 이를 통해 사용자는 웹스퀘어5 SP4의 새로운 기능과 개선된 기능을 쉽게 이해하고 사용할 수 있습니다.",206
188,"WebSquare.uiplugin.checkcombobox는 HTML의 <select> 태그를 확장한 체크 콤보 박스로, SelectBox와 CheckBox가 결합된 형태로 다중 선택을 지원한다. 이 컴포넌트는 최상위에 <div> 태그를 두고 하위에 복합 태그를 사용한다. 이 컴포넌트는 allOption, animation, appearance, checkboxClickSync, checkDisabledOnAllCheck, chooseOption, chooseOptionLabel, chooseOptionLabelLocaleRef, class, closeonmouseleave, customLabelFormatter, delimiter, direction, disabled, displayAllOptionLabel, displaymessage, displayMode, enableColumn, enableColumnFalseValue, escape, id, invalidMessage, invalidMessageFunc, labelWidthAuto, mandatory, navBtn, nextTabID, rangeSeparator, readOnly, ref, renderType, search, searchTarget, separator, showCheckedTop, sortMethod, sortOption, submenuSize, tabIndex, title, useDrag, useEdit, useItemLocale, useKeywordHighlight, useLocale, userData1, userData2, userData3, validateOnInput, validator, visibleColMax, visibleColNum, visibleColumn, visibleColumnFalseValue, visibleRowNum, wmode 등의 속성과 이벤트를 제공한다. 이 컴포넌트는 addClass, addItem, bind, changeClass, checkAll, deleteItem, focus, getDisabled, getGenerator, getID, getInfo, getInfoArray, getInitStyle, getItemCount, getItemDisabled, getNextTabID, getOpacity, getOriginalID, getPluginName, getPosition 등의 메서드를 제공한다.",372
189,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 목록입니다. 예를 들어, getReadOnly()는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScope()는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. 다른 기능으로는 선택된 항목들의 정보를 반환하는 getSelectedInfo(), 웹스퀘어 컴포넌트의 크기를 반환하는 getSize(), CSS 속성 값을 반환하는 getStyle() 등이 있습니다. 또한, 항목을 선택하거나 설정하는 기능들도 있으며, 컴포넌트의 CSS를 제어하는 class 속성과 관련된 기능도 있습니다.",220
190,"customLabelFormatter: label 값을 사용자 정의 함수로 설정할 수 있음.
delimiter: 선택 항목 목록에 value와 label을 함께 표시할 때 사용하는 구분자. displayMode 속성에서 참조.
direction: 항목의 열림 방향을 설정할 수 있음.
disabled: 컴포넌트를 비활성화할지 여부를 설정할 수 있음.
displayAllOptionLabel: ""전체"" 항목을 선택한 경우, 선택된 아이템 label 전체를 출력하지 않고 ""전체 선택""으로 출력.
displaymessage: validate API의 검증 결과가 실패일 경우, 결과 메세지를 표시할지 여부를 설정할 수 있음.
displayMode: 선택 항목의 표현 방법을 설정할 수 있음.
enableColumn: 선택 항목 목록에서 특정 항목을 disable 처리하는 기능을 설정할 수 있음.
enableColumnFalseValue: enableColumn 속성에서 disable 처리할 값을 설정할 수 있음.
escape: <>&""를 HTML Escape 문자로 변환하여 화면에 표시할지 여부를 설정할 수 있음.
id: 컴포넌트 ID를 설정할 수 있음.
invalidMessage: validate API의 검증 결과가 실패일 경우 표시할 메시지를 설정할 수 있음.
invalidMessageFunc: validate API의 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름을 설정할 수 있음.
labelWidthAuto: 컴포넌트에 정의된 width을 무시하고 항목 중 가장 긴 텍스트에 맞게 출력할지 여부를 설정할 수 있음.
mandatory: 필수 선택 적용 여부를 설정할 수 있음.
navBtn: 선택 목록 하단에 [선택해제] 및 [선택적용] 버튼을 표시할지 여부를 설정할 수 있음.
nextTabID: Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID를 설정할 수 있음.
angeSeparator: 연속적으로 선택된 값을 ""x-y"" 형태로 간단하게 보여주는 기능을 설정할 수 있음.
eadOnly: 읽기 전용 적용 여부를 설정할 수 있음.
ef: DataCollection의 value 경로를 설정할 수 있음.
enderType: 브라우저에 표현될 레이아웃 구조를 설정할 수 있음.
search: 사용자 입력 값 검색 방법을 설정할 수 있음.
searchTarget: 사용자의 입력 값을 기반으로 선택 항목을 제안하기 위해 검색할 대상을 지정할 수 있음.
separator: 선택된 항목들이 여러 개인 경우, 구분자로 사용할 문자를 설정할 수 있음.",714
191,"체크된 항목을 리스트 상단에 정렬시키는 속성으로, checkboxClickSync가 true일 때만 동작한다. sortMethod는 선택 항목 목록 정렬 방법을, sortOption은 선택 항목 목록 정렬 기준을 정의한다. submenuSize는 선택 항목 목록 크기 결정 방법으로, labelWidthAuto, visibleColNum, visibleColMax는 column 수를 결정하는 속성이다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를, title은 마우스 오버 시 툴팁으로 표시될 값을 설정한다. useDrag는 목록이 펼쳐졌을 때 마우스 드래그 동작을 통해 여러 checkbox를 선택할 수 있는 기능을, useEdit는 checkcombobox 값을 직접 타이핑하여 편집할 수 있는 기능을 설정한다. validateOnInput은 useEdit 사용 시 값이 입력될 때마다 유효성을 검증하는 기능을, validator는 유효성 체크 함수 이름을 설정한다. visibleColMax는 목록을 펼쳤을 때 보여줄 열의 최대 개수를, visibleColumn은 선택 항목 목록에서 특정 항목을 감추는 기능을 설정한다.",365
192,"선택 항목 목록에서 특정 행을 표시하지 않는 관련 속성은 visibleColumn과 visibleRowNum이다. wmode 속성은 선택 항목 목록을 object 태그보다 상위에 표시하며, 선택 항목 목록이 object에 가려질 경우 사용한다. addClass 메서드는 컴포넌트에 CSS class를 추가하고, bind 메서드는 이벤트와 핸들러 함수를 동적으로 할당한다. changeClass 메서드는 웹스퀘어 컴포넌트의 class를 변경하며, checkAll 메서드는 모든 항목을 선택하거나 해제한다. deleteItem 메서드는 주어진 index에 해당하는 항목을 삭제하고, focus 메서드는 웹스퀘어 컴포넌트에 포커스를 준다. getDisabled 메서드는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하며, getGenerator 메서드는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다.",308
193,"웹스퀘어 컴포넌트의 크기(width, height)를 반환하는 함수입니다. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환합니다.
- Parameter: sizeName(String) - 크기 종류 (width, height)
- Return: Number - 컴포넌트의 크기 값
예제:
 input 컴포넌트에 CSS 속성 width가 적용된 경우,
 (예제) 위의 inputBox 컴포넌트의 width 값을 확인
var returnValue = input1.getSize(""width"");
 픽셀 단위의 크기 값이 반환됨.
 (반환 값) 100",175
194,"웹스퀘어 컴포넌트의 다양한 기능들이 설명되어 있습니다. getSize() 함수는 %로 설정된 경우, 픽셀로 변환된 값을 반환하며, getStyle() 함수는 CSS 속성 값을 반환합니다. getText() 함수는 선택된 항목의 label을 반환하며, getValue() 함수는 선택된 항목의 value를 반환합니다. hasClass() 함수는 특정 class를 포함하는지 확인하고, removeClass() 함수는 웹스퀘어 컴포넌트에서 class를 삭제합니다. 그 외에도 다양한 함수들이 있습니다.",161
195,"componentId.setDisabled(true); setDisplayMode()는 Checkcombobox의 displayMode를 동적으로 변경하는 메소드이다. enableColumnFalseValue는 Checkcombobox와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있다. setEventPause(evList, flag)는 지정한 이벤트를 중단하는 메소드이다. setInitStyle(property)는 컴포넌트의 초기 스타일을 복구하는 메소드이다. setItemDisabled(index, flag)는 주어진 index에 해당하는 항목의 disabled 속성을 설정하는 메소드이다. setItemSet(nodeset, label, value)는 선택 항목 목록을 설정하는 메소드이다. setNextTabID(componentID, componentScope)는 nextTabID 속성을 설정하는 메소드이다. setNodeSet(nodeset, label, value)는 선택 항목 목록을 설정하는 메소드이다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정하는 메소드이다. setPosition(left, top, mode)는 웹스퀘어 컴포넌트의 위치(left, top)를 설정하는 메소드이다. setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정하는 메소드이다. setRef(path)는 ref 속성을 설정하는 메소드이다. setSelectedInfo(infoArray)는 항목의 선택여부가 담긴 정보(JSON)를 기반으로 항목을 선택/해지하는 메소드이다. setSize(width, height)는 웹스퀘어 컴포넌트의 크기(width, height)를 설정하는 메소드이다. setStyle(propertyName, value)는 웹스퀘어 컴포넌트의 CSS 속성을 설정하는 메소드이다.",485
196,"웹스퀘어 컴포넌트에서 사용 가능한 메소드들에 대한 설명입니다. setStyle 메소드는 CSS 속성과 값을 설정하며, setText 메소드는 선택 항목을 설정합니다. setUserData 메소드는 임의의 데이터를 설정하며, setValue 메소드는 선택 항목을 선택합니다. setVisibleColumn 메소드는 CheckComboBox와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있습니다. show 메소드는 웹스퀘어 컴포넌트를 화면에 표시하며, toggleClass 메소드는 특정 class를 제거하거나 추가합니다. trigger 메소드는 특정 이벤트를 발생시키며, unbind 메소드는 이벤트를 제거합니다. validateObject 메소드는 컴포넌트의 유효성 검사를 실행하며, visible 메소드는 CSS visibility 속성을 설정합니다.",265
197,"80 websquare 가이드 개발자 가이드 OPS 장 01.html. 
문서 이력
1. 문서 이력표 1-1. 문서 변경 내역
일자       내용
2021-02-17   localeRef 속성 값이 언어 파일에 정의되지 않은 경우 추가.
2021-12-16   예제 파일 및 YouTube 동영상 링크 정보 제공 방식 개선.
2021-08-20   클라이언트 다국어 업데이트.
2021-06-02   UDC 가이드 업데이트.
2021-02-19   모바일 웹 개발 가이드 – 모바일 개발시 사용가능 컴포넌트 항목에서 WFrame을 권장으로 변경.
2020-08-25   IE 브라우저에서의 렌더링 속도 추가.
2020-06-24   비권장 사례 모음 추가.
2019-11-15   설정 가이드를 SP3 사용자 가이드 및 SP4 사용자 가이드로 이동.
2019-11-08   최초 발행.",298
198,"WebSquare.uiplugin.textarea는 여러 줄의 텍스트 입력을 지원하는 컴포넌트로, HTML <textarea>와 유사한 인터페이스를 제공한다. 이 컴포넌트는 <textarea> 태그로 구성되며, HTML의 class 속성과 동일한 기능을 제공하는 class 속성을 가진다. 또한, 컴포넌트 비활성 여부(disabled), 필수 선택 적용 여부(mandatory), 입력 가능한 최대 길이(maxlength), 최소 입력 길이(minlength), placeholder, 읽기만 허용(readOnly) 등의 속성을 가진다. 이 컴포넌트는 다양한 이벤트(onblur, onchange, onclick 등)와 메소드(addClass, bind, changeClass 등)를 제공한다. 이 컴포넌트는 DataCollection의 value와 바인딩할 수 있으며, ref 속성을 통해 설정할 수 있다.",257
199,"웹스퀘어 컴포넌트의 크기, CSS 속성, title 속성, 임의의 데이터, value, 화면 표시, class 추가/제거, 이벤트 발생, 이벤트 제거, ref 바인딩 해제, 유효성 검사, 비활성화 여부, 실패 안내 메시지, 이전 포커스 위치 기억 여부, 컴포넌트 ID, 입력 가능한 최대/최소 길이, name 태그, 다음 탭 이동 여부, placeholder, 복사/붙여넣기 금지 여부, 읽기 전용 여부, value 경로, 툴팁, 사용자 정의 데이터 속성, 유효성 검사 함수, 포커스 사라짐 이벤트.",216
200,"이벤트 객체 eObject는 컴포넌트의 값이 변경되거나 클릭, 더블-클릭, 키보드 입력 등의 이벤트가 발생할 때 사용된다. onchange 이벤트는 컴포넌트의 값이 변경될 때 발생하며, onviewchange 이벤트는 값이 변경된 경우에 발생한다. 이벤트에 대한 정보는 JSON 형태로 반환되며, addClass, bind, changeClass, focus 등의 메소드를 사용하여 컴포넌트를 동적으로 제어할 수 있다. getDisabled, getID, getOpacity 등의 메소드를 사용하여 컴포넌트의 속성 값을 반환할 수 있다.",192
201,"Return typedescription String
컴포넌트의 originalID
Sample
 WFrame을 사용하는 다중 화면 구조 예시
 WFrame을 포함한 메인 화면 (main.xml)
 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)
 text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.
 getID 실행
textbox1.getID(); // 실행 결과는 ""wframe1_textbox1""
 getOriginalID 실행
textbox1.getOriginalID(); // 실행 결과는 ""textbox1""
getPluginName( )
웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)
Return typedescription String
웹스퀘어 컴포넌트의 이름 (pluginName)
Sample
 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.
var commObj = {};
commObj.fn_makeReqData = function(tmpObj){
    var tmpID = tmpObj.getID(); // 컴포넌트 ID
    var tmpCompType = tmpObj.getPluginName(); // 컴포넌트 이름
    if(tmpCompType == ""input""){ //..로직..
    }else if(tmpCompType == ""gridView""){ //..로직 ..
    }else{ //..로직..
    }
};
getPosition( positionName )
웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.
Parameter nametyperequireddescription
positionNameStringY[left, top] 위치 종류
Return typedescription Number
컴포넌트의 위치 값
Sample
 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,
 (예제) 위의 inputBox 컴포넌트의 top 값을 확인
var returnValue = input1.getPosition(""top""); // 픽셀 단위의 위치 값이 반환됨.
 (반환 값) 10
getReadOnly( )
현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)
Return typedescription Boolean
현재 설정되어있는 readOnly 속성
Sample
 컴포넌트의 readOnly 속성 값 확인 예제
var returnValue = componentId.getReadOnly(); // (반환 값 예시) false
getScope( )
scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.) scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.
Return typedescription Object
WFrame 객체 또는 null
Sample
 (예제)
 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재.
 그리고, wframe11 내부에 textbox1이 존재.
textbox1.getScope(); // (반환 값) wframe11 객체
getScopeWindow( )
scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.
Return typedescription Object
WFrame 객체의 scope 객체 또는 전역 window 객체
Sample
 (예제)
 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재.
 그리고, wframe11 내부에 textbox1이 존재.
var scope = textbox1.getScopeWindow();
scope.wframe11 === textbox1.getScope(); // true
getSize( sizeName )
웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) %로 설정된 경우, 픽셀로 변환된 값을 반환.
Parameter nametyperequireddescription
sizeNameStringY크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.
height : element.clientHeight
innerHeight : element.clientHeight + padding
outerHeight : element.clientHeight + padding + border
outerMarginHeight : element.clientHeight + padding + border + margin
width : element.clientWidth
innerWidth : element.clientWidth + padding
outerWidth : element.clientWidth + padding + border
outerMarginWidth : element.clientWidth + padding + border + margin
Return typedescription Number
컴포넌트의 크기 값
Sample
var returnValue = componentId.getSize(""width""); // (반환 예) 100
 픽셀 단위의 크기 값이 반환됨.
 %로 설정된 경우, 픽셀로 변환된 값이 반환됨.
getStyle( propertyName )
웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)
Parameter nametyperequireddescription
propertyNameStringY반환할 CSS 속성
Return typedescription String
CSS 속성 값
Sample
아래와 같이 input 컴포넌트가 정의 된 경우
 (예제) 위의 inputBox 컴포넌트의 width 값을 확인
var returnValue = input1.getStyle(""width""); // (반환 값) ""144px""
getStyleValue( style )
[deprecated]getStyle 사용 권장.웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.
Parameter nametyperequireddescription
styleStringY반환하려는 CSS 속성.
Return typedescription String
style",1519
202,"컴포넌트를 숨기는 방법은 componentId.hide()이며, removeClass(className)을 사용하여 웹스퀘어 컴포넌트에서 class를 삭제할 수 있다. config.xml 파일에 <removeDefaultClass value=""true"" /> 설정을 추가하여 컴포넌트의 속성으로 직접 정의된 class를 삭제할 수 있다. setDisabled(disabled)를 사용하여 컴포넌트의 disabled 속성을 설정할 수 있으며, setEventPause(evList, flag)를 사용하여 지정한 이벤트를 중단할 수 있다. setInitStyle(property)를 사용하여 컴포넌트의 초기 스타일을 복구할 수 있으며, setOpacity(value)를 사용하여 웹스퀘어 컴포넌트의 불투명도를 설정할 수 있다. setPlaceholder(placeholderStr)를 사용하여 placeholder 속성값을 변경할 수 있으며, setPosition(left, top, mode)를 사용하여 컴포넌트의 위치를 설정할 수 있다. setReadOnly(readOnly)를 사용하여 컴포넌트의 readOnly 속성을 설정할 수 있으며, setRef(설정할)을 사용하여 ref 속성을 설정할 수 있다. setSize(width, height)를 사용하여 컴포넌트의 크기를 설정할 수 있으며, setStyle(propertyName, value)를 사용하여 CSS 속성을 설정할 수 있다. setTitle(title)을 사용하여 컴포넌트의 title 속성을 설정할 수 있으며, setUserData(key, value)를 사용하여 웹스퀘어 컴포넌트에 임의의 데이터를 설정할 수 있다. setValue(value)를 사용하여 컴포넌트의 value를 설정할 수 있으며, show(displayType)를 사용하여 컴포넌트를 화면에 표시할 수 있다. toggleClass(className)를 사용하여 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가할 수 있으며, trigger(type, array)를 사용하여 컴포넌트에서 특정 이벤트를 발생시킬 수 있다.",566
203,"웹스퀘어 컴포넌트에서는 trigger, unbind, unbindRef, validate, visible 메소드를 사용할 수 있다. trigger 메소드는 이벤트를 발생시키며, unbind 메소드는 이벤트를 제거한다. unbindRef 메소드는 ref 바인딩을 해제하고, validate 메소드는 유효성 검사를 수행한다. visible 메소드는 show/hide 혹은 setStyle 사용을 권장하며, CSS visibility 속성을 설정한다.",139
204,"WebSquare 가이드의 웹 접근성 OPS 챕터 29에서는 테이블 레이아웃을 생성하는 방법과 웹 접근성을 고려한 마크업 방법을 설명합니다. 테이블 레이아웃을 생성할 때는 Thead/Tbody/Tfoot를 선택하고 각각의 행 수를 지정하고 헤더를 선택하면 됩니다. 생성 방식은 Websquare Group 방식과 HTML 방식이 있으며, HTML 방식은 정보 전달을 위한 것입니다. 생성된 테이블에서는 th에 scope 속성을 적용해야 합니다. HTML5에서는 summary 속성을 지원하지 않으므로, summary 대신 caption을 사용하고, th에는 scope=""col"" 또는 scope=""row""를 적용해야 합니다. TD Headers를 적용하는 경우, th에 id를 채번한 후 TD Headers 생성을 선택하면 됩니다. 이때, id는 th에만 적용하며, td는 자동으로 바인딩됩니다.",284
205,"28. TabControl
TabControl is a component that is divided into a tab button area and a content area. Each tab button provides an anchor that takes you directly to the corresponding content page. By setting closable=""true"", you can add a button to dynamically delete the tab. If you also use the useATagBtn=""true"" attribute, the close button will be rendered as an <a> tag. 
<Check Point>
√ Is the focus state border (outline) clearly visible?
√ Is the useTabKeyOnly attribute set to true (default)?
√ If closable=""true"", is useATagBtn=""true"" also set?
√ Is an appropriate title value entered for each content area? (Required for frameMode=""iframe"")
Related Guidelines: 2.1.2. Keyboard Access, 1.3.5. Separate Content, 2.1.1. Keyboard Accessible, 2.1.2. Keyboard Access
<Xml source>
<w2:tabControl id=""tabControl1"" closable="""" style="""" confirmTrueAction=""exist"" class="""" useConfirmMessage=""false"" confirmFalseAction=""new"" useTabKeyOnly=""true"" closable=""true"" useATagBtn=""true"" alwaysDraw=""false"" tabScroll="""">
    <w2:tabs id=""tabs1"" closable="""" style=""height:30px;"" label=""Tab메뉴 1"" disabled="""" tabType=""""></w2:tabs>
    <w2:tabs id=""tabs2"" closable="""" style=""height:30px;"" label=""인스웨이브"" disabled="""" tabType=""""></w2:tabs>
    <w2:content id=""content1"" style="""" alwaysDraw=""false"">
        <w2:anchor id=""anchor1"" style="""" href=""#"">
            <xf:label>Tab메뉴 1</xf:label>
        </w2:anchor>
    </w2:content>
    <w2:content id=""content2"" style="""" alwaysDraw=""false"" frameMode=”iframe” src=http://inswave.com/ title=”인스웨이브 홈페이지”>
    </w2:content>
</w2:tabControl>",473
206,"WebSquare.uiplugin.fliptoggle는 모바일 전용 토글링 컴포넌트로, On/Off와 같이 상태를 변경할 수 있는 모바일 전용 인터페이스를 제공합니다. HTML <div> 태그를 사용하여 최상위를 구성하며, 다양한 속성을 설정할 수 있습니다. accessibility 속성은 모바일 접근성을 지원하며, class 속성은 HTML의 class 속성과 동일한 기능을 제공합니다. escape 속성은 <>&""를 HTML Escape 문자로 변환하여 화면에 표시할지 여부를 설정하며, id 속성은 컴포넌트 ID를 설정합니다. label 속성은 UI 화면에는 표현되지 않지만, offLocaleRef와 onLocaleRef 속성은 클라이언트 다국어 적용시 화면에 출력하는 off/on 텍스트의 key를 설정합니다. 이외에도 다양한 Method와 Property를 제공합니다.",269
207,"tabIndex 속성을 이용하여 포커스를 변경할 때, 해당 컴포넌트에 포커스를 주는 순서를 HTML의 tabindex 속성과 동일하게 설정할 수 있습니다. useClickToggle 속성은 마우스 클릭을 통한 토글 사용 여부를 설정할 수 있으며, 기본값은 true입니다. useLocale 속성은 클라이언트의 다국어 key를 이용하여 label에 표현되는 값을 다국어로 표현할지 여부를 설정할 수 있습니다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성으로, getUserData(""속성명"") API를 통해 값을 얻어올 수 있습니다. ontogglechange 이벤트는 토글 시에 발생합니다. addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope 메서드는 웹스퀘어 컴포넌트에서 공통으로 사용되는 메서드입니다. 각 메서드의 기능은 이름 그대로 해당 컴포넌트의 속성 값을 반환합니다.",318
208,"getScopeWindow( ) 메서드는 scope 속성이 true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 그렇지 않은 경우 전역 window 객체를 반환한다. getSize( sizeName ) 메서드는 웹스퀘어 컴포넌트의 크기를 반환하며, sizeName에 따라 다른 값을 반환한다. getStyle( propertyName ) 메서드는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getUdcHome( ) 메서드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUdcRoot( ) 메서드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, 파일명을 포함하지 않는다. getUserData( key ) 메서드는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getValue( ) 메서드는 토글된 value 값을 반환한다. hasClass( className ) 메서드는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide( ) 메서드는 웹스퀘어 컴포넌트를 화면에서 숨긴다. removeClass( className ) 메서드는 웹스퀘어 컴포넌트에서 class를 삭제한다. setDisabled( disabled ) 메서드는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause( evList , flag ) 메서드는 지정한 이벤트를 중단하거나 중단을 해제한다. setInitStyle( property ) 메서드는 컴포넌트의 초기 스타일을 복구한다. setOpacity( value ) 메서드는 웹스퀘어 컴포넌트의 불투명도를 설정한다.",497
209,"웹스퀘어 컴포넌트에서 사용 가능한 함수들이다. setOpacity()는 불투명도를 설정하고, setPosition()은 위치를 설정한다. setReadOnly()는 readOnly 속성을 설정하며, setSize()는 크기를 설정한다. setStyle()은 CSS 속성을 설정하고, setUserData()는 임의의 데이터를 설정한다. setValue()는 값을 토글하며, show()는 컴포넌트를 화면에 표시한다. toggle()은 토글 처리를 수행하고, toggleClass()는 class를 추가하거나 제거한다. trigger()는 이벤트를 발생시키고, unbind()는 이벤트를 제거한다. visible()는 CSS visibility 속성을 설정한다.",200
210,"Snippets는 코드 조각을 저장하고 재사용할 수 있는 기능입니다. 이 기능을 사용하면 자주 사용하는 코드를 반복해서 작성하지 않고, 저장된 코드를 불러와서 사용할 수 있습니다. Snippets 도구 모음에서는 Snippets를 생성하고 관리할 수 있습니다. Snippets를 생성하려면 코드를 선택하고, 마우스 오른쪽 버튼을 클릭한 후, ""Create Snippet""을 선택합니다. Snippets를 사용하려면, 코드 편집기에서 Snippets 도구 모음에서 원하는 Snippet을 선택하고, 코드에 삽입합니다. Snippets를 내보내거나 불러오려면, Snippets 도구 모음에서 ""Export Snippets"" 또는 ""Import Snippets""를 선택합니다.",206
211,Websquare 가이드의 표지 페이지인 websquaretoc.html입니다.,18
212,"WebSquare.uiplugin.aliasLinkedDataList는 메인(혹은 부모) 화면에 있는 LinkedDataList를 참조할 수 있는 기능을 제공하는 uiplugin입니다. id, scope, studioSrc, userData1, userData2, userData3 등의 속성과 getObj(), setScope() 등의 메소드를 제공합니다. scope 속성은 메인(혹은 부모) 페이지에 존재하는 참조 대상 LinkedDataList의 ID를 지정하며, 상대 경로 혹은 절대 경로로 지정 가능합니다. studioSrc 속성은 부모 페이지의 정보를 가져오기 위한 Studio 전용 속성입니다. setScope() 메소드를 사용하여 Scope를 동적으로 변경할 수 있으며, 실행 후, aliasLinkedDataList와 바인딩된 컴포넌트들은 자동으로 값이 초기화됩니다.",219
213,"FwGaugeChart는 FusionWidget Wrapper 컴포넌트로, 차트에 보여줄 값과 스타일 옵션을 결합한 FusionWidgets 데이터를 사용합니다. WebSquare5에서는 API를 통해 차트를 쉽게 커스터마이징할 수 있습니다. chartType은 angulargauge, bulb, cylinder, hled, hlineargauge, thermometer, vled 등의 타입을 제공하며, ref는 dataList를, labelNode는 FwGaugeChart의 라벨 데이터로 사용할 DataCollection의 column ID값을, seriesType은 dataList 모양에 따라 advanced와 simple로 구분되며, valueNode는 FwGaugeChart의 값 데이터로 사용할 DataCollection의 column ID값을 설정합니다. FwGaugeChart의 디자인은 css가 아닌 차트가 제공하는 옵션에서 정의되며, DataCollection을 만들고 ref, labelNode, valueNode 등을 연결해야 합니다.",247
214,"WebSquare.uiplugin.Workflow는 워크플로우를 정의하는 데 사용됩니다. 이 속성은 uiplugin 타입이며, Workflow 설명과 ID, rejectCallback, resolveCallback 등의 속성을 가지고 있습니다. Workflow ID는 전역 객체로 할당되며, Script에서 해당 Workflow에 접근할 수 있습니다. rejectCallback은 작업 처리 도중 에러 발생 시 호출할 함수를 정의하고, resolveCallback은 처리해야 할 작업이 모두 완료된 후 호출할 함수를 정의합니다. 이벤트 및 메서드에 대한 자세한 내용은 문서를 참조하십시오. (5.0_5.4826M.20230213.171915)",190
215,"FwGanttChart는 FusionWidget Wrapper 컴포넌트로, 데이터와 스타일 옵션을 결합하여 차트를 생성합니다. WebSquare5에서는 API를 통해 차트를 쉽게 커스터마이징할 수 있습니다. fwGanttChart에는 자동으로 category를 생성하는 옵션과 category depth를 설정하는 옵션, 그리고 task 색상을 지정하는 옵션이 있습니다. 주의할 점은 css로 디자인을 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의해야 하며, DataCollection을 만들고 ref, labelNode, valueNode 등을 연결해야 합니다. 변경 방법은 기술지원에 문의하시기 바랍니다.",201
216,"CSS 기본 문법
CSS는 내부 스타일시트, 외부 스타일시트, 인라인 스타일시트 등의 세 가지 종류가 있습니다. 내부 스타일시트는 문서 안에 스타일 태그로 기재하여 스타일이 문서 내부에 함께 저장되는 형태입니다. 외부 스타일시트는 CSS 파일로 저장하여 문서에 파일명으로 연결해주는 형태입니다. 인라인 스타일시트는 요소의 style 속성으로 직접 입력하는 방법입니다. 스타일 시트의 우선순위는 인라인 스타일시트 > 문서 내부 스타일시트 > 외부 참조 스타일시트입니다.
CSS 선택자
웹스퀘어 컴포넌트는 기본적으로 엔진에서 CSS Class를 자동 생성해줍니다. CSS 선택자는 어떤 식의 문서 꾸밈을 해야하는지의 서술할 대상을 css 상에서 가르키는 방법입니다. 각 선택자는 우선순위가 달라 같은 요소더라도 선택자를 달리써서 표현을 다르게할 수 있습니다. 타입 선택자, 하위 선택자, ID/클래스 선택자, 속성 선택자 등이 있습니다.
선택자의 우선순위
선택자의 지정순위(개별성)가 높을수록 해당 규칙이 우선 적용됩니다. 지정순위가 똑같을 경우 나중에 정의된 규칙이 우선순위를 가지게 됩니다. 각 규칙의 지정순위를 계산하기 위해 선택자 유형별로 점수가 존재합니다. 이 규칙에 따라 각 스타일의 개별성은 다음과 같이 계산합니다. 선택자에 포함된 id의 수(=a), 가상 클래스와 속성(class 포함)의 수(=b), 요소명의 수(=c), 가상 요소는 계산에 포함하지 않습니다. 이러한 계산 규칙으로 개별성을 계산합니다.",622
217,"WebSquare5의 뷰와 툴바 개선사항에 대해 살펴보겠습니다.
8. 뷰 개선사항
- 뷰의 크기 조정이 불편하다.
- 뷰의 위치 조정이 불편하다.
- 뷰의 배치가 자유롭지 않다.
9. 툴바 개선사항
- 툴바의 아이콘 크기가 작아서 보기 불편하다.
- 툴바의 아이콘 위치 조정이 불편하다.
- 툴바의 아이콘 배치가 자유롭지 않다.
이러한 개선사항을 반영하여 WebSquare5의 뷰와 툴바를 보다 사용자 친화적으로 개선할 필요가 있습니다.",236
218,"80. 웹스퀘어 가이드 디자인 가이드 OPS 파트 03.html. 컴포넌트별 가이드파트 III. 
- 아코디언
- ActiveX
- 앵커
- 애플릿
- 아티클 (HTML5)
- 사이드 (HTML5)
- 오디오
- 자동완성
- 캘린더
- 캔버스 (HTML5)
- 차트
- 체크박스
- 체크콤보박스
- DatePicker
- 에디터
- 플래시
- 플립토글
- 플로팅 레이어
- 푸터 (HTML5)
- 퓨전차트
- FwBulletChart
- FwFunnelChart
- FwGanttChart
- FwGaugeChart
- FwPyramidChart
- FwRealtimeChart
- FwSparkChart
- 게이지
- 제너레이터
- 그리드
- 그리드뷰
- 그룹 + 텍스트박스와 또 다른 컴포넌트의 조합
- 그룹
- 헤더 (HTML5)
- 아이프레임
- 이미지
- 인풋박스
- 인풋캘린더
- 맵차트
- 메뉴
- 멀티셀렉트
- 멀티업로드
- 네비게이션 (HTML5)
- 아웃풋
- 페이지컨트롤
- 페이지상속
- 페이지리스트
- 피벗테이블
- 프로그레스바
- 라디오
- 반복
- 라운드렉탱글
- 스케줄캘린더
- 스크롤뷰
- 검색박스
- 시크릿
- 섹션 (HTML5)
- 셀렉트박스
- 슬라이드하이드
- 슬라이더
- 탭컨트롤
- 테이블레이아웃
- 태그
- 텍스트에어리어
- 텍스트박스
- 트리뷰
- 트리거
- 업로드
- 비디오
- WFrame
- 위젯컨테이너
- 윈도우컨테이너
- XHTML
- XSL",661
219,"WebSquare.uiplugin.autoFinder는 5.0_5.4617M.20220324.084547 버전에서 deprecated된 컴포넌트입니다. 이제 autoComplete 컴포넌트로 대체되었습니다. 이 컴포넌트에 대한 자세한 내용은 Property, Event, Method Summary 및 Detail을 참조하십시오.",94
220,"17장에서는 템플릿 화면의 분할화면에 대해 설명하고 있다. 이는 가변 2단 분할로 구성되며, 그리드 영역을 2단으로 나뉘어 보여준다. 화면 상단 공통 영역은 타이틀과 공통 버튼으로 구성되며, 검색 영역은 1행 X 6열로 Table과 버튼 영역으로 구성된다. 전체제어 버튼 영역은 업무 버튼, CRUD 버튼, 전체제어 버튼으로 구성되어 있다.",173
221,화면 전체제어버튼 영역을 선택 후 생성대화창이 뜨면 기준객체가 내가 선택한 컴포넌트(Group.pgtbox)인지 확인하고 삽입 위치(기준객체의 뒤에 추가)를 선택한다.그림 16-20.snippets_1-19,88
222,"전체 제어 버튼 영역을 선택한 후 생성 대화창이 나타나면, 기준 객체가 내가 선택한 컴포넌트(Group.wq_pglist)인지 확인하고, 기준 객체의 뒤에 추가할 위치를 선택합니다. 이때, 디자인 뷰에서 이전에 삽입한 컴포넌트(1.3. 전체 제어 버튼 영역)을 확인합니다. (그림 16-20, 16-21 참조)",136
223,"WebSquare.uiplugin.Model은 모델을 정의하는 데 사용됩니다. 이 클래스는 uiplugin 타입으로 분류되며, 속성, 이벤트 및 메소드를 포함합니다. 속성 요약, 이벤트 요약, 메소드 요약, 속성 세부 정보, 이벤트 세부 정보, 메소드 세부 정보를 포함합니다. WebSquare.uiplugin.Model.html을 참조하여 Property, Event, Method를 확인할 수 있습니다. 이 클래스의 버전은 5.0_5.4826M.20230213.171915입니다.",152
224,"메뉴 컴포넌트는 mainMenu와 그 하위의 childMenu로 구성됩니다. 가로메뉴와 세로메뉴 두 가지 종류의 메뉴로 표현할 수 있으며, class를 지정하여 메뉴 스타일을 변경할 수 있습니다. 메뉴가 선택되었을 때의 액션을 취할 수 있습니다. Property로는 class, dataType, firstMenuGap, id, isVertical, keepFirstSelectedMenu, menuHide, menuWidthType, overlapHeight, overlapWidth, selectedMenuIndex, showChildMenu, tabIndex, wmode이 있습니다. CSS Overriding은 w2menu, w2menu_main, w2menu_node, mainMenuDefault, w2menu_label로 구성됩니다. 메뉴컴포넌트는 내부시스템이나 웹표준에 대한 요구가 없을 경우 사용권장하며, group컴포넌트를 이용, css 및 javascript 등을 활용한 웹표준방식을 권장합니다.",278
225,"MapChart48.MapChartD3는 입력받은 데이터를 다양한 형태로 시각화하여 우리나라 전국지도에 표현하는 컴포넌트입니다. 사용자는 확대 및 축소 비율을 설정하고 드래그앤드롭, 사용자 정의 마킹 등의 기능을 사용할 수 있습니다. 이 컴포넌트에서는 dataList과 dataMapPath 등의 속성을 설정할 수 있으며, 이벤트 처리와 tooltip 표시 등의 기능도 제공합니다. MapChart의 디자인은 css로 변경하는 것이 아니라 스크립트를 이용해서 외부의 json 파일이나 html 파일의 값을 동적으로 가져와서 변경합니다. 변경 방법은 기술지원에서 문의해야 합니다.",217
226,"WebSquare.uiplugin.dataMap은 key와 value로 이루어진 단일 객체로, JAVA의 MAP 객체와 비슷한 구조를 갖는다. Key Info 영역과 Data 영역으로 나뉘어 있으며, Key Info 영역은 key의 정보가 있으며 Data 영역은 key의 초기값을 정의하는 곳이다. attributeMap, baseNode, defaultValue, firstSet, firstSetSubmission, id, idAttribute, length, userData1, userData2, userData3, valueAttribute 등의 속성이 있다. onbeforemodelchange, onkeyset, onmodelchange, onsetdata 등의 이벤트가 있다. bind, get, getArray, getCount, getID, getIndex, getInfo, getJSON, getKey, getKeyInfo, getModifiedArray, getModifiedData, getModifiedIndex, getModifiedJSON, getModifiedKey, getModifiedXML, getName, getObjectType, getOption, getOriginal, getScope, getScopeWindow, getType, getXML, initRowStatus, modifyKeyStatus, redo, reform, restore, set, setArray, setEmptyValue, setJSON, setXML, trigger, unbind, undo 등의 메소드가 있다.",275
227,"dataMap 객체의 여러 메소드와 이벤트에 대한 설명이다. dataMap 객체의 이벤트는 onsetdata와 onmodelchange가 있다. onsetdata는 데이터가 set될 때 발생하며, onmodelchange는 특정 key의 value가 변경된 이후에 발생한다. dataMap 객체의 메소드로는 bind, get, getArray, getCount, getID, getIndex, getInfo, getJSON, getKey, getKeyInfo, getModifiedArray, getModifiedData, getModifiedIndex, getModifiedJSON, getModifiedKey, getModifiedXML, getName, getObjectType, getOption, getOriginal, getScope, getScopeWindow, getType 등이 있다. 이들 메소드는 dataMap 객체의 데이터를 조회하거나 수정하는 데 사용된다.",181
228,"typedescription StringKey의 dataType 속성 값 반환
getXML( )
- DataMap의 전체 데이터를 XML 형태로 반환한다.
- Return typedescription XMLXML 타입의 전체 데이터
initRowStatus( )
- dataMap의 상태를 모두 변경되지않음 상태로 설정한다.
- dataMap1.getModifiedJSON() 호출 시 빈 객체가 반환된다.
modifyKeyStatus( key , isModified )
- key에 해당하는 상태값을 변경됨(true) 또는 변경되지않음(false) 상태로 조작한다.
- key1 상태를 변경되지않음으로 설정한다.
- dataMap1.getModifiedJSON 호출 시 key1은 빠지게 된다.
edo( )
- 데이터를 변경된 시점 최근 한단계로 되돌린다.
eform( )
- DataMap의 key의 상태를 초기화하고 original값을 현재의 key값으로 변경한다.
estore( )
- 데이터를 이전 한단계로 되돌린다.
set( KeyID , KeyValue )
- DataMap에 정의 된 Key ID에 value를 셋팅한다.
setArray( arrayData )
- DataMap의 전체 데이터를 Array로 셋팅한다.
setEmptyValue( )
- key값을 확인하여 빈 값을 셋팅합니다.
setJSON( jsonData )
- DataMap의 전체 데이터를 JSON으로 셋팅한다.
setXML( xmlData )
- DataMap의 전체 데이터를 XML로 셋팅한다.
trigger( eventType , paramArray )
- dataMap에 등록 된 특정 이벤트를 직접 발생시킨다.
unbind( eventType , function )
- dataMap의 정의 된 이벤트를 제거한다.
undo( )
- DataMap의 key value를 초기(original)값으로 변경한다.",441
229,"WebSquare.style은 컴포넌트의 크기 값을 반환하거나 Element의 크기를 설정하는 기능을 제공합니다. getSize() 메소드는 Element와 sizeName을 매개변수로 받아 해당 Element의 크기 값을 반환합니다. sizeName은 height, innerHeight, outerHeight, outerMarginHeight, width, innerWidth, outerWidth, outerMarginWidth 중 하나를 선택할 수 있습니다. setSize() 메소드는 Element와 width, height 값을 매개변수로 받아 해당 Element의 크기를 설정합니다.",133
230,"WebSquare.uiplugin.Submission은 서버와의 통신을 위한 객체로, 다양한 속성과 이벤트를 제공합니다. abortTrigger는 프로세스가 진행 중일 때 취소 버튼을 표시할지 여부를 설정하며, accept는 미디어 타입 및 우선순위를 설정합니다. action은 서버측 URL과 연동할 데이터 URL을 설정하고, customHandler는 사용자 정의 핸들러를 설정합니다. encoding은 서버측 인코딩 타입을 설정하며, errorHandler는 에러가 발생했을 때 실행될 핸들러를 설정합니다. id는 Submission 객체의 ID를 설정하며, instance는 인스턴스 ID를 설정합니다. mediatype은 서버와의 통신 방식을 설정하고, method는 요청 방식을 설정합니다. processMsg는 프로세스가 진행 중일 때 나타나는 메시지를 설정하며, ref는 서버로 보낼 데이터를 설정합니다. replace는 submission action으로부터 리턴된 response document를 적용할 정보를 설정하고, target은 서버로부터 응답 받은 데이터를 위치할 인스턴스 XPath 또는 데이터 콜렉션을 설정합니다. useModal은 submission이 실행되고 프로세스 메시지가 떠있는 동안에 modal을 띄워서 컴포넌트들을 disable시킬지 여부를 설정하며, userData1과 userData2는 웹단말 submission 통신 시 사용자 정의 변수를 설정합니다. webtopRef는 웹단말 submission 통신 시 IO 맵핑 룰을 정의하는 속성입니다. submit은 submission 요청 전 선처리를 수행하며, submitdone은 Response Status 코드 값이 정상일 경우 동작하고, submiterror는 Response Status 코드가 오류일 경우 동작합니다.",497
231,"WebSquare.uiplugin.pageControl은 페이지 이동용 UI를 제공하는 컴포넌트로, 앞으로 가기 및 뒤로 가기의 기능만을 제공합니다. 전체 페이지 수 및 페이지 당 표시하고 싶은 데이터 수는 직접 구현해야 합니다. 이 컴포넌트는 HTML의 class 속성과 동일한 기능을 제공하는 class 속성과, 컴포넌트 ID를 나타내는 id 속성, 전체 페이지 수를 나타내는 pageCount 속성, 페이지 번호를 표시하는 방법을 선택하는 pagingType 속성, 마지막 페이지 이후를 선택할 경우 첫번째 페이지로 돌아가고, 첫번째 페이지 이전의 페이지를 선택할 경우 마지막 페이지로 돌아가는 rotation 속성, Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 나타내는 tabIndex 속성, 사용자 정의 데이터 속성인 userData1, userData2, userData3 속성이 있습니다. onchange 이벤트와 onviewchange 이벤트가 있으며, addClass(), bind(), changeClass(), focus(), getDisabled(), getGenerator(), getID(), getInitStyle(), getOpacity(), getOriginalID(), getPluginName(), getPosition(), getReadOnly(), getScope(), getScopeWindow(), getSelectedIndex(), getSize(), getStyle(), getStyleValue(), getUdcHome(), getUdcRoot(), getUserData(), hasClass(), hide(), moveToLeft(), moveToRight(), removeClass(), setCount(), setDisabled(), setEventPause(), setInitStyle(), setOpacity(), setPosition(), setReadOnly(), setSelectedIndex(), setSize(), setStyle(), setUserData(), show(), toggleClass(), trigger(), unbind() 메소드가 있습니다.",449
232,"이벤트의 인자가 정의된 예시 코드는 ev:event=""onchange( current , before )""입니다. 값이 변경되면 output1.setValue(before +""->"" + current); 코드가 실행됩니다. 값이 변경된 경우에만 발생하며, infoObject로 oldValue, newValue, oldSelectedIndex, newSelectedIndex를 반환합니다. addClass(className) 함수는 컴포넌트에 CSS class를 추가하고, bind(eventType, function) 함수는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다. changeClass(oldClassName, newClassName) 함수는 컴포넌트의 class를 변경하고, focus() 함수는 컴포넌트에 포커스를 줍니다. getDisabled() 함수는 컴포넌트의 disabled 속성 값을 반환하며, getGenerator() 함수는 컴포넌트를 생성한 부모 Generator 객체를 반환합니다. getID() 함수는 컴포넌트의 ID를 반환하고, getOriginalID() 함수는 컴포넌트의 originalID를 반환합니다. getPluginName() 함수는 컴포넌트의 이름(pluginName)을 반환하며, getPosition(positionName) 함수는 컴포넌트의 위치(left, top) 값을 반환합니다. getReadOnly() 함수는 컴포넌트의 readOnly 속성 값을 반환하며, getScope() 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환합니다. getScopeWindow() 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환하며, 자식 컴포넌트가 아닌 경우 전역 window 객체를 반환합니다.",421
233,"getScopeWindow( ) 메서드는 ObjectWFrame 객체의 scope 객체나 전역 window 객체를 반환합니다. getSelectedIndex( ) 메서드는 현재 선택된 인덱스를 반환합니다. getSize( sizeName ) 메서드는 웹스퀘어 컴포넌트의 크기를 반환합니다. getStyle( propertyName ) 메서드는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getStyleValue( style ) 메서드는 해당 CSS 속성 값을 반환합니다. getTitle( ) 메서드는 컴포넌트의 title 속성 값을 반환합니다. getUdcHome( ) 메서드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. getUdcRoot( ) 메서드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. getUserData( key ) 메서드는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환합니다. hasClass( className ) 메서드는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide( ) 메서드는 웹스퀘어 컴포넌트를 화면에서 숨김 처리합니다. moveToLeft( direction ) 메서드는 선택된 인덱스를 ""1""만큼 감소시킵니다. moveToRight( direction ) 메서드는 선택된 인덱스를 ""1""만큼 증가시킵니다. removeClass( className ) 메서드는 웹스퀘어 컴포넌트에서 class를 삭제합니다. setCount( count ) 메서드는 PageList의 전체 페이지 수를 새로 지정합니다. setDisabled( disabled ) 메서드는 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다. setEventPause( evList , flag ) 메서드는 지정한 이벤트를 중단합니다.",498
234,"input1.setEventPause(""onfocus,onblur"", false); // input1에 등록된 모든 사용자 이벤트를 중단. input1.setEventPause(null, true); 
setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구한다. 
setOpacity( value ) : 웹스퀘어 컴포넌트의 불투명도를 설정. 
setPosition( left , top , mode ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정. 
setReadOnly( readOnly ) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정. 
setSelectedIndex( idx , direction ) : 선택된 인덱스를 변경. 
setSize( width , height ) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정. 
setStyle( propertyName , value ) : 컴포넌트의 propertyName에 해당하는 style의 값을 설정합니다. 
setUserData( key , value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정. 
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시. 
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. 
trigger( type , array ) : 컴포넌트에서 특정 이벤트를 발생시킴. 
unbind( type , function ) : 컴포넌트에서 이벤트를 제거. 
visible( flag ) : 엔진 내부적으로 CSS visibility 속성을 설정. (deprecated)",430
235,"Textbox는 문자열을 출력할 수 있는 컴포넌트로, HTML div 태그로 표현됩니다. Tagname 속성을 이용하여 Textbox가 child를 가질 수 없는 컴포넌트임으로 컨테이너성 Tag의 경우 Group 컴포넌트와 함께 사용합니다. Property로는 class, dataType, displayFormat, escape, for, id, label, style, tabIndex, toolTip, tooltipFormatter, html attributes 등이 있습니다. Textbox를 활용하여 가로형 테이블 형태의 디자인을 입힐 때는 group 컴포넌트를 이용하여 행과 셀을 그룹핑하고, CSS를 작성하여 스타일을 적용합니다. 이때, 외부 스타일 시트를 작성하여 클래스를 적용할 수도 있습니다.",229
236,"Group과 Textbox 컴포넌트는 tagname 속성을 통해 마크업을 변경할 수 있습니다. 먼저, 복사한 컴포넌트에 CSS Class를 입력하고, table 관련 스타일 시트를 작성합니다. 그 후, 각 컴포넌트의 tagname을 수정하여 마크업을 결정합니다. 데이터 헤더에 대한 제목 범위를 지정하는 'scope' 속성을 추가하면 기본적인 table 마크업이 완성됩니다. Textbox 컴포넌트의 속성 추가는 Group 컴포넌트와 같은 방법으로 'scope' 속성을 추가합니다. Property > for 속성은 컴포넌트(Label)가 클릭 됐을때 Focus를 주고 자 하는 컴포넌트 ID를 정의하며, 해당 속성을 활성화 할 경우 textbox 컴포넌트는 tagname을 무시하고 html 랜더링 시 div 혹은 사용자정의 태그가 아닌 label 태그로 고정됩니다.",303
237,"24. 웹 접근성 OPS
입력 받아야 할 정보의 주제를 title 속성에 명시하거나, label을 사용하여 textbox 컴포넌트에 명시해야 합니다. Label과 title은 중복으로 사용하지 않습니다. 컴포넌트의 id값과 textbox를 사용한 label의 for값이 서로 동일하게 연결되어 있는지 확인해야 합니다. 만약 Label을 사용할 수 없는 디자인일 경우, input에 title 속성을 제공해야 합니다. 또한, 포커스 상태의 테두리(outline)가 명확하게 나타나는지 확인해야 합니다.
<w2:textbox id="" "" label=""패스워드"" tagname=""label"" for=""secret1""></w2:textbox>
<xf:secret id=""secret1"" maxlength=""6"" title=""패스워드"" />
<xf:secret id="" "" maxlength=""7"" title=""패스워드 확인"" />",255
238,"Section25.1 - HTML5 태그의 사용
HTML5 태그인 section은 일반 문서나 프로그램에서 제목으로 시작하는 컨텐츠의 의미적 그룹을 나타내며, 페이지의 논리적인 영역을 정의하거나 하나의 컨텐츠 그룹을 정의할 때 사용합니다. 이 태그의 사용은 접근성과 직접적인 관계는 없습니다.",127
239,"Textarea76은 HTML의 textarea 태그와 유사한 인터페이스를 갖는 컴포넌트로, 개행이 있는 Text를 쓰거나 표현할 수 있다. 이 컴포넌트는 textarea 태그로 구성되어 있으며, class, id, disabled, focusRemember, maxlength, minlength, nextTabID, placeholder, readOnly, style, tabIndex, title, toolTip 등의 속성을 제공한다. Textarea는 브라우저에 따라 보여지는 디자인의 모습이 조금씩 다르며, 보더 색상이나 보더 스타일 변경을 할 수 있다. 또한, tooltip을 사용하여 해당 엘리먼트에 대한 설명을 적어줄 수 있다. 주의사항으로는, <textarea> 태그로 파싱되며, for값과 id값의 1:1 매칭을 권장하며, 불가할 경우 title 속성을 추가해야 한다.",269
240,"WebSquare5는 HTML5의 기본 스펙인 <title> 외에 툴팁(toolTip)을 지원합니다. 툴팁은 표시 여부, 스타일, 표시 시간을 개발자가 제어할 수 있습니다. 툴팁을 사용할 수 있는 컴포넌트는 Anchor, AutoComplete, Calendar, Chart, CheckBox, GridView, Group, IFrame, Image, Input, InputCalendar, MultiSelect, Radio, SearchBox, Secret, SelectBox, Slider, TextArea, TextBox, TreeView, Trigger, WFrame, WindowContainer 입니다. Config.xml 파일에서 툴팁 효과를 설정할 수 있으며, CheckBox 컴포넌트와 GridView 컴포넌트에서 각 선택 항목에 대한 툴팁을 정의하여 표시할 수 있습니다. GridView 컴포넌트에서는 Body, Header, 지정한 컬럼 등에서 툴팁을 표시할 수 있습니다.",252
241,"이 문서는 WebSquare의 SP4 사용자 가이드의 31장인 ""OPS""에 대한 내용입니다. OPS는 WebSquare에서 제공하는 운영 및 모니터링 도구입니다. 이 도구를 사용하여 WebSquare 애플리케이션의 성능을 모니터링하고, 문제를 진단하고, 해결할 수 있습니다. 이 장에서는 OPS의 기능과 사용 방법에 대해 자세히 설명합니다. 또한 OPS를 사용하여 WebSquare 애플리케이션의 성능을 최적화하는 방법도 다룹니다. 이 문서를 참조하여 WebSquare 애플리케이션의 운영 및 모니터링에 대한 이해를 높이고, 성능 최적화에 도움이 될 수 있습니다.",228
242,"POI 3.9를 사용할 경우 오류가 발생할 수 있으며, xlsx 확장자만 (Excel 97 이상) 지원하며 xls는 지원하지 않습니다. pwd는 BASE64 방식으로 인코딩되어야 합니다. advancedExcelDownload 함수를 통해 엑셀 파일로 다운로드 할 데이터 크기를 제한할 수 있으며, GridView가 설정한 최대 셀 혹은 행 개수를 초과할 경우 다운로드 요청이 서버로 전달되지 않습니다. advancedExcelDownload() 함수를 사용하여 GridView를 Excel 파일로 다운로드할 때, 출력할 데이터의 표시 형식(셀 타입)을 Body, SubTotal, Footer의 컬럼의 excelCellType 속성을 통해 지정할 수 있습니다. GridView의 advancedExcelDownload() 함수를 통해 Excel 파일을 다운로드할 때, Excel 파일에서 해당 컬럼에 포맷을 적용하기 위해 실행할 사용자 함수를 지정할 수 있습니다. advancedExcelDownload() 함수를 사용하여 GridView를 Excel 파일로 다운로드할 때, GridView 각 셀에 포함된 공백을 제거할 수 있습니다. advancedExcelUpload 함수를 사용하여 Excel, CVS, 한셀, 넥셀 파일을 GridView로 업로드할 수 있으며, 그리드의 내용을 Excel 파일로 저장하거나 Excel 파일 내용을 그리드로 표현할 수 있습니다. 업로드에서 제외할 Excel 파일의 컬럼을 지정할 수 있습니다.",392
243,"GridView에서 Excel 파일을 업로드하는 방법에 대해 설명합니다. sheetName 옵션을 사용하여 지정한 시트만 업로드할 수 있으며, headerExist 옵션을 사용하여 헤더를 제외한 Excel 파일을 업로드할 수 있습니다. 또한 dateFormat 옵션을 사용하여 Excel 파일에 표시될 날짜 포맷을 지정할 수 있으며, advancedExcelUpload() 함수의 wframe 옵션을 사용하여 업로드 창의 속성을 지정할 수 있습니다. 업로드할 데이터 종류(value 혹은 label)를 명시하거나, 컬럼 별로 지정할 수 있으며, trim 옵션을 사용하여 Excel 파일의 각 셀에 포함된 공백을 제거할 수 있습니다. 다국어를 적용하는 방법도 설명합니다.",229
244,"GridView 컴포넌트에서는 Excel 파일을 다운로드하거나 업로드할 수 있습니다. 소수점 데이터를 업로드할 때는 options.applyDecimal=""1"" 옵션을 사용하여 반올림 자리수를 지정할 수 있습니다. CSV 파일을 다운로드하거나 업로드할 때는 saveCSV() 함수와 readCSV() 함수를 사용할 수 있습니다. 여러 개의 GridView나 DataList를 별도의 Excel 파일이나 시트로 저장할 때는 Websquare.util.multipleExcelDownload() 함수나 Websquare.util.multipleDataListDownload() 함수를 사용할 수 있습니다. Pivot 컴포넌트에서는 pivotExcelDownload() 함수와 pivotExcelUpload() 함수를 사용하여 Excel 파일을 다운로드하거나 업로드할 수 있습니다. Pivot 데이터를 CSV 파일로 다운로드하거나 업로드할 때는 pivotCSVDownloadCSV() 함수와 pivotCSVUploadCSV() 함수를 사용할 수 있습니다.",242
245,"WebSquare.uiplugin.aside는 HTML5의 Aside와 같은 역할을 하는 컴포넌트이다. 이 컴포넌트는 class와 id 속성을 이용하여 CSS를 제어할 수 있다. 컴포넌트 ID는 전역 객체로 할당되며, Script에서 해당 컴포넌트에 접근할 수 있다. 이 컴포넌트의 자세한 사용법은 WebSquare.uiplugin.aside.html과 Property, Event, Method를 참고하면 된다.",140
246,"WebSquare에서는 $p.log API를 이용하여 로그를 출력할 수 있습니다. 로그는 시간, 경과시간, 로그출력기, 메시지로 구성되며, 브라우저 콘솔 로그와 개발자 도구를 이용하여 확인할 수 있습니다. config.xml 파일에서 로그 타입을 지정할 수 있으며, WebSquare5에서는 로그 보기, DataCollection 보기, 페이지 소스 보기 등의 디버깅 메뉴를 제공합니다. WebSquare.logger의 enableContextMenu() 및 disableContextMenu() 함수를 사용하여 디버깅용 컨텍스트 메뉴 사용을 허용하거나 차단할 수 있습니다.",185
247,"WebSquare Page는 웹스퀘어의 SPA 구현 방법론이자 UI 개발의 기본 단위입니다. WebSquare Page는 모델, 뷰, 컨트롤을 포함하는 독립적인 업무 화면이나 단위 모듈로 기능하는 UI 구성 요소를 구현할 수 있습니다. WebSquare Page는 별도의 XML 파일로 저장되며, 단독으로 화면에 표시되거나 컨테이너 컴포넌트에 포함되어 표현 가능합니다. 또한, 별도의 Scope 설정이 가능하며, 컴포넌트로 동작합니다. WebSquare Page를 이용하면 웹페이지 전체를 하나의 Single Page로 쉽게 구현할 수 있습니다. WFrame은 IFrame을 대체할 수 있으며, IFrame 사용을 최소화하여 웹 어플리케이션의 전반적인 성능을 개선할 수 있습니다. WebSquare5로 생성되는 XML 코드와 일반적인 HTML 코드 구조를 비교한 것도 있습니다. WebSquare Page 파일 생성 시 자동 생성되는 onpageload 이벤트와 initScript, postScript 등의 스크립트를 이용하여 페이지 로딩 후 실행되는 스크립트를 정의할 수 있습니다.",361
248,"위의 코드는 Scope 기능을 사용할 때 스크립트가 동작하는 순서를 나타내는 것이다. 스크립트 실행 순서는 외부 JS 파일, 로컬 영역의 스크립트, <initScript>, onpageload, <postScript> 순서로 진행된다. 만약 메인 페이지가 WFrame을 포함하고 있다면, 실행 순서는 외부 JS 파일, 메인 페이지, WFrame, 로컬 영역의 스크립트, <initScript>, onpageload, <postScript> 순서로 진행된다. 또한, WFrame이 중첩된 경우에는 스크립트 수행 순서가 다르게 된다. Scope 기능을 사용하지 않는 경우에는 외부 JS 파일, 메인 페이지의 initScript, <script> 영역에 정의된 스크립트, 메인 페이지의 onpageload 이벤트, WFrame 컴포넌트의 initScript, <script> 영역에 정의된 스크립트, WFrame 컴포넌트의 onpageload 이벤트, <postScript> 순서로 진행된다.",328
249,"43. Header (HTML5)
<header> 태그는 문서나 문장의 머리글을 작성하는 태그입니다. header는 일반적으로 내용 소개나 네비게이션 링크를 포함합니다. id 속성은 컴포넌트의 고유 식별자로 script에서 해당 컴포넌트에 접근할 수 있습니다. CSS 스타일을 직접 수정하려면 websquare의 style 편집기에서 해당 style을 수정하면 됩니다. HTML5에서 추가된 요소로 웹스퀘어에서는 컴포넌트로 사용되며, 따로 속성이 없습니다. 필요한 경우 Attribute Add로 속성을 추가할 수 있습니다.",199
250,Footer10.1Footerhtml5 태그는 웹 페이지의 footer 영역을 지정할 때 사용됩니다. 이 태그는 웹 접근성과 직접적인 관련이 없습니다.,55
251,Generator11은 컨텐츠를 반복해서 나타내고자 할 때 사용하는 컨테이너성 컴포넌트입니다. 이 컴포넌트는 접근성과 직접적인 관련이 없습니다.,72
252,"Group 컴포넌트는 여러 컴포넌트를 그룹화하여 사용할 수 있는 컨테이너성 컴포넌트입니다. 이 컴포넌트는 기본적으로 div 태그로 파싱되며, 페이지 레이아웃 등에 많이 사용됩니다. Group 컴포넌트의 주요 속성으로는 adaptivetagname, adaptiveThreshold, class, id, style, tabIndex, tagname, tooltipFormatter, html attributes 등이 있습니다. Group 컴포넌트는 value를 가질 수 없는 컴포넌트이므로 value를 설정해야 하는 경우 Textbox 컴포넌트와 함께 사용합니다. CSS Class를 이용하여 스타일을 변경할 수 있으며, tagname 속성을 이용하여 마크업을 변경할 수 있습니다. 이를 통해 웹 표준·웹 접근성을 준수할 수 있습니다.",262
253,"웹스퀘어5에서는 셀렉트박스로 제공되지 않은 태그들은 tagname에 직접 입력하여 적용할 수 있습니다. tag가 가지고 있는 속성대로 보여주며, 속성 추가/삭제/수정이 가능합니다. Group 컴포넌트의 tagname을 변경하여 UL, LI 구조를 만들 수 있으며, API를 이용해 Class를 변경할 수 있습니다. addClass, removeClass, changeClass, toggleClass API를 사용하여 CSS Class를 추가/삭제/치환/토글할 수 있습니다. 이때, 모든 컴포넌트의 API는 ID셀렉터로 접근해야 하며, trigger 버튼을 만들어 onClick 이벤트를 추가하여 사용합니다.",208
254,"toggleClass() API는 hasClass()를 체크하여 removeClass(), addClass()를 따로 해주지 않아도 되는 편리한 API입니다. toggleClass trigger 버튼을 오른쪽 클릭하여 onClick 이벤트를 추가하고, toggleClass() 함수를 사용하여 CSS 클래스를 번갈아가며 추가하거나 제거할 수 있습니다. API의 자세한 내용은 웹스퀘어 기술지원사이트의 API 탭에서 확인할 수 있습니다.",126
255,"WebSquare.localStorage는 크로스 브라우징 가능한 범용 로컬 스토리지를 제공합니다. WebSquare.localStorage.length는 로컬 스토리지의 (key, value)쌍의 데이터 전체 크기를 나타내는 상수값입니다. WebSquare.localStorage.key는 입력된 index에 대한 해당 키값을 반환합니다. WebSquare.localStorage.setItem은 로컬 스토리지에 (key, value)형태로 값을 저장하고, WebSquare.localStorage.getItem은 로컬 스토리지에서 key값에 대한 value를 가져옵니다. WebSquare.localStorage.removeItem은 key값에 대한 로컬 스토리지 데이터를 삭제하며, WebSquare.localStorage.clear는 로컬 스토리지에 저장된 모든 데이터를 삭제합니다. WebSquare.localStorage.getAllItem은 로컬 스토리지에 저장된 모든 데이터를 object형태로 반환합니다. 
WebSquare.localStorage.clear()는 WebSquare.localStorage 컴포넌트에 저장된 모든 데이터를 삭제합니다. WebSquare.localStorage.getAllItem()은 WebSquare.localStorage 컴포넌트에 저장된 모든 데이터를 가져옵니다. WebSquare.localStorage.getItem(key)는 key에 해당하는 값을 가져옵니다. WebSquare.localStorage.key(index)는 index에 해당하는 키값을 가져옵니다. WebSquare.localStorage.removeItem(key)는 입력된 key에 해당하는 item을 삭제합니다. WebSquare.localStorage.setItem(key, val)은 localStorage에 key와 value로 이루어진 데이터 하나를 저장합니다.",377
256,"WebSquare.uiplugin.fwGanttChart는 FusionWidget에 포함된 7종의 차트 중 하나로, 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있는 형태입니다. WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원하며, 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. fwGanttChart의 Property 중 autoCategory는 category를 자동생성하는 옵션, categoryDepth는 auto로 생성시 category depth를 설정하는 옵션입니다. dataColumns는 datatable에 사용할 컬럼의 ID를 지정하는 옵션으로, "",""로 구분하여 여러 개 지정 가능합니다. startDateNode, endDateNode, taskIdNode, taskNode, processNode는 dataList 연동시 사용할 columnid값을 설정하는 옵션입니다. timeBase는 사용할 timebase를 설정하는 옵션으로, dateformat은 사용할 날짜포맷을 설정하는 옵션입니다. resizeLastMonth는 timeBase가 ""date""이고 categoryDepth가 ""2""인 경우, 마지막 카테고리에 속하는 2-depth의 컬럼 수에 따라 폭을 조절하는 옵션입니다. plotColor는 task들의 색상을 지정하는 옵션으로, monthNames와 quarterNames는 category 생성시 필요한 monthName과 quarterNames를 설정하는 옵션입니다. multiTasks는 multiTasks 사용여부를 설정하는 옵션입니다. fwGanttChart의 Method 중 draw는 fwGanttChart를 화면에 출력하는 함수이며, setJSONData는 지정된 json 객체로 fwGanttChart의 차트 데이터를 변경하는 함수입니다.",434
257,"fwGanttChart는 그래프 왼쪽에 여러 개의 column을 삽입할 수 있는 기능을 가지고 있습니다. setDatatableAttribute 함수는 Datatable에 사용하는 컬럼의 속성을 설정하며, fwGanttChart에 사용할 날짜포맷을 설정하는 dateformat, dataList 연동시 endDateNode로 사용할 columnid값인 endDateNode, 컴포넌트 ID인 id, category 생성시 필요한 monthName 설정인 monthNames, multiTasks 사용여부 설정인 multiTasks, task들의 색상을 지정하는 plotColor, dataList 연동시 processNode로 사용할 columnid값인 processNode, category 생성시 필요한 quarterNames 설정인 quarterNames, fwGanttChart에 사용할 timebase를 설정하는 timeBase, dataList 연동시 startDateNode로 사용할 columnid값인 startDateNode, dataList 연동시 taskIdNode로 사용할 columnid값인 taskIdNode, dataList 연동시 taskNode로 사용할 columnid값인 taskNode, 그리고 category를 auto로 생성시 시간간격설정인 timeGap 등이 있습니다. 또한, fwGanttChart의 Catagories를 추가하는 addCategories 함수, 컴포넌트에 CSS class를 추가하는 addClass 함수, 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하는 bind 함수, 웹스퀘어 컴포넌트의 class를 변경하는 changeClass 함수, fwGanttChart를 화면에 출력하는 draw 함수, fwGanttChart를 jpg, png, pdf형식으로 export하는 exportJSChart 함수, fwGanttChart타입의 fusionWidget 객체를 반환하는 fc 함수, 웹스퀘어 컴포넌트에 포커스를 줌하는 focus 함수, fwGanttChart의 attribute값을 반환하는 getChartAttribute 함수, 컴포넌트와 바인딩된 DataList를 반환하는 getDataListInfo 함수, 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하는 getDisabled 함수, 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하는 getGenerator 함수, 웹스퀘어 컴포넌트의 ID를 반환하는 getID 함수, 컴포넌트의 초기 스타일을 반환하는 getInitStyle 함수, fwGanttChart의 차트데이터를 JSON객체로 반환하는 getJSONData 함수, 웹스퀘어 컴포넌트의 불투명도를 반환하는 getOpacity 함수, 그리고 웹스퀘어 컴포넌트의 originalID를 반환하는 getOriginalID 함수가 있습니다.",674
258,"getID 실행 시 ""wframe1_textbox1""이 반환되고, getOriginalID 실행 시 ""textbox1""이 반환됩니다. getPluginName은 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition은 웹스퀘어 컴포넌트의 위치를 반환합니다. getReadOnly는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScope는 scope=""true""인 WFrame의 자식 컴포넌트인 경우 부모 WFrame 객체를 반환합니다. getScopeWindow은 getScope와 유사하지만, scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우 전역 window 객체를 반환합니다. getSize는 웹스퀘어 컴포넌트의 크기를 반환하며, getStyle은 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getSVGString은 차트로부터 SVG를 string 형태로 반환하며, getTitle은 컴포넌트의 title 속성 값을 반환합니다. getUdcHome은 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot는 파일명을 포함하지 않은 경로를 반환합니다. getUserData는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, hasClass는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide는 웹스퀘어 컴포넌트를 화면에서 숨기며, removeClass는 웹스퀘어 컴포넌트에서 class를 삭제합니다.",447
259,"config.xml 파일에 removeDefaultClass 설정을 추가하고, inputBox의 class를 삭제하는 방법을 설명하고 있다. 또한, fwGanttChart의 카테고리, attribute, connector, datatable, milestone, task, trendLine 등을 설정하는 방법을 제공하고 있다. 웹스퀘어 컴포넌트의 disabled, readOnly, 위치, 크기, CSS 속성, 데이터 등을 설정하는 방법도 제공하고 있다. 마지막으로, 웹스퀘어 컴포넌트를 화면에 표시하는 방법도 설명하고 있다.",159
260,"show() 함수는 수행 이전의 display 속성 값으로 복구하는 함수이다. toggleClass() 함수는 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거하는 함수이다. trigger() 함수는 컴포넌트에서 특정 이벤트를 발생시키는 함수이다. unbind() 함수는 컴포넌트에서 이벤트를 제거하는 함수이다. visible() 함수는 CSS visibility 속성 값을 설정하는 함수이다. 이 함수는 show/hide 혹은 setStyle 사용을 권장하며, deprecated 되었다.",162
261,"WebSquare.uiplugin.anchor는 HTML의 <a> 태그와 유사하며 하이퍼링크를 정의할 수 있습니다. CSS를 적용하여 버튼 대용으로 사용할 수 있습니다. 최상위 태그는 <div> 태그이며 outerDiv 속성을 통해 <a> 태그로 변경 가능합니다. class 속성은 HTML의 class 속성과 동일한 기능을 제공하며 여러 개의 class를 공백으로 구분하여 적용 가능합니다. clickEventElement 속성은 outerDiv=""true""인 경우, 클릭 이벤트를 적용할 영역을 선택합니다. disabled 속성은 컴포넌트를 비활성화할지 여부를 설정하며 enableReadOnly 속성은 readOnly 속성을 설정합니다. escape 속성은 <>&""를 HTML Escape 문자로 변환하여 화면에 표시합니다. href 속성은 이동할 페이지의 URL을 정의하며 id 속성은 컴포넌트 ID를 정의합니다. localeRef 속성은 클라이언트 다국어 기능을 적용할 때 출력하려는 텍스트의 key를 정의합니다. name 속성은 컴포넌트의 name을 정의하며 nextTabID 속성은 Tab 키를 누를 때 선택되는 컴포넌트의 ID를 정의합니다. outerDiv 속성은 컴포넌트의 최상위를 <div>로 감쌀지 여부를 정의하며 ref 속성은 DataCollection의 value 경로를 정의합니다. role 속성은 HTML의 속성으로 추가할 내용을 정의하며 tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 정의합니다. target 속성은 <a> 태그의 target 속성과 동일하며 title 속성은 HTML의 title 속성과 동일합니다. tooltip 속성은 사용자가 컴포넌트에 마우스 오버 시 표시할 텍스트를 정의하며 tooltipFormatter 속성은 Tooltip 내용을 변경할 사용자 함수명을 정의합니다. tooltipLocaleRef 속성은 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 정의합니다. useLocale 속성은 선택 항목의 label에 표현되는 값을 클라이언트의 다국어 key를 이용하여 표현할지 여부를 정의합니다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성을 정의합니다. 이벤트는 onclick, ontooltiphide, ontooltipshow이며 메소드는 addClass, bind, changeClass, getDataListInfo, getDisabled, getGenerator, getHref, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, setUserData, getValue, hasClass, hide, removeClass, setDisabled, setEventPause, setHref, setInitStyle, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setValue, show, toggleClass, trigger, unbind, visible입니다.",851
262,"enableReadOnly=""true""일 때, Anchor 컴포넌트를 통한 링크 이동이 불가능하며, escape <>&""를 HTML Escape 문자로 변환하여 화면에 표시된다. href는 이동할 페이지의 URL을 지정하며, 기본 값은 ""javascript:void(null);""이다. id는 컴포넌트 ID를 지정하며, 전역 객체로 할당된다. localeRef는 클라이언트 다국어 기능을 적용할 때, 출력하려는 텍스트의 key를 정의한다. name은 Anchor 컴포넌트의 name을 지정하며, HTML5에서는 id 속성을 사용한다. nextTabID는 Tab 키로 이동할 때 선택되는 컴포넌트의 ID를 지정한다. ref는 DataCollection의 value 경로를 지정하며, DataList와 바인딩된 경우, GridView에서 선택된 행의 값이 바인딩된다. useLocale은 선택 항목의 label에 표현되는 값을 클라이언트의 다국어 key를 이용하여 표현한다. userData1~3은 사용자 정의 데이터 속성으로, getUserData(""userData1"") API를 통해 설정한 값을 얻어올 수 있다. onclick은 마우스로 Anchor 컴포넌트를 클릭할 때 발생하는 이벤트이다. addClass, bind, changeClass, getDataListInfo, getDisabled, getGenerator, getHref, getID, getInitStyle, getOpacity는 웹스퀘어 컴포넌트의 공통 메서드이다.",417
263,"웹스퀘어 컴포넌트의 여러 함수들을 설명하는 글입니다. getOpacity 함수는 CSS의 opacity 속성 값을 반환하며, getOriginalID 함수는 Scope 기능을 사용할 경우 존재하는 originalID를 반환합니다. getPluginName 함수는 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition 함수는 컴포넌트의 위치 값을 반환합니다. getReadOnly 함수는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScope 함수와 getScopeWindow 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우 부모 WFrame 객체를 반환합니다. getSize 함수는 컴포넌트의 크기 값을 반환하며, getStyle 함수는 CSS 속성 값을 반환합니다. getTitle 함수는 컴포넌트의 title 속성 값을 반환하며, getUdcHome 함수와 getUdcRoot 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. getUserData 함수는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, getValue 함수는 컴포넌트의 현재 값을 반환합니다.",319
264,"함수명: getValue()
설명: 웹스퀘어 컴포넌트의 값을 반환.
반환값: String현재 설정된 값
함수명: hasClass(className)
설명: 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인.
매개변수: className(String) - 검색할 class 이름
반환값: Boolean - class의 포함 여부
함수명: hide()
설명: 웹스퀘어 컴포넌트를 화면에서 숨김.
반환값: 없음
함수명: removeClass(className)
설명: 웹스퀘어 컴포넌트에서 class를 삭제.
매개변수: className(String) - 삭제할 class명
반환값: 없음
함수명: setDisabled(disabled)
설명: 컴포넌트의 disabled 속성을 설정.
매개변수: disabled(Boolean) - disabled 상태 (true: disabled 속성 활성화, false: disabled 속성 비활성화)
반환값: 없음
함수명: setEventPause(evList, flag)
설명: 지정한 이벤트를 중단함.
매개변수: evList(String) - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.), flag(Boolean) - 이벤트 중단 여부. (true: 중단, false: 중단 해제)
반환값: 없음
함수명: setHref(href)
설명: href 속성의 값을 설정한다.
매개변수: href(String) - url 정보
반환값: 없음
함수명: setInitStyle(property)
설명: 컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.
매개변수: property(String) - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)
반환값: 없음
함수명: setOpacity(value)
설명: 웹스퀘어 컴포넌트의 불투명도를 설정.
매개변수: value(Number) - Opacity 값 (0과 1 사이의 실수)
반환값: 없음
함수명: setPosition(left, top, mode)
설명: 웹스퀘어 컴포넌트의 위치(left, top)를 설정.
매개변수: left(Number) - 설정할 left 위치 값 또는 null, top(Number) - 설정할 top 위치 값 또는 null, mode(String) - 위치 설정 방법. [default: absolute, delta] absolute: 입력된 값을 위치로 설정. delta: 현재 위치에 입력된 left 및 top 값을 추가.
반환값: 없음
함수명: setReadOnly(readOnly)
설명: 웹스퀘어 컴포넌트의 readOnly 속성을 설정.
매개변수: readOnly(Boolean) - readOnly 속성 활성화 여부. ( ""true"" : 활성화, ""false"" : 비활성화)
반환값: 없음
함수명: setRef(path)
설명: ref 속성을 설정. DataCollection과 연동시 ""data:""라는 prefix를 반드시 붙여야 함. 명시하지 않을 경우, InstanceData의 XPath로 인식됨.
매개변수: path(String) - ref의 경로
반환값: 없음
함수명: setSize(width, height)
설명: 웹스퀘어 컴포넌트의 크기(width, height)를 설정.
매개변수: width(Number) - 새로 설정할 컴포넌트의 width 값 또는 null, height(Number) - 새로 설정할 컴포넌트의 height 값 또는 null
반환값: 없음
함수명: setStyle(propertyName, value)
설명: 웹스퀘어 컴포넌트의 CSS 속성을 설정.
매개변수: propertyName(String) - 설정할 CSS 속성, value(String) - 해당 CSS 속성에 적용할 값
반환값: 없음
함수명: setUserData(key, value)
설명: 웹스퀘어 컴포넌트에 임의의 데이터를 설정.
매개변수: key(String) - 설정할 데이터의 key, value(String) - 설정한 데이터의 value
반환값: 없음
함수명: setValue(value)
설명: 인자로 받은 값을 컴포넌트에 설정.
매개변수: value(String) - 설정할 값
반환값: 없음
함수명: show(displayType)
설명: 웹스퀘어 컴포넌트를 화면에 표시.
매개변수: displayType(String) - 적용할 CSS display 속성의 값. block : display: block;을 적용. (기본 값) inline : display: inline;을 적용. none : display: none;을 적용. """" : show 수행 이전의 display 속성 값으로 복구.
반환값: 없음
함수명: toggleClass(className)
설명: 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가.
매개변수: className(String) - 추가 또는 제거할 class명
반환값: 없음",1440
265,"config.xml 파일에 removeDefaultClass 설정을 추가하여 클래스를 추가/삭제할 수 있습니다. trigger 함수를 사용하여 컴포넌트에서 이벤트를 발생시키고, unbind 함수를 사용하여 이벤트를 제거할 수 있습니다. visible 함수는 show/hide 혹은 setStyle 사용을 권장하며, CSS visibility 속성을 설정합니다.",96
266,"WebSquare.uiplugin.tableLayout.td는 테이블 레이아웃 TD를 나타내며, HTML의 class 속성과 동일한 기능을 제공합니다. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다. 컴포넌트 ID는 전역 객체로 할당되며, Script에서 해당 컴포넌트에 접근 가능합니다.",122
267,"본문 요약:
80 websquare guide Design Guide OPS back matter 01.html은 웹스퀘어 디자인 가이드의 백매터 페이지 중 하나이다. 이 페이지에서는 웹스퀘어 디자인 가이드의 작성자와 기여자들에 대한 정보, 웹스퀘어 디자인 가이드의 버전 정보, 웹스퀘어 디자인 가이드의 라이선스 정보 등이 제공된다.
답변:
80 websquare guide Design Guide OPS back matter 01.html은 웹스퀘어 디자인 가이드의 백매터 페이지 중 하나입니다. 이 페이지에서는 작성자와 기여자들에 대한 정보, 버전 정보, 라이선스 정보 등이 제공됩니다.",206
268,"이 문서는 모바일 개발 시 주의사항에 대한 가이드로, 웹스케어는 데스크탑용 브라우저를 위한 AJAX 프레임워크이기 때문에 모바일 용으로 최적화되어 있지 않다는 점을 유념해야 합니다. 모바일 기기의 다양한 해상도에 대응하기 위해 @media 속성을 이용해 최적화된 CSS를 구성하여 각 기기에 맞는 화면을 꾸밀 수 있습니다. 또한, meta 태그의 viewport를 이용해서 기기의 최대 가로 크기를 정하거나 줌 레벨, 사용자 확대축소 방지 여부 등을 설정할 수 있습니다. 예시 코드를 통해 이를 구체적으로 확인할 수 있습니다.",229
269,"meta태그는 websquare.html(jsp)에 넣어야 한다. 모바일 기기에서는 마우스나 키보드 사용을 전제해서는 안 되며, 스크롤 사용시 body를 제외하고 overflow:hidden으로 사용하는 것을 권장한다. 이벤트 사용시 double click 등의 이벤트를 사용하지 말아야 하며, 파일 첨부는 iPhone의 경우 보안을 위해 허용된 디렉터리의 파일만 첨부 가능하다. 또한, flash나 silverlight등의 플러그인 사용이 제한되므로 플러그인 사용을 하지 말아야 한다. iframe으로 화면을 구성하면 input간 focus가 정상적으로 동작하지 않는 문제를 발생시킬 수 있으므로 사용하지 말아야 한다. 모바일의 경우 팝업을 띄우면 화면전환이 이루어지므로 권장하지 않으며, layer 형태의 팝업 및 link를 사용하는 것을 권장한다. 모바일 웹 개발에 권장되는 컴포넌트는 CheckBox, DatePicker, FlipToggle, Group, InputBox, Image, Output, PageControl, Secret, Radio, ScrollView, Slider, Spinner, Trigger, TextArea, TextBox, WFrame이다. 사용 가능한 컴포넌트는 Calendar, Generator, GridView, PageList, SerachBox, SelectBox, Switch이며, 비권장 컴포넌트는 AutoComplete, FloatingLayer, IFrame, Menu, Popup, Repeat, TabControl, TreeView, XHTML이다. 사용 금지 컴포넌트는 ActiveX, Applet, Chart, Editor, Flash, InputCalendar, MultiSelect, MultiUpload, SlideHide, TabContainer, Upload, XSL, WindowContianer이다. FlipToggle, ScrollView, Switch는 accessibility 속성 설정을 통해 iOS의 VoiceOver 및 Android의 TalkBack 기능을 지원할 수 있다.",510
270,"7. 서버 프레임워크 연동 가이드
7.1 일반 원칙
- 웹스퀘어는 웹표준 RIA 솔루션으로써 HTTP Protocol을 기반으로한 통신방식을 사용합니다.
- 지원되는 통신 Data 구조는 XML, JSON, Plain Text, Request Parameter(key/value) 등을 사용할 수 있으며, XML 구조를 권장합니다.
- 서버의 데이터 인터페이스 모듈은 고정된 모듈을 제공하지 않으며, HTTP Protocol 기반으로 연계할 수 있는 Web Application의 구조를 가져야 합니다.
- 웹스퀘어와 서버 간 데이터 변환은 서버사이드에서 데이터 구조체로의 데이터 변환 처리를 통해 이루어집니다.
7.2 전자정부 프레임워크 연동
- WAR 파일 배포 및 설정 변경 방법을 설명합니다.
- 인코딩 filter 추가, DataSource 설정, 로컬 개발 환경 설정 등이 필요합니다.",279
271,"7.2.4.2 Web.xml 파일에 servlet 설정을 추가합니다. 7.2.4.3.1 WebSquareAdapter를 사용할 경우, Application 설정에 다음 내용을 추가합니다. 7.2.4.3.2 MessageConverter를 사용할 경우, Application 설정에 다음 내용을 추가합니다. 7.2.4.4 Context root를 설정합니다. 7.2.4.5 Maven 설정을 합니다. 7.2.4.6 Adapter를 추가합니다. 7.2.4.7 DB Persistence를 사용하기 위해 미리 정의된 egovMap을 사용합니다. WebSquareAdapter를 사용할 경우, Controller에서 ModelAndView를 리턴합니다. MessageConverter를 사용할 경우, Controller에서 Map을 리턴합니다. DAO에서 입력된 Persistence의 id를 입력합니다. Service를 상속 받고 구현합니다. 로그 설정을 합니다. SpringBoot와 WebSquare를 연계합니다.",216
272,"SpringBoot에서 WebSquare를 연동하기 위해 messageConverters를 사용하며, websquare_home 설정과 Java Options 등록 방법은 WebSquare5 Studio를 참고해야 한다. 또한, WebSquare 엔진을 설치하고, 해당 리소스를 eGovFrame Project > src > main > resources > static 하위로 복사해야 한다. pom.xml 파일을 편집하여 WebSquare 실행에 필요한 lib 폴더 하위 Library를 등록하고, Servlet을 등록하기 위해 ServletRegistrationConfig.java 파일을 작성해야 한다. Jackson 라이브러리를 pom.xml로 선언하고, Controller Class를 구현하여 JSON 타입으로 200응답을 받을 수 있다. 해당 URL을 호출하여 화면이 정상적으로 표시되는지 확인할 수 있다.",208
273,"스트러츠 프레임워크는 MVC 기반의 웹 어플리케이션 프레임워크이다. 웹스퀘어와 연동하기 위해서는 RequestProcessor class를 구현하여 Controller단의 request data 변환 및 View단의 response data 변환을 처리할 수 있도록 한다. Struts 1 버전에서는 데이터의 구조체로서 ActionForm(Java Beans 구조)을 사용하며, Action Class에 지정된 Annotation 방식으로 ActionForm에 데이터가 연계된다. 이를 위해 RequestProcessor 구현과 Action Class 구현이 필요하다. RequestProcessor 구현에서는 Action Form을 판단하여 request data mapping을 수행하고, Action Class 구현에서는 업무 구현을 수행한다.",207
274,"7.5 Struts와 WebSquare의 연동
Struts와 WebSquare을 연동하여 사용할 수 있습니다. 이를 위해서는 Struts의 Action 클래스와 Form 클래스를 작성하고, struts-config.xml 파일에 설정을 추가해야 합니다. 또한, WebSquare에서는 XML 또는 JSON 형식으로 데이터를 전송하므로, 이를 처리하기 위한 Data Adapter를 사용해야 합니다.
7.5.1 Struts Action 클래스 구현
Struts Action 클래스를 작성하여 요청을 처리할 수 있습니다. 이 클래스에서는 요청을 처리하고, 결과를 반환합니다. 예제 코드를 참고하여 작성할 수 있습니다.
7.5.2 Struts Form 클래스 구현
Struts Form 클래스를 작성하여 요청 데이터를 처리할 수 있습니다. 이 클래스에서는 요청 데이터를 저장하고, 필요한 경우 검증을 수행합니다. 예제 코드를 참고하여 작성할 수 있습니다.
7.5.3 struts-config.xml 설정
struts-config.xml 파일에 Action 클래스와 Form 클래스를 등록하고, 요청 경로와 매핑합니다. 예제 코드를 참고하여 작성할 수 있습니다.
7.5.4 WebSquare XML 구현
WebSquare에서는 XML 형식으로 데이터를 전송합니다. 이를 처리하기 위해 xf:submission 태그를 사용합니다. 예제 코드를 참고하여 작성할 수 있습니다.
7.5.5 WebSquare JSON 어댑터 연동
WebSquare에서는 JSON 형식으로 데이터를 전송할 수도 있습니다. 이를 처리하기 위해 Data Adapter를 사용합니다. Data Adapter는 HttpServletRequest와 HttpServletResponse 객체를 핸들링하여 클라이언트와 연계되는 통신 데이터를 변환합니다. 예제 코드를 참고하여 작성할 수 있습니다.
7.6 WebSquare Data Adapter
WebSquare Data Adapter는 서버측에서 사용하는 Java Object 형태의 데이터와 통신 데이터 사이의 변환을 처리하기 위한 라이브러리입니다. 이를 사용하여 서버와의 데이터 연동을 수행할 수 있습니다.
7.6.1 Data Adapter 개요
WebSquare Data Adapter는 J2EE 표준 규약을 준수하는 Web Application Server에서 동작하는 Java Library 형태로 제공됩니다. HTTP 통신상의 HttpServletRequest, HttpServletResponse 객체를 핸들링하는 형태로 제공되며, 클라이언트와 연계되는 통신 데이터를 변환하는 역할을 합니다.
7.6.2 역할 및 기능
WebSquare Data Adapter는 클라이언트와 서버 간의 통신 데이터를 변환하는 역할을 합니다. 클라이언트 데이터는 HTTP 기반의 Ajax 통신에서 표준 방식으로 사용되는 XML과 JSON 타입의 텍스트 기반 데이터 Format을 지원합니다. 서버측에서 사용되는 데이터의 형태는 Java Object 형태의 Map/List 객체 타입과 POJO형태인 Java Beans(VO) 타입을 지원합니다.
7.6.3 적용 방법
WebSquare Data Adapter를 사용하기 위해서는 HttpServletRequest와 HttpServletResponse 객체를 핸들링하는 RequestAdapter와 ResponseAdapter 클래스를 사용해야 합니다. 이를 사용하여 클라이언트와 서버 간의 데이터 변환을 수행할 수 있습니다.
7.6.3.1 기본 API
RequestAdapter 클래스는 HttpServletRequest에 포함되어 전달된 request data(XML or JSON String)를 추출하여 서버사이드에서 사용할 Java Object(Map or VO) 타입으로 변환처리를 수행합니다. ResponseAdapter 클래스는 서버사이드에서 출력할 데이터를 Java Object(Map or VO) 타입에서 String(XML or JSON) 타입으로 변환처리를 수행합니다.
7.6.3.2 Servlet
DefaultAdapterServlet 클래스를 통하여 Request/Response 데이터 변환을 수행합니다. 이를 위해 Adapter Servlet Controller를 구현하여야 합니다. Adapter Servlet Controller는 Adapter Servlet으로부터 넘어온 input data를 받아 업무클래스를 호출하고, 업무클래스로부터 넘어온 output data를 다시 Adapter Servlet으로 넘겨주는 역할을 합니다. 이를 위해 IAdapterServletController 인터페이스를 implements하여 구현합니다. 구현한 Adapter Servlet Controller는 설정파일에 등록하여 Adapter Servlet이 인식할 수 있도록 합니다.",1116
275,"Adapter Servlet Controller 등록 방법에 대한 예시 코드와 Filter를 이용한 Request 전처리, Response 후처리 기능인 AdapterFilter에 대한 설명이다. AdapterFilter를 적용하면 Request 데이터를 변환하여 Servlet에 전달하고, Response 데이터도 변환하여 Client로 전송한다. AdapterFilter를 Web Context 설정에 적용하여 URL 패턴에 따라 적용 범위를 설정할 수 있다. Request 데이터를 전달받는 Servlet은 변환된 Java Object 타입의 데이터를 전달받게 되며, Response 데이터도 마찬가지로 Java Object를 전달하면 AdapterFilter에서 변환 처리를 수행하여 Client로 전달한다. Request/Response Adapter는 내부적으로 Request/Response Converter를 통해 데이터 변환을 수행하며, 기본적으로 XML, JSON, Map/List, VO(Beans) 형태의 데이터를 지원한다. VO(Beans) 형태로 데이터를 연동하는 경우, Member Field에는 대응되는 getter, setter method가 반드시 존재해야 하며, Member Field의 Type과 setter method의 parameter Type, getter method의 return Type은 반드시 일치해야 한다.",299
276,"날짜 형식은 Java Date Format을 따르며, 기본값은 'yyyMMdd'이다. (7장 Configuration 참고) 
7.6.4.1 클라이언트 측(통신 데이터 형식) 
7.6.4.1.1 XML 
코드 7-14. XML 데이터 형식 예시 
<map id=''> 
    <userid>hong</userid> 
    <username>홍길동</username> 
    <list id='infoList'> 
        <map id='0'> 
            <zip>우편번호0</zip> 
            <title>배송지0</title> 
            <address>서울0</address> 
            <telno>011-1111-0</telno> 
            <number>0</number> 
        </map> 
        <map id='1'> 
            <zip>우편번호1</zip> 
            <title>배송지1</title> 
            <address>서울1</address> 
            <telno>011-1111-1</telno> 
            <number>1</number> 
        </map> 
        <map id='2'> 
            <zip>우편번호2</zip> 
            <title>배송지2</title> 
            <address>서울2</address> 
            <telno>011-1111-2</telno> 
            <number>2</number> 
        </map> 
    </list> 
</map> 
7.6.4.1.2 JSON 
코드 7-15. JSON 데이터 형식 예시 
{ 
    ""userid"":""hong"", 
    ""username"":""홍길동"", 
    ""infoList"":[ 
        { 
            ""zip"":""우편번호0"" , 
            ""title"":""배송지0"" , 
            ""address"":""서울0"" , 
            ""telno"":""011-1111-0"" , 
            ""number"":""0"" 
        } , 
        { 
            ""zip"":""우편번호1"" , 
            ""title"":""배송지1"" , 
            ""address"":""서울1"" , 
            ""telno"":""011-1111-1"" , 
            ""number"":""1"" 
        } , 
        { 
            ""zip"":""우편번호2"" , 
            ""title"":""배송지2"" , 
            ""address"":""서울2"" , 
            ""telno"":""011-1111-2"" , 
            ""number"":""2"" 
        } 
    ] 
} 
7.6.4.2 서버 측 
7.6.4.2.1 Map 
코드 7-16. Map/List 데이터 매핑 예시 
Map outMap = new HashMap(); 
outMap.put(""userid"", ""hong""); 
outMap.put(""username"", ""홍길동""); 
List infoList = new ArrayList(); 
Map tmp = null; 
for(int i=0; i<3; i++){ 
    tmp = new HashMap(); 
    tmp.put(""number"", """"+i); 
    tmp.put(""title"", ""배송지""+i); 
    tmp.put(""telno"", ""010-1111-""+i); 
    tmp.put(""zip"", +""우편번호""+i); 
    tmp.put(""address"", ""+서울""+i); 
    infoList.add(tmp); 
} 
outMap.put(""infoList"", infoList); 
7.6.4.2.2 VO (Beans) 
코드 7-17. VO 데이터 매핑 예시 
SelectBean sbean = new SelectBean(); 
sbean.setUserid(""hong""); 
sbean.setUsername(""홍길동""); 
 info list put 
List infoList = new ArrayList(); 
InfoBean infoBean = null; 
for(int i=0; i<3; i++){ 
    infoBean = new InfoBean(); 
    infoBean.setNumber(i); 
    infoBean.setTitle(""배송지"" + i); 
    infoBean.setTelno(""011-1111-"" + i); 
    infoBean.setZip(""우편번호"" + i); 
    infoBean.setAddress(""서울"" + i); 
    infoList.add(infoBean); 
} 
sbean.setInfoList(infoList); 
코드 7-18. SelectBean 예시 
package sample.beans; 
import java.util.ArrayList; 
import java.util.List; 
public class SelectBean extends BaseBean { 
    private String userid; 
    private String username; 
    private List infoList = new ArrayList(); 
    public String getUserid(){ 
        return userid; 
    } 
    public List getInfoList() { 
        return infoList; 
    } 
    public void setInfoList(List infoList){ 
        this.infoList = infoList; 
    } 
    public void setUserid(String userid){ 
        this.userid = userid; 
    } 
    public String getUsername(){ 
        return username; 
    } 
    public void setUsername(String username){ 
        this.username = username; 
    } 
} 
코드 7-19. InfoBean 예시 
package sample.beans; 
public class InfoBean extends BaseBean { 
    private int number; 
    private String title; 
    private String telno; 
    private String zip; 
    private String address; 
    public int getNumber() { 
        return number; 
    } 
    public void setNumber(int number) { 
        this.number = number; 
    } 
    public String getTitle() { 
        return title; 
    } 
    public void setTitle(String title) { 
        this.title = title; 
    } 
    public String getTelno() { 
        return telno; 
    } 
    public void setTelno(String telno) { 
        this.telno = telno; 
    } 
    public String getZip() { 
        return zip; 
    } 
    public void setZip(String zip){ 
        this.zip = zip; 
    } 
    public String getAddress(){ 
        return address; 
    } 
    public void setAddress(String address){ 
        this.address = address; 
    } 
} 
7.6.5 VO(Beans) Class Type 지정 
VO의 경우 데이터 변환 시에 해당 VO 객체에 대한 Class Type을 명시적으로 지정해 주어야만 VO 객체를 생성하여 값을 처리할 수 있습니다. 
Request 시에 XML/JSON format의 데이터를 VO 객체로 변환하기 위하여 VO Class의 type에 대한 정의를 Converter로 전달해 주어야 정상적으로 VO 객체를 생성하게 되며, 아래 3가지 방법이 제공됩니다. 
Response VO 객체의 경우도 VO Class type을 인식해야 정상적으로 XML/JSON format로 변환되므로 request 용도의 VO, response 용도의 VO 모두 class type을 지정합니다. 
VO 객체의 변환은 XML의 map node, JSON의 json object에 해당됩니다. 즉, XML의 map node, JSON의 json object에 대하여 변환된 VO 클래스를 지정하며, 반복 데이터인 XML의 list node, JSON의 json array의 변환 타입은 각 list node, json array의 VO 객체의 타입이 아닌 내부에 반복 데이터로 존재할 row 레벨의 map node, json object에 해당하는 VO 객체의 타입을 의미합니다. 
7.6.5.1 클라이언트에서 VO Class Type 전달 
클라이언트에서 서버로 전송될 데이터 내에 VO 클래스의 정의를 포함하여 서버로 전송합니다. ""BEAN_DEF""라는 key로 XML의 map node, JSON의 json object에 해당하는 VO 클래스의 type을 지정합니다.",1811
277,"root는 최상위 VO 객체의 타입을 지정하는 key입니다. XML 데이터와 JSON 데이터에서 VO 타입을 지정하는 방법이 다르며, 서버에서 Map 객체나 Annotation을 사용하여 VO Class Type을 전달할 수 있습니다. Custom Converter를 구현하여 기본 Converter가 제공하지 않는 Data Format을 적용할 수 있으며, 이를 위해 RequestConverter와 ResponseConverter를 구현하고 설정 파일에 등록해야 합니다. 설정 파일에서는 Form Parameter나 HttpServletRequest attribute key, 데이터 변환 포맷, character set, Response 데이터 압축 여부 등을 설정할 수 있습니다.",158
278,"- adapter/xml/convertAttributeToNode: request xml의 attribute를 node data로 치환 여부(default: true)
- adapter/xml/attributePrefix: request xml의 attribute를 node data로 치환할 경우 node명의 prefix(default: 없음)
- adapter/xml/attributePostfix: request xml의 attribute를 node data로 치환할 경우 node명의 postfix(default: 없음)
- adapter/xml/encoding: xml response xml 생성 시 encoding 처리 여부 (default: true)
- adapter/xml/useIndent: response xml 생성 시 indentation 처리 여부 (default: false)
- adapter/servlet/controller: Adapter 를 servlet 형태로 적용할 경우, Adapter Servlet에서 호출할 Adapter Servlet Controller 클래스를 지정합니다.
- Adapter/bean/dateFormat: VO 에서 Date 타입의 멤버변수에 대하여 date format을 지정
equest: Java Date Format (default: 'yyyyMMdd')
esponse: Java Date Format (default: 'yyyyMMdd')
위의 설정 예시 코드는 Adapter의 다양한 설정을 보여줍니다. request와 response의 parameterKey, attributeKey, convertType, charset, customConverter, compress, immediateToStream 등의 설정과 xml의 mapNode, listNode, valueNode, convertAttributeToNode, attributePrefix, attributePostfix, encoding, useIndent 등의 설정, 그리고 servlet과 bean의 dateFormat 설정이 있습니다. 이 설정들은 Adapter의 동작을 제어하는 데 사용됩니다.",322
279,"$p.local은 HTML5의 LocalStorage와 같은 기능을 제공하는데, 도메인(사이트) 별로 브라우저에서 제공하는 임의의 영역에 데이터를 저장하는 기능이다. LocalStorage와 달리 만료일이 없으며, 브라우저에 따라 저장 가능 용량은 5MB ~ 10MB 사이이다. 멀티브라우징을 위해서는 5MB 이하로 저장하는 것을 권장한다. $p.local은 clear(), getAllItem(), getItem(keyName), key(index), length(), removeItem(key), setItem(keyName, value)의 메소드를 제공한다. 이 중, getAllItem()은 동일한 도메인으로 localStorage에 저장된 모든 데이터를 key, value 형태의 객체로 반환하며, getItem(keyName)은 LocalStorage에서 keyName에 해당하는 값을 반환한다. key(index)는 index에 해당하는 키값을 가져오며, length()는 로컬 스토리지의 (key, value)쌍의 데이터의 개수를 나타내는 값이다. removeItem(key)는 keyName에 해당하는 데이터(item)을 삭제하며, 모든 데이터를 삭제할 경우 clear() 함수를 호출한다. setItem(keyName, value)은 localStorage에 key와 value로 이루어진 데이터(item)를 저장한다.",343
280,"FwPyramidChart는 FusionWidget Wrapper 컴포넌트로, 데이터와 스타일 옵션을 결합하여 차트를 생성합니다. WebSquare5에서는 API를 통해 차트를 쉽게 Customizing 할 수 있습니다. Property 중 accessibility는 해당 차트의 접근성 지원 여부를 결정하며, labelNode는 FwPyramidChart의 label 데이터로 사용할 DataCollection의 column ID값을 설정합니다. seriesNode는 seriesType이 simple일 경우, fwPyramidChart의 value 데이터로 사용할 DataCollection의 column ID값을 설정합니다. 브라우저 캡쳐화면은 그림 34-1을 참고하며, FwPyramidChart의 디자인은 css로 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의합니다. DataCollection을 만들고 디자인뷰에서 해당 컴포넌트를 더블클릭하여 ref, labelNode, valueNode 등을 연결해야 합니다.",261
281,"FwRealtimeChart는 FusionWidget Wrapper 컴포넌트로, FusionWidgets의 데이터를 실제 차트에 보여줄 값과 스타일 옵션으로 결합합니다. WebSquare5에서는 API를 통해 차트를 쉽게 Customizing 할 수 있도록 분리하여 지원합니다. chartType은 차트 타입을 지정하며, ref는 dataList를, labelNode는 lable 데이터로 사용할 DataCollection의 column ID값을, seriesType은 simple일 경우 series 데이터로 사용할 DataCollection의 column ID값을, valueNode는 simple일 경우 value 데이터로 사용할 DataCollection의 column ID값을 지정합니다. FwRealtimeChart의 디자인은 css로 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의되며, DataCollection을 만들고 ref, labelNode, valueNode 등을 연결해야 합니다.",222
282,"WebSquare.uiplugin.trigger는 버튼 UI를 제공하는 컴포넌트로, type 속성에 따라 input, table, a 태그로 구성된 다양한 버튼을 생성할 수 있다. anchorWithGroupClass는 w2group 클래스의 적용 여부를 설정하는 속성으로, centerOffImageClass, centerOnImageClass, leftOffImageClass, leftOnImageClass, rightOffImageClass, rightOnImageClass는 image 타입 버튼에서 각각의 td에 적용할 클래스를 설정하는 속성이다. disabled는 컴포넌트를 비활성화하는 속성이고, id는 컴포넌트 ID를 설정한다. localeRef는 클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key를 설정하며, nextTabID는 Tab 키를 누를 때 선택되는 컴포넌트의 ID를 설정한다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정하며, title은 HTML의 title 속성과 동일한 기능을 제공한다. tooltip은 사용자가 컴포넌트에 마우스 오버할 때 표시되는 텍스트를 설정하며, tooltipLocaleRef는 tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정한다. type은 표현 방식을 설정하며, useLocale은 다국어 사용 여부를 설정한다. userData1, userData2, userData3은 사용자 정의 데이터 속성을 설정한다. onblur, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, ontooltiphide, ontooltipshow는 각각 해당 이벤트가 발생했을 때 실행되는 함수를 설정한다. addClass, bind, changeClass, focus, getBackgroundImage, getDisabled, getGenerator, getID, getInitStyle, getLabel, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getType, getUdcHome, getUdcRoot, getUserData, setValue, hasClass, hide, removeClass, setBackgroundImage, setDisabled, setEventPause, setInitStyle, setLabel, setOpacity, setPosition, setReadOnly, setSize, setStyle, setTitle, setUserData, show는 각각 해당 기능을 수행하는 함수이다.",644
283,"웹스퀘어 컴포넌트에서는 toggleClass(), trigger(), unbind(), visible() 등의 메소드를 사용하여 특정 class를 추가하거나 제거하고, 이벤트를 발생시키거나 제거할 수 있습니다. 또한, anchorWithGroupClass, centerOffImageClass, leftOnImageClass 등의 속성을 사용하여 이미지나 클래스를 적용할 수 있습니다. disabled, id, tabIndex, title, tooltip 등의 속성을 사용하여 컴포넌트를 설정할 수 있으며, 다국어 지원과 사용자 정의 데이터 속성도 제공됩니다. 이벤트 관련 메소드로는 onblur, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, ontooltiphide, ontooltipshow 등이 있으며, addClass(), bind() 등의 메소드를 사용하여 동적으로 할당할 수 있습니다.",250
284,"웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. %로 설정된 경우, 픽셀로 변환된 값을 반환합니다. 반환 값은 Number입니다. 예를 들어, inputBox 컴포넌트의 top 값을 확인하려면 input1.getPosition(""top"")을 사용합니다.",86
285,"getSize 함수는 컴포넌트의 크기 값을 반환하며, getStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getStyleValue 함수는 deprecated 되었으며, getTitle 함수는 컴포넌트의 title 속성 값을 반환한다. getType 함수는 컴포넌트의 현재 설정된 Type을 반환하며, getUdcHome 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUdcRoot 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUserData 함수는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getValue 함수는 표시되어 있는 label을 반환하며, hasClass 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide 함수는 웹스퀘어 컴포넌트를 화면에서 숨기며, removeClass 함수는 웹스퀘어 컴포넌트에서 class를 삭제한다. setBackgroundImage 함수는 type=""button""인 경우 배경 이미지를 설정하며, setDisabled 함수는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause 함수는 지정한 이벤트를 중단하거나 중단을 해제하며, setInitStyle 함수는 컴포넌트의 초기 스타일을 복구한다. setLabel 함수는 label 값을 변경하며, setOpacity 함수는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다.",463
286,"setPosition(topNumberY, modeStringN): 컴포넌트의 위치(top, left)를 설정. modeString은 ""absolute"" 또는 ""delta"" 중 하나를 선택할 수 있음. ""absolute""는 입력된 값을 위치로 설정하고, ""delta""는 현재 위치에 입력된 left 및 top 값을 추가하여 위치를 설정함. 
setReadOnly(readOnly): 웹스퀘어 컴포넌트의 readOnly 속성을 설정. readOnly 속성 활성화 여부를 ""true"" 또는 ""false""로 설정할 수 있음. 
setSize(width, height): 웹스퀘어 컴포넌트의 크기(width, height)를 설정. width와 height 값 중 하나를 null로 설정하여 해당 값만 변경할 수 있음. 
setStyle(propertyName, value): 웹스퀘어 컴포넌트의 CSS 속성을 설정. propertyName은 설정할 CSS 속성, value는 해당 CSS 속성에 적용할 값임. 
setTitle(title): 컴포넌트의 title 속성을 설정. title 값으로 문자열을 입력하여 설정할 수 있음. 
setUserData(key, value): 웹스퀘어 컴포넌트에 임의의 데이터를 설정. key와 value 값으로 문자열을 입력하여 설정할 수 있음. 
setValue(label): value 값을 변경. setLabel과 동일한 기능을 제공함. 
show(displayType): 웹스퀘어 컴포넌트를 화면에 표시. displayType은 ""block"", ""inline"", ""none"", """" 중 하나를 선택할 수 있음. 
toggleClass(className): 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. className은 추가/삭제할 class를 입력하여 설정할 수 있음. 
trigger(type, array): 컴포넌트에서 특정 이벤트를 발생시킴. type은 발생시킬 이벤트, array는 이벤트 핸들러에 전달할 파라미터 배열임. 
unbind(type, function): 컴포넌트에서 이벤트를 제거. type은 제거할 이벤트, function은 제거할 이벤트의 핸들러 함수임. 
visible(flag): [deprecated] show/hide 혹은 setStyle 사용을 권장. 엔진 내부적으로 CSS visibility 속성을 설정함. flag 값으로 true 또는 false를 입력하여 설정할 수 있음.",624
287,"WebSquare.cookie는 Cookie 값 삭제, 조회, 저장 기능을 제공하는 객체이다. delCookie( sName ) 메소드는 Cookie에서 값을 삭제하고, getCookie( sName ) 메소드는 Cookie에서 값을 조회한다. setCookie( sName , sValue , SameSite ) 메소드는 Cookie에 값을 저장하는데, 저장한 값은 브라우저가 종료되면 삭제된다. SameSite 속성값으로 None, Lax, Strict를 사용할 수 있다. setCookieAsync( sName , sValue , SameSite ) 메소드는 비동기로 Cookie에 값을 저장하며, IE에서 비동기로 Cookie에 접근하면 화면 깜빡임이 발생할 수 있으므로 이 경우 setCookieAsync 함수를 사용하는 것이 권장된다.",198
288,"웹 접근성을 고려한 웹 사이트를 구축하기 위해서는 권장되는 컴포넌트를 사용해야 합니다. 이번 파트에서는 권장되는 컴포넌트를 소개합니다.
1. 시작하기 전에...
2. Anchor
3. Article
4. Aside
5. Audio
6. Calendar
7. Checkbox
8. Footer
9. Generator
10. GridView
11. Group
12. Header
13. Iframe
14. Image
15. InputBox
16. InputCalendar
17. Navigation
18. Output
19. PageInherit
20. PageList
21. Radio
22. Secret (password)
23. Section
24. SelectBox
25. Span
26. TabControl(체크)
27. TableLayout
28. Tag
29. Textarea
30. Textbox
31. Wframe",216
289,"WebSquare.uiplugin.windowContainer는 여러 화면들을 여러 윈도우에 MDI(multiple document interface) 방식으로 배치할 수 있는 윈도우 컨테이너입니다. 이 컨테이너는 HTML <div>로 구성되며, 수평배열, 수직배열, 순차배열, 균등배열 방식으로 윈도우를 배치할 수 있습니다. 이 컨테이너의 속성 중 일부는 다음과 같습니다. 
- autoArrange: 윈도우가 정렬 상태인 상황에서 윈도우 close시 자동으로 남아있는 윈도우를 이전 정렬상태로 정렬하는 기능
- changeActiveWindow: 스크롤 좌우 버튼을 클릭할 경우 한 칸씩 윈도우를 이동하며 해당 윈도우를 활성화하는 기능 사용 여부
- class: HTML의 class 속성과 동일한 기능을 제공
- closeType: 전체 창 닫기 버튼을 클릭할 때 닫지 않고 고정할 창을 지정
- confirmFalseAction: 중복 확인 confirm에서 취소(cancel)를 선택했을 때의 컨텐츠 로딩 방식
- confirmMessage: confirm창에 보여줄 메세지
- confirmTrueAction: 중복 확인 confirm에서 확인(ok)를 선택했을 때의 컨텐츠 로딩 방식
- controlIconPosition: windowContainer 제어 아이콘의 위치
- customMsg: window의 하단바에 추가되는 사용자정의 메세지
- defaultHeight: window의 기본 높이
- defaultWidth: window의 기본 넓이
- fixArrangeFullScreen: 현재 윈도우수가 arrangeNum보다 작을때 화면을 전부 사용할지의 여부
- frameModal: popup open시 WFrame 안쪽에 팝업을 띄우고 modal을 표시할지 여부
- frameMode: 윈도우 내부 frame을 iframe으로 생성할지 wframe으로 생성할지를 결정하는 속성
- hideTitleOnMaximize: 윈도우의 타이틀 부분을 최대화시 숨길지 여부
- horizontalArrangeNum: 수평 정렬시 정렬시킬 화면개수
- id: 컴포넌트 ID
- keepSelectedWindow: 윈도우 정렬 이후 현재 선택된 윈도우를 그대로 유지할 지 여부
- lineBreakNum: 수평,수직 정렬시 window를 개행 시킬 기준 값
- minimumHeight: 사용자가 마우스를 이용하여 개별 window를 리사이즈할 경우의 최소 높이
- minimumWidth: 사용자가 마우스를 이용하여 개별 window를 리사이즈할 경우의 최소 넓이
- nameLayerMove: 마우스 드래그-앤-드롭을 통해 윈도우 탭의 위치를 이동
- nameLayerMoveGap: useNameContainer 옵션 사용시 좌우 이동버튼으로 nameLayer를 이동시킬 거리
- nameLayerRearrange: 네임레이어에 고정버튼이 있는 경우, 정렬 아이콘을 클릭하면 고정된 window의 name layer를 앞으로 이동시킬지 여부
- processMsgFrame: 비동기 통신 중 processMsg를 WFrame 내부에 표시
- restoreWinSize: 초기 window생성시 defaultHeight, defaultWidth로 설정했던 가로/세로 크기로 나타남
- sequentialArrangeColNum: 바둑판 정렬시 정렬시킬 화면 열의 수
- sequentialArrangeRowNum: 바둑판 정렬시 정렬시킬 화면 행의 수
- statusMsg: window의 하단바에 추가되는 기본 상태 메세지
- stopMinimizeOnNameLayer: 선택된 윈도우의 네임레이어 클릭시 최소화하지 않고 윈도우의 크기 유지할지 여부
- stopToggleOnLast: 윈도우가 하나일때 선택된 윈도우의 네임레이어 클릭시 최소화하지 않고 윈도우의 크기 유지할지 여부
- tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서
- toolbarPosition: 툴바의 위치
- toolbarWidth: 사용자가 툴바 width를 지정한 값
- tooltipDisplay: 툴바에 생성되는 네임레이어의 툴팁 사용여부
- tooltipGroupClass: tooltipDisplay속성값이 true일 경우 w2group 스타일을 포함시킬지(true)의 여부
- useCloseButton: 툴바에 생성되는 네임레이어의 닫기버튼의 사용여부
- useConfirmMessage: createWindow API로 동적으로 window를 생성할 때 사용자에게 중복체크 confirm처리를 할지의 여부
- useControlIconTitle: controlIcon에 title속성을 넣을 것인지의 여부
- useCustomMsg: window의 하단바의 추가되는 사용자정의 메세지를 사용할지의 여부
- useFixButton: 툴바에 생성되는 네임레이어에 고정버튼을 사용할지의 여부
- useNameContainer: 툴바에 생성되는 네임레이어를 div로 감쌀지를 결정하는 속성
- userData1: 사용자 정의 데이터 속성
- userData2: 사용자 정의 데이터 속성
- userData3: 사용자 정의 데이터 속성
- useStatusMsg: window의 하단바의 추가되는 기본 상태 메세지를 사용할지의 여부
- useWindowScrollButton: 현재 열려있는 윈도우 목록을 표시할 수 있는 버튼을 툴바에 추가
- verticalArrangeNum: 수직 정렬시 정렬시킬 화면개수
- windowAutoResize: setSize API 호출시 하위 윈도우들의 위치 및",1625
290,"onclosewindow: 윈도우의 닫기 버튼을 클릭하여 해당 윈도우가 비활성화될 때 발생하는 이벤트
oncustomcontrolclick: 컨트롤 아이콘을 클릭하여 발생하는 이벤트
oncustomcontrolout: 컨트롤 아이콘에서 마우스가 나갔을 때 발생하는 이벤트
oncustomcontrolover: 컨트롤 아이콘에 마우스를 오버했을 때 발생하는 이벤트
onmenuclick: nameLayerMenu 속성이 true일 때, nameLayer의 메뉴가 클릭된 경우에 발생하는 이벤트
onminimizebtnclick: 윈도우의 최소화 버튼을 클릭할 때 발생하는 이벤트
onrestorebtnclick: 윈도우의 복원 버튼을 클릭할 때 발생하는 이벤트
onwindowchange: 윈도우가 활성화/비활성화 될 때 발생하는 이벤트
onwindowload: 새 윈도우가 완전히 로드되는 시점에 발생하는 이벤트
onwindowtabclick: WindowContainer 컴포넌트가 포함한 자식 창의 탭을 클릭할 때 발생하는 이벤트
onwindowunload: 특정 윈도우의 src가 변경되거나 제거될 때 발생하는 이벤트
Method Summary
addClass(className): 컴포넌트에 CSS class를 추가
bind(eventType, function): 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당
changeClass(oldClassName, newClassName): 웹스퀘어 컴포넌트의 class를 변경
closeOthers(windowId): 현재 활성화되어 있는 윈도우 이외의 윈도우를 닫음
closeWindow(windowId): 현재 활성화되어 있는 윈도우를 닫음
createFrame(): 빈 iframe을 동적으로 생성
createWindow(title, iconUrl, src, windowTitle, windowId, openAction, closeAction, windowTooltip, windowHeaderHTML, options, frameMode, userIconClass, userIconPosition): 윈도우를 생성
fixWindow(winInfoId): 인자로 넘겨진 id에 해당하는 윈도우를 고정
focus(): 웹스퀘어 컴포넌트에 포커스를 줌
getDisabled(): 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환
getFrame(windowId): windowId에 해당하는 윈도우의 frame 객체 (iframe 또는 wframe)을 반환
getGenerator(): 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환
getID(): 웹스퀘어 컴포넌트의 ID를 반환
getInitStyle(CSS): 컴포넌트의 초기 스타일을 반환
getOpacity(): 웹스퀘어 컴포넌트의 불투명도를 반환
getOriginalID(): 웹스퀘어 컴포넌트의 originalID를 반환
getPluginName(): 웹스퀘어 컴포넌트의 이름(pluginName)을 반환
getPosition(positionName): 웹스퀘어 컴포넌트의 위치(left, top)를 반환
getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환
getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환
getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환
getSelectedIndex(): 선택된 윈도우의 index를 반환
getSelectedWindowId(): 선택된 윈도우의 windowId를 반환
getSize(sizeName): 웹스퀘어 컴포넌트의 크기(width, height)를 반환
getStyle(propertyName): 웹스퀘어 컴포넌트의 CSS 속성 값을 반환
getStyleValue(style): [deprecated]
getTitle(): 컴포넌트의 title 속성 값을 반환
getUdcHome(): UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환
getUdcRoot(): UDC 객체가 자신을 정의한 UDC 파일 경로를 반환
getUniqueIdByTitle(title): title을 가진 윈도우의 unique id를 반환
getUniqueIdByWindowId(windowId): windowId를 가진 윈도우의 unique id를 반환
getUserData(key): setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환
getWindow(title): title을 가진 윈도우의 window 객체를 반환
getWindowByUniqueId(uuid, focus): uniqueID를 가진 윈도우의 window 객체를 반환
getWindowByWindowId(windowId, focus): windowID를 가진 윈도우의 window 객체를 반환
getWindowLabel(windowId, type): type에 따라 label(text)값을 반환
hasClass(className): 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인
hide(): 웹스퀘어 컴포넌트를 화면에서 숨김
isMultiView(): 현재 multiView(두 개의 창을 나란히 보는 모드)인지, 아닌지를 반환하는 함수
emoveClass(className): 웹스퀘어 컴포넌트에서 class를 삭제
estoreWindowSize(windowId): windowId에 해당하는 윈도우 창을 이전 크기(defaultWidth, defaultHeight 옵션으로 설정한 크기 값)로 되돌림
setAllWindowStatusMsg(msg): 모든 윈도우의 상태 메세지를 설정
setArrangeWindows(type, windowIdArray): 윈도우를 정렬
setDisabled(disabled): 웹스퀘어 컴",1534
291,"웹스퀘어 컴포넌트에서는 toggleClass(className)으로 특정 클래스를 추가하거나 제거할 수 있으며, trigger(type, array)로 이벤트를 발생시킬 수 있습니다. unbind(type, function)으로 이벤트를 제거할 수 있습니다. unfixWindow(winInfoId)는 인자로 넘겨진 id에 해당하는 윈도우의 고정을 해제합니다. visible(flag)는 더 이상 사용되지 않는 속성입니다. class는 HTML의 class 속성과 동일한 기능을 제공하며, closeType은 전체 창 닫기 버튼을 클릭할 때 닫을 창을 지정합니다. confirmFalseAction은 중복 확인 창에서 취소를 선택했을 때의 컨텐츠 로딩 방식을 지정하며, confirmTrueAction은 확인을 선택했을 때의 컨텐츠 로딩 방식을 지정합니다. controlIconPosition은 windowContainer 제어 아이콘의 위치를 지정하며, customMsg는 window의 하단바에 추가되는 사용자 정의 메시지입니다. defaultHeight와 defaultWidth는 window의 기본 크기를 지정하며, fixArrangeFullScreen은 현재 윈도우 수가 arrangeNum보다 작을 때 화면을 전부 사용할지 여부를 지정합니다. frameModal은 popup open시 WFrame 안쪽에 팝업을 띄우고 modal을 표시할지 여부를 지정하며, frameMode은 윈도우 내부 frame을 iframe으로 생성할지 wframe으로 생성할지를 결정합니다. nameLayerMove는 마우스 드래그-앤-드롭을 통해 윈도우 탭의 위치를 이동할지 여부를 지정하며, nameLayerMoveGap은 useNameContainer 옵션 사용시 좌우 이동버튼으로 nameLayer를 이동시킬 거리를 지정합니다. processMsgFrame는 비동기 통신 중 processMsg를 WFrame 내부에 표시할지 여부를 지정하며, restoreWinSize는 초기 window 생성시 defaultHeight, defaultWidth로 설정했던 가로/세로 크기로 나타낼지 여부를 지정합니다. sequentialArrangeColNum과 sequentialArrangeRowNum은 바둑판 정렬시 정렬시킬 화면 열과 행의 수를 지정합니다. statusMsg는 window의 하단바에 추가되는 기본 상태 메시지입니다.",642
292,"stopMinimizeOnNameLayer: 윈도우의 네임레이어 클릭시 최소화하지 않고 윈도우의 크기 유지 여부를 선택하는 속성
stopToggleOnLast: 윈도우가 하나일 때 선택된 윈도우의 네임레이어 클릭시 최소화하지 않고 윈도우의 크기 유지 여부를 선택하는 속성
tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 결정하는 속성
toolbarPosition: 툴바의 위치를 결정하는 속성 (default: bottom, top)
toolbarWidth: 사용자가 툴바 width를 지정한 값
tooltipDisplay: 툴바에 생성되는 네임레이어의 툴팁 사용 여부 (default: true, false)
tooltipGroupClass: tooltipDisplay 속성값이 true일 경우 w2group 스타일을 포함시킬지(true)의 여부
useCloseButton: 툴바에 생성되는 네임레이어의 닫기 버튼의 사용 여부 (default: false, true)
useConfirmMessage: createWindow API로 동적으로 window를 생성할 때 사용자에게 중복체크 confirm 처리를 할지의 여부 (default: true, false)
useControlIconTitle: controlIcon(수평, 수직, 계단, 바둑판, 닫기버튼)에 title 속성을 넣을 것인지의 여부
useCustomMsg: window의 하단바의 추가되는 사용자정의 메세지를 사용할지의 여부 (default: false, false)
useFixButton: 툴바에 생성되는 네임레이어에 고정 버튼을 사용할지의 여부 (default: false, true)
useNameContainer: 툴바에 생성되는 네임레이어를 div로 감쌀지를 결정하는 속성 (default: false)
userData1~3: 사용자 정의 데이터 속성
useStatusMsg: window의 하단바의 추가되는 기본 상태 메세지를 사용할지의 여부 (default: true, false)
useWindowScrollButton: 현재 열려있는 윈도우 목록을 표시할 수 있는 버튼을 툴바에 추가하는 속성
verticalArrangeNum: useFixButton 속성값이 true일 경우 동작하며 수직 정렬시 정렬시킬 화면 개수를 결정하는 속성 (default: 2)
windowAutoResize: setSize API 호출시 하위 윈도우들의 위치 및 크기를 재정렬할지의 여부 (default: false, true)
windowMaximizeAll: 윈도우의 사이즈 최대화 동시 변경 사용 여부
windowMaxNum: createWindow API를 이용하여 생성할 window의 최대 개수를 결정하는 속성 (default: 5)
windowMoveType: 윈도우 드래그시 영역밖으로 나갈때 동작 속성 지정 (restrict, overflow)
windowScrollVisibleRowNum: 윈도우 목록 버튼을 툴바에 표시할 경우 목록에 표시할 항목 수를 설정하는 속성 (default: ""5"")
windowTooltipDisplay: window 헤더에 추가되는 title에 툴팁을 사용할지의 여부 (default: true, false)
이벤트:
onafternamelayermove: 마우스 드래그-앤-드롭 후 윈도우의 위치가 변경된 직후에 발생
onbeforecloseall: 윈도우 전체 닫기 버튼을 통해 모든 윈도우가 비활성화 될 때 발생
onbeforenamelayermove: 마우스 드래그-앤-드롭 후 윈도우의 위치가 변경되기 직전에 발생
onclosewindow: 각 윈도우의 닫기 버튼을 통해 해당 윈도우가 비활성화 될 때 발생
oncustomcontrolclick: controlIconFormatter를 통해 등록한 컨트롤 아이콘을 클릭했을 때 발생하는 이벤트
oncustomcontrolout: controlIconFormatter를 통해 등록한 컨트롤 아이콘에서 마우스가 나갔을 때 발생하는 이벤트
oncustomcontrolover: controlIconFormatter를 통해 등록한 컨트롤 아이콘에 마우스를 오버했을 때 발생하는 이벤트
onmenuclick: nameLayerMenu 속성이 true일 때, nameLayer의 menu가 클릭된 경우에 발생하는 이벤트
onminimizebtnclick: 각 윈도우의 창사이즈 최소화 버튼을 클릭할 때 발생
onrestorebtnclick: 각 윈도우의 창사이즈 복원 버튼을 클릭할 때 발생
onwindowchange: 윈도우가 활성화/비활성화 될 때 발생
onwindowload: 새 window가 해당 window가 완전히 load되는 시점에 발생",1319
293,"windowContainer 컴포넌트의 onwindowtabclick 이벤트는 자식 창의 탭을 클릭할 때 발생하며, onwindowunload 이벤트는 특정 window 창의 src가 변경되거나 제거될 때 발생합니다. addClass 메서드는 컴포넌트에 CSS class를 추가하고, bind 메서드는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다. changeClass 메서드는 웹스퀘어 컴포넌트의 class를 변경하며, closeOthers 메서드는 현재 활성화되어 있는 window 이외의 window를 닫습니다. closeWindow 메서드는 현재 활성화되어 있는 window를 닫으며, createFrame 메서드는 빈 iframe을 동적으로 생성합니다. createWindow 메서드는 window를 생성하며, fixWindow 메서드는 인자로 넘겨진 id에 해당하는 윈도우를 고정시킵니다. focus 메서드는 웹스퀘어 컴포넌트에 포커스를 줍니다. getDisabled 메서드는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다.",331
294,"웹스퀘어 컴포넌트의 다양한 속성 값을 반환하는 함수들이다. getDisabled()는 컴포넌트의 disabled 속성 값을 반환하며, getFrame()은 windowId에 해당하는 window의 frame 객체를 반환한다. getGenerator()는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다. getID()는 웹스퀘어 컴포넌트의 ID를 반환하며, getInitStyle()은 컴포넌트의 초기 스타일을 반환한다. getOpacity()는 웹스퀘어 컴포넌트의 불투명도 값을 반환하며, getOriginalID()는 컴포넌트의 originalID를 반환한다. getPluginName()은 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition()은 컴포넌트의 위치 값을 반환한다. getReadOnly()는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScope()와 getScopeWindow()는 scope=""true""인 WFrame의 부모 객체를 반환한다. getSelectedIndex()는 선택된 window의 index를 반환하며, getSelectedWindowId()는 선택된 window의 windowId를 반환한다. getSize()는 컴포넌트의 크기 값을 반환하며, getStyle()은 CSS 속성 값을 반환한다.",380
295,"Parameter 이름 타입 필수 여부 설명 
style String Y 반환하려는 CSS 속성 
getTitle() - String Y 컴포넌트의 title 속성 값을 반환 
getUdcHome() - String Y UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환 
getUdcRoot() - String Y UDC 객체가 자신을 정의한 UDC 파일 경로를 반환 
getUniqueIdByTitle(title) String Y 인자로 넘겨진 title을 가진 window의 unique id를 반환 
getUniqueIdByWindowId(windowId) String Y 인자로 넘겨진 windowID를 가진 window의 unique id를 반환 
getUserData(key) String Y setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환 
getWindow(title) - Object Y 인자로 넘겨진 title를 가진 window의 window 객체를 반환 
getWindowByUniqueId(uuid, focus) - Object Y 인자로 넘겨진 uniqueID를 가진 window의 window 객체를 반환 
getWindowByWindowId(windowId, focus) - Object Y 인자로 넘겨진 windowID를 가진 window의 window 객체를 반환 
getWindowLabel(windowId, type) String Y 인자값으로 넘어오는 type에 따라 label(text)값을 반환 
hasClass(className) Boolean Y 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인 
hide() - - 웹스퀘어 컴포넌트를 화면에서 숨김 
isMultiView() Boolean - 현재 multiView(두 개의 창을 나란히 보는 모드)인지, 아닌지를 반환하는 함수 
emoveClass(className) - Y 웹스퀘어 컴포넌트에서 class를 삭제 
estoreWindowSize(windowId) - Y 입력받은 windowId에 해당하는 위도우 창을 이전 크기(defaultWidth, defaultHeight 옵션으로 설정한 크기 값)로 되돌리는 기능 
setAllWindowStatusMsg(msg) - Y 모든 window의 상태 메세지를 설정 
setArrangeWindows(type, windowIdArray) - Y 윈도우를 정렬 
※ 웹스퀘어(WebSquare)는 웹 애플리케이션 개발을 위한 통합 개발 환경(IDE)입니다.",604
296,"웹스퀘어 컴포넌트에서 제공하는 다양한 기능들이 있다. 예를 들어, 윈도우를 정렬하거나, disabled 속성을 설정하거나, 이벤트를 중단하거나, focus를 설정하거나, 초기 스타일을 복구하거나, 메뉴를 설정하거나, multiView를 실행하거나, 불투명도를 설정하거나, 위치를 설정하거나, readOnly 속성을 설정하거나, singleView를 실행하거나, 크기를 조정하거나, CSS 속성을 설정하거나, 임의의 데이터를 설정하거나, 사용자정의 메세지를 설정하거나, label 값을 설정하거나, 최대 window 개수를 설정하거나, 위치나 크기를 조정하거나, 상태 메세지를 설정하거나, z-Index를 증가시키는 등의 기능이 있다.",250
297,"windowIndexStringY: 해당 윈도우 컴포넌트의 인덱스를 설정합니다. displayTypeStringN: CSS display 속성 값을 설정합니다. toggleClass(className): 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거합니다. trigger(type, array): 컴포넌트에서 특정 이벤트를 발생시킵니다. unbind(type, function): 컴포넌트에서 이벤트를 제거합니다. unfixWindow(winInfoId): 인자로 넘겨진 id에 해당하는 윈도우의 고정을 해제합니다. visible(flag): 엔진 내부적으로 CSS visibility 속성을 설정합니다.",181
298,"HTML5의 Article과 동일한 기능을 하는 <article> 태그를 설명하고, <aside> 태그를 사용한 코드 예시를 제공하였다. <aside> 태그는 Chrome 6.0, Internet Explorer 9.0, Firefox 4.0, Safari 5.0, Opera 11.1 버전 이상에서 지원되며, class와 id 속성을 사용할 수 있다. 또한, Audio 컴포넌트를 사용하여 오디오 파일을 재생할 수 있으며, 주요 API로 autoplay, controls, loop, muted, preload 등이 있다. Audio 컴포넌트를 사용하기 위해서는 파일 경로와 종류를 설정해야 한다.",183
299,"HTML5에서 사용 가능한 다양한 컴포넌트들 중에서, 경로를 입력할 때는 절대경로를 사용해야 하며, <audio> 태그와 <canvas> 태그, <footer> 태그, <header> 태그, <nav> 태그, <section> 태그 등이 있다. 브라우저에서 지원하는 버전에 따라 사용 가능한 컴포넌트가 다르며, <video> 태그를 사용하여 비디오를 재생할 수 있다.",142
300,"화면낭독기 사용자가 일부 기능만 사용하거나 추가적인 사용법을 익혀야 하는 비권장 컴포넌트 목록이다. AutoComplete는 키보드 네비게이션 기능을 제공하며, JAWS 사용자도 사용 가능하지만 일부 제약사항이 있다. Editor는 ckEditor v3.4.1을 사용하며, Tab키 이동에는 일부 제한이 있다. FlipToggle은 화면낭독기를 포함한 모든 기기에서 지원되지 않는다. FloatingLayer는 팝업 형태로 띄우는 layer 컴포넌트이며, 키보드 접근에 제한이 있다. Fusionchart는 Accessibility 속성 API를 제공하며, Chart에 title을 제공한다. PageControl은 모바일 페이지 출력용 권장 컴포넌트이며, 일부 기능은 지원되지 않는다. Repeat는 사용하지 않는 것이 좋으며, Generator 컴포넌트를 사용하기를 권장한다. ScrollView는 특정 영역의 공간보다 나타낼 컨텐츠가 차지하는 공간이 더 커서 스크롤 기능이 필요할 때 사용하는 컨테이너성 컴포넌트이다. SearchBox는 입력된 정보 전체를 지울 수 있는 인터페이스를 제공하지만, 일부 기능이 지원되지 않아 비권장 컴포넌트이다. Slider는 화면낭독기 사용자에게 숨겨진 inputBox 컴포넌트로 제공되며, 화면낭독기 없는 키보드 사용자는 사용할 수 없다. Spinnner는 모든 브라우저에서 동일하게 제공되는 컴포넌트이다. Switch는 페이징 기능이 필요할 때 사용하는 컨테이너성 컴포넌트이며, 사용자가 중지할 수 있는 인터페이스를 제공해야 한다. XHTML과 XSL은 접근성과 직접적인 관계는 없다.",593
301,"18장. IFrame, PageInherit, WFrame
IFrame은 HTML의 IFrame과 유사하며, WebSquare 파일, 일반 웹 컨텐츠, 다른 사이트를 화면에 출력할 수 있다. SPA 모드 적용이 가능하지만, 제약사항을 준수해야 한다. 뒤로가기 제어도 가능하다.
PageInherit는 다른 WebSquare5 XML 화면을 현재 화면에 삽입할 수 있다. DataCollection, 인스턴스, JavaScript, CSS 상속 지원하며, WFrame 컴포넌트와의 차이점은 삽입하는 웹 페이지의 DataCollection, 인스턴스, JavaScript, CSS를 재정의할 수 있다.
WFrame은 IFrame과 달리 현재 웹 페이지와 함께 호출되며, setSrc() 함수를 이용하여 페이지를 설정할 때 dataObject를 통해 파라미터를 전달할 수 있다. 또한 서브미션 상태창 표시, 워터마크, 팝업 생성 및 닫기 기능도 있다.",289
302,"Snippets는 사용자가 만든 xml 화면 내의 특정 컴포넌트들을 별도의 xml로 저장해 필요할 때 불러서 사용할 수 있는 기능입니다. Snippets View에서 import한 Snippets(xml 파일)을 사용합니다. Snippets는 사용자가 별도로 저장한 컴포넌트들의 집합이라고 볼 수 있습니다. 에디터뷰의 Design View에서 클릭 하나로 화면을 그릴 수 있습니다. Snippets를 사용하기 위해서는 해당 Project에 Snippets에 사용되는 CSS가 존재해야 합니다. Snippets는 컴포넌트 마크업만 별도의 xml 파일로 저장하기 때문에 inline-style만 적용됩니다. Internal stylesheet, External stylesheet을 통해 CSS를 사용할 경우 Snippets를 사용하는 화면에서 CSS 파일을 참조하거나, <head>의 <style> 태그 안에 CSS를 직접 정의해야 합니다.",251
303,"AutoComplete 컴포넌트는 입력된 텍스트에 따라 자동 완성 기능을 제공합니다. SelectBox의 확장 컴포넌트로 특정 문자열에 대한 자동완성 및 검색기능을 제공하거나 정적데이터와 동적데이터 설정이 가능합니다. 주요 API는 SelectBox와 유사합니다. 속성 중 caseSensitive는 대소문자 구분 여부, emptyItem은 옵션에 없는 값을 설정할 때 label을 빈 값으로 설정할지 여부, emptyValue는 빈 label의 value 값을 설정할 수 있습니다. search는 사용자가 입력한 값에 대한 검색 모드를 설정하며, useKeywordHighlight는 조회된 결과 아이템 리스트에서 입력된 키워드 문자열에 대해서 스타일을 지정하여 강조할 수 있습니다.",222
304,"autoComplete는 select 영역을 감싸는 그룹으로, 배경색과 테두리색 등을 지정합니다. option 영역은 별도의 마크업으로 분리되어 있습니다. autoComplete_selected는 select 영역을 선택했을 때의 CSS를 지정하며, autoComplete_col_label은 select 영역의 label 부분을 나타냅니다. autoComplete_col_button은 select 영역의 화살표 버튼 부분을 나타내며, autoComplete_input은 select 안의 검색 부분입니다. input의 스타일은 엘리먼트 스타일로 지정되어 있기 때문에 !important를 사용하여 지정합니다. input_table_sb는 웹스퀘어 엔진에서 정의된 클래스로, 브라우저가 파싱할 때 자동으로 부여됩니다. option 영역을 감싸는 그룹으로, 배경색과 테두리색 등을 지정합니다. input_table_sb_col은 option 영역에서 각 항목마다 부여된 클래스이며, input_table_sb_col_over는 option에 마우스 오버했을 때 표현되는 클래스입니다.",310
305,"Audio16.AudioHTML5는 플러그인 없이 음악 파일을 지원하는 태그입니다. controls 속성은 브라우저가 제공하는 재생 도구를 표시하며, id 속성은 컴포넌트의 전역 객체로 할당되어 script에서 해당 컴포넌트에 접근할 수 있습니다. 해당 컨트롤러는 브라우저마다 차이가 있으므로 주의해야 합니다. 스타일을 수정하려면 websquare의 style 편집기에서 직접 수정하면 됩니다.",167
306,"WebSquare.uiplugin.searchbox는 InputBox의 확장 컴포넌트로, 우측에 텍스트 삭제용 ""X"" 아이콘을 표시합니다. InputBox와 동일한 기능을 제공하며, 텍스트가 입력된 경우에만 ""X"" 아이콘이 표시됩니다. 최상위는 HTML <input> 태그를 사용하며, allowChar, alwaysRefresh, applyFormat, ariaLabel, class, dataType, dateMask, disabled, displayFormat, displayFormatter, displaymessage, editType, id, ignoreChar, invalidMessage, mandatory, maxByteLength, maxlength, minByteLength, minlength, nextTabID, onFocusClass, preventCopyPaste, readOnly, readOnlyClass, ref, refSync, resetBtnAriaLabel, resetButtonDisplay, tabIndex, timeMask, title, tooltip, tooltipLocaleRef, userData1, userData2, userData3, validator 등의 속성을 가집니다. 또한, onblur, onchange, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, onresetclick, onviewchange 등의 이벤트와 addClass, bind, changeClass, commit, focus, getDataListInfo, getDataType, getDisabled, getDisplayFormat, getDisplayFormatter, getDisplayValue, getFormattedValue, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition 등의 메소드를 제공합니다.",351
307,"웹스퀘어 컴포넌트의 다양한 속성과 메소드를 설명하는 문서입니다. getReadOnly()는 현재 readOnly 속성 값을 반환하며, getScope()와 getScopeWindow()는 scope 속성이 true인 WFrame의 부모 객체를 반환합니다. getSize(sizeName)은 웹스퀘어 컴포넌트의 크기를 반환하고, getStyle(propertyName)은 CSS 속성 값을 반환합니다. getValue()는 컴포넌트의 value를 반환하며, hasClass(className)는 특정 class를 포함하는지 확인합니다. setDisabled(disabled)는 컴포넌트의 disabled 속성을 설정하고, setDisplayFormat(format)과 setDisplayFormatter(formatter)는 각각 displayFormat과 displayFormatter 속성을 설정합니다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정하며, setPosition(left, top, mode)은 위치를 설정합니다. setReadOnly(readOnly)는 readOnly 속성을 설정하고, setSize(width, height)는 크기를 설정합니다. setStyle(propertyName, value)는 CSS 속성을 설정하며, setUserData(key, value)는 임의의 데이터를 설정합니다. setValue(value)는 value를 설정하고, show(displayType)는 웹스퀘어 컴포넌트를 화면에 표시합니다. trigger(type, array)는 특정 이벤트를 발생시키고, unbind(type, function)은 이벤트를 제거합니다. validate()는 컴포넌트의 유효성 검사를 실행합니다. allowChar, alwaysRefresh, applyFormat, ariaLabel, class, dataType, dateMask, disabled, displayFormat, displayFormatter, displaymessage, editType, id, ignoreChar, invalidMessage, invalidMessageFunc는 각각 컴포넌트의 속성을 설명합니다.",484
308,"mandatory [default:false, true]: 필수 선택 여부를 설정하는 속성으로, validate 함수를 통해 입력값을 검증할 때 필수 입력 여부를 확인한다. ""false""는 필수 선택을 적용하지 않는 기본 값이며, ""true""는 필수 선택을 적용한다. 
maxByteLength: 입력 가능한 최대 Byte 길이를 설정하는 속성으로, 엔진에서 maxByteLength 이상의 글자를 입력하면 자동으로 잘라낸다. maxlength 속성의 값과 본 속성에 지정한 값 중 더 작은 수가 우선 순위로 적용된다. 
minByteLength: validate API를 호출할 때 엔진에서 최소 Byte 길이 체크 시에 참조하는 속성으로, minlength validate API를 호출할 때 엔진에서 최소 길이 체크 시에 참조한다. 
nextTabID: Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID를 설정하는 속성이다. 
onFocusClass: onFocus 시 적용할 class명을 설정하는 속성이다. 
preventCopyPaste [default:false, true]: 컴포넌트의 value에 대해 copy&paste 방지 여부를 설정하는 속성이다. 
eadOnly [default:false, true]: readonly의 여부로 HTML의 readonly 속성과 동일한 기능을 제공한다. 
eadOnlyClass: readOnly 상태 일 때 적용할 class명을 설정하는 속성이다. 
ef: DataCollection의 value 경로를 설정하는 속성으로, DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용한다. 
efSync [default:false, true]: SearchBox가 ref와 연동된 경우, key가 입력되는 즉시 ref를 갱신한다. 
esetBtnAriaLabel: 컴포넌트의 resetButton에 aria-label을 제공하는 속성으로, 접근성을 위해 사용된다. 
esetButtonDisplay [default:show]: focus 여부에 따라 resetButton의 display를 설정할 수 있다. 
tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정하는 속성이다. 
timeMask: dataType이 time일 경우에만 적용되며 display 할 format을 정의한다. 
title: HTML의 title 속성과 동일하며, 마우스 오버 시, title로 저장한 값이 툴팁으로 표시된다. 
tooltip: 사용자가 컴포넌트에 마우스 오버할 때 표시되는 텍스트로, 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시한다. 
tooltipLocaleRef: tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정하는 속성이다. 
userData1~3: 사용자 정의 데이터 속성으로, getUserData API를 통해 설정한 값을 얻어올 수 있다. 
validator: 유효성 체크 함수 이름으로, 컴포넌트에서 blur가 발생하는 시점에 본 속성에 정의한 함수가 실행된다. 
Event Detail: onblur, onchange, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, onreset, onviewchange 등의 이벤트가 있다. 
Method Detail: addClass, bind 등의 메소드가 있다.",930
309,"input 컴포넌트에 onclick 이벤트 핸들러 함수를 할당하는 예제와, 웹스퀘어 컴포넌트의 class를 변경하는 함수인 changeClass() 함수에 대한 설명이 있다. 또한, searchbox 컴포넌트에서 commit() 함수를 호출하여 입력된 값을 ref에 반영하는 예제와, focus() 함수를 사용하여 컴포넌트로 포커스를 이동하는 예제가 있다. 그 외에도, 웹스퀘어 컴포넌트의 다양한 속성 값을 반환하는 함수들이 소개되어 있다. 이 중에는, getGenerator() 함수를 사용하여 부모 Generator 객체를 반환하는 예제와, getPosition() 함수를 사용하여 컴포넌트의 위치 값을 반환하는 예제도 있다. 마지막으로, scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 getScope() 함수에 대한 설명도 있다.",264
310,"WFrame의 자식 컴포넌트인 경우 부모 WFrame 객체를 반환하고, 아닌 경우 null을 반환하는 getScope() 함수, 웹스퀘어 컴포넌트의 크기를 반환하는 getSize() 함수, CSS 속성 값을 반환하는 getStyle() 함수, title 속성 값을 반환하는 getTitle() 함수, UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하는 getUdcHome() 함수, UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하는 getUdcRoot() 함수, 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하는 getUserData() 함수, 컴포넌트의 value를 반환하는 getValue() 함수, 특정 class를 포함하는지 확인하는 hasClass() 함수, 컴포넌트를 화면에서 숨기는 hide() 함수, 웹스퀘어 컴포넌트에서 class를 삭제하는 removeClass() 함수, 컴포넌트의 disabled 속성을 설정하는 setDisabled() 함수, displayFormat 속성을 설정하는 setDisplayFormat() 함수, displayFormatter 속성을 설정하는 setDisplayFormatter() 함수, 지정한 이벤트를 중단하는 setEventPause() 함수가 있다.",316
311,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. 각 함수들은 파라미터와 예제 코드를 제공하며, 컴포넌트의 초기 스타일 복구, 위치 설정, 불투명도 설정, readOnly 속성 설정, 데이터 설정, 값 설정, 화면에 표시, class 추가/삭제, 이벤트 발생, 이벤트 제거, 유효성 검사 등의 기능을 수행합니다. 파라미터와 예제 코드를 참고하여 각 함수를 적절하게 사용할 수 있습니다.",168
312,"displaymessage=""true"" 속성은 유효성 검사에서 false가 반환될 경우 엔진에서 설정된 메세지가 alert으로 표시되도록 설정하는 속성입니다. mandatory, minLength, maxLength, minByteLength, maxByteLength 속성은 유효성 검사와 관련된 속성으로, 각각 필수 입력 여부, 최소/최대 길이, 최소/최대 바이트 길이를 설정합니다. validate() 함수를 사용하여 검사 결과 값을 반환할 수 있습니다. visible(flag) 함수는 CSS visibility 속성을 설정하여 컴포넌트를 보이거나 숨길 수 있습니다. 이 함수는 show/hide 혹은 setStyle 사용을 권장합니다.",187
313,"WebSquare.uiplugin.nav는 HTML5의 Navigation과 유사한 네비게이션 기능을 제공하는 uiplugin입니다. 이 클래스는 HTML의 class 속성과 동일한 기능을 제공하며, CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용할 수 있습니다. 또한, 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어할 수 있습니다. 컴포넌트 ID는 전역 객체로 할당되며, Script에서 해당 컴포넌트에 접근 가능합니다. 이 클래스의 Property, Event, Method에 대한 자세한 내용은 해당 문서를 참고하시기 바랍니다.",217
314,"WebSquare.uiplugin.tableLayout은 <table> 태그를 사용하여 레이아웃을 구성하는 것을 지원하는 컴포넌트이다. 이는 주로 입력 또는 검색 화면을 구성할 때 유용하다. adaptiveThreshold 속성값을 참조하여 browser의 width에 따른 적응형 웹 모드로 동작하며, class 속성을 이용하여 CSS를 제어할 수 있다. 컴포넌트 ID는 전역 객체로 할당되며, Script에서 해당 컴포넌트에 접근 가능하다. summary 속성은 웹접근성 화면 구현시 사용된다.",184
315,"85. XHTML
85.1 Property
- class: 사용자가 임의의 class를 정의할 때 사용합니다.
- id: 사용자가 임의의 id를 정의할 때 사용합니다.
- src: 불러올 xhtml 파일의 경로를 입력합니다.
85.2 브라우저 캡쳐화면
85.3 class 적용과 스타일 변경
- class를 이용하여 스타일을 변경할 수 있습니다.
85.4 CSS Overriding
85.5 주의사항 및 Tip",135
316,"WindowContainer는 여러 개의 화면을 툴바와 함께 관리하기 위한 컴포넌트이다. 이 컴포넌트의 속성 중 일부는 class, confirmFalseAction, confirmMessage, confirmTrueAction, controlIconPosition, defaultHeight, defaultWidth, fixArrangeFullScreen, hideTitleOnMaximize, horizontalArrangeNum, id, lineBreakNum, minimumHeight, minimumWidth, nameLayerMoveGap, restoreWinSize, sequentialArrangeColNum, sequentialArrangeRowNum, spaAuto, spaAutoDelay, spaInitCount, spaReplaceHistory, statusMsg, stopMinimizeOnNameLayer, tabIndex, toolbarPosition, tooltipDisplay, tooltipGroupClass, useCloseButton, useConfirmMessage, useControlIconTitle, useFixButton, useNameContainer, useStatusMsgWindow, verticalArrangeNum, windowAutoResize, windowMaximizeAll, windowMaxNum, windowTooltipDisplay 등이 있다. 이 컴포넌트를 사용하는 방법 중 하나는 Treeview나 anchor 컴포넌트를 이용하여 탭을 생성하는 것이다. WindowContainer의 CSS 클래스는 w2windowContainer, w2windowContainer_window, w2windowContainer_windowToolbar 등이 있다.",280
317,"windowContainer_controlIconLayer와 windowContainer_name은 웹스퀘어 엔진에서 정의된 클래스입니다. windowContainer_controlIconLayer는 메뉴 버튼 영역을, windowContainer_name은 windowContainer의 레이어 영역을 나타냅니다. 이 클래스들은 html로 떨어질 때 자동으로 부여됩니다. WindowContainer를 사용하기 위해서는 position이 relative 혹은 absolute여야 합니다. 이 클래스들은 주로 레이아웃 용도로 사용됩니다.",132
318,"입력 검증
27.1 단순 검증 vs. 사용자 정의 검증
입력 컴포넌트는 사용자가 입력한 데이터를 검증해야 합니다. 단순 검증과 사용자 정의 검증 두 가지 방법이 있습니다. 단순 검증은 컴포넌트의 속성 값 설정을 통해 구현할 수 있으며, 사용자 정의 검증은 JavaScript 함수를 통해 구현할 수 있습니다.
27.2 검증 관련 속성
각 입력 컴포넌트에는 검증 관련 속성이 있으며, validate() 함수를 호출하여 입력 값을 검증할 수 있습니다. 속성으로는 mandatory, minLength, maxLength, minByteLength, maxByteLength 등이 있습니다.
27.3 검증 실패 시 표시할 메시지
검증 실패 시 출력할 메시지를 설정할 수 있습니다. displaymessage 속성을 true로 설정하고, invalidMessage 속성에 원하는 메시지를 입력하면 됩니다.
27.4 사용자 정의 검증
JavaScript 함수를 통해 입력 데이터를 검증할 수 있습니다. invalidMessageFunc 혹은 validator 속성을 사용하여 구현할 수 있습니다.
27.5 메시지 우선 순위
invalidMessageFunc, invalidMessage, displaymessage를 모두 설정하더라도 우선순위에 따라 한 가지만 적용됩니다.
27.6 예제
각 입력 컴포넌트에 대한 검증 예제가 제공됩니다. validate() 함수를 통해 검증을 수행하고, 결과에 따라 메시지를 표시할 수 있습니다.",455
319,"선택용 컴포넌트
선택 컴포넌트의 경우 선택 대상 항목을 지정해야 합니다. 개발자는 정적으로 혹은 동적으로 선택 대상을 설정할 수 있습니다. 단일 선택과 다중 선택이 가능하며, 직접 입력(ItemSet), 데이터 수신(BindItemSet), 그리드 형식(GridItemSet)으로 선택 목록을 설정할 수 있습니다.
직접 입력 방법은 Palette 뷰에서 SelectBox 컴포넌트를 검색하여 Design 탭에 그린 후, 대화창에서 행을 추가하고 Name과 Value를 수동으로 입력합니다. 데이터를 표시할 열의 개수와 선택 안내 메시지를 정의한 후, OK 버튼을 클릭합니다.
데이터 수신 방법은 Submission을 통해 서버로부터 수신한 데이터를 선택 대상 항목으로 표시할 수 있습니다. AutoComplete, CheckBox, CheckComboBox, MultiSelect, Radio, SelectBox 등의 예제 파일을 다운로드하여 참고할 수 있습니다.
그리드 형식 방법은 SelectBox의 경우 GridViewItemSet을 선택 대상 항목으로 설정할 수 있습니다. DataCollection을 생성한 후, SelectBox 대화창에서 GridItemSet 항목을 선택하여 Nodeset, Label, Value를 입력하고 GridView 정보를 입력합니다.",349
320,"<w2:gridViewItemset> 노드에 rowStatusVisible 및 rowNumVisible 속성을 설정하여 행 상태 및 행 번호를 추가할 수 있습니다. displayMode 속성을 사용하여 선택 항목 표시 방법을 설정할 수 있으며, 바인딩된 DataList의 특정 컬럼 값을 기준으로 일부 선택 항목을 숨길 수 있습니다. enableColumn 및 enableColumnFalseValue 속성을 사용하여 선택 항목을 동적으로 활성화/비활성화할 수 있습니다. 스크롤링 제어는 wheelStop 속성을 사용하여 설정할 수 있습니다.",168
321,wheelStop 옵션은 Studio에서 UI로 제공되지 않습니다. 아래와 같이 스크립트에 직접 지정해야 합니다. preventWheelEvent 값이 true인 경우 선택 목록 상에서 마우스 휠을 움직여도 선택 목록이 변경되지 않습니다. preventWheelEvent 값이 false인 경우 선택 목록 상에서 마우스 휠을 움직일 경우 선택이 변경됩니다. 동작 예시는 위의 코드와 그림에서 확인할 수 있습니다.,132
322,"Repeat 컴포넌트는 데이터 갯수만큼 자동 생성되며, id와 ref를 데이터에 맞게 key 값으로 연동시켜줍니다. 반복되는 node에 설정하는 repeatKey 속성의 value는 처음 노드부터 1씩 커지면서 설정됩니다. 만약 repeatKey가 존재하지 않으면 autoCount를 true로 설정하면 자동으로 설정됩니다. 사용자가 임의의 id나 class를 정의할 때는 id나 class 속성을 사용합니다. 반복되는 열과 행의 횟수를 지정하는 cols와 rows 속성, 반복되는 방향을 지정하는 direction 속성, tabindex 속성 등을 사용할 수 있습니다. 그라데이션 fillColor을 지원하며, 디자인뷰에서 더블클릭시 그라디언트 생성창이 팝업됩니다. 사용자 정의 클래스는 svg로 랜더링되기 때문에 지원하지 않습니다.",265
323,Wframe33는 다른 XML 파일을 함께 보여주기 위한 컨테이너성 컴포넌트입니다. 이 컴포넌트는 접근성과 직접적인 관련이 없습니다.,66
324,"Textbox32는 tagname 속성에 따라 div, h1, h2, ..., h6, label 태그로 렌더링되며, 주로 정적인 텍스트 데이터를 나타내는 데 사용됩니다. 사용자로부터 정보를 입력 받는 컴포넌트와 연관된 항목명을 나타내기 위해 tagname 속성에 ""label""을 사용하고, for 속성에는 해당하는 컴포넌트의 id를 기술합니다. 만약 본문 언어와 다른 언어를 사용한다면 lang 속성을 사용합니다. 이를 준수하여 사용했는지 확인해야 합니다. 예제 코드를 통해 a링크와 label로 사용하는 방법을 보여주고 있습니다.",207
325,"RoundedRectangle61은 모서리가 원형 처리된 사각형 공간을 생성하는데, SVG로 생성되며 익스플로러 9이하의 브라우저에서는 VML로 랜더링 처리됩니다. arcsize는 모서리의 호의 반지름, borderColor는 객체의 보더 색상, borderWidth는 객체의 보더 두께, fillColor는 객체의 채움 색, id는 roundRectangle 컴포넌트의 id를 나타냅니다. tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 제공합니다. CSS에서는 w2roundRectangle 클래스를 이용하여 RoundedRectangle 전체를 감싸는 영역을 스타일링할 수 있습니다.",213
326,"WebSquare.uiplugin.slider는 상하&좌우 슬라이딩을 통해 값을 선택할 수 있는 인터페이스를 제공하는 슬라이딩 바입니다. accessibility 속성은 웹 접근성 모드를 지원하는지 여부를 나타내며, changeDirection 속성은 slider를 오른쪽에서 왼쪽으로 이동시 값이 늘어날지 줄어들지 여부를 설정합니다. class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, id 속성은 컴포넌트 ID를 나타냅니다. increment, maxValue, minValue 속성은 각각 슬라이더의 증가율, 최대값, 최소값을 설정합니다. ref 속성은 바인딩 정보를 설정하며, setBackground 속성은 배경을 설정합니다. showScale 속성은 슬라이더에 눈금을 표시하며, tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정합니다. title 속성은 HTML의 title 속성과 동일하며, tooltipDisplay 속성은 사용자가 선택한 값에 대한 툴팁 표시 여부를 설정합니다. userData1, userData2, userData3 속성은 사용자 정의 데이터 속성을 설정합니다. onmovedone 이벤트는 thumb의 이동이 끝난 경우 발생하며, onthumbmove 이벤트는 thumb이 이동한 경우 발생합니다. addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, getValue, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setMaxValue, setMinValue, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setUserData, setValue, show, toggleClass, trigger, unbind, unbindRef, visible 메서드는 각각 컴포넌트의 기능을 제어합니다.",576
327,"getUserData(""userData3"")는 userData3 속성의 값을 반환합니다. value는 슬라이더의 초기값을, vertical은 슬라이더를 세로로 그리도록 설정합니다. onmovedone은 thumb의 이동이 끝난 경우, onthumbmove는 thumb이 이동한 경우 발생하는 이벤트입니다. addClass(className)은 컴포넌트에 CSS class를 추가하고, bind(eventType, function)은 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다. changeClass(oldClassName, newClassName)은 컴포넌트의 class를 변경하며, focus()는 컴포넌트에 포커스를 줍니다. getDisabled()는 현재 컴포넌트의 disabled 속성 값을 반환하고, getGenerator()는 컴포넌트를 생성한 부모 Generator 객체를 반환합니다. getID()는 컴포넌트의 ID를 반환하며, getInitStyle(CSS)는 컴포넌트의 초기 스타일을 반환합니다. getOpacity()는 컴포넌트의 불투명도 값을 반환하고, getOriginalID()는 컴포넌트의 originalID를 반환합니다. getPluginName()은 컴포넌트의 이름을 반환하며, getReadOnly()는 현재 컴포넌트의 readOnly 속성 값을 반환합니다. getScope()는 scope=""true""인 WFrame의 부모 객체를 반환하고, getScopeWindow()는 scope=""true""인 WFrame의 부모 객체 또는 전역 window 객체를 반환합니다. getSize(sizeName)은 컴포넌트의 크기 값을 반환합니다.",443
328,"웹스퀘어 컴포넌트의 ref 속성을 설정. (웹스퀘어 컴포넌트 공통.) Parameter nametyperequireddescription 설정할StringYref 속성 값 Sample // (예제) input 컴포넌트의 ref 속성을 ""inputRef""로 설정. input1.setRef(""inputRef""); show( ) 웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)display:block; 및 visibility:visible; CSS를 적용. Sample // (예제) 컴포넌트를 화면에 표시 componentId.show(); toggleClass( className ) 웹스퀘어 컴포넌트에서 class를 추가 또는 삭제. (웹스퀘어 컴포넌트 공통.) Parameter nametyperequireddescription classNameStringY추가 또는 삭제할 class 이름 Sample // inputBox의 속성으로 class가 직접 정의된 경우, // toggleClass를 통해 추가 및 삭제 가능. input1.toggleClass(""tmpInputClass"");",303
329,"DataCollection과 연동 시 ""data:"" prefix를 꼭 붙여야 함. 명시하지 않으면 InstanceData의 XPath로 인식됨. setSize(width, height)는 웹스퀘어 컴포넌트의 크기를 설정하는데 사용됨. setStyle(propertyName, value)는 웹스퀘어 컴포넌트의 CSS 속성을 설정하는데 사용됨. setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정하는데 사용됨. setValue(value)는 슬라이더에 값을 설정하는데 사용됨. show(displayType)는 웹스퀘어 컴포넌트를 화면에 표시하는데 사용됨. toggleClass(className)는 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거하는데 사용됨. trigger(type, array)는 컴포넌트에서 특정 이벤트를 발생시키는데 사용됨. unbind(type, function)은 컴포넌트에서 이벤트를 제거하는데 사용됨. unbindRef()는 ref 바인딩을 해제하는데 사용됨. visible(flag)는 엔진 내부적으로 CSS visibility 속성을 설정하는데 사용됨.",349
330,"2022년 4분기 신규 기능인 SP4에 추가된 API 및 설정 항목을 요약한 문서입니다. 변경 내역 요약, 추가 설정 항목, 추가 API 목록 등이 포함되어 있습니다. 기능 개선 사항으로는, 한글 처리 지원, 업로드 이미지 파일 크기 제한, 모든 팝업 객체 반환, 그리드뷰 행의 실제 인덱스를 기준으로 inputType 변경, 병합된 셀에 이미지 표시 등이 있습니다. 또한, 이벤트 디버깅 기능이 추가되었으며, config.xml 파일에 parameterEncode, resetButtonDisplay, displayFormat 등의 설정 항목이 추가되었습니다. 추가 API로는, getAllPopupList, setDisplayMode, setDelimiter, useAlert 등이 있습니다. 동영상 목록에서도 SP4 Q4 신규 기능을 확인할 수 있습니다.",247
331,"3.4.항목 추가
InputBox와 SearchBox에서 maskFormatModelExcludeChar 속성으로 지정한 문자를 제외하고 값을 반환하는 기능이 추가됨.
4.로그 파일 생성 없이 로그만 출력
logFile=""false"" 설정을 추가할 경우, 로그만 출력하고 로그 파일은 생성하지 않음.
4.2.항목 추가
CKEditor에서 업로드 할 수 있는 이미지 파일 크기 제한을 설정할 수 있는 maxUploadSize 속성이 추가됨.
5.팝업의 웹 접근성 지원
$p.openPopup() 함수의 옵션에 useHeadingTagTitle 속성이 추가됨. 이를 통해 헤더 부분의 태그명을 <div> – <span> – <h2> 형태로 표시할 수 있음.
5.2.기능 추가
현재 열려있는 모든 팝업 객체를 반환하는 getAllPopupList() 함수가 추가됨.
5.3.기능 추가
모든 팝업 객체의 윈도우를 반환하는 getAllPopupWindowList() 함수가 추가됨.
6.음력 날짜를 양력 날짜로 변환
WebSquare.date.toSolar() 함수를 사용하여 음력 날짜를 양력 날짜로 변환할 수 있음.
7.패널의 열린 상태를 유지
independentPanel 속성을 추가하여 패널을 연 후에 다른 패널을 열 경우, 처음 연 패널(들)을 열린 채로 유지할 수 있음.
8.AutoComplete
setDisplayMode() 함수를 사용하여 displayMode 속성값을 동적으로 변경할 수 있음. setDelimiter() 함수를 사용하여 선택 항목 목록에 value와 label을 함께 표시할 때 사용하는 구분자를 동적으로 변경할 수 있음.
10.CheckComboBox
showCheckedTop 속성을 추가하여 선택된 항목을 상단으로 모아서 표시하는 기능을 추가함. setDisplayMode() 함수와 setDelimiter() 함수를 사용하여 displayMode 속성값과 구분자를 동적으로 변경할 수 있음.",545
332,"11. Generator
11.1. 변경 (웹 표준 준수 / WESD-1191)
- 변경 전: config.xml 파일의 dataPrefix 설정이 적용되지 않음.
- 변경 후: dataPrefix 설정이 적용되어, 비표준 태그에 data- 를 추가하여 브라우저에 렌더링.
12. GridView
12.1. 기능 (행의 실제 인덱스를 기준으로 inputType 변경 / WESD-1273)
- setCellInputType() 함수의 3번째 객체 인자에 옵션 추가.
- inputType=""drilldown"" 컬럼의 행이 접힌 상태에서 setCellInputType() 함수를 실행할 경우, 행의 실제 인덱스를 기준으로 setCellInputType() 함수를 실행.
12.2. 기능 (displayMode 동적 변경 / WESD-1253)
- setDisplayMode() 함수 추가.
- GridView 컬럼의 displayMode 속성값을 동적으로 변경.
12.3. 기능 (delimiter 동적 변경 / WESD-1253)
- setDelimiter() 함수 추가.
- 선택 항목 목록에 value와 label을 함께 표시할 때 사용하는 구분자(delimiter 속성)를 동적으로 변경.
12.4. 기능 (그룹핑 시 헤더에 마지막 단계만 표시 / WESE-281)
- groupby() 함수의 옵션 추가.
- groupby() 함수를 통해 그룹핑을 수행할 경우, 헤더에 마지막 단계만 표시.
12.5. 기능 (행 단위 복사하기 & 붙여넣기 / WESD-1146)
- focusMode=""row"" 속성 설정을 사용할 경우, 복사하기 & 붙여넣기 동작을 행 단위로 수행.
12.6. 기능 (브라우저의 가로 스크롤 사용 / WESD-1267)
- GridView의 가로 스크롤을 생성할 경우, 웹스퀘어의 가상 스크롤 대신 브라우저가 제공하는 스크롤을 사용.
12.7. 기능 (visibleRowNum 속성 동적 설정 / WESD-1227)
- setVisibleRowNum() 함수 추가.
- 화면에 표시할 행 수를 설정하는 visibleRowNum 속성 값을 동적으로 설정.
12.8. 기능 (병합하지 않을 값을 지정 / WESD-1124)
- 병합하지 않을 값을 지정.
12.9. 기능 (Excel 파일의 헤더 셀 서식 지정 / WESD-1160)
- advancedExcelDownload() 함수의 옵션 추가.
- 다운로드한 Excel 파일의 헤더 셀 서식을 dataType에 따라 출력.
12.10. 기능 (advancedExcelDownload() 오류 메시지 추가 / WESE-213)
- advancedExcelDownload() 함수를 통해 GridView를 Excel 파일로 다운로드할 때 표시하는 오류 코드를 추가.
12.11. 기능 (그룹핑 후에도 컬럼의 필터 아이콘 유지 / WESD-1201)
- useFilter=""true"" 속성을 사용하는 컬럼으로 그룹핑을 수행할 경우, 그룹핑 후에도 해당 컬럼에 필터 아이콘을 계속 표시하여 컬럼의 필터를 사용할 수 있도록 허용.
12.12. 변경 (setVisibleRowNum() / WESE-269)
- setVisibleRowNum() 함수를 이용하여 현재 존재하는 데이터 수보다 많은 행을 GridView에 표시하도록 설정할 경우, GridView 높이 계산에 오류가 발생. setVisibleRowNum() 함수를 이용하여 설정한 행의 수만큼 GridView 높이가 정상 계산되어 표시됨.",1010
333,"12.13. 변경 전과 후에 셀을 편집할 때, customPasteFormatter 속성값으로 지정한 함수가 호출되지 않는 문제가 있었으나, 이제는 정상적으로 호출됩니다. 그러나, 이 속성은 현재 비공개이며 추후 공개될 예정입니다.
12.14. senseReader=""true"" 속성 설정을 사용할 경우, GridView 헤더에 표시되는 필터에 대해서는 HTML 태그에 title 옵션이 없었지만, 이제는 title 옵션이 생성됩니다.
12.15. options.features 옵션 설정이 ""top=230,left=230,width=500,height=400""와 같이 width와 height를 모두 포함한 경우, resize 로직이 실행되지 않습니다.
12.16. fixedColumn 속성 설정을 사용할 경우, setColumnVisible() 함수가 동작하지 않는 경우가 있었으나, 이제는 최소 30px 이상인 경우에만 동작합니다. 또한, 컬럼폭은 GridView 너비를 초과하지 않을 때까지만 변경 가능합니다.
12.17. mergeCell() 함수의 mergeInfo.rowspan 옵션으로 행들을 병합하고, 병합된 행에 이미지를 포함한 후에, advancedExcelDownload() 함수로 GridView를 Excel 파일로 다운로드할 경우, 병합된 행의 첫번째 행에만 이미지가 포함됩니다. 그러나, 이미지는 병합된 행 전체에 걸쳐 출력됩니다.
13. GridView에는 senseReader=""true"" 속성 설정을 적용하고, GridView 컬럼에는 embeddedInput=""true"" 속성 설정을 적용한 후, GridView의 셀에서 값을 변경할 경우, 해당 부분에 대한 HTML 태그의 title 옵션 값이 변경됩니다.
14. getValue() 함수를 실행할 경우, maskFormatModelExcludeChar 속성으로 설정한 문자를 제외한 InputBox의 값을 반환합니다.
15. 모바일 웹 환경에서의 renderType을 지정할 수 있습니다.
16. 파일을 업로드하는 순서대로 callback 함수를 호출할 수 있습니다.
17. 필터 수가 1000개까지 지원됩니다.
18. 모바일 디바이스에서 ScheduleCalendar를 터치할 경우 onclick 이벤트는 touchStart, 혹은 longPress를 통해 발생하며, 이를 위한 속성들이 추가되었습니다.
19. resetButtonDisplay=""toggle"" 속성 설정을 사용하고 ref 속성 설정으로 인한 데이터가 있을 경우, X 버튼이 표시되지 않습니다.
20. displayMode 속성값을 동적으로 변경하거나, 선택 항목 목록에 value와 label을 함께 표시할 때 사용하는 구분자(delimiter 속성)를 동적으로 변경할 수 있습니다. 또한, SelectBox에서 선택된 항목의 부모 목록을 모두 표시할 수 있습니다.
21. dataType=""date""인 경우, 유효하지 않은 날짜를 입력할 경우 브라우저 경고창 출력 여부를 설정할 수 있습니다.",816
334,"false : 경고창 출력하지 않음. initValue : dataType=""number""인 경우 초기값을 지정. noUseTitle : 탭 스크롤 상의 버튼과 각 탭에 마우스 오버 시 각 탭의 title 속성으로 설정한 값을 숨김. useTitleTooltip : 탭 스크롤 상의 버튼과 각 탭에 마우스 오버 시 각 탭의 title 속성으로 설정한 값을 툴팁으로 표시. removeBridge : 탭을 선택한 상태에서 Enter 키를 누르면 포커스가 contet의 <div>를 선택. onbeforewframeunload : 페이지가 닫힐 경우, 해당 페이지가 지워지기 전, 해당 페이지의 WFrame(부모 페이지)에서 발생. setFocus() : index 혹은 windowId를 지정해서 해당 윈도우에 포커스를 줄 수 있음.",231
335,"WebSquare Guide SP4 릴리즈 노트 OPS 챕터 03
1. 요약
1.1. 엔진 정보표
- 엔진 버전: 5.0_4.4782B.20221223.154540
- 릴리즈 날짜: 2022년 12월 23일
1.2. 변경 내역
- 컴포넌트별 변경 내역이 기술됨
- 추가 API 목록이 기술됨
2. $p
2.1. 기능 (openPopup() 팝업의 웹 접근성 지원 / WESD-1289)
- $p.openPopup() 함수의 옵션 추가
- 헤더 부분의 태그명을 <div> – <span> – <h2> 형태로 표시
2.2. 버그 (openPopup() / WESE-282)
- 팝업의 id를 한글로 지정하여 팝업창을 열 경우, $p.getParameter() 함수를 사용하여 팝업 id를 확인할 수 없음
- 팝업의 id가 한글인 경우에도 확인 가능
2.3. 버그 (openPopup() / WESE-235)
- options.windowDragMove=""true"" 옵션 설정으로 팝업 윈도우를 생성한 후, 해당 팝업을 브라우저 영역 밖으로 드래깅할 경우, 팝업 윈도우가 완전히 사라짐
3. WebSquare.logger
3.1. 버그 (disableContextMenu() / WESD-1292)
- WebSquare.logger.disableContextMenu() 사용할 경우, 모바일 환경에서 화면 파일을 열 경우 오류 발생
4. Body
4.1. 기능 (이벤트 추가 / WESD-1000)
- onbeforepageunload: 페이지가 닫힐 경우, 해당 페이지의 body 부분에서 발생
5. CheckComboBox
5.1. 기능 (선택된 항목을 상단으로 모아서 표시 / WESE-225)
- showCheckedTop 속성 추가: 선택한 항목들만 목록 상단에 표시하는 기능
6. GridView
6.1. 기능 (행의 실제 인덱스를 기준으로 inputType 변경 / WESD-1273)
- setCellInputType() 함수의 3번째 객체 인자에 옵션 추가
- inputType=""drilldown"" 컬럼의 행이 접힌 상태에서 setCellInputType() 함수를 실행할 경우, 행의 실제 인덱스를 기준으로 setCellInputType() 함수를 실행
7. Group
7.1. 버그 (tooltipPostionX & tooltipPostionY / WESD-1284)
- tooltipDisplay=""true"" 설정을 적용해도, tooltipPositionX 및 tooltipPositionY 속성 설정이 정상 동작하지 않는 경우 발생
8. InputCalendar
8.1. 버그 (숫자 중복 입력 / WESD-1238)
- 숫자가 중복 입력되는 경우 발생
9. ScheduleCalendar
9.1. 기능 (모바일 환경 지원 / WESD-1288)
- selectLongPressDelay 속성 추가: onclick 이벤트가 longPress를 통해 발생할 경우, 날짜 선택에 필요한 시간을 지정
- eventLongPressDelay 속성 추가: onclick 이벤트가 longPress를 통해 발생할 경우, 터치후 드래깅을 시작할 수 있기까지의 시간을 지정
- longPressDelay 속성 추가: onclick 이벤트가 longPress를 통해 발생할 경우, 날짜 선택에 필요한 시간(selectLongPressDelay) 및 터치 후 드래깅을 시작할 수 있기까지의 시간(eventLongPressDelay)을 한번에 지정
10. Submission
10.1. 버그 (processsMsg / WESD-1286)
- $p.openPopup() 함수로 팝업을 생성하고, submission을 실행하면, submission의 상태 메시지(processMsg)가 나타나지만, 팝업에 모달이 적용되지 않음
11. TabControl
11.1. 변경 (removeBridge=""true"" / WESD-1287)
- removeBridge=""true"" 속성 설정을 사용할 경우, 탭을 선택한 상태에서 Enter 키를 누르면 포커스가 contet의 <div>를 선택
12. TextBox
12.1. 버그 (tooltipPostionX & tooltipPostionY / WESE-293)
- tooltipDisplay=""true"" 설정을 적용해도, tooltipPositionX 및 tooltipPositionY 속성 설정이 정상 동작 하지 않는 경우 발생
13. WFrame
13.1. 기능 (이벤트 추가 / WESD-1000)
- onbeforewframeunload: 페이지가 닫힐 경우, 해당 페이지의 WFrame(부모 페이지)에서 발생",1258
336,"FusionChart Wrapper 컴포넌트는 FusionCharts의 데이터를 분리하여 차트를 쉽게 Customizing 할 수 있도록 API를 지원합니다. FusionChart는 JavaScript chart로 다양한 Device, Browser, Platform에서 작동합니다. WebSquare5는 FusionChart의 기능을 사용할 수 있는 환경을 제공합니다. 차트의 종류로는 선형 차트, 세로막대차트, 영역차트, 가로막대차트, 원형차트, 도우넛차트, 스텍차트, 조합차트, 스크롤차트, 버블차트, xy(Scatter)차트가 있습니다. 지원 데이터로는 json과 xml이 있으며, WebSquare5에서는 json 데이터를 지원합니다. Fusionchart의 디자인은 css로 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의합니다. 데이터 연동 방법으로는 DataCollection을 만들고 해당 컴포넌트의 ref에 연결하거나, FusionChart에 Id, chartType, drawType를 설정하여 차트를 만들고 setJSONData() API를 이용하여 데이터를 셋팅합니다.",316
337,"28. Footer (HTML5)
<footer> 태그는 문서나 문장의 바닥글을 작성하는 데 사용됩니다. 일반적으로 문서의 저자, 저작권 정보, 이용약관, 연락처 등의 정보를 포함합니다. 이 태그의 속성으로는 id가 있으며, 이를 통해 script에서 해당 컴포넌트에 접근할 수 있습니다. CSS Overriding을 통해 스타일을 수정할 수 있으며, 이는 websquare의 style 편집기에서 직접 수정할 수 있습니다. 주의할 점은 HTML5에서는 웹스퀘어에서 사용하는 컴포넌트로서 별도의 속성이 없으며, 필요한 경우 Attribute Add로 버튼을 사용하여 속성을 추가해야 합니다.",226
338,"WebSquare.uiplugin.fusionchart는 FusionCharts를 Wrapper한 API로, 차트를 쉽게 Customizing 할 수 있도록 지원합니다. FusionCharts의 데이터는 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있는 형태입니다. 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. 이 API는 다양한 Property와 Event, Method를 제공합니다. Property 중 accessibility는 ul 태그를 생성할 때 X축 이름과 Y축 이름을 ul 태그의 label 및 value로 사용할 수 있습니다. 또한, chartType은 차트 유형을 설정하며, dataTypeFormatter는 차트가 그려지기 전에 실행되는 함수명을 정의하는 속성입니다. Method 중 addClass, bind, draw, exportJSChart, getDisabled, setDisabled, show 등이 있습니다. 이 API를 사용하여 차트를 쉽게 구현할 수 있습니다.",255
339,"setChartAttribute API의 axaxisname 속성 값을 label 값으로, ayaxisname 속성 값을 value로 사용함. y축이 두개인 경우는 setJSONData API의 dataset 항목들 중, 두번째 y축에 해당하는 부분에 sayaxisname 속성 값을 추가하여 사용함. accessibility, actionURI, chartType, dataList, dataTypeFormatter, drawType, id, labelNode, plotColor, ref, seriesColumns, seriesNode, seriesType, tabIndex, valueNode, version 속성이 있음. addClass, addTrendLine, addVTrendLine, applyStyle, bind, changeClass, configure, draw, exportJSChart, fc, focus, getActionURI, getChartAttribute, getDisabled, getGenerator, getID, getInitStyle 함수가 있음.",181
340,"initStyle 속성이 true로 설정된 컴포넌트만 유효하게 동작합니다. getJSONData() 함수는 FusionChart의 차트 데이터를 JSON String 형태로 반환합니다. getOpacity() 함수는 웹스퀘어 컴포넌트의 불투명도를 반환합니다. getOriginalID() 함수는 웹스퀘어 컴포넌트의 originalID를 반환합니다. getPluginName() 함수는 웹스퀘어 컴포넌트의 이름(pluginName)을 반환합니다. getPosition(positionName) 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. getReadOnly() 함수는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. getScope() 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. getScopeWindow() 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 그렇지 않은 경우 전역 window 객체를 반환합니다. getSize(sizeName) 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. getStyle(propertyName) 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getSVGString() 함수는 차트로부터 SVG를 string 형태로 반환합니다. getTitle() 함수는 컴포넌트의 title 속성 값을 반환합니다. getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다. getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다.",461
341,"UDC 객체의 메소드 중 getUserData, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle에 대한 설명이 있다. 각 메소드의 파라미터와 반환값, 예제 코드가 제공된다. 이를 통해 웹스퀘어 컴포넌트의 속성을 설정하거나 조회하는 방법을 알 수 있다.",113
342,"웹스퀘어 컴포넌트에서 사용 가능한 함수들에 대한 설명입니다. setStyle 함수는 CSS 속성과 값을 설정하며, setUserData 함수는 컴포넌트에 임의의 데이터를 설정합니다. show 함수는 CSS display 속성을 설정하여 컴포넌트를 화면에 표시하며, toggleClass 함수는 컴포넌트에서 특정 class를 추가하거나 제거합니다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시키며, unbind 함수는 컴포넌트에서 이벤트를 제거합니다. visible 함수는 CSS visibility 속성을 설정하지만, 사용을 권장하지 않습니다.",197
343,"WebSquare.uiplugin.xsl은 XSL을 통해 웹스퀘어 XML을 출력하는 데 사용됩니다. 이 클래스는 uiplugin 타입이며, xsl에 적용할 클래스 id, tabIndex, toolTip, xpath, xsl 파일의 경로 등의 속성을 가집니다. 또한, addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getTitle, getUdcHome, getUdcRoot, getUserData, getXPath, getXSL, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, setXPath, setXSL, show, toggleClass, transform, trigger, unbind, visible 등의 메서드를 제공합니다. 이들 메서드는 컴포넌트에 대한 CSS class 추가, 이벤트 할당, class 변경, 포커스 설정, 속성 값 반환, 데이터 변환 등의 기능을 수행합니다.",275
344,"getDisabled( ) : 웹스퀘어 컴포넌트의 disabled 속성 값을 반환하는 함수. 반환 값은 Boolean 타입이다.
getGenerator( ) : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하는 함수. 반환 값은 Object 타입이다.
getID( ) : 웹스퀘어 컴포넌트의 ID를 반환하는 함수. 반환 값은 String 타입이다.
getInitStyle( CSS ) : 컴포넌트의 초기 스타일을 반환하는 함수. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. Parameter로 CSS를 지정하지 않으면 모든 정보를 출력한다.
getOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 반환하는 함수. 반환 값은 0 ~ 1 사이의 실수이다.
getOriginalID( ) : 웹스퀘어 컴포넌트의 originalID를 반환하는 함수. originalID는 Scope 기능을 사용할 경우 존재한다. 반환 값은 String 타입이다.
getPluginName( ) : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하는 함수. 반환 값은 String 타입이다.
getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환하는 함수. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환한다. Parameter로 positionName을 지정하여 위치 종류를 선택할 수 있다.
getReadOnly( ) : 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환하는 함수. 반환 값은 Boolean 타입이다.
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 함수. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환한다. 반환 값은 Object 타입 또는 null이다.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 함수. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환한다. 반환 값은 Object 타입 또는 전역 window 객체이다.
getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환하는 함수. %로 설정된 경우, 픽셀로 변환된 값을 반환한다. Parameter로 sizeName을 지정하여 크기 값의 종류를 선택할 수 있다.
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하는 함수. Parameter로 propertyName을 지정하여 반환할 CSS 속성을 선택할 수 있다.
getStyleValue( style ) : [deprecated] 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환하는 함수. Parameter로 style을 지정하여 반환하려는 CSS 속성을 선택할 수 있다.
getTitle( ) : 컴포넌트의 title 속성 값을 반환하는 함수. 반환 값은 String 타입이다.
getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환하는 함수. 파일명은 마지막 .xml까지 포함한다. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환한다. UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환된다. 반환 값은 String 타입이다.",946
345,"UDC 객체의 getUdcHome 메소드는 UDC 파일 경로를 반환하며, getUdcRoot 메소드는 UDC 파일 경로를 포함하지 않은 경로를 반환한다. getUserData 메소드는 웹스퀘어 컴포넌트에 설정된 key의 value를 반환한다. getXPath 메소드는 설정된 xpath를 반환하며, getXSL 메소드는 xsl 파일의 경로를 반환한다. hasClass 메소드는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide 메소드는 웹스퀘어 컴포넌트를 화면에서 숨긴다. removeClass 메소드는 웹스퀘어 컴포넌트에서 class를 삭제한다. setDisabled 메소드는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause 메소드는 지정한 이벤트를 중단하거나 중단을 해제한다. setInitStyle 메소드는 컴포넌트의 초기 스타일을 복구한다. setOpacity 메소드는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition 메소드는 웹스퀘어 컴포넌트의 위치를 설정한다. setReadOnly 메소드는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setSize 메소드는 웹스퀘어 컴포넌트의 크기를 설정한다. setStyle 메소드는 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. setUserData 메소드는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다.",470
346,"함수 설명
1. setXSL(xsl)
- xsl 파일의 경로를 입력받아 xsl을 설정하는 함수
- 예시: xsl1.setXSL('/test/xsl001.xsl');
2. setXPath(xpath)
- xpath를 설정하고 transform 함수를 호출하여 화면을 새로 그리는 함수
- 예시: xsl1.setXPath('Drama'); xsl1.transform();
3. show(displayType)
- 웹스퀘어 컴포넌트를 화면에 표시하는 함수
- displayType으로 block, inline, none, """" 값을 입력받음
- 예시: componentId.show();
4. toggleClass(className)
- 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거하는 함수
- className으로 추가/삭제할 class를 입력받음
- 예시: input1.toggleClass(""tmpInputClass"");
5. transform()
- xpath의 데이터를 사용하여 xsl 화면을 그리는 함수
- 예시: xsl1.transform();
6. trigger(type, array)
- 컴포넌트에서 특정 이벤트를 발생시키는 함수
- type으로 발생시킬 이벤트를 입력받음
- array로 이벤트 핸들러에 전달할 파라미터 배열을 입력받음
- 예시: input1.trigger(""onviewchange"", [1,2]);
7. unbind(type, function)
- 컴포넌트에서 이벤트를 제거하는 함수
- type으로 제거할 이벤트를 입력받음
- function으로 제거할 이벤트의 핸들러 함수를 입력받음
- 예시: input1.unbind(""onviewchange"", func1);
8. visible(flag)
- CSS visibility 속성을 설정하는 함수
- flag로 설정할 CSS visibility 속성 값을 입력받음
- [deprecated] show/hide 혹은 setStyle 사용을 권장
- 예시: 없음",486
347,"WebSquare.uiplugin.aliasDataMap은 메인(혹은 부모) 화면에 있는 DataMap을 참조할 수 있는 기능을 제공하는 uiplugin입니다. id, scope, studioSrc, userData1, userData2, userData3 등의 속성과 getObj(), setScope() 등의 메소드를 제공합니다. scope 속성은 메인(혹은 부모) 페이지에 존재하는 참조 대상 DataMap의 ID를 지정하며, 상대 경로 혹은 절대 경로로 지정 가능합니다. studioSrc 속성은 부모 페이지의 정보를 가져오기 위한 Studio 전용 속성입니다. setScope() 메소드를 통해 Scope를 동적으로 변경할 수 있으며, 실행 후, aliasDataMap과 바인딩된 컴포넌트들은 자동으로 값이 초기화됩니다.",216
348,"WebSquare.uiplugin.linkedDataList는 DataList의 데이터를 필터링하거나 정렬한 결과만을 저장하는 객체입니다. 하지만 linkedDataList를 gridView에 직접 바인딩하는 것은 지원하지 않습니다. SP5에서는 linkedDataList를 사용하는 것 자체를 권장하지 않으며, 사용한다면 AutoComplete, CheckComboBox, MultiSelect, SelectBox와 같은 컴포넌트에만 사용할 것을 권장합니다. 또한, linkedDataList와 바인딩된 컴포넌트에서는 ref를 사용하지 않는 것이 좋습니다. 데이터는 1,000 건 이하를 권장하며 최대 10,000건까지 지원합니다.",189
349,"Type uiplugin 속성 요약
- bind: 바인딩 할 dataList의 id
- id: linkedDataList의 id
- rowStatusNodeName: json 또는 xml형태로 data를 가져올 때 rowStatus 키(노드) 이름을 설정하는 기능
- userData1: 사용자 정의 데이터 속성
- userData2: 사용자 정의 데이터 속성
- userData3: 사용자 정의 데이터 속성
이벤트 요약
메소드 요약
- clearFilter(): linkedDataList에 설정되어 있는 filter상태를 초기화합니다
- clearSort(): linkedDataList의 모든 정렬을 취소해줍니다
- clearSortFilter(): linkedDataList에 설정된 sort상태의 filter를 초기상태로 합니다
- getAllData(): linkedDataList의 모든 data를 배열로 반환합니다
- getAllFilteredData(): linkedDataList에서 filterRowIndex 순서의 모든 fliteredData를 배열로 반환합니다
- getAllFilteredJSON(): linkedDataList에 filteredRow 순서의 모든 filteredData를 JSON객체로 반환합니다
- getAllFilteredXML(options): linkedDataList에 filteredRow의 순서의 모든 filteredData를 XML로 반환합니다
- getAllJSON(): linkedDataList의 모든 data를 JSON객체로 반환합니다
- getAllNoFilteredData(): linkedDataList의 filter상태가 되지 않은 상태의 모든 데이터를 가져옵니다
- getAllXML(): linkedDataList의 모든 data를 XML로 반환합니다
- getCellData(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다
- getColData(colID): colIndex에 해당하는 열의 데이터(filter나 sort처리되지 않은)를 배열로 반환합니다
- getColumnDistinctDataArray(colIndex): 해당 colIndex에 존재하는 중복된 항목을 제거한 data를 배열을 정렬하여 보여줍니다
- getDataLength(): 현재 화면에 보이는 행의 수를 반환합니다
- getDataRow(filteredRowIndex): rowIndex에 해당하는 행의 데이터를 컬럼의 아이디를 키로 하는 해쉬 형태로 반환합니다
- getDeletedData(): 삭제 상태인 행들을 배열로 반환합니다
- getDeletedIndex(): 삭제 상태인 행의 번호를 배열로 반환합니다
- getDeletedJSON(): 삭제 상태인 행들의 데이터를 JSON객체로 반환합니다
- getDeletedXML(): 삭제 상태인 행들의 데이터를 XML로 반환합니다
- getFilterCondition(): linkedDataList의 filterCondition을 반환하는 함수
- getFilteredColData(colIndex): FilteredRow에 해당하는 Col의 데이터를 배열로 반환합니다
- getFilteredRowIndex(realRowIndex): 필터링된 상태의 행 인덱스를 반환
- getFusionChartData(chartType, labelColumn, seriesColumns): linkedDataList를 fusionChart의 json데이터로 반환합니다
- getID(): linkedDataList 객체의 id를 반환합니다
- getInsertedData(): 삽입 상태인 행들의 데이터를 배열로 반환합니다
- getInsertedIndex(): 삽입 상태인 행의 번호를 배열로 반환합니다
- getInsertedJSON(): 삽입 상태인 행들의 데이터를 JSON객체로 반환합니다
- getInsertedXML(): 삽입 상태인 행들의 데이터를 XML로 반환합니다
- getLinkedRealRowIndex(filteredRowIndex): linkedDataList를 독립적인 0번째부터 시작하는 data set으로 가정했을때의 realRowIndex, 즉 linkedDataList 세계에서의 realRowIndex
- getMatchedColumnData(matchCol, dataValue, targetCol, exactMatch, stRowIndex, lastRowIndex): stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다
- getMatchedData(colID, dataValue, exactMatch, stRowIndex, lastRowIndex): stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID 값이 dataValue와 같은 행들의 data를 배열로 반환합니다
- getMatchedIndex(colID, dataValue, exactMatch, stRowIndex, lastRowIndex): stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 index를 반환합니다
- getMatchedJSON(colID, dataValue, exactMatch, stRowIndex, lastRowIndex): stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 data를 JSON객체로 반환합니다
- getMatchedXML(colID, dataValue, exactMatch, stRowIndex, lastRowIndex): stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 data를 XML로 반환합니다
- getModifiedData(): 변경(삽입, 갱신, 삭제) 행들의 데이터를 배열로 반환합니다
- getModifiedIndex(): 추가나 삭제 상태인 행의 번호를 배열로 반환합니다
- getModifiedJSON(): 변경(삽입, 갱신, 삭제) 행들의 데이터를 JSON객체로 반환합니다
- getModifiedXML(): 변경(삽입, 갱신, 삭제) 행들의 데이터를 XML로 반환합니다
- getObjectType(): dataCollection의 Type을 반환합니다
- getOption(attr): linkedDataList 객체의 옵션을 조회하는 API
- getOriginalCellData(filteredRowIndex, colID): filteredRowIndex와 colID에 해당하는 셀의 데이터를 반환합니다
- getParentRealRowIndex(linkedRealRowIndex): linkedRealRowIndex(linkedDataList 세계에서의 realRowIndex)를 통해 실제 realRowIndex(부모 dataList에 해당하는 rowIndex)를 반환합니다
- getParentRowIndex(rowIndex): drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환합니다
- getRangeData(from, to): from부터 to 까지의 범위의 행의 data를 배열로 반환합니다
- getRangeJSON(from, to): from부터 to 까지의 범위의 행의 data를 JSON객체로 반환합니다
- getRangeXML(from, to): from부터 to 까지의 범위의 행의 data를 xml로 반환",1500
350,"linkedDataList 객체의 다양한 메소드들에 대한 설명이다. 예를 들어, getUserData(""userData2"") API를 통해 설정한 값을 얻어올 수 있으며, getAllData() 메소드는 linkedDataList의 모든 data를 배열로 반환한다. getDeletedData() 메소드는 삭제 상태인 행들을 배열로 반환하며, getInsertedData() 메소드는 삽입 상태인 행들의 데이터를 배열로 반환한다. 이 외에도 다양한 메소드들이 존재한다.",140
351,"drilldown에서 사용하는 함수들에 대한 설명입니다. 함수들은 linkedDataList 객체에서 사용됩니다. getLinkedRealRowIndex( )는 linkedDataList 내부의 realRowIndex를 반환하며, getMatchedColumnData( )는 범위 내에서 colID 값이 dataValue와 같은 행들의 targetCol 값을 배열로 반환합니다. getMatchedData( )는 범위 내에서 colID 값이 dataValue와 같은 행들의 data를 2차원 배열로 반환합니다. getMatchedIndex( )는 범위 내에서 colID 값이 dataValue와 같은 행들의 index를 배열로 반환합니다. getMatchedJSON( )은 범위 내에서 colID 값이 dataValue와 같은 행들의 data를 JSON 객체로 반환합니다. getMatchedXML( )은 범위 내에서 colID 값이 dataValue와 같은 행들의 data를 XML element로 반환합니다. getModifiedData( )는 변경(삽입, 갱신, 삭제)된 행들의 데이터를 2차원 배열로 반환합니다. getModifiedIndex( )는 변경(삽입, 갱신, 삭제)된 행들의 index를 배열로 반환합니다. getModifiedJSON( )은 변경(삽입, 갱신, 삭제)된 행들의 데이터를 JSON 객체로 반환합니다. getModifiedXML( )은 변경(삽입, 갱신, 삭제)된 행들의 데이터를 XML element로 반환합니다. getObjectType( )는 linkedDataList 객체의 타입을 반환합니다. getOption( )은 linkedDataList 객체의 옵션을 조회합니다. getOriginalCellData( )는 filteredRowIndex와 colID에 해당하는 셀의 데이터를 반환합니다. getParentRealRowIndex( )는 linkedRealRowIndex를 통해 실제 realRowIndex를 반환합니다. getParentRowIndex( )는 drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환합니다.",451
352,"linkedDataList 객체의 다양한 함수들에 대한 설명이다. getRangeData(from, to) 함수는 from부터 to까지의 범위의 행의 데이터를 배열로 반환하며, getRangeJSON(from, to) 함수는 from부터 to까지의 범위의 행의 데이터를 JSON 객체로 반환한다. getRangeXML(from, to) 함수는 from부터 to까지의 범위의 행의 데이터를 XML로 반환한다. getRealRowIndex(filteredRowIndex) 함수는 filteredRowIndex에 대한 실제 데이터의 filteredRowIndex를 반환한다. getRowCount() 함수는 linkedDataList의 데이터 row의 건수를 반환한다. getRowData(filteredRowIndex) 함수는 rowIndex에 해당하는 행의 데이터를 배열로 반환한다. getRowIndexByStatus(statusStr) 함수는 statusStr과 상태가 일치하는 행의 번호를 배열로 반환한다. getRowJSON(filteredRowIndex) 함수는 filteredRowIndex에 해당하는 행의 데이터를 JSON 객체로 반환한다. getRowStatus(filteredRowIndex) 함수는 filteredRowIndex에 해당하는 행의 상태를 반환한다. getRowStatusValue(filteredRowIndex) 함수는 filteredRowIndex에 해당하는 행의 상태를 숫자로 반환한다. getRowXML(filteredRowIndex) 함수는 filteredRowIndex에 해당하는 행의 데이터를 XML로 반환한다. getScope() 함수는 컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하는 함수이다. getScopeWindow() 함수는 컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope객체를 반환하는 함수이다. getSortCondition() 함수는 linkedDataList의 sortCondition을 반환한다. getTotalCol() 함수는 컬럼의 개수를 반환하며, getTotalRow() 함수는 행의 개수를 반환한다. getUnmatchedColumnData(matchCol, dataValue, targetCol, exactMatch, stRowIndex, lastRowIndex) 함수는 stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환한다.",527
353,"getUnmatchedColumnData( ) : 특정 열의 값이 일치하지 않는 행의 데이터를 반환하는 함수입니다. matchColNumber, dataValue, exactMatch, stRowIndex, lastRowIndex 등의 파라미터를 사용합니다.
getUnmatchedData( ) : 특정 열의 값이 일치하지 않는 행의 데이터를 반환하는 함수입니다. colID, dataValue, exactMatch, stRowIndex, lastRowIndex 등의 파라미터를 사용합니다.
getUnmatchedIndex( ) : 특정 열의 값이 일치하지 않는 행의 인덱스를 반환하는 함수입니다. colID, dataValue, exactMatch, stRowIndex, lastRowIndex 등의 파라미터를 사용합니다.
getUnmatchedJSON( ) : 특정 열의 값이 일치하지 않는 행의 데이터를 JSON 객체로 반환하는 함수입니다. colID, dataValue, exactMatch, stRowIndex, lastRowIndex 등의 파라미터를 사용합니다.
getUnmatchedXML( ) : 특정 열의 값이 일치하지 않는 행의 데이터를 XML로 반환하는 함수입니다. colID, dataValue, exactMatch, stRowIndex, lastRowIndex 등의 파라미터를 사용합니다.
getUpdatedData( ) : 갱신 상태인 행의 데이터를 반환하는 함수입니다.
getUpdatedIndex( ) : 갱신 상태인 행의 인덱스를 반환하는 함수입니다.
getUpdatedJSON( ) : 갱신 상태인 행의 데이터를 JSON 객체로 반환하는 함수입니다.
getUpdatedXML( ) : 갱신 상태인 행의 데이터를 XML로 반환하는 함수입니다.
multisort( ) : 여러 열을 동시에 정렬해주는 함수입니다. options.sortIndex, options.sortOrder 등의 파라미터를 사용합니다.
emoveColumnFilter( ) : 특정 열에 적용된 필터를 삭제하는 함수입니다. colID 등의 파라미터를 사용합니다.
emoveColumnFilterAll( ) : 모든 열에 적용된 필터를 삭제하는 함수입니다.
setColumnFilter( ) : 특정 열에 필터를 적용하는 함수입니다. filterOptions.type, filterOptions.colIndex, filterOptions.key 등의 파라미터를 사용합니다.",528
354,"linkedDataList1.setColumnFilter() 함수를 사용하여 a컬럼에서 ""영화"" 문자가 포함된 행만 필터링할 수 있습니다. setColumnFilter() 함수를 사용하여 정규표현식을 이용하여 필터링할 수도 있습니다. setCondition() 함수를 사용하여 linkedDataList의 필터링 또는 정렬 조건을 설정할 수 있습니다. setOption() 함수를 사용하여 linkedDataList 객체의 옵션을 설정할 수 있습니다. sort() 함수를 사용하여 linkedDataList의 bodyColumnID에 해당하는 열을 정렬할 수 있습니다. sort() 함수를 사용할 때는 dataType에 상관없이 text로 간주하여 정렬되므로, number 타입의 컬럼을 정렬해야 하는 경우에는 multisort를 사용하는 것이 좋습니다.",212
355,"이 가이드는 웹스퀘어5를 사용하여 웹 접근성을 개선하는 방법을 설명합니다. 이를 통해 시각, 청각, 지체적 장애를 가진 사용자들도 웹사이트를 이용할 수 있도록 돕습니다. 가이드는 웹 접근성의 개념과 웹스퀘어5에서의 구현 방법, 그리고 웹 접근성 검사 도구 사용 방법 등을 다룹니다. 이 가이드를 따르면 웹사이트의 접근성을 개선하여 더 많은 사용자들이 이용할 수 있게 됩니다.",185
356,"WebSquare.uiplugin.footer는 HTML5의 Footer와 같은 역할을 하는 컴포넌트이다. class 속성을 이용하여 CSS 파일이나 style 블럭에서 정의한 여러 개의 class를 공백으로 구분하여 적용할 수 있다. 또한, 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능하다.",113
357,"PageControl은 모바일 페이지 이동을 위한 UI 컴포넌트입니다. 사용자가 class나 id를 정의할 때는 class와 id 속성을 사용하며, 전체 페이지 수와 페이징 디자인 타입을 지정할 수 있습니다. 또한, 마지막 페이지에서 첫번째 페이지로 혹은 첫번째 페이지에서 마지막 페이지로 이동할지를 지정할 수 있습니다. tabIndex 속성은 Tab Key를 이용한 컴포넌트의 포커스 순서를 지정합니다. 
PageControl 컴포넌트는 prev, next 버튼 기능을 제공하며, 사용자가 전체 페이지 수와 페이지당 표시하고 싶은 데이터 수 등을 구현해야 합니다. DataCollection의 경우, 데이터를 포함하고 있는 DataCollection에서 원하는 데이터 양 만큼 가져와 새로운 DataCollection을 만들고 그 안에 넣어 GridView 컴포넌트에 바인딩 시켜줘야 합니다. 
CSS Overriding을 위해 w2pageControl, w2pageControl_left, w2pageControl_center, w2pageControl_right 클래스를 사용할 수 있습니다. 이 클래스들은 웹스퀘어 엔진에서 자동으로 부여되며, PageControl 전체를 감싸는 영역, 왼쪽 화살표 영역, 가운데 글자가 들어가는 영역, 오른쪽 화살표 영역을 나타냅니다.",406
358,"Audio7.1 - HTML5 태그를 사용하여 음악 또는 오디오 스트림을 제공할 수 있다. 이는 접근성과 직접적인 관련이 없다. 따라서, 다음과 같은 Check Point를 고려해야 한다. 콘텐츠에 대한 자막, 대본 등을 제공하는가? 자동으로 소리가 재생되지 않는가? 재생, 정지 기능에 접근이 가능한가? 이러한 지침들은 1.2.1. 자막 제공, 1.3.4. 자동 재생 금지, 4.2.1. 웹 애플리케이션 접근성 준수와 관련이 있다.",210
359,"WebSquare.uiplugin.pivotTable은 2차원 데이터를 통계치를 포함한 표로 보여주는 컴포넌트이다. cols는 초기에 보여줄 column 축의 컬럼을 정의하고, dataList은 pivotTable과 연동할 dataList ID를 설정한다. defaultAggregator는 기본 aggregator를 설정하며, id는 컴포넌트 ID를 설정한다. noResultMessage는 조회 결과가 없을 때 표시되는 메시지를 설정하고, renderMode는 레이블 영역을 전부 그릴지(compact)를 선택하는 모드를 설정한다. rows는 초기에 보여줄 row 축의 컬럼을 정의하며, valuesAxis는 Σ값 레이블의 위치를 설정한다. 이외에도 다양한 이벤트와 메서드가 제공된다.",224
360,"column id를 입력할 때는 구분자 "",""를 사용하며, 입력된 column의 순서에 따라 결과가 달라진다. 사용자 정의 데이터 속성인 userData1, userData2, userData3은 각각 getUserData(""userData1""), getUserData(""userData2""), getUserData(""userData3"") API를 통해 값을 얻어올 수 있다. pivotTable을 초기에 보여줄 때 value축에 둘 컬럼을 정의할 때는 vals를 사용하며, 구분자 "",""를 통해 column id를 입력한다. valuesAxis는 Σ값 레이블의 위치를 설정하는 옵션이다. onrefresh pivotTable은 설정이 동적으로 바뀐 경우 발생하는 이벤트이다. addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly는 웹스퀘어 컴포넌트의 공통 함수이다.",250
361,"웹스퀘어 컴포넌트의 여러 기능들을 설명하는 문서입니다. 각 함수들은 해당 컴포넌트의 속성 값을 반환하거나 설정하는 역할을 합니다. 예를 들어, getReadOnly 함수는 readOnly 속성 값을 반환하며, setDisabled 함수는 disabled 속성 값을 설정합니다. 이 외에도, getSize 함수는 컴포넌트의 크기 값을 반환하며, getStyle 함수는 CSS 속성 값을 반환합니다. 이러한 함수들을 사용하여 웹스퀘어 컴포넌트를 보다 효율적으로 제어할 수 있습니다.",172
362,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. propertyStringN: CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). setOpacity( value ): 웹스퀘어 컴포넌트의 불투명도를 설정. setPosition( left , top , mode ): 웹스퀘어 컴포넌트의 위치(left, top)를 설정. setReadOnly( readOnly ): 웹스퀘어 컴포넌트의 readOnly 속성을 설정. setSize( width , height ): 웹스퀘어 컴포넌트의 크기(width, height)를 설정. setStyle( propertyName , value ): 웹스퀘어 컴포넌트의 CSS 속성을 설정. setUserData( key , value ): 웹스퀘어 컴포넌트에 임의의 데이터를 설정. show( displayType ): 웹스퀘어 컴포넌트를 화면에 표시. toggleClass( className ): 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. trigger( type , array ): 컴포넌트에서 특정 이벤트를 발생시킴. unbind( type , function ): 컴포넌트에서 이벤트를 제거. visible( flag ): 엔진 내부적으로 CSS visibility 속성을 설정.",378
363,"Aside6.Aside6.1Aside
Aside 태그는 본문 내용 외에 주변에 표시되는 기타 내용들을 표현할 때 사용합니다. 이 태그는 접근성과 직접적인 관계는 없습니다.",71
364,"PageInherit는 다른 웹스퀘어 xml화면 파일을 현재 화면에 include하는 컴포넌트입니다. 공통 모듈이나 개발단을 묶어서 include할 때 사용하기 좋습니다. UI 공통을 작성하고, dataCollection, instance, JavaScript, CSS에 대한 상속 기능을 제공합니다. 사용자가 임의의 class나 id를 정의할 수 있으며, initScript, src, tabIndex, tagname, toolTip, userData1~3 등의 속성을 제공합니다. PageInherit와 WFrame의 차이점은, WFrame은 공통화하는 기능을 제공하지만, 재정의할 수 없는 문제점이 있습니다. PageInherit는 이러한 문제점을 극복할 수 있는 컴포넌트입니다. 주로 공통이 되는 top, left 메뉴 등에서 사용하며, 동적으로 setSrc를 하며 화면을 바꿔야 할 때는 iframe을 사용해야 합니다.",273
365,"이 장에서는 Forms13, Accordion, AutoComplete 컴포넌트에 대해 설명합니다. Forms13은 하이퍼링크 역할을 수행하며, Accordion은 여러 개의 패널에 컨텐츠를 표시하고, AutoComplete는 입력된 텍스트에 따라 자동 완성 기능을 제공합니다. Accordion 컴포넌트에서는 모든 패널을 열거나 Enter 키로 패널을 열고 닫을 수 있으며, 열린 패널의 속성을 확인할 수 있습니다. AutoComplete 컴포넌트에서는 선택 안내 메시지를 설정하고, 일부 선택 항목을 숨기거나 비활성화할 수 있습니다.",209
366,"AutoComplete 컴포넌트에서는 setEnableColumn() 함수를 사용하여 선택 목록의 특정 항목을 비활성화할 수 있습니다. 또한, displayMode 및 delimiter 속성을 사용하여 선택 항목 표시 방법을 설정할 수 있으며, 마우스 휠 스크롤링 제어, 검색, 입력 검증 및 검증 실패 메시지 표시, 포커스 이동, 특정 키 동작 방지, 이벤트 추가 등의 기능을 제공합니다. 예제 파일과 YouTube 동영상을 통해 자세한 사용 방법을 확인할 수 있습니다.",178
367,"AutoComplete와 SelectBox는 기본적으로 동일한 기능을 제공하지만, AutoComplete는 검색 기능을 제공합니다. Calendar는 달력 이미지를 출력하여 날짜를 선택할 수 있는 인터페이스를 제공합니다. 날짜 형식, 최소/최대 연도, 시작 요일, 스킨 디자인, 연도/월 표시 순서 등을 설정할 수 있습니다. 선택 가능한 날짜를 제어하거나, 선택한 날짜가 속한 주를 다른 색으로 표시할 수 있습니다. 또한, 요일을 텍스트 혹은 이미지로 표시하거나, 직접 지정하거나 DataList와의 바인딩을 통해 지정할 수 있습니다.",204
368,"DataList의 컬럼 ID 앞에 ""data:""를 붙여야 합니다. setHolidayRef() 함수를 사용하여 휴일을 설정하고, removeHoliday() 함수를 사용하여 설정된 휴일을 취소할 수 있습니다. onmonthselect 이벤트와 onyearselect 이벤트는 달력에서 월과 연도를 변경할 때 발생하며, 각각 info 오브젝트를 반환합니다. CheckBox 컴포넌트는 여러 항목을 동시에 선택할 수 있는 선택 박스와 유사한 인터페이스를 제공합니다. 선택 항목은 직접 입력하거나 DataList와 바인딩하여 설정할 수 있으며, 일부 선택 항목을 숨기거나 비활성화할 수 있습니다. CheckComboBox 컴포넌트는 CheckBox와 SelectBox를 혼합한 형태의 컴포넌트로, 자동 완성 기능을 제공합니다.",252
369,"체크박스 컴포넌트
체크박스 항목 중 특정 항목을 비활성화하려면 setEnableColumn() 함수를 사용합니다. 선택 목록 하단에 선택완료 및 선택해제 버튼을 표시하려면 navBtn=""true"" 설정을 사용합니다. 전체 항목을 선택할 수 있는 ""전체"" 옵션을 표시하려면 allOption 속성을 사용하고, 선택 안내 메시지를 표시하려면 chooseOption & chooseOptionLabel 속성을 사용합니다. 선택 항목을 표시하는 방법을 설정하려면 displayMode 속성을 사용하고, 선택 항목을 표시할 열의 개수를 지정하려면 visibleColNum 속성을 사용합니다. 선택 목록을 펼쳤을 때 보여줄 열의 최대 개수를 지정하려면 visibleColMax 속성을 사용합니다. 선택한 항목을 선택 목록 상단에 표시하려면 showCheckTop 속성과 checkboxClickSync 속성을 모두 ""true""로 설정합니다. 마우스 드래깅을 통해 여러 항목을 한꺼번에 선택하려면 useDrag=""true"" 설정을 사용하고, rangeSeparator 속성을 지정하여 연속적으로 선택된 값을 ""x-y"" 형태로 표시할 수 있습니다. 사용자가 직접 항목을 입력하여 항목을 선택하려면 useEdit=""true"" 설정을 사용합니다. 사용자가 값을 입력할 때마다 해당 값의 유효성을 검증하려면 validateOnInput 속성을 ""true""로 설정합니다.
DatePicker 컴포넌트
DatePicker 컴포넌트는 모바일 전용 달력 컴포넌트입니다. calendarValueType 속성을 이용하여 연월일시간, 연월일, 연월등을 선택할 수 있도록 지원합니다.
Editor 컴포넌트
Editor 컴포넌트는 웹 에디터(CKeditor)를 제공합니다. CKEditor를 생성하고 옵션을 통해서 다양한 기능을 지원합니다.
FlipToggle 컴포넌트
FlipToggle 컴포넌트는 터치 드래깅을 통한 토글링을 지원합니다. Label을 지정할 수 있으며, 모바일 장치용 토글링 인터페이스로 사용됩니다.
Image 컴포넌트
Image 컴포넌트는 화면에 이미지를 출력합니다. 경로 설정을 통해 이미지를 추가하고, 이미지 크기 및 스타일을 지정할 수 있습니다.
InputBox 컴포넌트
InputBox 컴포넌트는 텍스트 입력 상자로, 입력 가능한 텍스트 제한, 입력 포맷 지정, 입력 값 종류 지정, 출력 포맷 지정, 날짜 출력 포맷 선택 등의 기능을 지원합니다.",794
370,"InputBox는 dataType 및 displayFormat 속성을 사용하여 시간, 날짜, 숫자 등의 입력 방식을 지정할 수 있습니다. 또한, applyFormat 속성을 사용하여 포맷 적용 시점을 결정할 수 있으며, ltrim, trim, rtrim 속성을 사용하여 좌우 공백을 제거할 수 있습니다. setValue()와 getValue() 함수를 통해 컴포넌트에 동적으로 값을 설정하거나 현재 값을 반환할 수 있으며, maxLength 속성을 통해 입력 가능한 최대 길이를 설정할 수 있습니다. validate() 함수를 사용하여 입력 검증을 수행하고, invalidMessage 속성으로 설정한 메시지를 표시할 수 있습니다. 또한, oneditfull 이벤트는 maxByteLength 속성으로 지정한 길이 만큼의 값이 입력될 경우 발생합니다. InputCalendar는 Calendar와 동일한 기능을 제공하며, 직접 날짜 입력이 가능합니다.",266
371,"InputCalendar는 날짜 입력과 관련된 다양한 기능을 제공합니다. displayFormat 속성을 사용하여 입력한 날짜의 표시 방법을 제어할 수 있으며, dateValidCheck 속성을 설정하여 입력된 날짜 값의 유효성을 확인할 수 있습니다. 또한, disableBeforeToday 및 disableAfterToday 속성을 사용하여 오늘 날짜를 기준으로 날짜 선택을 제한할 수 있습니다. disableBeforeDate 및 disableAfterDate 함수를 사용하여 특정 날짜 이전/이후의 날짜들을 비활성화할 수 있습니다. setValue 함수를 사용하여 날짜를 설정하고, validate 함수를 사용하여 입력된 날짜의 유효성을 검증할 수 있습니다. 이외에도 다양한 기능이 제공되며, config.xml 파일에서 일괄 설정할 수 있습니다.",243
372,"InputCalendar 컴포넌트는 날짜 입력을 위한 컴포넌트로, 날짜 선택을 위한 달력을 제공합니다. 날짜가 유효하지 않을 경우, invalidMessageFunc 속성으로 정의된 함수가 호출되며, dateValidSetCustom=""true"" 속성을 설정할 경우, invalidMessageFunc 함수를 실행하여 유효하지 않은 날짜값 입력에 대한 오류 메시지를 표시하고 이후 setValueCancel() 함수를 실행하여 이전 유효한 값을 유지할 수 있습니다. Today 버튼은 showToday=""false"" 설정을 통해 화면에 표시하지 않을 수 있으며, pickerType 속성을 통해 달력에서 연도 및 월을 선택하는 방식을 설정할 수 있습니다. 또한, displayDayType 속성을 사용하여 달력의 요일 부분을 텍스트 혹은 이미지 형태로 표시할 수 있습니다. MultiSelect 컴포넌트는 SelectBox 형태로 다중 선택을 지원하며, onrowclick 이벤트는 선택 목록에서 항목을 선택할 때 발생합니다. MultiUpload 컴포넌트는 파일 여러 개를 한번에 업로드할 수 있는 기능을 제공하며, 파일 확장자를 통한 업로드 파일 종류 제한, 최대 업로드 파일 개수 및 크기 지정이 가능합니다.",381
373,"13.14 파일 업로드
13.14.1 파일 크기 제한 설정
config.xml 파일에서 subSize1과 subSize2 값을 설정하여 파일 크기 제한을 설정할 수 있습니다. websquare.xml 파일에서는 maxUploadSize와 subSize1, subSize2 값을 설정할 수 있습니다.
13.14.2 업로드 파일 별 파라미터 설정
setParamJSON() 함수를 사용하여 각 파일 별로 서로 다른 파라미터를 설정할 수 있습니다. getFileNames() 또는 getFileInfos()를 사용하여 파일 이름을 반환하고, 파일 이름을 사용하여 각 파일 별 파라미터 정보를 JSON 형태로 생성합니다. setParamJSON()을 호출하여 파라미터 정보를 전달합니다.
13.14.3 최대 업로드 파일 수 설정
maxcount 속성을 사용하여 최대 업로드 가능한 파일 수를 설정할 수 있습니다.
13.14.4 업로드 대상 파일 수 반환
getFileCount() 함수를 사용하여 업로드할 파일의 개수를 확인할 수 있습니다.
13.15 Radio
Radio 컴포넌트는 CheckBox와 달리 단일 항목만 선택 가능한 선택 대상 항목을 제공합니다. 선택 항목을 직접 입력하거나 DataList 혹은 LinkedDataList와 바인딩하여 설정할 수 있습니다. 선택 항목을 표시할 때 일부 선택 항목을 숨기거나 비활성화할 수 있으며, 입력 검증 및 검증 실패 메시지 표시, 툴팁 표시 등의 기능을 제공합니다.",403
374,"ScheduleCalendar는 일정을 달력 형태로 표시하는 컴포넌트로, 일정 추가, 삭제, 편집이 가능하다. addSchedule() 함수를 이용하여 동적으로 스케줄을 추가할 수 있으며, editable 속성을 true로 설정하면 마우스 드래그-앤-드롭을 통해 일정의 시작일 및 종료일을 변경할 수 있다. selectable 속성을 true로 설정하면 칼렌더 상에서 특정 날짜를 클릭하거나 여러 날짜를 드래깅하여 스케줄 정보를 입력할 수 있다. nextDayThreshold 속성을 이용하여 스케줄이 끝나는 시간을 기준으로 스케줄의 마지막 날짜를 캘린더에 표시할지 여부를 설정할 수 있다. headerLeftBtn과 headerRightBtn 속성을 이용하여 좌측 버튼과 우측 버튼을 추가할 수 있다. timeFormat 속성을 이용하여 시간 표시 형식을 설정할 수 있다. onaddschedule과 onmoveschedule 이벤트를 이용하여 스케줄 생성 및 이동 시 동작을 정의할 수 있다. SearchBox는 검색용 텍스트 입력 상자로, InputBox와 동일한 기능을 제공하며, 추가적으로 전체 텍스트를 삭제할 수 있는 버튼을 함께 제공한다. Secret은 비밀번호 입력 상자로, InputBox와 동일한 기능을 제공하며 입력된 텍스트를 별도의 지정된 기호로 표시한다.",440
375,"입력 검증28.1, 입력 제어28.2, 출력 제어에 대한 설명이 있다. validate() 함수를 사용하여 입력 검증을 수행하고, 검증 실패 시 메시지를 표시할 수 있다. setRef() 함수를 사용하여 ref 속성을 동적으로 설정할 수 있다. SelectBox 컴포넌트를 사용하여 단일 선택만 가능한 드롭다운 리스트 형태의 메뉴를 만들 수 있다. 선택 항목을 직접 입력하거나 DataList 혹은 LinkedDataList와 바인딩하여 설정할 수 있다. 계층 구조의 선택 항목을 표시할 수 있으며, 선택 목록의 높이 및 너비, 상위 항목 표시, 일부 선택 항목 숨기기, 일부 선택 항목 비활성화하기, label 및 value 표시, 마우스 휠 스크롤링 제어 등의 기능을 제공한다.",258
376,"SelectBox
- preventWheelEvent=""true"": 선택 상자 상에서 마우스 스크롤을 움직여도 스크롤되지 않고 선택 항목이 변경되지 않음.
- invalidMessage=""검증 실패 안내 메시지""까지 설정된 경우, invalidMessage 속성으로 설정한 ""검증 실패 안내 메시지""가 표시됨.
- labelWidthAuto=""true"" 설정을 사용할 경우, 선택 항목 중 가장 긴 label 값에 따라 SelectBox의 너비를 자동으로 조정할 수 있음.
- preventKeyList 속성값으로 특정 키의 동작을 막을 수 있음.
- tooltipDisplay 속성을 ""true""로 설정할 경우 SelectBox에서 선택된 항목에 대한 툴팁을 표시할 수 있음.
- itemTooltipDisplay 속성을 ""true""로 설정할 경우, SelectBox에서 선택 항목 목록 상에서 각 선택 항목에 대한 툴팁을 표시할 수 있음.
- itemTooltipFormatter 속성값으로 툴팁을 변환할 함수 이름을 지정한 후, 해당 함수를 직접 구현하여 툴팁 텍스트를 변환할 수 있음.
- onselected 이벤트는 마우스 클릭 혹은 Enter 키를 통해 항목을 선택할 경우 발생함.
- AutoComplete와 SelectBox는 기본적으로 동일한 기능을 제공하지만, AutoComplete는 검색 기능을 제공함.
Slider
- 상하, 좌우 슬라이딩을 통해 값을 선택할 수 있는 인터페이스를 제공함.
- 슬라이딩 방향을 지정할 수 있음.
- setMinValue(최소값)과 setMaxValue(최대값)으로 슬라이더 상의 최소값과 최대값을 설정할 수 있음.
- onthumbmove 이벤트는 핸들을 이동할 때, onmovedone 이벤트는 핸들 이동 후 발생함.
Span
- tagname 속성이 span인 TextBox 컴포넌트.
- Output과 동일한 기능을 제공함.
- 웹 브라우저 전체 폭에 걸쳐 문자열을 출력함.
Spinner
- 화살표로 값을 선택할 수 있는 기능을 제공함.
- dateType=""date"" 혹은 dateType=""time""인 경우, Spinner는 날짜 혹은 시간을 표시함.
- autoFocus=""true"" 설정을 적용할 경우, 사용자가 날짜 입력 후 자동으로 포커스를 이동할 수 있음.
- dateIncrementType 설정에 따라 정해진 길이만큼의 날짜값이 입력되면 nextTabID로 지정된 컴포넌트로 포커스가 이동됨.",731
377,"Spinner 컴포넌트는 dateIncrementType 속성을 통해 날짜 혹은 시간이 증가하는 단위를 설정할 수 있습니다. 초기값은 initValue 속성으로 설정하며, 잘못된 날짜를 입력할 경우 useAlert 속성을 추가하여 경고창을 출력할 수 있습니다. TextArea 컴포넌트는 여러 줄의 텍스트 입력이 가능하며, readOnly나 disabled 상태에서도 placerholder 속성으로 지정된 텍스트를 표시할 수 있습니다. TextBox 컴포넌트는 HTML 태그를 지원하며, 툴팁을 표시할 수 있습니다. Trigger 컴포넌트는 버튼 UI를 제공하며, 툴팁 텍스트와 표시 위치를 지정할 수 있습니다. Upload 컴포넌트는 파일 한 개만 업로드 가능하며, 최대 업로드 용량 제한을 subSize 속성으로 설정할 수 있습니다.",268
378,"12. 그리기
12.1 컴포넌트 그리기
사용자는 Palette 뷰에서 컴포넌트를 선택한 후 Flexible Mode 혹은 Static Mode에서 해당 컴포넌트를 Design 뷰에 추가할 수 있습니다. Static Mode는 클릭 & 클릭 방식, Absolute Mode는 클릭 & 드래그 방식으로 동작합니다.
12.2 스타일 설정
모든 컴포넌트는 id, style, class 속성을 포함합니다. CSS 문법을 사용하여 각 컴포넌트 스타일을 확장할 수 있습니다. CSS는 Style 뷰에서 직접 입력하거나, Add Internal Style 버튼 및 class 속성 사용 (인라인 정의), CSS 파일 임포트 방법으로 적용 가능합니다.
12.3 속성 설정
Design 뷰에서 그린 컴포넌트의 속성은 Property 뷰에서 정의할 수 있습니다.
12.4 이벤트 추가
Design 뷰에서 컴포넌트를 우클릭한 후, 이벤트를 추가할 수 있습니다. 추가할 이벤트를 선택하면, 이벤트 핸들러 작성 코드가 Script 탭에 자동 생성됩니다. 직접 이벤트 핸들러를 구현하십시오.",361
379,"컴포넌트에 등록 가능한 이벤트는 API 가이드를 참고하고, Script 탭에서 이벤트 함수를 정의하고 Property 뷰에서 확인합니다. 기존 스크립트를 활용하여 이벤트 함수를 생성할 수 있으며, 이벤트가 발생한 컴포넌트 정보를 확인할 수 있습니다. 자주 사용하는 디자인 요소는 스니핏으로 등록하여 일관성을 유지할 수 있으며, 컴포넌트를 동적으로 생성할 수 있습니다. Script 탭에서 브라우저 객체, 사용자 정의 변수/함수/객체, WebSquare 객체를 정의할 수 있으며, 브라우저에서 페이지를 확인할 수 있습니다.",213
380,"DatePicker23.DatePicker 수정 일자 버전 (SP2)
DatePicker23.DatePicker는 Calendar 컴포넌트와 InputCalendar 컴포넌트의 대체로 사용되며, 모바일 전용 컴포넌트입니다. 터치나 드래그 이벤트를 통해 날짜값을 선택할 수 있습니다.
23.1 Property
- ampm: calendarValueType 속성이 yearMonthDateTime인 경우 오전, 오후에 해당하는 문자열을 ,로 구분하여 작성합니다.
- calendarValueType: 날짜표시 형식을 지정합니다.
- class: 사용자가 임의의 class를 정의할 때 사용합니다.
- dateSuffix: [default:일]일(date)에 해당하는 숫자 뒤에 설정할 문자열을 지정합니다.
- id: 사용자가 임의의 id를 정의할 때 사용합니다.
- monthNames: 월에 해당하는 숫자를 대체할 문자열로 ,로 구분하여 작성합니다.
- ref: DataCollection의 value 경로로 컴포넌트와 DataCollection의 value를 binding을 시킬 때 사용하며 ""data:""라는 prefix는 필수로 붙여주어야 합니다.
- tabIndex: Tab Key를 이용한 컴포넌트의 포커스 순서로 HTML의 tabindex속성과 동일한 기능을 제공합니다.
- title: 일반적인 tag의 title 입니다.
- yearSuffix: [default:년]연도(year)에 해당하는 숫자 뒤에 설정할 문자열로 빈값을 넣을 경우 $blank를 사용합니다.
23.2 브라우저 캡쳐화면
DatePicker의 모습을 보여주는 캡쳐화면이 제공됩니다.
23.3 CSS Overriding
DatePicker23.DatePicker에서 사용되는 클래스들과 그에 대한 설명이 제공됩니다.
23.4 주의사항 및 Tip
DatePicker23.DatePicker는 모바일 환경에 적합한 ui입니다. 주로 버튼을 누르면 해당 컴포넌트가 보여지고 선택을 하면 선택값을 넘기는 식으로 구성합니다.",551
381,"CheckCombobox는 select 태그의 확장된 기능을 제공하는 컴포넌트로, selectbox와 checkbox가 결합되어 다중 선택이 가능합니다. Property로는 allOption, animation, appearance, checkboxClickSync, checkDisabledOnAllCheck, chooseOption, chooseOptionLabel, class, closeonmouseleave, delimiter, displayMode, displaymessage, escape, id, invalidMessage, invalidMessageFunc, labelWidthAuto, mandatory, navBtn, refDataCollection, separator, sortMethod, sortOption, style, submenuSize, tabIndex, title, useLocale, validator, visibleRowNum, wmode이 있습니다. CSS Overriding에서는 w2checkcombobox와 w2table_ccb 클래스가 사용됩니다.",166
382,"스튜디오 파트 III에서는 스튜디오9의 구성, 기능 및 특징, 프로젝트 및 페이지 생성, 그리기에 대해 다룹니다. 스튜디오9는 다양한 기능을 제공하며, 사용자는 이를 활용하여 웹 애플리케이션을 쉽게 개발할 수 있습니다. 프로젝트 및 페이지 생성 기능을 통해 사용자는 새로운 프로젝트를 생성하고 페이지를 추가할 수 있습니다. 또한 그리기 기능을 사용하여 사용자는 그래픽 요소를 쉽게 추가할 수 있습니다. 이러한 기능들은 웹 개발을 보다 쉽고 효율적으로 만들어 줍니다.",213
383,"이번 파트에서는 웹스퀘어에서의 코딩 방법과 웹표준 호환성, 그리고 주요 API에 대해 다룹니다.
코딩 방법은 HTML, CSS, JavaScript를 이용하여 작성하며, 이를 통해 동적인 웹 페이지를 구현할 수 있습니다. 또한, 웹스퀘어에서는 다양한 라이브러리와 프레임워크를 지원하여 보다 쉽고 빠르게 개발할 수 있습니다.
웹표준 호환성은 모든 브라우저에서 동일한 동작을 보장하기 위해 중요합니다. 웹스퀘어에서는 W3C에서 제정한 웹표준을 준수하며, 브라우저별로 호환성을 검증하여 최적의 성능을 보장합니다.
마지막으로, 웹스퀘어에서는 다양한 API를 제공하여 보다 효율적인 개발을 가능하게 합니다. 예를 들어, 데이터베이스 API를 이용하여 데이터를 관리하거나, AJAX API를 이용하여 비동기적으로 데이터를 처리할 수 있습니다.",331
384,"웹스퀘어 5.0_4.4768B.20221117.172314 버전의 변경 내역을 요약하면 다음과 같다. config.xml 파일에 parameterEncode 항목을 추가하여 한글 파라미터를 처리할 수 있도록 지원하며, SearchBox의 resetButtonDisplay 속성을 설정하여 지우기 버튼을 표시할 수 있다. 또한, 이벤트 디버깅 기능이 추가되어 컴포넌트 바인딩 설정 및 이벤트 설정 관련 로그를 확인할 수 있다. $p 객체에 getAllPopupList()와 getAllPopupWindowList() 함수가 추가되어 모든 팝업 객체와 윈도우를 반환할 수 있다. GridView의 fixedColumn 속성 설정 시 setColumnVisible() 함수가 동작하지 않는 문제가 수정되었으며, setCellDisplayFormat() 함수를 사용할 때 특정 셀의 displayFormat 속성이 전체 컬럼에 적용되는 문제가 수정되었다. 또한, GridView의 dataDragDrop 속성 설정 시 맨 마지막 행이 이동되지 않는 문제가 수정되었다. InputCalendar에서 모바일 웹에서의 renderType을 지정할 수 있도록 mobileRenderType 속성이 추가되었다.",334
385,"12. Trigger
12.1. 버그 (setValue() / WESD-1094)
useLocale=""true"" 및 useDefaultLabe=""true"" 속성 설정을 사용할 경우, setValue() 함수가 정상 동작하지 않는 버그가 있었으나, 수정되어 setValue() 함수가 정상 동작합니다.
13. WindowContainer
13.1. 변경 (setFocus() / WESD-1247)
index 혹은 windowId를 지정하여 해당 윈도우에 포커스를 줄 수 있도록 변경되었습니다. 코드 13-6은 해당 변경된 기능을 사용하는 예시입니다.
 index=""0"" 윈도우에 포커스 주기
windowContainer1.setFocus(0);
 windowId=""window_1"" 윈도우에 포커스 주기
windowContainer1.setFocus(""window_1"");",207
386,"엔진 버전은 5.0_4.4757B.20221101.164429이며, 2022년 11월 1일에 릴리즈되었다. 변경 내역으로는 config.xml에 calendarValueType에 따른 날짜 출력 형식 지정 항목 추가, FloatingLayer의 wframePopup으로 열기 버그 수정, Generator의 insertChild() 버그 수정, GridView의 visibleRowNum 속성 동적 설정 기능 추가, 병합하지 않을 값을 지정하는 mergeExcludeValue 속성 추가, Excel 파일의 헤더 셀 서식 지정 기능 추가, fixedColumn 속성 설정 변경, 병합된 셀에 이미지 표시 기능 변경, onfilereadend 버그 수정, setUseFilter() 버그 수정, setColumnOrder() 버그 수정, drawType=""native"" 속성 설정 버그 수정, inputType=""drilldown"" 속성 설정 버그 수정, dataType=""float"" 속성 설정 버그 수정이 있다. 추가 설정 항목으로는 gridView - column - displayFormat 항목이 추가되었고, 추가 API로는 GridView의 setVisibleRowNum() 함수, mergeExcludeValue, advancedExcelDownload()의 options.useHeaderDataFormat, Spinner의 useAlert, initValue, TabControl의 noUseTitle, useTitleTooltip이 추가되었다. config.xml에 항목이 추가되었으며, gridView - column - displayFormat 항목을 사용하여 calendarValueType에 따른 날짜 출력 형식을 지정할 수 있다. FloatingLayer의 wframePopup으로 열기 버그가 수정되었으며, Generator의 insertChild() 버그도 수정되었다. GridView의 visibleRowNum 속성 동적 설정 기능이 추가되었고, mergeExcludeValue 속성을 사용하여 병합하지 않을 값을 지정할 수 있다. Excel 파일의 헤더 셀 서식 지정 기능이 추가되었으며, fixedColumn 속성 설정이 변경되었다. 병합된 셀에 이미지 표시 기능이 변경되었고, setUseFilter()와 setColumnOrder() 버그가 수정되었다. drawType=""native"" 속성 설정 버그도 수정되었으며, inputType=""drilldown"" 속성 설정 버그와 dataType=""float"" 속성 설정 버그도 수정되었다.",578
387,"6.3. 버그 수정: 특정 셀을 편집 후 Enter 키를 사용하여 inputType=""textarea"" 셀로 이동할 경우, inputType=""textarea"" 셀의 데이터가 사라지는 문제가 수정됨.
7. SelectBox 변경: disabled=""true"" 속성 설정 시 적용되는 CSS가 inline으로 존재하는 문제가 클래스로 제공되도록 변경됨.
8. SearchBox 변경: resetButtonDisplay=""toggle"" 속성 설정 시 ref 속성으로 인한 데이터가 있을 경우, X 버튼이 표시되는 문제가 수정됨. 또한, onchange 이벤트가 X 버튼 클릭 시와 포커스가 빠져나간 이후에도 발생하는 문제가 수정됨.
9. Spinner 기능 추가: dataType=""date""인 경우, 유효하지 않은 날짜를 입력할 경우 브라우저 경고창 출력 여부를 useAlert 구분속성으로 설정할 수 있음. 또한, dataType=""number""인 경우 초기값을 initValue 구분속성으로 설정할 수 있음.
10. TabControl 기능 추가: 탭 스크롤 상의 버튼과 각 탭에 마우스 오버 시 각 탭의 title 속성으로 설정한 값을 숨기거나 툴팁으로 표시할 수 있도록 noUseTitle, useTitleTooltip 구분속성이 추가됨.
11. TextBox 변경: 클라이언트 다국어 설정을 사용할 경우, 다국어 텍스트가 출력되는 시점이 HTML이 생성되는 시점으로 변경됨.
12. WidgetContainer 버그 수정: TabControl의 탭 화면에 있는 WidgetContainer에서 서브미션을 호출할 경우, 서브미션 상태창이 전체 화면에 표시되는 문제가 위젯 내부에 표시되도록 수정됨.",485
388,"WebSquare.uiplugin.pageInherit는 외부 XML을 include하는 기능을 제공한다. src 속성으로 외부 리소스 경로를 설정하고, 웹스퀘어 XML 화면 파일을 현재 화면에 include한다. 주로 항상 쓰이는 영역을 별도의 파일로 구성하여 사용하거나, 공통이 되는 top, left의 메뉴 구성 시 사용한다. 컴포넌트의 최상위는 <div> 태그로 감싸고 하위로 src에 해당하는 화면 XML이 배치된다. Property로는 class, id, initScript, nextTabID, scope, scopeExternal, src, tagname, tooltip, tooltipLocaleRef, userData1, userData2, userData3이 있다. Event로는 onpageInheritload가 있으며, Method로는 getWindow()가 있다.",217
389,"웹스퀘어를 이용한 멀티브라우저 지원을 위해서는 웹스퀘어 API 문서에서 제공하는 기능을 사용하되, ECMAScript3.0에 정의된 API만을 사용해야 합니다. 브라우저 객체(DOM)를 직접 제어하는 API, document.write와 같은 function, 브라우저 Event를 직접 제어하는 API, XMLHttpRequest를 직접 생성하고 조작하는 API, prototype.js나 jquery.js와 같은 오픈소스 JavaScript Framework를 동시에 사용하거나 prototype 확장을 하면 안됩니다. 브라우저 종류별 ECMAScript 지원 스펙은 참고서적과 링크를 통해 확인할 수 있습니다.",204
390,"웹 접근성 가이드 10. 웹 접근성 가이드 10.1 개요: 정보 격차의 문제는 최근의 정보기술 발달로 인해 더욱 심화되고 있습니다. 이에 대한 정보 접근권은 인간의 기본권이 되었으며, 이를 보장하기 위한 법률적 제도가 마련되었습니다. 이 문서는 웹스퀘어의 컴포넌트별 접근성 지원 현황과 개선된 컴포넌트를 소개하며, 이를 이용해 접근성을 지원하는 웹사이트를 제작하는 방법을 소개합니다. 10.2 컴포넌트 가이드: 컴포넌트를 구성하였을 때 화면낭독기 사용자의 사용 가능 기능의 범위에 따라 권장, 비권장, 사용금지 컴포넌트로 구분하였으며, 권장 환경 설정과 권장 컴포넌트 목록을 제공합니다. anchor, calendar, checkbox 등의 컴포넌트를 소개하며, 각 컴포넌트의 사용시 Checkpoint를 안내합니다.",365
391,"renderType 속성값에 따라 접근성을 지원하기 위한 사용법이 조금씩 달라집니다. renderType=”table”은 <table> 태그로 레이아웃 구조를 생성하는 형태이며, rows와 cols 속성값으로 제어할 수 있습니다. 그러나 <table> 태그를 사용하는 것은 접근성에 좋지 않으므로 사용을 지양해야 합니다. renderType=”native”는 <input type=”checkbox”> 태그 하나만 생성하는 형태이며, 레이블 텍스트는 textbox 컴포넌트를 이용해 직접 생성해야 합니다. renderType=”checkboxgroup”은 tagname과 itemTagname 속성이 추가적으로 사용되며, tagname과 itemTagname 속성의 사용법은 예제를 참고해 이해하시길 바랍니다. generator는 반복적인 컨텐츠를 나타내는 컨테이너성 컴포넌트이며, 접근성과 직접적인 관계는 없습니다. grid는 focusMove, senseReader, keyMoveEditMode 속성을 공통 설정에 미리 정의하는 것을 권장합니다. group은 여러 컴포넌트들을 담을 수 있는 컨테이너형 컴포넌트로서, landmark role 속성을 사용할 수 있습니다. iframe은 <iframe> 태그로 렌더링되는 컴포넌트이며, title 속성을 기술합니다. image는 alt 속성에 대체텍스트를 의미 있게 기술하고, 그 내용이 길 경우 longdesc 속성을 사용하여 대체 텍스트 정보를 제공합니다.",479
392,"마우스 이벤트 처리는 대체 텍스트를 제공하지 않으면 사용을 지양해야 합니다. inputBox 컴포넌트는 title 속성에 내용을 적절히 기술하거나 label 태그와 함께 사용해야 합니다. inputCalendar 컴포넌트는 renderType 속성을 ""native""로 설정하고, useAnchorMove와 title 속성을 적절히 사용해야 합니다. output 컴포넌트는 시멘틱 태그로 렌더링되어야 할 경우에만 사용하고, textbox 컴포넌트를 사용해야 하는 상황에서는 title 속성을 기술하거나 label로 렌더링되는 textbox 컴포넌트를 함께 제공해야 합니다. pageList 컴포넌트는 renderType 속성을 ""native""로 설정하고, 포커스될 때 테두리가 명확하게 나타나도록 해야 합니다. password 컴포넌트는 title 속성을 기술하거나 label로 렌더링되는 textbox 컴포넌트를 함께 제공해야 합니다. radio 컴포넌트는 renderType 속성값에 따라 사용법이 달라지므로, 각각의 경우에 맞게 사용해야 합니다.",386
393,"tagname과 itemTagname 속성은 <xf:select> 컴포넌트에서 사용되며, 선택 항목을 나타내는 태그를 지정할 수 있습니다. repeat 컴포넌트는 반복적인 컨텐츠를 나타내는데, <table> 태그로 렌더링되므로 사용을 지양해야 합니다. slideHide 컴포넌트는 마우스 입력에 따라 숨기거나 보여지는데, trigger 또는 anchor 컴포넌트의 클릭 이벤트를 이용해 사용해야 합니다. slider 컴포넌트는 일정 범위의 값을 입력 받는데, 화면낭독기 없는 키보드 사용자는 사용할 수 없습니다. selectBox 컴포넌트는 “component”, “native”, “select” 세가지 renderType 속성을 지원하며, 각각 다른 사용법이 필요합니다. switch 컴포넌트는 여러 페이지로 나누어 화면에 보여주는 페이징 기능이 필요할 때 사용하며, tabControl 컴포넌트는 탭버튼 목록 영역과 컨텐츠 페이지 영역으로 나뉘어져 있으며, useTabKeyOnly=""true"" 속성을 사용하여 키보드로만 모든 tab메뉴 및 컨텐츠 내용을 접근 가능하도록 설정할 수 있습니다. tag 컴포넌트는 HTML 태그를 자유롭게 사용할 수 있도록 개발된 컴포넌트입니다.",453
394,"HTML 태그를 생성하는 컴포넌트를 사용할 때는 다른 웹스퀘어 컴포넌트로 생성할 수 없는 경우에만 사용하는 것이 좋습니다. 정적인 컨텐츠를 사용하는 table인 경우는 최상위 tag를 제외한 나머지 tag는 html tag를 직접 사용해도 됩니다. textarea 컴포넌트는 텍스트를 입력받을 때 사용하며, label 태그로 렌더링 되는 textbox 또는 output 컴포넌트와 함께 사용합니다. textbox 컴포넌트는 텍스트 데이터를 나타내는데 사용되며, tagname 속성에 따라 div, h1, h2, …, h6, label 태그로 렌더링 됩니다. trigger 컴포넌트는 버튼 UI를 제공하는데, type 속성의 값으로는 ""button""만 사용해야 합니다. wframe 컴포넌트는 다른 XML 파일을 함께 나타내고 싶을 때 사용하는 컨테이너성 컴포넌트입니다. xhtml 컴포넌트는 외부 HTML 파일을 함께 나타내고 싶을 때 사용하는 컨테이너성 컴포넌트입니다. xsl 컴포넌트는 XML 데이터를 XSL을 이용해 반복적인 데이터를 표현하는데 사용됩니다. 비권장 컴포넌트는 화면낭독기 사용자가 그 컴포넌트의 일부 기능만을 사용할 수 있거나 기본적인 인터넷 사용지식 외에 추가적인 사용법을 익혀야 하는 컴포넌트를 의미합니다. 이들 컴포넌트 목록은 <Table 4>와 같습니다.",512
395,"10.2.4.2 chart
웹스퀘어의 기본 chart 컴포넌트는 센스리더 사용자에게는 사용이 불가능하며, 접근성 지원에도 어려움이 있습니다. 이를 해결하기 위해 jFreeChart와 image 컴포넌트를 연계하여 사용할 수 있습니다. Bar, Line, Pie, Column 형태의 차트만 구현 가능하며, jFreeChart에 대한 자세한 정보는 해당 홈페이지에서 확인할 수 있습니다. Bar Chart를 구현하는 서버단 JSP 소스코드의 샘플도 제공됩니다.
10.2.4.3 editor
ckEditor v3.4.1은 외부 라이브러리로 사용자가 제작한 컨텐츠에도 접근성용 속성을 지원할 수 있습니다.
10.2.4.4 flipToggle
현재 키보드 네비게이션을 포함한 모든 화면낭독기를 지원하지 않는 컴포넌트이며, 개선의 여지가 있지만 비권장 컴포넌트로 분류됩니다.
10.2.4.5 floatingLayer
화면에서 팝업 형태로 띄우는 layer 컴포넌트이며, 키보드 접근으로 이동 가능하지만 센스리더와 JAWS 사용자에게는 일부 제약사항이 존재합니다.
10.2.4.6 pageControl
모바일 페이지 출력용 권장 컴포넌트이며, 브라우저에서도 사용이 가능하지만 일부 접근성 기능은 지원되지 않아 비권장 컴포넌트로 분류됩니다.
10.2.4.7 searchBox
입력된 정보 전체를 지울 수 있는 인터페이스를 제공하지만, 키보드 접근이 안되고 센스리더와 JAWS의 일부 기능이 지원되지 않아 비권장 컴포넌트로 분류됩니다.
10.2.4.8 treeView
계층형 데이터구조를 표현하기 위한 컴포넌트로서, accessibility 속성을 지원하지만 JAWS 11 이상의 버전에서만 지원됩니다. 포커스 된 이후에는 방향키를 이용해 트리의 노드들을 탐색할 수 있습니다.
10.2.4.9 spinnner
HTML5의 <input type=”range” > 태그로 렌더링되는 UI와 유사한 형태의 인터페이스와 기능을 모든 브라우저에서 동일하게 제공하는 컴포넌트입니다. InputReadOnly 속성이 true일 경우 입력 값을 수정할 수 없으므로, 접근성을 고려한다면 InputReadOnly 속성을 false로 설정하는 것이 권장됩니다.
10.2.4.10 upload
파일 업로드를 위한 컴포넌트로서, 화면낭독기 사용자가 사용할 수 있지만 조금 불편함이 따릅니다.",875
396,"화면낭독기를 사용하지 않는 일반 사용자는 포커스 여부를 인지할 수 없어 사용이 불가능한 컴포넌트들이 있습니다. 이러한 컴포넌트들은 사용금지 컴포넌트로, ActiveX, applet, chart, flash, menu, multiSelect, multiUpload, popup, tabContainer, windowContainer 등이 있습니다. 레이아웃 공통 지침으로는 절대좌표 방식과 인위적으로 TabIndex를 설정하지 않는 것, 콘텐츠 앞에 건너뛰기 링크를 제공하는 것, 마우스 이벤트를 사용하지 않는 것, 포커스를 시각적으로 인식할 수 있도록 테두리를 숨기지 않는 것 등이 있습니다. 또한, 일반적인 웹사이트 화면의 구성은 상단 메뉴, 좌측 서브 메뉴, 본문 콘텐츠, 하단 메뉴로 나뉘며, 이러한 구조를 갖는 화면을 기반으로 작성된 문서 구조는 landmark roles로 구성됩니다. 이에는 Banner, Navigation, Main, Form, complementary, Searchform, Contentinfo, Application 등이 있습니다.",357
397,"10.3.1 검색 기능 구성
포커스가 오면 탐색에 관한 제어권을 어플리케이션이 가져도 무방한 영역을 의미합니다. 그리고 application을 제외한 role들 중 적합한 role을 선택하여 group 컴포넌트에 포함된 콘텐츠의 역할을 설정합니다.
10.3.3 메뉴와 메뉴 건너뛰기 구성
현재 웹스퀘어에서 제공하는 메뉴 컴포넌트는 웹접근성을 지원하지 않으므로, 메뉴 화면은 tag 컴포넌트와 anchor 컴포넌트를 조합하여 구성합니다.
10.3.4 사용자 입력 양식
회원 가입, 게시글 등록 같은 사용자로부터 다수의 입력 항목을 받는 화면은 각각의 입력 컴포넌트와 연관된 textbox 컴포넌트를 label 태그로 렌더링 해야 합니다. 이는 시각장애인 사용자가 각각의 입력 컴포넌트가 어느 항목인지를 알 수 있도록 하기 위함입니다.
10.3.5 websquare.html
websquare.html은 웹스퀘어 엔진을 로드하고 구동하는 역할을 수행하는 HTML 파일입니다. lang 속성값과 noscript 태그 사이의 문구를 적절히 수정하여 웹접근성 있는 웹사이트 화면을 개발합니다.
10.3.5.1 HTML 태그 및 속성 사용 가이드
시멘틱 태그와 그 외 여러 태그를 사용하여 웹접근성 있는 웹사이트 화면을 개발합니다. 웹스퀘어는 HTML 표준 스펙에 포함된 이러한 태그들을 사용할 수 있도록 textbox, group 이 두 컴포넌트를 통해 지원하고 있습니다. 이 두 컴포넌트는 최적으로 제공해주는 tagname 속성이 각각 다르므로 주의하여 사용합니다.
10.4 컴포넌트 별 관련 속성
FusionChart의 axisnameInsert=""true"" 설정을 사용하면 X축 이름과 Y축 이름을 label 및 value로 사용할 수 있습니다. 또한 setChartAttribute 옵션을 통해 label 및 value 값을 설정할 수 있습니다.",694
398,"10-3 코드는 Flash 차트를 생성하는 함수입니다. caption, axaxisname, ayaxisname, sayaxisname 등의 속성을 설정하여 차트를 커스터마이징할 수 있습니다. 10-4 코드는 ul 태그를 생성하는 예시입니다. Year, Revenue, Profit 값을 가진 li 태그를 생성합니다. GridView는 웹 접근성을 지원하기 위한 속성을 제공합니다. senseReader, checkboxLabelColumn, radioLabelColumn, summaryOnlyAuto 등의 속성을 사용하여 웹 접근성을 개선할 수 있습니다. InputCalendar는 연도 선택을 위한 달력 아이콘을 생성하는데, focusOnLastYear 속성을 사용하여 연도 선택 상자 대신 << 기호를 포커스할 수 있습니다. TabControl에서 useATagBtn 속성을 사용하여 탭의 닫기 버튼을 <a> 태그로 렌더링하여 웹 접근성을 개선할 수 있습니다. 이 속성은 closable=""true""일 때만 유효합니다.",274
399,"이 문서는 웹스퀘어5 디자인 가이드의 커버 페이지입니다. 이 가이드는 웹스퀘어5를 사용하여 웹 애플리케이션을 디자인하는 방법을 설명합니다. 이 가이드는 디자인 원칙, 컴포넌트 사용 방법, 레이아웃 및 테마 작성 방법 등을 다룹니다. 이 가이드를 사용하여 웹스퀘어5를 사용하여 더 나은 사용자 경험을 제공하는 웹 애플리케이션을 디자인할 수 있습니다.",175
400,"접근성 있는 웹사이트를 개발하기 위해서는 시멘틱 태그인 <h1>, <h2>, <abbr>, <blockquote> 등과 같은 태그를 사용해야 합니다. 웹스퀘어는 이러한 태그들을 사용할 수 있도록 textbox와 group 컴포넌트를 제공합니다. 이 두 컴포넌트는 tagname 속성이 각각 다르므로 <표 5>를 참조하여 사용해야 합니다. 웹스퀘어에서 지원하는 태그는 <표 39-1>에서 확인할 수 있습니다. 미리보기에서는 정상적으로 렌더링이 가능하지만 제시되지 않은 태그들은 tag 컴포넌트의 tagname을 활용하여 작업하는 것이 좋습니다.",231
401,"websquare.html은 웹스퀘어 엔진을 로드하고 구동하는 역할을 합니다. lang 속성값과 <noscript> 태그 사이의 문구를 수정하여 웹스퀘어 엔진을 구동할 수 있습니다. 이를 위해 예시 코드인 <예 27>과 같이 구성합니다. popup.html, websquare_sap.html도 동일하게 수정합니다.",106
402,"템플릿 화면의 Table 내 Form 요소를 그리기 위해 사용되는 Snippets 파일과 그리는 순서는 다음과 같습니다.
1. 기본컨포넌트 > input (파일번호 2) - Class 명: 없음
2. 기본컨포넌트 > input + 검색버튼 (파일번호 6) - Class 명: 없음
3. 기본컨포넌트 > inputCalendar - 필수 (파일번호 8) - Class 명: 없음
4. 기본컨포넌트 > radio (파일번호 4) - Class 명: 없음
5. 기본컨포넌트 > checkbox (파일번호 5) - Class 명: 없음
6. 유동컴포넌트 > textarea 100% (파일번호 1) - Class 명: 없음
7. 전체버튼 > 검색_Table 버튼 (파일번호 1, 2, 3) - Class 명: btn_cm
8. 전체버튼 > 추가버튼, 삭제버튼 (파일번호 1, 2, 3) - Class 명: btn_cm.add_row, btn_cm.del_row
각 Snippet 파일의 경로는 위 표에서 확인할 수 있습니다.",343
403,"WebSquare5는 Engine과 개발도구인 WebSquare5 Studio로 구성됩니다. Engine은 클라이언트 요청을 받아 WebSquare5 화면 파일을 브라우저에 표시하며, 개발자는 WebSquare5 Studio에서 화면 파일을 개발할 수 있습니다. WebSquare5 Studio는 WYSIWYG 방식의 통합 개발 도구로, 개발자는 컴포넌트 그리기, 스크립트 추가, 화면 확인, 디버깅을 한번에 수행할 수 있습니다. WebSquare5 Studio는 Windows Stand-alone 32-bit/64-bit와 Eclipse Plug-in 32-bit/64-bit 형태로 제공됩니다. WebSquare5 Studio를 설치하고 사용하기 위한 개발자 PC 사양은 Pentium 4(2.8Ghz) CPU, 4GB RAM, Windows 7/8/10 (32/64-bit) OS, 10GB HDD 여유 공간, 1280*1024 디스플레이를 권장합니다. WebSquare5 Engine은 JAR 파일 형태로 제공되어 웹 서버에 설치됩니다. WebSquare5 Engine의 설치 사양은 WebSquare5 Engine이 설치되는 웹 서버 사양을 따르며, 대용량 파일 업로드/다운로드와 같은 웹을 통해 제공하는 서버스 종류 및 규모에 따라 웹서버 환경을 구성할 것을 권장합니다. WebSquare5의 지원 범위는 다양한 OS, JVM, JDK, 브라우저, 모바일 기기 등을 포함하며, IE8 이상 (HTML5 기능이 포함된 경우 IE10 이상)을 포함한 최신 버전 및 직전 버전의 웹 브라우저를 지원합니다.",488
404,Header14.1: HTML5 태그로 Header 영역을 지정할 때 사용합니다. 이는 접근성과 직접적인 관계는 없습니다.,45
405,"InputCalendar는 달력과 Input 컴포넌트를 그룹화한 복합 컴포넌트입니다. 사용자가 Calendar에서 날짜를 선택하여 Input에 출력하거나 Input에 직접 날짜를 입력할 수 있습니다. 또한 validCheck 속성을 이용하여 사용자가 입력한 값이 유효한 날짜인지를 체크하거나 minYear, maxYear 속성을 이용하여 최소/최대 연도를 지정할 수 있습니다. 이 컴포넌트는 최상위 div Tag로, 하위에는 복합 Tag로 구현되어 있습니다. 속성으로는 alt, autoFocus, buttonTitle, calendarClass, calendarImage, calendarImageOver, calendarValueType, cancelButtonShow, caption, class, dateValidCheck, defaultDate, disableDateValidSet, displayFormat, displaymessage, fixedDate, focusOnDateSelect, footerDiv, handleIconClick, id, inputReadOnly, invalidMessageFunc, ioFormat, keepFixedDate, mandatory, maxYear, minYear, monthNames, monthNamesForYearMonthType, nextTabID, outsideClickEvent, placeholder이 있습니다.",284
406,"- IE와 Chrome의 focus 시 hint가 사라지는 방식이 다르다.
- readOnly 속성을 통해 HTML의 readonly 속성과 같은 기능을 제공한다.
- renderDiv 속성을 통해 달력을 div 태그로 구성할지 여부를 체크할 수 있다.
- renderType 속성을 통해 컴포넌트의 레이아웃 구조를 설정할 수 있다.
- rightAlign 속성을 통해 달력을 오른쪽으로 정렬하여 표시할 수 있다.
- setCurrentDate 속성을 통해 날짜 input에 현재일을 출력할 수 있다.
- showPlaceHolderOnReadOnly 속성을 통해 readOnly 모드에서도 placeholder 속성으로 지정된 값을 표시할 수 있다.
- styleInputCalendar의 style 속성을 통해 HTML의 table Tag의 summary 속성과 같은 기능을 제공할 수 있다.
- tabIndex 속성을 통해 Tab Key를 이용한 컴포넌트의 포커스 순서를 설정할 수 있다.
- title 속성을 통해 HTML의 title 속성과 같은 기능으로 명시된 값을 마우스 over시 툴팁 형태로 표현할 수 있다.
- toolTip 속성을 통해 마우스 over시 컴포넌트의 추가 정보를 명시할 수 있다.
- useAnchor 속성을 통해 책갈피로 이동시킬 것인지 여부를 설정할 수 있다.
- useCalendarTabIndex 속성을 통해 useAnchor가 false인 경우에도 달력에 Tab Key로 포커스 이동을 가능하게 할지 여부를 설정할 수 있다.
- validCheck 속성을 통해 input에 입력된 값이 유효한 날짜인지를 check하여 alert을 띄울지 여부를 설정할 수 있다.
- visibleHourList 속성을 통해 시간이 표시되는 달력에서 시간 항목을 설정할 수 있다.
- visibleMinList 속성을 통해 분이 표시되는 달력에서 분 항목을 설정할 수 있다.
- visibleSecList 속성을 통해 초가 표시되는 달력에서 초 항목을 설정할 수 있다.
- weekStartsOn 속성을 통해 calendar의 시작 요일을 설정할 수 있다.
- wmode 속성을 통해 object(activeX 또는 flash)에 가려질 경우 해당 속성을 사용할 수 있다.
- yearSuffix 속성을 통해 연도 selectbox의 display되는 값의 숫자(연도) 뒤에 들어갈 문자열을 설정할 수 있다.",688
407,"연도만 표시할 때는 displayFormat 속성을 $blank로 정의합니다. calendarClass 속성은 팝업으로 뜨는 캘린더에 대한 class이며, class를 이용해서 캘린더의 이미지를 변경할 수 있습니다. CSS에서 디자인을 수정할 때는 같은 레벨의 클래스를 추가해야 합니다. 달력을 호출하는 버튼은 calendarImage, calendarImageOver에서 선택할 수 있습니다. inputCalendar 컴포넌트를 designView에 그리고 property의 Class에 사용자 정의 class를 정의한 다음 Preview 합니다. keyboard만으로 모든 기능을 사용 가능하며, renderType=""native"" 속성을 반드시 사용하고, 화면낭독기 사용자가 달력 아이콘을 사용할 수 있도록 useAnchorMove와 title 속성을 적절히 사용합니다.",235
408,"동일한 스타일 시트를 사용하면 overriding 됩니다. 달력을 호출하는 버튼은 calendarImage, calendarImageOver 프로퍼티에서 선택할 수 있습니다. input에 대한 class는 class 프로퍼티에 입력한 클래스입니다. css에서 디자인을 수정할 때는 같은 레벨의 클래스를 추가해야 합니다. calendarClass는 팝업으로 뜨는 캘린더에 대한 class입니다. 팝업으로 뜨는 캘린더 내부의 디자인 수정을 하려면 클래스명을 .w2calendar_customClass로 선언하여 수정해야 합니다. class를 이용해서 캘린더의 이미지를 변경할 수 있습니다. renderType 속성을 native로 설정하고, title 속성을 기술하여 접근성을 지원합니다. 포커스될 때 테두리가 명확하게 나타나는지 확인해야 합니다.",257
409,"InputBox는 HTML의 <input> 태그의 type=text와 유사한 인터페이스를 제공하며, display format를 지정할 수 있고, validator의 기능이 있는 컨트롤입니다. Property로는 adjustMaxLength, autoFocus, class, customModelFormatter, customModelUnformatter, id, disabled, displayFormat, escape, euroMask, fireEventOnInvalid, maxlength, minlength, nextTabID, numberMask, onFocusClass, placeholder, readOnly, readOnlyClass, readOnlyFocusEvent, refSync, rupeeMask, style, tabIndex, tengeMask, title, type, useMonthYearFormat, html attributes 등이 있습니다. 스타일을 변경하고자 할 때는 새로운 클래스를 부여하여 사용하시길 권장하며, disabled 속성을 true로 설정하면 제어를 비활성화 시킬 수 있고, readOnly 속성을 true로 설정하면 읽기전용 상태를 만들 수 있습니다. 또한 readOnly 상태일 때 스타일도 변경이 가능합니다.",250
410,"컴포넌트의 disabled 상태일 때 별도의 CSS를 적용하려면 .ipt .w2input_disabled 클래스를 사용하면 됩니다. 또한, label 엘리먼트와 명시적으로 짝지어 주어야 하며, 접근성 작업시에는 반드시 넣어주어야 합니다. input 컴포넌트의 width 값을 %로 사용할 경우, 포커스가 들어갔다 나오면 px로 변경되어 %로 지정된 width값이 무시되어 더이상 유동적으로 리사이즈 되지 않습니다. 이를 방지하기 위해 !important를 사용하여 우선순위를 높여 유지시키는 방법을 사용하거나, Config.xml에 해당 옵션을 주어 처리할 수 있습니다. 또한, CSS Overriding을 할 때는 w2input 클래스를 오버라이드하기보다는 textBox와 inputBox 조합을 권장합니다. 이때, textBox의 Label값 추가와 InputBox의 ID값과의 1:1 매칭이 필요합니다. InputBox에 disabled 프로퍼티가 활성화 되어 있을시 ""w2input_disabled"" Class가 자동 추가되며 사용자가 오버라이드 하여 비활성화 되었을때의 상태를 디자인 제어할수 있습니다.",366
411,"이번 장에서는 iframe 컴포넌트에 대해 다룹니다. iframe은 <iframe> 태그로 렌더링되며, 프레임의 URL 주소의 페이지의 내용에 적합한 title 속성을 가져야 합니다. 또한, iframe 내부 콘텐츠에 초점이 논리적으로 이동하고, 적절한 타이틀을 제공하며, 내부 콘텐츠 html 문서에 기본 언어가 명시되어야 합니다. 이러한 요구사항은 웹 접근성을 준수하기 위한 것으로, 관련 지침은 2.1.2. 초점 이동, 2.4.2. 제목 제공, 3.1.1. 기본 언어 표시입니다. 아래는 iframe 컴포넌트의 예시 코드입니다.
<w2:iframe src="""" spa=""false"" style=""width: 200px;height: 200px;"" id="""" title=""iframe 타이틀""></w2:iframe>",288
412,"WFrame은 WebSquare 페이지의 기본 단위로, src 속성으로 별도의 웹스퀘어 페이지(XML)의 경로를 지정하여 화면을 구성하는 컴포넌트이다. 최상위 태그는 div 태그로 감싸고 하위에 src에 해당하는 화면 XML이 배치된다. scope 속성을 true로 사용할 것을 권장하며, scope 속성을 false로 설정할 경우, 부모 소스와 WFrame 내의 화면 소스가 병합되어 컴포넌트 ID 및 전역 객체명이 중복될 수 있다. WFrame은 다양한 속성과 이벤트, 메소드를 가지고 있으며, CSS class를 지정하거나, 팝업을 띄우고 modal을 표시할지 여부를 설정할 수 있다. 또한, 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 설정할 수 있으며, 사용자 정의 데이터 속성을 설정할 수도 있다. WFrame은 다양한 메소드를 가지고 있으며, 컴포넌트에 CSS class를 추가하거나 삭제하거나, 위치나 크기를 설정하거나, 데이터를 설정하거나, 화면에 표시하거나, 숨기는 등의 기능을 수행할 수 있다.",375
413,"웹스퀘어 컴포넌트에서는 trigger, unbind, visible, class, frameModal, id, initScript, postScript, processMsgFrame, scope, scopeExternal, src, tabIndex, tagname, tooltip, tooltipLocaleRef, userData1, userData2, userData3 등의 속성과 이벤트를 사용할 수 있다. addClass, bind, changeClass, focus 등의 메소드를 사용하여 컴포넌트에 CSS class를 추가하거나 이벤트와 핸들러 함수를 할당하고, 컴포넌트의 class를 변경하거나 포커스를 줄 수 있다. 이때, config.xml 파일에서 설정을 추가하여 컴포넌트의 class 속성에 직접 정의된 class를 삭제할 수 있다.",198
414,"getDisabled( ) : 웹스퀘어 컴포넌트의 disabled 속성 값을 반환하는 함수.
getGenerator( ) : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하는 함수.
getID( ) : 웹스퀘어 컴포넌트의 ID를 반환하는 함수.
getInitStyle( CSS ) : 컴포넌트의 초기 스타일을 반환하는 함수. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.
getObj( id ) : WFrame 내부의 화면 페이지에서 주어진 ID에 해당하는 객체를 반환하는 함수.
getObjList( ) : WFrame 내부에 포함된 객체의 ID 목록을 배열 형태로 반환하는 함수.
getOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 반환하는 함수. 엔진 내부적으로 CSS의 opacity 속성 값을 반환한다.
getOriginalID( ) : 웹스퀘어 컴포넌트의 originalID를 반환하는 함수. scope=""true""인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + ""_"")가 추가되는 방식으로 변경된다.
getParentFrame( ) : WFrame 중첩 구조에서 자신의 부모 WFrame 객체를 찾아 반환하는 함수.
getPluginName( ) : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하는 함수.
getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환하는 함수. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환한다.
getReadOnly( ) : 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환하는 함수.
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 함수.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체의 scope 객체를 반환하는 함수. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환한다.
getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환하는 함수. %로 설정된 경우, 픽셀로 변환된 값을 반환한다.
getSrc( ) : src 속성 값을 반환하는 함수. (현재 설정된 화면 페이지(XML)의 경로)
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하는 함수.",718
415,"웹스퀘어 컴포넌트의 공통 함수들을 설명하는 문서입니다. 각 함수들은 다양한 파라미터와 반환 타입을 가지고 있으며, 예제 코드를 통해 사용 방법을 보여줍니다. 함수들은 CSS 속성 값 반환, 컴포넌트 title 속성 값 반환, UDC 파일 경로 반환, 사용자 데이터 반환, 컴포넌트 숨김, 클래스 삭제, disabled 속성 설정, 이벤트 중단, 초기 스타일 복구, WFrame mode 속성 설정, 불투명도 설정, 위치 설정, readOnly 속성 설정, 크기 설정 등이 있습니다.",187
416,"웹스퀘어 컴포넌트의 공통적인 함수들에 대한 설명이다. setSize 함수는 컴포넌트의 width와 height 값을 설정하며, setSrc 함수는 해당 컴포넌트의 src 값을 설정한다. setStyle 함수는 CSS 속성을 설정하며, setUserData 함수는 컴포넌트에 임의의 데이터를 설정한다. show 함수는 CSS display 속성을 설정하여 컴포넌트를 화면에 표시하며, toggleClass 함수는 특정 class를 추가하거나 제거한다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시키며, unbind 함수는 이벤트를 제거한다. visible 함수는 CSS visibility 속성을 설정하여 컴포넌트를 화면에 표시하거나 숨긴다. 그러나 이 함수는 deprecated 되었으며, show/hide 혹은 setStyle 함수를 사용하는 것이 권장된다.",270
417,"WebSquare.uiplugin.tableLayout.tr은 HTML의 class 속성과 동일한 기능을 제공하며, CSS 파일이나 style 블록에 정의한 여러 개의 class를 공백으로 구분하여 적용할 수 있습니다. 또한, 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어할 수 있습니다. 컴포넌트 ID는 전역 객체로 할당되며, Script에서 해당 컴포넌트에 접근 가능합니다. 이외에도 다양한 Property와 Method가 제공됩니다.",176
418,"WebSquare.uiplugin.checkbox는 HTML <input> 태그의 type=""checkbox""와 동일하게 작동하며, 사용자는 두 개 이상의 항목을 선택할 수 있습니다. appearance, class, cols, disabled, displaymessage, enableColumn, enableColumnFalseValue, escape, falseValue, id, ignoreTabIndex, invalidMessage, invalidMessageFunc, itemTagname, mandatory, nextTabID, ref, refInitSync, renderType, rows, selectedindex, separator, tabIndex, tagname, title, tooltip, tooltipClass, tooltipDisplay, tooltipFormatter, tooltipItemLabel, tooltipLocaleRef, tooltipShowAlways, tooltipTime, useCheckboxTitle, useItemLocale, useLocale, userData1, userData2, userData3, validator, value, visibleColumn, visibleColumnFalseValue 등의 속성을 제공합니다. 이 컴포넌트는 onchange, oncheckboxclick, onlabelclick, onviewchange 등의 이벤트를 발생시키며, addClass, addItem, bind, changeClass, checkAll, click, deleteItem, focus, getDataListInfo, getDisabled, getGenerator, getID, getInitStyle, getItemCount, getItemDisabled, getNextTabID, getOpacity, getOriginalID, getPluginName, getPosition, getScope, getScopeWindow, getSelectedIndex, getSize, getStyle, getText, getTitle, getUdcHome, getUdcRoot, getUserData, setValue, hasClass, hide, removeAll, removeClass 등의 메서드를 제공합니다.",336
419,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는데, reset() 함수는 모든 선택 항목의 체크를 해제하는 기능이고, setDisabled(disabled) 함수는 컴포넌트의 disabled 속성을 설정하는 기능입니다. setEnableColumn(columnId, enableColumnFalseValue) 함수는 enableColumn 속성을 동적으로 설정하는 기능이며, setInitStyle(property) 함수는 컴포넌트의 초기 스타일을 복구하는 기능입니다. setItemDisabled(index, flag) 함수는 주어진 index에 해당하는 항목의 disabled 속성을 설정하는 기능이고, setNextTabID(componentID, componentScope) 함수는 nextTabID 속성을 설정하는 기능입니다. setSelectedIndex(index) 함수는 주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행하는 기능입니다. setSize(width, height) 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 설정하는 기능이며, setStyle(propertyName, value) 함수는 웹스퀘어 컴포넌트의 CSS 속성을 설정하는 기능입니다. setValue(value) 함수는 파라메터로 넘어온 값에 해당하는 선택 항목을 선택하는 기능입니다. show(displayType) 함수는 웹스퀘어 컴포넌트를 화면에 표시하는 기능입니다. toggleClass(className) 함수는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가하는 기능입니다. trigger(type, array) 함수는 컴포넌트에서 특정 이벤트를 발생시키는 기능입니다. unbind(type, function) 함수는 컴포넌트에서 이벤트를 제거하는 기능입니다. validate() 함수는 컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행하는 기능입니다. visible(flag) 함수는 컴포넌트의 visible 속성을 설정하는 기능입니다. appearance 속성은 선택 항목 표현 방식을 설정하는 기능이며, class 속성은 HTML의 class 속성과 동일한 기능을 제공합니다. disabled 속성은 컴포넌트 비활성 여부를 설정하는 기능이며, displaymessage 속성은 validate API의 검증 결과가 실패일 경우 결과 메세지를 표시할지 여부를 설정하는 기능입니다. enableColumn 속성은 선택 항목 목록에서 특정 항목을 disable 처리하는 기능을 제공하며, falseValue 속성은 어떤 항목도 선택되지 않았을 때의 value를 설정하는 기능입니다. ref 속성은 DataCollection과 연동시 사용되며, nextTabID 속성은 Tab 키로 이동할 경우 선택되는 컴포넌트의 ID를 설정하는 기능입니다.",782
420,"refInitSync 속성은 ref의 초기값을 설정하는데 사용되며, true로 설정할 경우 falseValue로 초기화되고, false로 설정할 경우 빈 값으로 초기화된다. renderType 속성은 컴포넌트를 브라우저에 렌더링할 때 사용할 레이아웃 구조를 설정하는데, table, native, checkboxgroup 중 하나를 선택할 수 있다. rows 속성은 선택 항목을 표시할 열의 수를 설정하며, selectedindex 속성은 초기 선택될 항목의 인덱스를 설정한다. separator 속성은 선택된 항목들이 여러 개인 경우 구분자로 사용할 문자를 설정한다. tabIndex 속성은 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정한다. tagname 속성은 renderType이 checkboxgroup일 때, 렌더링 될 객체의 tagname을 설정한다. title 속성은 HTML의 title 속성과 동일하며, tooltip 속성은 사용자가 컴포넌트에 마우스 오버할 때 표시되는 텍스트를 설정한다. tooltipClass 속성은 툴팁에 적용할 스타일 class를 설정하며, tooltipDisplay 속성은 사용자가 선택한 값에 대한 툴팁 표시 여부를 설정한다. tooltipFormatter 속성은 tooltipDisplay가 true일 때, 툴팁 내용을 변경할 사용자 함수명을 설정한다. useCheckboxTitle 속성은 웹 접근성을 위해 checkbox의 항목에 title의 표시 여부를 설정하며, useItemLocale 속성은 아이템 목록 다국어 사용 여부를 설정한다. validator 속성은 유효성 체크 함수 이름을 설정하며, value 속성은 renderType이 native일 때, value 값으로 사용될 문자열을 설정한다. visibleColumn 속성은 선택 항목 목록에서 특정 항목을 감추는 기능을 설정하며, onchange 이벤트는 사용자가 항목을 선택/변경하거나 API를 이용하여 value를 설정할 경우 발생한다.",585
421,"체크박스 컴포넌트의 메서드와 이벤트에 대한 설명이다. addClass()는 CSS 클래스를 추가하고, addItem()은 선택 항목을 추가한다. bind()는 이벤트와 핸들러 함수를 동적으로 할당하며, changeClass()는 CSS 클래스를 변경한다. checkAll()은 모든 항목을 선택하거나 해제하고, click()은 항목을 클릭하여 선택/해제한다. deleteItem()은 주어진 인덱스에 해당하는 항목을 삭제하고, getDataListInfo()는 컴포넌트와 바인딩된 DataList를 반환한다. getDisabled()는 컴포넌트의 disabled 속성 값을 반환하며, getGenerator()는 부모 Generator 객체를 반환한다. getID()는 컴포넌트의 ID를 반환하고, getItemCount()는 선택 항목 개수를 반환한다. getItemDisabled()는 주어진 인덱스에 해당하는 항목의 disabled 설정을 반환하며, getNextTabID()는 nextTabID 속성의 설정 값을 반환한다. getOpacity()는 컴포넌트의 불투명도를 반환하고, getOriginalID()는 originalID를 반환한다.",316
422,"WFrame의 scope=""true"" 속성을 사용하면, 컴포넌트 ID는 prefix(wframeID + ""_"")가 추가된 형태로 변경됩니다. 이때, getID() 메소드는 prefix가 추가된 ID를 반환하고, getOriginalID() 메소드는 prefix가 추가되기 전의 원래 ID를 반환합니다. getPluginName() 메소드는 웹스퀘어 컴포넌트의 이름을 반환합니다. getPosition() 메소드는 웹스퀘어 컴포넌트의 위치를 반환하며, getSize() 메소드는 웹스퀘어 컴포넌트의 크기를 반환합니다. getStyle() 메소드는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하며, getTitle() 메소드는 웹스퀘어 컴포넌트의 title 속성 값을 반환합니다. getScope() 메소드는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환하며, getScopeWindow() 메소드는 scope=""true""인 WFrame의 부모 WFrame 객체 또는 전역 window 객체를 반환합니다. getSelectedIndex() 메소드는 선택된 항목의 인덱스를 반환하며, getText() 메소드는 선택된 항목의 label을 반환합니다. getUdcHome() 메소드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot() 메소드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 제외한 경로만 반환합니다. getUserData() 메소드는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환합니다.",440
423,"input1.setUserData(""valueTest"",""WebSquare""); // setTest 값을 반환하는 예제
input1.getUserData(""WebSquare""); // 반환 값: ""WebSquare""
getValue( separator ) // 선택된 항목의 value를 반환. separator를 사용하여 반환됨.
Parameter: separator (String, N) - 항목 구분자
Return: String - 선택된 항목의 value가 담긴 문자열
Sample
var returnValue = checkbox1.getValue(); // 반환 값: ""1 3""
hasClass( className ) // 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인.
Parameter: className (String, Y) - 검색할 class 이름
Return: Boolean - class의 포함 여부
Sample
var returnValue = input1.hasClass(""tmpInputClass""); // 반환 값: true
hide( ) // 웹스퀘어 컴포넌트를 화면에서 숨김.
Sample
componentId.hide();
emoveAll( ) // 모든 선택 항목을 삭제.
Sample
checkbox1.removeAll();
emoveClass( className ) // 웹스퀘어 컴포넌트에서 class를 삭제.
Parameter: className (String, Y) - 삭제 할 class명
Sample
input1.removeClass(""tmpInputClass"");
eset( ) // 모든 선택 항목의 체크를 해제.
Sample
checkbox1.reset();
setDisabled( disabled ) // 컴포넌트의 disabled 속성을 설정.
Parameter: disabled (Boolean, Y) - disabled 상태
Sample
componentId.setDisabled(true);
setEnableColumn( columnId , enableColumnFalseValue ) // enableColumn 속성을 동적으로 설정.
Parameter: columnId (String, Y) - enableColumn으로 설정할 컬럼의 ID
enableColumnFalseValue (String, N) - 목록을 disable 시키기 위한 조건에 해당하는 값
Sample
checkbox1.setEnableColumn(col3, false);
setEventPause( evList , flag ) // 지정한 이벤트를 중단함.
Parameter: evList (String, N) - 중단할 이벤트 목록
flag (Boolean, Y) - 이벤트 중단 여부
Sample
input1.setEventPause(""onclick"", true);
setInitStyle( property ) // 컴포넌트의 초기 스타일을 복구한다.
Parameter: property (String, N) - CSS 속성
Sample
group1.setInitStyle();
setItemDisabled( index , flag ) // 주어진 index에 해당하는 항목의 disabled 속성을 설정.
Parameter: index (Number, Y) - 항목의 index
flag (Boolean, Y) - disabled 상태
Sample
checkbox1.setItemDisabled(0, true);
setNextTabID( componentID , componentScope ) // nextTabID 속성을 설정.
Parameter: componentID (String, Y) - nextTabID로 설정할 컴포넌트의 ID
componentScope (String, N) - nextTabID로 설정할 컴포넌트의 scope
Sample
checkbox1.setNextTabID(""input2"", ""wframe1"");
setNodeSet( nodeset , label , value ) // 선택 항목 목록을 설정.
Parameter: nodeset (String, Y) - DataList의 ID
label (String, N) - label로 설정할 컬럼의 ID
value (String, N) - value로 설정할 컬럼의 ID
Sample
checkbox1.setNodeSet('data:dataList1','lbl','code');
setOpacity( value ) // 웹스퀘어 컴포넌트의 불투명도를 설정.
Parameter: value (Number, Y) - Opacity 값 (0과 1 사이의 실수)
Sample
componentId.setOpacity(0.45);
setPosition( left , top , mode ) // 웹스퀘어 컴포넌트의 위치(left, top)를 설정.
Parameter: left (Number, Y) - 설정할 left 위치 값 또는 null
top (Number, Y) - 설정할 top 위치 값 또는 null
mode (String, N) - 위치 설정 방법. [default: absolute, delta]
Sample
componentId.setPosition(null, 100);
setRef( path ) // ref 속성을 설정.
Parameter: path (String, Y) - 설정할 ref의 경로
Sample
checkbox1.setRef(""data:dataMap1.hobby"");
setSelectedIndex( index ) // 주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행.
Parameter: index (Number, Y) - 항목의 인덱스
Sample
checkbox1.setSelectedIndex(0);",1098
424,"checkbox1.setSelectedIndex(0); : 체크박스의 선택 항목 중 첫 번째 항목을 선택하는 코드입니다.
setSize(width, height) : 웹스퀘어 컴포넌트의 크기를 설정하는 코드입니다. width와 height는 각각 컴포넌트의 너비와 높이를 나타냅니다.
setStyle(propertyName, value) : 웹스퀘어 컴포넌트의 CSS 속성을 설정하는 코드입니다. propertyName은 설정할 CSS 속성의 이름을, value는 해당 속성에 적용할 값을 나타냅니다.
setUserData(key, value) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정하는 코드입니다. key는 설정할 데이터의 이름을, value는 해당 데이터의 값을 나타냅니다.
setValue(value) : 체크박스에서 선택 항목을 설정하는 코드입니다. value에는 선택할 항목의 값이 들어갑니다.
setVisibleColumn(columnId, visibleColumnFalseValue) : 웹스퀘어 컴포넌트에서 특정 컬럼을 감추거나 보이게 하는 코드입니다. columnId는 감추거나 보이게 할 컬럼의 ID를, visibleColumnFalseValue는 해당 컬럼을 감추기 위한 조건에 해당하는 값을 나타냅니다.
show(displayType) : 웹스퀘어 컴포넌트를 화면에 표시하는 코드입니다. displayType은 적용할 CSS display 속성의 값을 나타냅니다.
toggleClass(className) : 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거하는 코드입니다. className은 추가하거나 제거할 class의 이름을 나타냅니다.
trigger(type, array) : 웹스퀘어 컴포넌트에서 특정 이벤트를 발생시키는 코드입니다. type은 발생시킬 이벤트의 이름을, array는 이벤트 핸들러에 전달할 파라미터 배열을 나타냅니다.
unbind(type, function) : 웹스퀘어 컴포넌트에서 이벤트를 제거하는 코드입니다. type은 제거할 이벤트의 이름을, function은 제거할 이벤트 핸들러 함수를 나타냅니다.
unbindRef() : ref 바인딩을 해제하는 코드입니다.
validate() : 컴포넌트의 유효성을 검사하는 코드입니다. mandatory, displaymessage 등의 속성값을 통해 검사를 실행합니다.
validateObject() : 컴포넌트의 유효성을 검사하는 코드입니다. validate와 마찬가지로 mandatory, displaymessage 등의 속성값을 통해 검사를 실행하며, 검사 결과를 객체로 반환합니다.
visible(flag) : 컴포넌트를 보이거나 숨기는 코드입니다. 이 코드는 deprecated되었으며, show/hide 혹은 setStyle 사용을 권장합니다.",802
425,"Trigger는 type에 따라 이미지 형태의 버튼과 button 형태로 사용할 수 있으며, HTML에서 <input> 태그의 type=button과 유사한 인터페이스를 제공하는 컨트롤로 특정 Action과 컨트롤을 연계할 때 주로 사용됩니다. Property에서는 centerOffImageClass, centerOnImageClass, leftOffImageClass, leftOnImageClass, rightOffImageClass, rightOnImageClass 등의 class명을 입력하여 이미지의 스타일을 변경할 수 있습니다. 또한, type 속성을 button, image, anchor 중 선택하여 Trigger 표현 방법을 정의할 수 있습니다. Trigger 컴포넌트를 그린 뒤 Property에서 type을 button으로 설정하면 input type=”button”으로 파싱됩니다. 단일 이미지의 trigger인 경우 leftOfIimageClass, leftOnImageClass에만 class 적용시 단일이미지 처리가 가능합니다.",246
426,"Property view에서 Class명을 입력하여 trigger 컴포넌트를 스타일링할 수 있습니다. 단일 클래스이면서 단일 이미지를 사용하는 trigger인 경우, btnsmallsearch 클래스에 w2trigger_label 스타일을 추가해야 합니다. 단일 클래스의 trigger인 경우, button type으로 사용하는 것을 권장하며, trigger를 이용한 동적 라벨 길이의 변동시 처리 방법은 Group으로 감싸기를 선택하여 해결할 수 있습니다. disabled 일 때의 css 처리는 w2trigger_disabled 클래스명에 스타일을 주어 해결할 수 있습니다. CSS Overriding을 할 때는 주의해야 하며, type 속성을 이미지로 설정할 경우 table로 파싱되므로 새로운 class명을 주어 input 스타일을 변경하는 것이 권장됩니다.",227
427,"TreeView는 계층 구조를 가지는 데이터를 Tree 형태로 출력하는 컴포넌트입니다. accessibility 속성을 지원하며, JAWS 11 이상의 버전에서만 지원됩니다. 각 노드에 checkbox와 image(icon)를 넣을 수 있으며, 마우스의 Drag&Drop을 이용하여 Data(노드)를 주고 받을 수 있습니다. TreeView 구조는 div Tag와 복합 Tag를 이용하여 표현됩니다. TreeView의 속성 중 일부는 accessibility, alwaysDraw, checkAllChildNodes, customFormatter, dataType, defaultImage, dynamicAppend, expandedImage, hierarchy, labelclass, lineShow, scrollFix, showCheckbox, showTreeDepth, tabIndex, toggleButtonEvent, toggleEvent, toolTip, tooltipClass, tooltipDisplay, tooltipFormatter, tooltipGroupClass, tooltipShowAlways, tooltipTime, useDrag, useHierarchySelect 등이 있습니다. TreeView의 class를 wq_tvw로 지정하면, 해당 class를 이용하여 스타일을 변경할 수 있습니다. TreeView의 구조는 div.w2treeview, div.w2treeview_group, table.w2treeview_open_child, table.w2treeview_close_child, table.w2treeview_notleaf, tr.w2treeview_row_depth1, td.w2treeview_col_icon_nav, div.w2treeview_icon_navi, td.w2treeview_none, td.w2treeview_col_label, span.w2treeview_label, tr.w2treeview_row_child, td.w2treeview_row_depth1, div.w2treeview_child, table.w2treeview_open_child, table.w2treeview_close_child, table.w2treeview_notleaf, tr.w2treeview_row_depth2, td.w2treeview_col_icon_nav, td.w2treeview_none, td.w2treeview_col_label, span.w2treeview_label 등으로 구성됩니다.",422
428,"해당 깊이(depth)의 요소를 찾아서 스타일을 적용하는 방법은 다음과 같습니다. 또한, 해당 구조를 참고하여 class를 반복하여 스타일을 오버라이드할 수도 있습니다.
적용 예1) Depth2의 아이콘 변경 시
tr.w2treeview_row_depth2 div.w2treeview_icon_navi {background}
div.w2treeview_icon_navi div.w2treeview_icon_navi {background}
적용 예2) Depth3와 다음에 올 Depth2과의 간격 벌이기
div.w2treeview_child div.w2treeview_child {margin-bottom}",161
429,"WebSquare.uiplugin.fwFunnelChart는 퓨전 퍼넬 차트 중 하나로, 깔대기형 차트를 제공합니다. FusionWidgets의 데이터는 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있습니다. WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원하며, 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. 이 컴포넌트는 accessibility, id, labelNode, plotColor, ref, seriesColumns, seriesNode, seriesType, valueNode 등의 속성을 가지며, addClass, bind, changeClass, exportJSChart, fc, focus, getChartAttribute, getDataListInfo, getDisabled, getGenerator, getID, getInitStyle, getJSONData, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getSVGString, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, setAccessibility, setChartAttribute, setChartColumnRef, setChartColumnSimpleRef, setDisabled, setEventPause, setInitStyle, setJSONData, setOpacity, setPlotColor, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind, visible 등의 메소드를 가지고 있습니다.",356
430,"addClass( className ) : 컴포넌트에 CSS class를 추가합니다.
bind( eventType , function ) : 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다.
changeClass( oldClassName , newClassName ) : 웹스퀘어 컴포넌트의 class를 변경합니다.
exportJSChart( ) : javascript로 렌더링된 fwFunnelChart를 jpg,png,pdf형식으로 export하는 함수입니다.
focus( ) : 웹스퀘어 컴포넌트에 포커스를 줍니다.
getChartAttribute( name ) : fwFunnelChart의 attribute값을 반환합니다.
getDataListInfo( ) : 컴포넌트와 바인딩된 DataList를 반환합니다.
getDisabled( ) : 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다.
getGenerator( ) : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다.
getID( ) : 웹스퀘어 컴포넌트의 ID를 반환합니다.
getInitStyle( CSS ) : 컴포넌트의 초기 스타일을 반환합니다.
getJSONData( ) : fwFunnelChart의 차트데이터를 JSON객체를 반환합니다.
getOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 반환합니다.
getOriginalID( ) : 웹스퀘어 컴포넌트의 originalID를 반환합니다.
getPluginName( ) : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환합니다.
getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다.
getReadOnly( ) : 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다.
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다.",566
431,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. 각 함수들은 해당 컴포넌트의 속성 값을 반환하거나 설정하는 역할을 합니다. 예를 들어, getSize 함수는 컴포넌트의 크기 값을 반환하며, setDisabled 함수는 컴포넌트의 disabled 속성을 설정합니다. 이 외에도, getStyle 함수는 CSS 속성 값을 반환하며, hasClass 함수는 특정 class를 포함하는지 여부를 확인합니다. 이 문서를 참고하여 웹스퀘어 컴포넌트를 보다 효율적으로 사용할 수 있습니다.",190
432,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. fwFunnelChart의 차트 데이터를 변경하려면 setJSONData(json)을 사용한다. 웹스퀘어 컴포넌트의 불투명도를 설정하려면 setOpacity(value)를 사용한다. 차트의 dataplot 색상을 지정하려면 setPlotColor(colorArr)를 사용한다. 웹스퀘어 컴포넌트의 위치를 설정하려면 setPosition(left, top, mode)를 사용한다. readOnly 속성을 설정하려면 setReadOnly(readOnly)를 사용한다. 웹스퀘어 컴포넌트의 크기를 설정하려면 setSize(width, height)를 사용한다. CSS 속성을 설정하려면 setStyle(propertyName, value)를 사용한다. 웹스퀘어 컴포넌트에 임의의 데이터를 설정하려면 setUserData(key, value)를 사용한다. 웹스퀘어 컴포넌트를 화면에 표시하려면 show(displayType)를 사용한다. 특정 class를 제거하거나 추가하려면 toggleClass(className)를 사용한다. 이벤트를 발생시키려면 trigger(type, array)를 사용한다. 이벤트를 제거하려면 unbind(type, function)를 사용한다. CSS visibility 속성을 설정하려면 visible(flag)를 사용한다.",382
433,"2. 다국어 설정 가이드2.1 클라이언트 다국어설명
WebSquare 페이지가 로드된 후 브라우저의 언어를 인식하여 해당 언어의 스크립트 파일을 참조하여 다국어 변환을 수행합니다. 쿠키에 설정된 언어코드가 있는 경우 브라우저의 언어 설정보다 우선합니다. 다국어로 표현할 값을 KEY : VALUE 형태의 Array 형식으로 작성하고, 다국어 치환에 사용되는 KEY는 모든 언어가 동일한 값을 사용합니다. config.xml 설정 파일에 아래와 같이 언어팩 관련 설정을 추가하고, 각 컴포넌트에 useLocale=""true"" 설정을 추가한 후, 언어 별로 정의된 KEY 값을 localeRef 속성으로 설정하여 다국어를 지원합니다. 선택 항목을 각 언어 파일에 정의된 KEY 값으로 표시하고, chooseOption=""true""인 경우, 해당 chooseOption 텍스트도 chooseOptionLabelLocaleRef 속성을 설정하여 다국어로 표시할 수 있습니다.",307
434,"웹스퀘어에서는 useLocale 속성과 tooltipLocaleRef 속성을 사용하여 다국어를 지원합니다. SelectBox에서는 chooseOption과 allOption을 선택할 수 있으며, 각 언어 파일에는 chooseOptionLabelLocaleRef로 지정할 KEY에 대한 각 언어 별 텍스트를 정의합니다. tooltipLocaleRef 속성을 사용하여 툴팁을 다국어로 표시할 수 있으며, 각 언어 파일에는 tooltipLocaleRef로 지정할 KEY에 대한 각 언어 별 텍스트를 정의합니다. 서버에서는 Properties 파일을 사용하여 다국어로 표시할 값을 변환한 후 클라이언트로 전송하며, 다국어 프레임워크를 사용하여 다국어 변환을 요청합니다. 다국어 처리용 Servlet은 websquare/config.xml 파일에서 정의하며, 다국어 처리시 WebSquare XML 페이지를 호출할 Servlet 파일의 지정된 스크립트 Function을 지정합니다.",266
435,"WebSquare에서는 다국어를 지원하기 위해 프로퍼티 파일 대신 DB를 사용할 수 있습니다. 이를 위해 websquare.xml 파일에 LoadI18nMessageImpl 클래스를 등록하고, DB에 테이블을 생성하고 데이터를 등록해야 합니다. 또한, i18NCommon.js 파일을 등록하고, 웹스퀘어 화면 파일에서 다국어로 변환할 부분을 ""!~KEY~!"" 형식으로 지정합니다. 이때, locale 값은 쿠키, 도메인 설정, request parameter 값의 우선순위로 결정되며, 키값에 해당하는 locale 값이 없으면 공백 처리됩니다.",184
436,"3. 데이터 바인딩 가이드
3.1 Menu
메뉴 컴포넌트의 데이터는 ItemSet을 통해 바인딩할 수 있습니다. dataType에 따라 요구되는 정보가 다르므로, dataType에 맞게 데이터 바인딩을 해야 합니다. recursive인 경우, nodeSet, label, value의 xPath 설정이 필요하고, listed인 경우, nodeSet, label, value, depth의 xPath 설정이 필요합니다. value는 공백으로 구분하여 여러 값을 바인딩할 수 있습니다.
3.2 TreeView
TreeView의 데이터 입력 방식을 선택한 후, 각 노드의 정보를 설정한 후 [OK]를 클릭합니다. Inner XML은 데이터를 직접 입력하고, ItemSet은 DataList와 바인딩합니다.
3.3 FusionChart
chart Properties를 이용하여 FusionChart와 DataCollection 데이터를 연동할 수 있습니다. labelNode와 seriesColumns 옵션을 함께 사용합니다. seriesColumns에는 column의 ID값이나 옵션을 설정한 객체가 들어갈 수 있습니다.",275
437,"3.3 FusionChart
3.3.1 Column & Line Chart
3.3.1.1 Standard Multi-series JSON Data
The following is a sample of Standard Multi-series JSON Data:
```
<model>
    <xf:model>
        <w2:dataCollection>
            <w2:dataList id=""dataList1"" baseNode=""vector"" repeatNode=""item"" valueNode="""">
                <w2:columnInfo>
                    <w2:column id=""Year"" name=""Year"" dataType=""text""></w2:column>
                    <w2:column id=""ProductA"" name=""ProductA"" dataType=""number""></w2:column>
                    <w2:column id=""ProductB"" name=""ProductB"" dataType=""number""></w2:column>
                    <w2:column id=""ServiceA"" name=""ServiceA"" dataType=""number""></w2:column>
                    <w2:column id=""ServiceB"" name=""ServiceB"" dataType=""number""></w2:column>
                    <w2:column id=""ServiceC"" name=""ServiceC"" dataType=""number""></w2:column>
                </w2:columnInfo>
            </w2:dataList>
        </w2:dataCollection>
        <xf:instance>
            <data xmlns="""">
                <vector>
                    <item>
                        <Year>2005</Year>
                        <ProductA>30</ProductA>
                        <ProductB>50</ProductB>
                        <ServiceA>70</ServiceA>
                        <ServiceB>90</ServiceB>
                        <ServiceC>110</ServiceC>
                    </item>
                    <item>
                        <Year>2006</Year>
                        <ProductA>45</ProductA>
                        <ProductB>65</ProductB>
                        <ServiceA>85</ServiceA>
                        <ServiceB>105</ServiceB>
                        <ServiceC>125</ServiceC>
                    </item>
                </vector>
            </data>
        </xf:instance>
    </xf:model>
</model>
```
3.3.1.2 Result
The following is the result of the above sample:
```
<w2:fusionchart chartType=""MSColumn2DLineDY"" drawType=""javascript"" id=""chart1"" ref=""data:dataList1"" labelNode=""Year"" seriesColumns=""[['ServiceC']]"" style=""height:280px;width:100%;""></w2:fusionchart>
```
3.3.1.3 Multi-series Stacked Column & Line Chart
The following is a sample of Multi-series Stacked Column & Line Chart:
```
<model>
    <xf:model>
        <w2:dataCollection>
            <w2:dataList id=""dataList3"" baseNode=""vector3"" repeatNode=""item"" valueNode="""">
                <w2:columnInfo>
                    <w2:column id=""Year"" name=""Year"" dataType=""text""></w2:column>
                    <w2:column id=""ProductA"" name=""ProductA"" dataType=""number""></w2:column>
                    <w2:column id=""ProductB"" name=""ProductB"" dataType=""number""></w2:column>
                    <w2:column id=""ServiceA"" name=""ServiceA"" dataType=""number""></w2:column>
                    <w2:column id=""ServiceB"" name=""ServiceB"" dataType=""number""></w2:column>
                    <w2:column id=""ServiceC"" name=""ServiceC"" dataType=""number""></w2:column>
                    <w2:column id=""Revenue"" name=""Revenue"" dataType=""number""></w2:column>
                    <w2:column id=""RevenueB"" name=""RevenueB"" dataType=""number""></w2:column>
                </w2:columnInfo>
            </w2:dataList>
        </w2:dataCollection>
        <xf:instance>
            <data xmlns="""">
                <vector3>
                    <item>
                        <Year>2005</Year>
                        <ProductA>30</ProductA>
                        <ProductB>50</ProductB>
                        <ServiceA>70</ServiceA>
                        <ServiceB>90</ServiceB>
                        <ServiceC>110</ServiceC>
                        <Revenue>100</Revenue>
                        <RevenueB>200</RevenueB>
                    </item>
                    <item>
                        <Year>2006</Year>
                        <ProductA>45</ProductA>
                        <ProductB>65</ProductB>
                        <ServiceA>85</ServiceA>
                        <ServiceB>105</ServiceB>
                        <ServiceC>125</ServiceC>
                        <Revenue>150</Revenue>
                        <RevenueB>250</RevenueB>
                    </item>
                </vector3>
            </data>
        </xf:instance>
    </xf:model>
</model>
```
3.3.1.3.4 Result
The following is the result of the above sample:
```
<w2:fusionchart chartType=""MSStackedColumn2DLineDY"" drawType=""javascript"" id=""chart5"" ref=""data:dataList3"" labelNode=""Year"" seriesColumns=""[['ProductA','ProductB'], ['ServiceA','ServiceB','ServiceC'],[{'id':'Revenue','linethickness':'2'},{'id':'RevenueB','linethickness':'5'}]]"" style=""height:280px;width:100%;""></w2:fusionchart>
```
3.3.1.4 Scatter & Bubble Chart
The following is a sample of Scatter & Bubble Chart:
```
<model>
    <xf:model>
        <w2:dataCollection>
            <w2:dataList id=""dataList4"" baseNode=""vector4"" repeatNode=""item"" valueNode="""">
                <w2:columnInfo>
                    <w2:column id=""Server"" name=""Server"" dataType=""text""></w2:column>
                    <w2:column id=""X"" name=""X"" dataType=""number""></w2:column>
                    <w2:column id=""Y"" name=""Y"" dataType=""number""></w2:column>
                </w2:columnInfo>
            </w2:dataList>
        </w2:dataCollection>
        <xf:instance>
            <data xmlns="""">
                <vector4>
                    <item>
                        <Server>Server 1</Server>
                        <X>21</X>
                        <Y>2.4</Y>
                    </item>
                    <item>
                        <Server>Server 1</Server>
                        <X>43</X>
                        <Y>2.5</Y>
                    </item>
                    <item>
                        <Server>Server 1</Server>
                        <X>43</X>
                        <Y>3.5</Y>
                    </item>
                    <item>
                        <Server>Server 1</Server>
                        <X>23</X>
                        <Y>1.5</Y>
                    </item>
                    <item>
                        <Server>Server 1</Server>",1497
438,"데이터 컬렉션(DataCollection)은 FusionChart의 모든 옵션을 지원하지 않기 때문에, getFusionChartData() API로 반환된 JSON 객체를 직접 핸들링하여 원하는 옵션을 추가할 수 있습니다. 예를 들어, 위 코드에서는 dataList1.getFusionChartData() 메소드를 사용하여 ""Month"" 축과 ""Price"" 데이터를 가진 Column2D 차트를 생성하고, vlineObj 객체를 만들어 두 번째 데이터 항목 앞에 수직선을 추가합니다. 마지막으로, setJSONData() 메소드를 사용하여 수정된 chartObj를 차트에 적용합니다.",169
439,"WebSquare.uiplugin.submit는 데이터 통신용 Submit을 생성하는 컴포넌트이다. anchorWithGroupClass는 type=""anchor""인 경우, w2group 클래스의 적용 여부를 설정한다. centerOffImageClass는 type=""image""인 경우, 트리거 마우스아웃시 중앙 &lt;td&gt;에 적용할 클래스를 설정한다. centerOnImageClass는 type=""image""인 경우, 트리거 마우스오버시 중앙 &lt;td&gt;에 적용할 클래스를 설정한다. class는 HTML의 class 속성과 동일한 기능을 제공한다. disabled는 컴포넌트 비활성 여부를 설정한다. id는 컴포넌트 ID를 설정한다. leftOffImageClass는 type=""image""인 경우, 트리거 마우스아웃시 왼쪽 &lt;td&gt;에 적용할 클래스를 설정한다. leftOnImageClass는 type=""image""인 경우, 트리거 마우스오버시 왼쪽 &lt;td&gt;에 적용할 클래스를 설정한다. localeRef는 클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key를 설정한다. nextTabID는 Tab 키를 누를 때 선택되는 컴포넌트의 ID를 설정한다. rightOffImageClass는 type=""image""인 경우, 트리거 마우스아웃시 오른쪽 &lt;td&gt;에 적용할 클래스를 설정한다. rightOnImageClass는 type=""image""인 경우, 트리거 마우스오버시 오른쪽 &lt;td&gt;에 적용할 클래스를 설정한다. submission은 submission ID를 설정한다. submitType은 서브미션 전송 타입을 설정한다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정한다. title은 HTML의 title 속성과 동일한 기능을 제공한다. tooltip은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 설정한다. tooltipLocaleRef는 tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정한다. type은 컴포넌트 타입을 설정한다. useLocale은 다국어 사용 여부를 설정한다. userData1, userData2, userData3는 사용자 정의 데이터 속성을 설정한다. addClass, bind, changeClass, focus, getBackgroundImage, getDisabled, getGenerator, getID, getInitStyle, getLabel, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getSubmission, getTitle, getType, getUdcHome, getUdcRoot, getUserData, getValue, hasClass, hide, removeClass, setBackgroundImage, setDisabled, setEventPause, setInitStyle, setLabel, setOpacity, setPosition, setReadOnly, setSize, setStyle, setSubmission, setTitle, setUserData, setValue, show, toggleClass는 각각 컴포넌트의 속성이나 이벤트를 설정하는 메소드이다.",821
440,"웹스퀘어 컴포넌트에서는 trigger( type, array )를 사용하여 특정 이벤트를 발생시킬 수 있으며, unbind( type, function )를 사용하여 이벤트를 제거할 수 있습니다. visible( flag )는 더 이상 사용되지 않는 속성이며, anchorWithGroupClass는 type=""anchor""인 경우 w2group 클래스의 적용 여부를 설정합니다. leftOffImageClass와 leftOnImageClass는 트리거 마우스아웃/오버시 왼쪽 이미지 클래스를 설정하며, rightOffImageClass와 rightOnImageClass는 오른쪽 이미지 클래스를 설정합니다. disabled는 컴포넌트를 비활성화할지 여부를 설정하며, id는 컴포넌트 ID를 설정합니다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 때 해당 컴포넌트에 포커스를 주는 순서를 설정하며, title은 마우스 오버 시 툴팁으로 표시됩니다. tooltip은 사용자가 컴포넌트에 마우스 오버할 때 표시되는 텍스트를 설정하며, tooltipLocaleRef는 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정합니다. type은 컴포넌트 타입을 설정하며, useLocale은 다국어 사용 여부를 설정합니다. userData1, userData2, userData3은 사용자 정의 데이터 속성을 설정하며, addClass( className )는 컴포넌트에 CSS class를 추가하고, bind( eventType, function )는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다.",465
441,"웹스퀘어 컴포넌트의 다양한 함수들을 설명하는 문서입니다. 함수들은 각각 다른 파라미터와 반환값을 가지며, 주로 웹스퀘어 컴포넌트의 속성값을 반환하거나 변경하는 기능을 합니다. 예제 코드를 통해 각 함수의 사용법을 확인할 수 있습니다. 함수들은 대부분 웹스퀘어 컴포넌트 공통으로 사용되며, 각 함수의 파라미터와 반환값은 문서에서 자세히 설명되어 있습니다.",166
442,"getSize( ) : 컴포넌트의 크기 값을 반환한다. getStyle( propertyName ) : 컴포넌트의 CSS 속성 값을 반환한다. getSubmission( ) : submit 컴포넌트의 submission 속성으로 지정된 submission의 실제 객체를 반환한다. getTitle( ) : 컴포넌트의 title 속성 값을 반환한다. getType( ) : 컴포넌트의 현재 설정된 Type을 반환한다. getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData( key ) : 컴포넌트에 설정한 key의 value를 반환한다. getValue( ) : 표시되어 있는 label을 반환한다. hasClass( className ) : 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide( ) : 컴포넌트를 화면에서 숨긴다. removeClass( className ) : 컴포넌트에서 class를 삭제한다. setBackgroundImage( imgUrl ) : type=""button""인 경우 배경 이미지를 설정한다. setDisabled( disabled ) : 컴포넌트의 disabled 속성을 설정한다. setEventPause( evList , flag ) : 지정한 이벤트를 중단한다. setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구한다. setLabel( lable ) : label 값을 변경한다. setOpacity( value ) : 컴포넌트의 불투명도를 설정한다.",420
443,"웹스퀘어 컴포넌트의 다양한 기능을 제어하기 위한 메소드들이 소개되어 있다. 각 메소드는 파라미터를 받아 해당 컴포넌트의 속성을 변경하거나 이벤트를 발생시키는 역할을 한다. 예를 들어, setOpacity 메소드는 컴포넌트의 불투명도를 설정하며, setPosition 메소드는 컴포넌트의 위치를 설정한다. 또한, setReadOnly 메소드는 컴포넌트의 readOnly 속성을 설정하며, setSize 메소드는 컴포넌트의 크기를 설정한다. 이 외에도, setStyle 메소드는 CSS 속성을 설정하고, setUserData 메소드는 컴포넌트에 임의의 데이터를 설정한다. 이러한 메소드들을 이용하여 웹스퀘어 컴포넌트를 다양하게 제어할 수 있다.",276
444,"16. 템플릿 화면 - 업무화면
- 업무화면을 구성하는 템플릿 화면 예제 코드 제공
17. 템플릿 화면 - 분할화면
- 분할 화면을 구성하는 템플릿 화면 예제 코드 제공
18. 템플릿 화면 - Table 내 Form 요소 그리기
- Table 내 Form 요소를 그리는 템플릿 화면 예제 코드 제공",146
445,"80 websquare guide Snippets Guide OPS part 02.html. Snippets 구성 요소파트 II. Snippets 구성 요소는 다음과 같다. 7. Snippets 템플릿 기본구성, 8. 화면 Layout, 9. 화면 상단 공통, 10. 검색영역, 11. 화면 타이틀, 12. Table, 13. GridView, 14. 전체버튼, 15. 컴포넌트. 이 구성 요소들은 웹 애플리케이션 개발에 필요한 다양한 기능을 제공한다. 각 구성 요소는 샘플 코드와 함께 제공되어 있으며, 이를 활용하여 개발자는 보다 쉽게 웹 애플리케이션을 개발할 수 있다.",233
446,"FwBulletChart는 FusionWidget Wrapper 컴포넌트로, 차트에 보여줄 값과 스타일 옵션을 결합한 FusionWidgets 데이터를 사용합니다. WebSquare5에서는 API를 통해 차트를 쉽게 커스터마이징할 수 있습니다. chartType은 hbullet 또는 vbullet로 설정하며, refbinding에는 dataList를 입력합니다. valueNodes는 seriesType이 simple인 경우, 사용할 DataCollection의 column ID값을 입력합니다. FwBulletChart의 디자인은 css로 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의해야 하며, DataCollection을 만들고 ref, labelNode, valueNode 등을 연결해야 합니다. 변경 방법은 기술지원에 문의하시기 바랍니다.",210
447,"FwFunnelChart는 FusionWidget Wrapper 컴포넌트로, 데이터와 스타일 옵션을 결합하여 차트를 생성합니다. WebSquare5에서는 API를 통해 차트를 쉽게 커스터마이징할 수 있습니다. accessibility는 차트의 접근성 지원 여부를 결정하며, labelNode는 FwFunnelChart의 라벨 데이터로 사용할 DataCollection의 column ID값을 설정합니다. seriesType은 dataList 모양에 따라 advanced와 simple로 구분되며, valueNode은 simple 시 FwFunnelChart의 값 데이터로 사용할 DataCollection의 column ID값을 설정합니다. FwFunnelChart의 디자인은 css로 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의되며, DataCollection을 만들고 ref, labelNode, valueNode 등을 연결해야 합니다.",228
448,"config.xml은 웹스퀘어의 JavaScript에서 참고하는 설정 파일입니다. 로컬 엔진 사용시에는 WebSquare 설치 폴더 내의 config.xml에 위치합니다. 이 문서에서는 퍼블리셔의 작업을 위해 기본적으로 설정해야하는 노드들을 설명합니다. empty tag(닫기 태그가 별도로 없는 태그)를 한번만 주었음에도 마크업이 2번 되는 경우 추가하는 방법과 API 관련 설정에 대해 설명합니다. config.xml에 설정을 변경하는 방법은 WebSquare 설치 폴더 내의 config.xml을 직접 수정하는 방법과, WebSquare 스튜디오 내에서 설정하는 방법이 있습니다. 상세한 속성에 대한 설명은 기술지원 사이트의 Document탭 -> 004.ConfigurationGuide의 설정 관련 가이드 문서를 참고하십시오.",250
449,Websquare.html은 config.xml의 초기 설정을 가지고 Websquare 엔진을 로딩시켜 주는 html 파일입니다. 코딩한 xml이 파싱되고 파싱된 HTML들을 Websquare.html가 둘러 싸는 구조가 됩니다. 문서 타입을 정하거나 viewport 설정등의 이유로 <head>태그 안에 추가해야 할 meta 태그가 있다면 이 Websquare.html을 수정해야 합니다. Websquare5에서는 config.xml과 함께 직접 수정할 수 있는 기능을 제공합니다. IE 렌더링 모드를 지정할 때는 meta 태그를 이용하여 사이트 접속자의 IE 렌더링 모드를 정해줘야 합니다. 모바일 페이지 작업시 Viewport를 설정할 수 있는 Meta Tag가 있습니다. Websquare.html을 수정할 때는 프로젝트의 Resource 관리를 하는 담당자에게 문의하시길 바랍니다. 다른 편집기로 작업시 파일 자체 인코딩이 깨져 Websquare가 오작동 하는 경우가 있으므로 가급적이면 Websquare 스튜디오 혹은 Eclipse로 수정하길 바랍니다.,331
450,"WebSquare.uiplugin.panelContainer는 panelContainer의 id와 속성을 정의하는 컴포넌트입니다. cols, colWidth, panelMove, userData1, userData2, userData3 등의 속성을 가지며, onpanelclose, onpanelmove, onpanelopen 등의 이벤트를 처리할 수 있습니다. addClass, addPanel, bind, changeClass, closePanel, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPanelInfo, getPanelInfoById, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, openPanel, removeClass, removePanel, setDisabled, setEventPause, setInitStyle, setOpacity, setPanelTitle, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind 등의 메소드를 사용할 수 있습니다.",231
451,"id: 닫고자 하는 panel의 id
focus(): 웹스퀘어 컴포넌트에 포커스를 줌.
getDisabled(): 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환.
Return type: Boolean
getGenerator(): 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환.
Return type: Object
getID(): 웹스퀘어 컴포넌트의 ID를 반환.
Return type: String
getInitStyle(CSS): 컴포넌트의 초기 스타일을 반환.
getOpacity(): 웹스퀘어 컴포넌트의 불투명도를 반환.
Return type: Integer
getOriginalID(): 웹스퀘어 컴포넌트의 originalID를 반환.
Return type: String
getPanelInfo(): panel의 속성정보들을 얻습니다.
getPanelInfoById(id): panel id에 맞는 panel 속성을 찾는다.
getPluginName(): 웹스퀘어 컴포넌트의 이름(pluginName)을 반환.
Return type: String
getPosition(positionName): 웹스퀘어 컴포넌트의 위치(left, top)를 반환.
Return type: Number
getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환.
Return type: Boolean
getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환.
Return type: Object 또는 null
getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환.
Return type: Object 또는 전역 window 객체
getSize(sizeName): 웹스퀘어 컴포넌트의 크기(width, height)를 반환.
Return type: Number
getStyle(propertyName): 웹스퀘어 컴포넌트의 CSS 속성 값을 반환.
Return type: String
getStyleValue(style): 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.
Return type: String
getTitle(): 컴포넌트의 title 속성 값을 반환.",579
452,"input 컴포넌트의 title 속성을 가져오는 예제입니다. tmpTitle 변수에 input1의 title 값을 저장합니다. getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. 파일명은 마지막 .xml까지 포함되며, .xml을 제외한 경로는 getUdcRoot를 사용해서 반환합니다. getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. 파일명을 포함하지 않으며, 파일명을 포함한 경로는 getUdcHome을 사용해서 반환합니다. getUserData() 함수는 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다. hasClass() 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide() 함수는 웹스퀘어 컴포넌트를 화면에서 숨깁니다. openPanel() 함수는 panel을 엽니다. removeClass() 함수는 웹스퀘어 컴포넌트에서 class를 삭제합니다. removePanel() 함수는 rowIndex, colIndex 에 맞는 panel을 삭제합니다. setDisabled() 함수는 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다. setEventPause() 함수는 지정한 이벤트를 중단합니다. setInitStyle() 함수는 컴포넌트의 초기 스타일을 복구합니다. setOpacity() 함수는 웹스퀘어 컴포넌트의 불투명도를 설정합니다. setPanelTitle() 함수는 panel의 title을 설정합니다. setPosition() 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. setReadOnly() 함수는 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. setSize() 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 설정합니다. setStyle() 함수는 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다. setUserData() 함수는 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다.",598
453,"이 함수들은 웹스퀘어 컴포넌트에서 사용되는 함수들이다. setUserData 함수는 컴포넌트에 데이터를 설정하는 함수이다. show 함수는 컴포넌트를 화면에 표시하는 함수이다. toggleClass 함수는 컴포넌트에서 특정 class를 추가하거나 제거하는 함수이다. trigger 함수는 컴포넌트에서 이벤트를 발생시키는 함수이다. unbind 함수는 컴포넌트에서 이벤트를 제거하는 함수이다. visible 함수는 CSS visibility 속성을 설정하는 함수이다. 이 중에서 visible 함수는 deprecated 되었으며, show/hide 혹은 setStyle 사용을 권장한다.",200
454,"WebSquare.uiplugin.layout은 그리드 형태로 화면을 배치하는 기능을 제공합니다. layoutContents 노드에 정의된 그룹을 layoutInfos 노드에 정의된 해상도 별 정보에 따라 화면에 배치합니다. 이 플러그인은 addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setLayout, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind 등의 메서드를 제공합니다. 이 중 addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, setDisabled, setInitStyle, setLayout, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind 등의 메서드는 자주 사용됩니다.",267
455,"웹스퀘어 컴포넌트의 여러 함수들을 설명하는 문서입니다. 각 함수는 다양한 파라미터와 반환값을 가지고 있으며, 예제 코드를 통해 사용 방법을 보여줍니다. 함수들은 웹스퀘어 컴포넌트의 ID, 초기 스타일, 불투명도, originalID, 이름, 위치, readOnly 속성, scope, 크기, CSS 속성, title 속성, UDC 파일 경로 등을 반환합니다. 각 함수의 사용 방법과 반환값을 이해하면, 웹스퀘어 컴포넌트를 보다 쉽게 다룰 수 있습니다.",190
456,"UDC 객체의 메소드 중 getUdcHome()은 UDC 파일 경로를 반환하며, 그 외의 경우 undefined가 반환됩니다. getUserData(key)는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환합니다. hasClass(className)는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. hide()는 웹스퀘어 컴포넌트를 화면에서 숨깁니다. removeClass(className)는 웹스퀘어 컴포넌트에서 class를 삭제합니다. setDisabled(disabled)는 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다. setEventPause(evList, flag)는 지정한 이벤트를 중단합니다. setInitStyle(property)는 웹스퀘어 컴포넌트의 초기 스타일을 복구합니다. setLayout()은 화면 레이아웃을 조정합니다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정합니다. setPosition(left, top, mode)는 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. setSize(width, height)는 웹스퀘어 컴포넌트의 크기(width, height)를 설정합니다. setStyle(propertyName, value)는 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다. setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. show(displayType)는 웹스퀘어 컴포넌트를 화면에 표시합니다.",483
457,"componentId.show(); // (예제) display 속성 값을 취소하고 원래의 display 값을 복구.
componentId.show(""""); 
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거.
웹스퀘어 컴포넌트에 파라미터로 주어진 class가 포함되어 있으면 해당 class를 제거하고, 없으면 추가한다. 
addClass로 추가된 class만 삭제 가능하며, 직접 정의된 class를 삭제하려면 config.xml 파일에 <removeDefaultClass value=""true"" /> 설정을 추가해야 한다.
 config.xml 파일에 아래 설정 추가 
<removeDefaultClass value=""true"" /> 
 tmpInputClass class를 삭제 
input1.toggleClass(""tmpInputClass""); 
 (위에서 삭제된) tmpInputClass class를 다시 추가 
input1.toggleClass(""tmpInputClass""); 
trigger( type , array ) : 컴포넌트에서 특정 이벤트를 발생시킨다.
이벤트 핸들러에 전달할 파라미터 배열을 array로 전달할 수 있다.
 input1 컴포넌트에 onclick 이벤트를 발생시킴 
input1.trigger(""onclick""); 
 input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출 
input1.trigger(""onviewchange"", [1,2]); 
unbind( type , function ) : 컴포넌트에서 이벤트를 제거한다.
제거할 이벤트와 핸들러 함수를 지정할 수 있다. 이벤트를 지정하지 않으면 해당 컴포넌트의 모든 이벤트를 제거한다.
 input1에 등록된 모든 이벤트를 제거 
input1.unbind(); 
 input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거 
input1.unbind(""onviewchange""); 
 input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거 
input1.unbind(""onviewchange"", func1); 
visible( flag ) : [deprecated] show/hide 혹은 setStyle 사용을 권장. 엔진 내부적으로 CSS visibility 속성을 설정한다.
flag 값이 true이면 visibility: visible; false이면 visibility: hidden;으로 설정된다.",604
458,"WebSquare.uiplugin.applet은 애플릿 사용을 지원하는 Type uiplugin입니다. accesskey, align, altHTML, archive, class, code, codebase, datafld, datasrc, groupid, hidefocus, hspace, id, lang, language, name, src, title, unselectable, vspace 등의 속성을 가지고 있습니다. 이 중 accesskey, align, altHTML, archive, class, code, codebase, datafld, datasrc, groupid, hidefocus, hspace, lang, language, name, src, title, unselectable, vspace 속성은 <applet> 태그와 동일합니다. id 속성은 컴포넌트 ID를 할당하며 Script에서 해당 컴포넌트에 접근 가능합니다. 이외에도 PropertyEventMethod과 Method Detail이 있습니다.",206
459,"WebSquare.uiplugin.fwGaugeChart는 FusionWidget에 포함된 7종의 차트 중 하나로, 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있는 형태입니다. WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원하며, 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. fwGaugeChart의 chartType을 변경하거나, 실시간 기능 사용 여부를 설정하고, 데이터를 받아오는 url을 설정할 수 있습니다. 또한, 컴포넌트에 CSS class를 추가하거나, 이벤트와 핸들러 함수를 동적으로 할당할 수 있습니다. 컴포넌트의 초기 스타일을 반환하거나, CSS 속성 값을 반환하는 등의 다양한 메소드를 사용할 수 있습니다.",251
460,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. addClass 함수를 사용하여 클래스를 추가하거나, bind 함수를 사용하여 이벤트와 핸들러 함수를 동적으로 할당할 수 있습니다. changeClass 함수를 사용하여 클래스를 변경하거나, changeType 함수를 사용하여 fwGaugeChart의 chartType을 변경할 수 있습니다. clearChart 함수를 사용하여 설정된 값을 초기화하고, draw 함수를 사용하여 fwGaugeChart를 화면에 출력할 수 있습니다. exportJSChart 함수를 사용하여 fwGaugeChart를 jpg, png, pdf 형식으로 export할 수 있으며, fc 함수를 사용하여 fusionWidget 객체를 반환하여 Native API를 호출할 수 있습니다. getChartAttribute 함수를 사용하여 fwGaugeChart의 attribute 값을 반환하고, getDataListInfo 함수를 사용하여 컴포넌트와 바인딩된 DataList를 반환할 수 있습니다. getDisabled 함수를 사용하여 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하고, getGenerator 함수를 사용하여 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환할 수 있습니다. getID 함수를 사용하여 웹스퀘어 컴포넌트의 ID를 반환하고, getInitStyle 함수를 사용하여 컴포넌트의 초기 스타일을 반환할 수 있습니다. getJSONData 함수를 사용하여 fwGaugeChart의 차트 데이터를 JSON 객체로 반환하고, getOpacity 함수를 사용하여 웹스퀘어 컴포넌트의 불투명도를 반환할 수 있습니다. getOriginalID 함수를 사용하여 웹스퀘어 컴포넌트의 originalID를 반환하고, getPluginName 함수를 사용하여 웹스퀘어 컴포넌트의 이름(pluginName)을 반환할 수 있습니다. getPosition 함수를 사용하여 웹스퀘어 컴포넌트의 위치(left, top)를 반환하고, getReadOnly 함수를 사용하여 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환할 수 있습니다. 마지막으로, getScope 함수를 사용하여 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 아닌 경우 null을 반환합니다.",613
461,"textbox1.getScope(); // (반환 값) wframe11 객체 getScopeWindow( ) scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환. Return typedescription ObjectWFrame 객체의 scope 객체 또는 전역 window 객체 Sample // (예제) // 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. // 그리고, wframe11 내부에 textbox1이 존재. var scope = textbox1.getScopeWindow(); scope.wframe11 === textbox1.getScope(); // true
getSize( sizeName )
- 웹스퀘어 컴포넌트의 크기(width, height)를 반환.
- %로 설정된 경우, 픽셀로 변환된 값을 반환.
- Parameter name: sizeName
- Return type: Number
- Sample: var returnValue = componentId.getSize(""width""); // (반환 예) 100 // 픽셀 단위의 크기 값이 반환됨. // %로 설정된 경우, 픽셀로 변환된 값이 반환됨.
getStyle( propertyName )
- 웹스퀘어 컴포넌트의 CSS 속성 값을 반환.
- Parameter name: propertyName
- Return type: String
- Sample: var returnValue = input1.getStyle(""width""); // (반환 값) ""144px""
getUserData( key )
- setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환.
- Parameter name: key
- Return type: String
- Sample: input1.getUserData(""setTest""); // (반환 값) ""Hello""
hasClass( className )
- 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인.
- Parameter name: className
- Return type: Boolean
- Sample: var returnValue = input1.hasClass(""tmpInputClass""); // (반환 값) true
hide( )
- 웹스퀘어 컴포넌트를 화면에서 숨김.
- Sample: componentId.hide();
setDisabled( disabled )
- 웹스퀘어 컴포넌트의 disabled 속성을 설정.
- Parameter name: disabled
- Sample: componentId.setDisabled(true);
setEventPause( evList , flag )
- 지정한 이벤트를 중단함.
- Parameter name: evList, flag
- Sample: input1.setEventPause(""onclick"", true);",672
462,"input1.setEventPause(null, true); : input1 컴포넌트의 이벤트를 일시 중지합니다.
setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구합니다. initStyle 속성을 true로 설정한 컴포넌트만 유효합니다.
setJSONData( json ) : fwGaugeChart의 차트 데이터를 지정된 json 객체로 설정합니다.
setOpacity( value ) : 웹스퀘어 컴포넌트의 불투명도를 설정합니다.
setPosition( left , top , mode ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다.
setReadOnly( readOnly ) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다.
setRef( dataList , valueNode ) : fwGaugeChart에 binding할 dataList를 설정합니다.
setSize( width , height ) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정합니다.
setStyle( propertyName , value ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다.
setUserData( key , value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다.
setValue( value ) : fwGaugeChart에 값을 설정합니다.
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시합니다.
stopUpdate( ) : fwGaugeChart에 실시간 기능사용시 update를 중지합니다.
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가합니다.
trigger( type , array ) : 컴포넌트에서 특정 이벤트를 발생시킵니다.
unbind( type , function ) : 컴포넌트에서 이벤트를 제거합니다.
unbindRef( ) : ref 바인딩을 해제합니다.
visible( flag ) : [deprecated] show/hide 혹은 setStyle 사용을 권장합니다.",530
463,"WebSquare.uiplugin.image는 HTML의 <img> 태그와 같이 화면에 이미지를 표시하는 컴포넌트입니다. accessibility 속성은 웹접근성을 지원하며, alt 속성은 이미지 파일을 표시할 수 없는 경우 대체하여 표현할 메세지를 제공합니다. class 속성은 CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다. disabled 속성은 컴포넌트를 비활성화할 수 있습니다. ref 속성은 DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용합니다. src 속성은 이미지 파일의 URL을 지정하며, usemap 속성은 HTML map Tag의 name 속성값을 #와 함께 정의합니다. tooltip 속성은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 제공합니다. 이외에도 다양한 이벤트와 메소드를 제공합니다.",291
464,"CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다. 컴포넌트의 CSS를 제어하기 위해 class 속성을 이용할 수 있다. disabled 속성은 컴포넌트를 비활성화할 때 사용하며, id 속성은 Script에서 해당 컴포넌트에 접근할 때 사용한다. longdesc 속성은 이미지의 자세한 설명이 담긴 URI을 지정한다. ref 속성은 DataCollection의 value 경로를 지정하며, DataList와 바인딩된 경우 GridView에서 선택된 행의 값이 바인딩된다. tooltip 속성은 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시한다. Event Detail은 컴포넌트에서 발생하는 이벤트와 핸들러 함수를 동적으로 할당할 수 있다. addClass, bind, changeClass, focus, getAlt, getDataListInfo, getDisabled, getGenerator, getID, getInitStyle 등의 메소드를 사용하여 컴포넌트를 제어할 수 있다.",310
465,"initStyle 속성이 true로 설정된 컴포넌트만 유효하게 동작합니다. CSS 속성 값을 반환하는 getLongdesc(), getOpacity(), getStyle(), getStyleValue() 함수와 컴포넌트 정보를 반환하는 getOriginalID(), getPluginName(), getPosition(), getReadOnly(), getScope(), getSize(), getSrc(), getTitle(), getUdcHome(), getUdcRoot(), getUserData() 함수가 있습니다. 각 함수의 반환 값은 다양한 형태이며, 사용 방법은 예제 코드를 참고하면 됩니다. 또한, getScopeWindow() 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우 부모 WFrame 객체를 반환하며, 아닌 경우 전역 window 객체를 반환합니다. getStyleValue() 함수는 deprecated 되었으며, 대신 getStyle() 함수를 사용하는 것이 권장됩니다.",229
466,"웹스퀘어 컴포넌트에서 사용 가능한 메소드들이다. 각 메소드는 파라미터와 반환값이 있으며, 예제 코드를 통해 사용 방법을 확인할 수 있다. 주요 메소드로는 setUserData, hasClass, removeClass, setDisabled, setSize, setStyle, setTitle, show 등이 있다. 이들 메소드를 사용하여 컴포넌트의 속성을 설정하거나 변경할 수 있다. 예를 들어, setDisabled 메소드를 사용하여 컴포넌트의 disabled 속성을 활성화하거나 비활성화할 수 있다. 또한, hasClass 메소드를 사용하여 컴포넌트가 특정 class를 포함하는지 확인할 수 있다. 이 외에도 다양한 메소드들이 있으며, 필요에 따라 사용할 수 있다.",234
467,"addClass를 통해 추가된 class만 삭제할 수 있습니다. 웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하려면 config.xml 파일에 설정을 추가해야 합니다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시키며, unbind 함수는 이벤트를 제거합니다. visible 함수는 CSS visibility 속성을 설정합니다. 그러나 이 함수는 더 이상 권장되지 않으며, show/hide 혹은 setStyle 사용을 권장합니다.",153
468,"GridView13.GridView13.1GridView는 Gridview의 기본 형태와 PageList Snippets를 제공합니다. Gridview의 전체 높이는 th의 height + ( td의 height * visibleRowNum 속성값) + (border) 로 계산됩니다. 예를 들어 th의 height 값이 25px, td의 height 값이 20px, visibleRowNum 속성값이 4일 경우, 25 + (20 * 4) + (th의 border-top:1px) + (td의 border-top:1px * 4 = 4px) = 110px 의 높이값을 가집니다. PageList 영역은 기본 PageList로 사용됩니다.",170
469,"Table은 th+td의 형태로 생성되며, 컬럼과 행의 수에 따라 다양한 구성이 가능하다. Table 내에서는 공통적으로 텍스트를 사용하며, Websquare tool을 이용하여 간단하게 추가/삭제가 가능하다. Table의 컬럼 및 행의 추가/삭제 방법은 표 12-2에서 확인할 수 있다. 각각의 Table 구성 예시는 그림 12-1에서 확인할 수 있다.",136
470,"WebSquare.uiplugin.section은 HTML5의 WFrame과 유사한 섹션 컴포넌트이다. class 속성을 이용하여 CSS 파일이나 style 블럭에서 정의한 여러 개의 class를 공백으로 구분하여 적용할 수 있다. 또한, 각 컴포넌트에 id를 지정하여 Script에서 해당 컴포넌트에 접근할 수 있다. 이 컴포넌트는 Property, Event, Method를 제공하며, class 속성을 이용하여 컴포넌트의 CSS를 제어할 수 있다.",161
471,"웹스퀘어 5.0_4.4732A.20221019.124344 버전의 엔진 정보를 제공하며, charset 설정, 메모리 사용 개선, request header 설정, 다국어 기능, 팝업 상태창 위치 설정, Ctrl + 키 선택, 오류 메시지 출력, 서브미션 시 빈 값 처리 등의 기능이 개선되었다. 이에 대한 자세한 설명과 설정 예시가 제공된다.",127
472,"3.13. 변경: TableLayout 컴포넌트의 접근성 속성 공개. captionAuto 속성은 표의 제목을 자동 생성하며, summaryOnlyAuto 속성은 헤더 타이틀이 HTML 태그를 포함한 경우, 태그를 제외한 텍스트만 summary 항목으로 지정한다.
4.1. 변경: 컴포넌트의 툴팁 다국어 지원 기능에서 tooltipLocaleRef 속성이 추가되었다. tooltip 값이 지정되어 있고, useLocale=""true""인 경우, tooltipLocaleRef 값을 참조한다.
4.2. 변경: 컴포넌트의 속성명이 toolTip에서 tooltip으로 변경되었다.
5.1. 변경: 팝업을 부모 밖으로 드래깅할 수 있는 옵션인 options.windowMoveType이 추가되었다.
6.1. 변경: $p.download 함수에 네 번째 인자인 isXML이 추가되었다. isXML이 ""true""인 경우, XHR 통신을 수행할 때 config.xml 설정 파일의 <request> – <requestHeaderFunction> 항목에 설정된 함수를 호출한다.
6.2. 변경: $p.openPopup 함수의 options.closeAction 옵션으로 지정하는 사용자 정의 함수의 인자로 info.isCloseButtonClick가 추가되었다.
6.3. 변경: suffix.txt 파일을 갱신하는 함수 updateSuffix가 추가되었다.
6.4. 변경: $p.getCurrentServerDate 함수의 동작 방식이 변경되었다. 서버에 JSP 요청을 전송하여 날짜를 확인하고, 기본 1시간 단위로 $p.updateServerTime을 수행하여 서버와 시간을 동기화한다.
6.5. 변경: $p.isPopup 함수가 WFrame 팝업 내에 WFrame이 있는 경우, 부모의 팝업 여부를 자식 WFrame에서 확인할 수 있도록 변경되었다.
6.6. 변경: $p.isWFramePopup 함수가 WFrame 팝업 내에 WFrame이 있는 경우, 부모의 WFrame 팝업 여부를 자식 WFrame에서 확인할 수 있도록 변경되었다.",559
473,"1. $p.isWFramePopup(true) 함수는 WFrame 팝업에 속한 자신과 부모 화면이 WFrame 팝업인지 여부를 확인하는 함수이다.
2. watermark() 함수의 변경 전에는 모니터 크기나 해상도에 따라 워터마크 텍스트가 균등하게 표시되지 않았으나, 변경 후에는 균등하게 표시된다.
3. WebSquare.logger.enableContextMenu() 함수는 디버깅 메뉴를 활성화하고, WebSquare.logger.disableContextMenu() 함수는 디버깅 메뉴를 비활성화한다.
4. WebSquare.util.isChromeEdge() 함수는 현재 동작 중인 브라우저가 Google Chromium 기반의 Edge 브라우저인지 판별하는 함수이다.
5. setNumber() 함수의 변경 전에는 null이나 undefined를 넘기면 오류가 발생했지만, 변경 후에는 빈 값으로 넘길 수 있다.
6. multipleExcelDownload() 함수와 advancedExcelDownload() 함수에 options.rowAccessWindowSize 옵션이 추가되었다.
7. setUserData() 함수는 모든 컴포넌트에서 사용 가능하며, userData1, userData2, userData3 속성 값을 설정한다. getUserData() 함수는 userData1, userData2, userData3 속성으로 정의한 값을 반환한다.
8. keepInsertedRowDeleteStatus 속성은 insertRow() 함수를 통해 추가한 행에 대해 deleteRow()를 여러 번 실행할 경우에도 ""V"" 상태를 계속 유지한다. saveRemovedDataInsertedRow 속성은 insertRow()를 통해 추가한 행에 대해 deleteRow()를 실행한 후 다시 removeRow()를 실행할 경우, 삭제된 행이 가지고 있던 데이터를 1차원으로 반환하지 않는다.
9. setColumnFilter() 함수를 실행할 경우 onaftercolumnfilterchange 이벤트와 onbeforecolumnfilterchange 이벤트가 발생한다.
10. onbeforemodelchange 이벤트는 데이터 값이 변경되기 직전에 발생하며, rowIndex, colID, oldValue, newValue 값을 JSON 형식으로 받는다. 이벤트 핸들러에서 false를 반환하면 데이터 변경을 취소하고 예전 값으로 되돌리며, 이외의 경우에는 입력된 값으로 데이터가 변경된다.
11. getOpenPanelListInfo() 함수는 현재 열려 있는 모든 패널들의 속성을 반환한다. unCollapseAll 속성은 초기에 컴포넌트를 로딩할 때 모든 패널이 열려 있는 상태로 설정한다. setDisablePanel() 함수는 특정 패널을 비활성화한다.",700
474,"12.3.2.disablePanel 구분 속성은 비활성화할 패널을 지정하여 해당 패널을 닫은 상태로 유지하고 클릭해도 열리지 않도록 합니다. 
12.4.1.enterKeyPanelToggle 구분 속성은 Enter 키를 누르면 패널을 열거나 닫는 기능을 사용할 수 있도록 합니다. 기본 값은 ""true""이며, ""false""로 설정하면 Enter 키로 패널을 열고 닫을 수 없습니다. 
12.5.getOpenPanelInfo() 함수는 여러 개의 패널이 열린 상태에서 확인하려는 패널의 인덱스를 파라미터로 지정하여 해당 패널에 대한 속성을 반환합니다. 
14.1.1.selectByTabKey 구분 속성은 Tab 키를 눌러서 항목을 선택할 수 있도록 합니다. 선택 항목 목록을 펼치고 화살표를 통해 이동한 후 Tab 키를 누르면 해당 항목을 선택할 수 있습니다. 
14.2.1.customToggleKey 구분 속성은 선택 항목 목록을 토글할 수 있는 키를 직접 정의할 수 있습니다. 
14.3.1.autocomplete 구분 속성은 브라우저의 자동 완성 기능을 사용할지 여부를 결정합니다. 기본 값은 ""false""입니다. 
14.4.1.enableColumn 구분 속성은 선택 항목 목록이 DataList와 바인딩된 경우, 특정 선택 항목(들)의 비활성화 여부를 알려주는 컬럼을 명시합니다. 
14.4.2.enableColumnFalseValue 구분 속성은 enableColumn 속성을 사용할 경우, 목록에서 특정 항목을 비활성화하여 표시하기 위한 조건에 해당하는 값을 지정합니다. 
14.5.1.preventKeyList 구분 속성은 동작을 막으려는 키의 keycode를 구분자 콤마(,)를 사용하여 나열합니다. 
14.6.1.showItemTableByFocus 구분 속성은 editModeEvent=""onfocus"" 설정을 사용할 경우, 마우스 포커스 시 선택 항목 목록을 펼쳐서 표시합니다. 
14.7.1.onselected 이벤트는 선택 항목 목록에서 항목이 클릭된 이후(onitemclick 이벤트) 발생합니다. 
14.8.1.chooseOptionLabelLocalRef 구분 속성은 chooseOptionLabel 속성으로 지정한 텍스트의 다국어를 지원합니다.",711
475,"14.9. 변경 (search / WESD-486)
선택 항목이 펼쳐진 경우, 첫 글자 검색이 불가능하고, 선택 항목이 펼쳐지지 않은 경우 검색 기능을 사용할 수 없었으나, 선택 항목이 펼쳐진 경우에도 첫 글자 검색이 가능하도록 변경되었다.
14.10. 변경 (선택 항목 표시 속도 개선 / WEFF-934)
선택 항목 목록이 대량인 경우(약 36,000 건), 선택 항목 표시 시간이 많이 소요되는 문제가 있었으나, 이를 개선하여 선택 항목 표시 시간을 줄였다.
15. Calendar
15.1. 기능 (날짜 선택 유지 / WESD-928)
dayMoveFixed 구분 속성을 추가하여, 특정 날짜를 선택한 후 월이나 연도를 이동해도 현재 선택한 날짜를 유지할 수 있도록 개선되었다.
15.2. 기능 (휴일 설정 취소 / WESD-816)
emoveHoliday() 함수를 추가하여, setHoliday() 및 setHolidayRef() 함수를 사용하여 지정한 휴일 설정을 모두 취소할 수 있도록 개선되었다.
15.3. 기능 (휴일 설정 시 기존 휴일 설정 취소 / WESD-816)
setHoliday() 함수에 toRemove 인자를 추가하여, 기존 휴일 설정을 취소할지 여부를 선택할 수 있도록 개선되었다.
15.4. 기능 (이벤트 추가 / WESD-678)
onyearselect 및 onmonthselect 이벤트를 추가하여, 달력 화면에서 연도나 월을 변경할 때 발생하는 이벤트를 처리할 수 있도록 개선되었다.
15.5. 기능 (달력의 요일 부분을 텍스트로 표시 / WESD-657)
displayDayType 구분 속성을 추가하여, 달력의 요일 부분을 텍스트 혹은 이미지 형태로 표시할 수 있도록 개선되었다.
15.6. 기능 (모바일 전용 renderType 지정 / WESD-557)
mobileRenderType 구분 속성을 추가하여, 모바일 환경에서만 사용할 renderType을 정의할 수 있도록 개선되었다.
15.7. 기능 (현재 날짜를 제외한 다른 날짜를 비활성화 / WESD-487)
disableBeforeAfterDate 구분 속성을 추가하여, 현재 날짜만 활성화되고, 전 날짜와 다음 날짜는 비활성화될 수 있도록 개선되었다.
15.8. 변경 (displayDayType=""text"" / WESD-772)
enderType=""native""인 경우에도 displayDayType=""text"" 설정이 적용될 수 있도록 변경되었다.
16. CheckBox
16.1. 기능 (특정 선택 항목 비활성화 / WESD-761)
enableColumn 구분 속성을 추가하여, 선택 항목 목록이 DataList와 바인딩된 경우, 특정 선택 항목(들)의 비활성화 여부를 알려주는 컬럼을 명시할 수 있도록 개선되었다.
16.2. enableColumnFalseValue 구분 속성을 추가하여, enableColumn 속성을 사용할 경우, 목록에서 특정 항목을 비활성화하여 표시하기 위한 조건에 해당하는 값을 지정할 수 있도록 개선되었다.
16.3. setEnableColumn() 함수를 추가하여, enableColumn 속성을 동적으로 설정할 수 있도록 개선되었다.
17. CheckComboBox
17.1. 기능 (특정 선택 항목 비활성화 / WESD-761)
CheckBox와 동일하게 enableColumn 구분 속성과 enableColumnFalseValue 구분 속성을 추가하여, 선택 항목 목록에서 특정 항목을 비활성화하여 표시할 수 있도록 개선되었다.",1103
476,"CheckComboBox
enableColumn 속성은 특정 항목을 비활성화하여 표시하기 위한 조건에 해당하는 값을 설정하는 속성이다. setEnableColumn() 함수를 사용하면 enableColumn 속성을 동적으로 설정할 수 있다. useDrag 속성은 마우스 드래깅을 통해 여러 선택 항목을 일괄 선택 혹은 해제할 수 있게 한다. rangeSeparator 속성은 연속적으로 선택된 값을 간단하게 표시할 때 사용할 기호를 설정한다. useEdit 속성은 키보드 입력을 통해 항목 선택을 허용한다. validateOnInput 속성은 useEdit 속성을 사용할 때, 사용자가 값을 입력할 때마다 해당 값의 유효성을 검증한다. visibleColNum 속성은 선택 항목 목록의 열 개수를 설정한다. visibleColMax 속성은 목록을 펼쳤을 때 보여줄 열의 최대 개수를 설정한다. chooseOptionLabelLocalRef 속성은 chooseOptionLabel 속성으로 지정한 텍스트의 다국어를 지원한다.
CKEditor
esourcePath 속성은 CKEditor 폴더를 지정한다. CKEditor 버전이 4.17로 업그레이드 되었으며, pastebase64 plugin이 추가되었다.
GridView
changeCurrency() 함수에 customModelFormatter와 customModelUnFormatter 인자가 추가되었다. advancedExcelUpload() 함수에 applyDecimal 옵션이 추가되어 Excel 파일 데이터의 서식이 ""일반""인 경우에도 decimal 옵션 설정이 동작하도록 허용한다. advancedExcelDownload() 함수에 noMerge 옵션이 추가되어 GridView의 body 영역이 병합되었더라도 병합을 해제하여 Excel 파일로 다운로드할 수 있다.",478
477,"GridView에서 셀 병합을 많이 사용하는 대용량 데이터를 Excel 파일로 다운로드할 때는 advancedExcelUpload() 함수의 options.loadingMode 옵션을 ""SAX""로 설정하고, advancedExcelDownload() 함수의 options.chunkNum 옵션을 ""분할건수""로 설정하는 것이 권장됩니다. 또한, 다른 GridView로만 드래그-앤-드롭을 허용하려면 dataDragDropOther 속성을 ""true""로 설정하고, Excel 파일 및 CSV 파일 다운로드 시 request header 설정을 위해 각각 advancedExcelDownload(), saveCSV(), advancedExcelUpload() 함수에 options.useXHR 옵션을 추가할 수 있습니다. 데이터가 없는 경우 ""데이터 없음"" 표시 여부를 결정하는 noResultMessageVisibleAlways 속성을 사용할 수 있으며, 사용자 필터 설정 후 필터 조건을 모두 표시하는 showAllFilterList 속성과 사용자 입력 유효성 검증을 위한 validateOnInput 속성도 추가되었습니다. 또한, GridView의 각 셀에 포함된 공백을 제거하는 advancedExcelDownload() 함수의 options.trim 옵션과, 각 컬럼의 셀 선택을 막는 blockSelect 속성 값을 동적으로 설정하는 setBlockSelect() 함수, 특정 subtotal 컬럼에 적용할 스타일을 지정하는 subtotalStyleFormatter 함수의 subtotalColumnId 인자, 그리고 특정 선택 항목을 비활성화하는 setColumnEnableColumn() 함수도 추가되었습니다.",402
478,"GridView의 다양한 기능들에 대한 설명이다. setColumnEnableColumn() 함수를 사용하면 GridView에서 선택 항목 목록에서 비활성화할 수 있다. advancedExcelDownload() 함수의 options.rowAccessWindowSize 옵션을 사용하면, 셀 병합 상태를 임시 파일 대신 메모리에 적재할 행의 수를 지정할 수 있다. groupbyZone 속성을 사용하면 그룹핑 기능을 사용할 때 검색 기능을 제공할 수 있다. advancedExcelDownload() 함수의 options.columnMoveWithSubTotal 옵션을 사용하면, 컬럼을 이동한 경우 subTotal 컬럼도 이동된 채로 GridView를 Excel 파일로 다운로드할 수 있다. advancedExcelUpload() 함수의 options.trim 옵션을 사용하면, Excel 파일의 각 셀에 포함된 공백을 제거할 수 있다. dataDragDropStatus 속성을 사용하면, GridView 내에서 드래그-앤-드롭으로 행을 이동할 경우 rowStatus를 유지할 수 있다. drillDownToggle 속성을 사용하면, inputType=""drilldown"" 컬럼에서 드릴다운을 펼치는 방식을 선택할 수 있다. copyType 속성을 사용하면, GridView에서 데이터를 복사할 때 복사할 데이터를 지정할 수 있다. subtotalStyleFormatter 속성을 사용하면, subtotal 데이터에 적용할 CSS 클래스를 판단하는 함수를 지정할 수 있다. drawType 속성을 사용하면, 렌더링 방법을 결정할 수 있다. setFocusedMultiCell() 함수의 ignoreFocusMode 옵션을 사용하면, 셀을 포커싱할 때 전체 행을 선택하는 focusMode=""row"" 설정을 무시하고 다중 셀을 선택할 수 있다. getGroupbyData() 함수를 사용하면, 현재 그룹핑된 정보를 반환할 수 있다.",493
479,"GridView1에서 getGroupbyData() 함수를 사용하여 데이터를 XML로 다운로드할 수 있습니다. advancedExcelDownload() 함수를 사용하여 GridView 데이터를 Excel 파일로 다운로드할 때, options.ignoreStartRowIndexInSAX 및 options.ignoreStartColumnIndexInSAX 옵션을 사용하여 데이터 시작 인덱스를 반영할 수 있습니다. checkAllType 속성을 사용하여 헤더 체크박스 선택 시 disable되거나 readOnly 상태의 셀을 고려할 수 있습니다. useFilterSearch 속성을 사용하여 필터 검색 기능을 사용할 수 있으며, advancedExcelDownload() 함수의 options.setFontSize 속성을 사용하여 지정한 폰트 사이즈를 우선 적용할 수 있습니다. noSortInit 속성을 사용하여 오름차순 및 내림차순 정렬만 반복할 수 있습니다. advancedExcelDownload() 함수의 options.customToDataType 속성을 사용하여 inputType이 ""custom""이고 dataType이 ""number"" 혹은 ""bigDecimal""인 셀의 데이터를 숫자로 인식할 수 있습니다. useStartEndDiv 속성을 사용하여 gridstart_div 및 gridend_div 태그를 생성할 수 있습니다. advancedExcelUpload() 함수의 options.activeSheet 속성을 사용하여 활성화된 Excel 시트를 업로드할 수 있습니다. preventDuplicateFocusedCell 속성을 사용하여 focusFlow=""linear"" 설정이 적용된 상태에서 setFocusedCell() 함수가 두 번 실행되는 현상을 해결할 수 있습니다. filterListWidth 속성을 사용하여 필터링 항목 목록의 너비를 지정할 수 있으며, setDefaultDate() 함수를 사용하여 달력의 기본 날짜를 지정할 수 있습니다.",447
480,"19.39. 기능: GridView를 Excel 파일로 다운로드할 때 Footer 값을 서버에서 계산할지 여부를 설정하는 속성인 footerDataProvider, footerScale, footerRoundingMode 속성이 추가되었다. 
19.40. 기능: inputType=""text"" 컬럼의 imeMode 속성을 설정하는 setImeMode() 함수가 추가되었다. 
19.41. 기능: Enter 키 입력 시 이동 방향을 설정하는 enterKeyMove 속성에 ""editRight""와 ""editDown"" 옵션이 추가되었다. 
19.42. 기능: advancedExcelDownload() 함수에서 options.convertIndex 옵션을 지정하여 advancedExcelUpload() 함수로 다시 업로드할 경우 options.convertIndex 옵션을 반영할 수 있다. 
19.43. 변경: setCellClass() 함수로 GridView에 특정 스타일을 적용할 수 있으며, advancedExcelDownload() 함수를 사용하여 GridView를 Excel 파일로 다운로드할 때 적용한 스타일이 다운로드한 Excel 파일에 적용된다. 
19.44. 변경: autoResizeEmbeddedInput, sortHeaderDiv, scrollFocus, focusImage 속성이 공개되었다. 
19.45. 변경: inputType=""autoComplete"" 컬럼에서도 setMaxLength() 함수가 정상 동작한다. 
19.46. 변경: setColumnWidth() 함수로 GridView의 컬럼 폭을 변경한 후 advancedExcelDownload() 함수로 GridView를 Excel 파일로 다운로드할 경우, 변경한 컬럼 폭이 다운로드한 Excel 파일에 반영된다. 
19.47. 변경: titleAuto=""true"" 설정이 inputType=""checkbox"" 컬럼에도 적용된다. 
19.48. 변경: options.wframe = true 옵션을 사용하여 파일 선택 창을 WFrame으로 열 경우, 모달이 적용된다. 
19.49. 변경: tooltipFormatter 속성이 inputType=""checkbox"" 및 inputType=""radio"" 컬럼에 대해 적용된다. 
19.50. 변경: useXHR=""true"" 옵션을 사용할 경우, W-Gear에서 전달 받은 JSON 정보를 advancedExcelDownload() 함수의 options.onSuccessCallback 옵션으로 설정한 함수에 두번째 인자로 전달된다. 
19.51. 변경: 데이터가 없는 경우에도 마우스를 우클릭하면 컨텍스트 메뉴가 표시된다. 
19.52. 변경: inputType=""checkbox"" 및 inputType=""radio"" 컬럼에 대해 tooltipFormatter가 실행된다. 
19.53. 변경: skipKeyMoveEditMode 속성이 동작하는 조건이 변경되었다.",674
481,"19.54. 변경: skipKeyMoveEditMode 속성은 현재 비공개. useFilter를 사용하여 조건값을 입력할 경우, 대소문자 구분이 지원되지 않음. 대소문자 구분이 지원됨.
19.55. 변경: GridView를 Excel 파일로 다운로드할 때, rowNumHeaderValue 속성 값이 설정된 경우, 해당 값을 사용. 설정되지 않은 경우, advancedExcelDownload() 함수의 rowNumHeaderValue 옵션을 사용.
19.56. 변경: noSelect=""true""인 경우, 입력 모드에서 셀을 선택할 수 있음.
19.57. 변경: adaptive=""crosstab"" 설정이 적용된 상태에서 GridView에 대량의 데이터(10,000개 이상)를 로딩할 경우, 로딩 시간을 1/3로 개선.
19.58. 변경: GridView 컬럼이 dataType=""float""인 경우, onkeydown 이벤트가 정상 발생.
19.59. 변경: Excel 파일로 다운로드할 데이터. GridView 컬럼의 inputType이 ""select"", ""checkcombobox"" 혹은 ""autoComplete""인 경우 value 값 사용. 그 이외의 경우 label 값 사용.
19.60. 변경: advancedExcelDownload() 함수를 통해 Excel 파일로 다운로드할 경우, GridView에 적용된 폰트 설정이 Excel 파일에 적용됨.
19.61. 변경: dataDragSelect=""true"" 및 useShiftKey=""true"" 설정을 적용하여 여러 개의 셀들을 일괄 삭제 가능.
19.62. 변경: 정렬 아이콘이 정상 표시되지 않는 문제 해결.
19.63. 변경: dataType=""bigDecimal"" 컬럼이 0이 아닌 빈 값을 포함하면 데이터가 숫자를 기준으로 정렬됨.
19.64. 변경: senseReader=""false""인 경우 scrollFocus 설정이 동작.
19.65. 변경: mergeCel() 함수를 통해 병합한 셀에 대해서도 options.colMergeVaue 설정이 적용됨.
19.66. 변경: setCellVisible() 함수를 사용하여 화면에 표시하는 행의 수를 줄일 경우, Gridview가 다시 렌더링되어 하단 여백이 발생하지 않음.
20.1.1. 변경: editFormat 구분속성 추가하여 출력 포맷 설정 가능.
20.2.1. 변경: useEditFormat 구분속성 추가하여 편집 모드에서도 ioFormat 및 dispalyFormat 속성으로 설정한 포맷이 적용됨.
20.3.1. 변경: checkHeaderOnviewchange 구분이벤트 추가하여 헤더의 체크박스를 선택할 경우, onviewchange 이벤트가 발생.
20.4.1. 변경: placeholder 구분속성 추가하여 autoComplete, calendar, secrets, spinner, text, textarea, textImage에 대해 placeholder 기능 제공.
20.5. 변경: inputType=""checkbox"" 컬럼에서 일부 행들을 선택한 후, 헤더의 체크박스를 선택할 경우, 전체 행들의 체크박스를 모두 선택할 것인지 혹은 모두 선택 해제 할 것인지를 결정하는 onbeforemodelchange 구분속성 추가.",820
482,"체크박스를 모두 선택하는 ""check""와 모두 선택 해제하는 ""uncheck"" 기능을 제공한다. ""inputType=textarea""인 컬럼에서 disabled=""true""이고 readOnly=""true""인 경우, 해당 컬럼의 셀을 클릭해도 TextArea가 펼쳐지지 않도록 설정 가능하다. ""inputType=select""인 컬럼에서 선택 목록에서 각 항목에 대한 툴팁을 표시할지 여부를 설정할 수 있다. ""inputType=calendar""인 컬럼에서 특정 날짜 이전 또는 이후의 날짜들을 비활성화할 수 있다. ""inputType=autoComplete""인 컬럼에서 화살표 이미지를 클릭하면 아이템 목록을 바로 펼칠지, 해당 셀을 선택한 후 더블 클릭해야 아이템 목록이 펼쳐질지 설정 가능하다. ""inputType=checkcombobox""인 경우, 마우스 드래깅을 통해 여러 선택 항목을 일괄 선택 혹은 해제할 수 있으며, 키보드 입력을 통한 항목 선택도 가능하다. 또한, 연속적으로 선택된 값을 ""x-y"" 형태로 간단하게 표시할 수 있다. Excel 파일을 다운로드할 때, 해당 컬럼에 포맷을 적용하기 위한 사용자 함수를 실행할 수 있다. 병합된 헤더에서 정렬 기준이 되는 Body column의 ID를 설정할 수 있으며, 모바일 키보드 입력도 지원한다. 마지막으로, GridView를 Excel 파일로 다운로드할 때, 다운로드한 Excel 파일의 포맷을 지정할 수 있다.",483
483,"20.17. 기능 (Excel 파일 상의 표시 형식 설정 / WESD-300)
20.17.1. excelCellType
GridView를 Excel 파일로 다운로드할 때, 출력할 데이터의 표시 형식(셀 타입)을 지정할 수 있다. ""number"" : ""숫자"" 출력, ""bigDecimal"" : ""숫자"" 출력, ""text"" : ""텍스트"" 출력, ""date"" : ""날짜"" 출력.
20.18. 변경 (onChangeFunction / WESD-1070)
onChangeFunction 속성으로 지정된 함수가 실행될 때 받는 값. value : 선택한 값, colId : 해당 셀의 컬럼 ID, headerId : 해당 셀의 헤더 ID.
20.19. 변경 (escape / WESD-920)
inputType 컬럼 중 linkbutton, textImage, calendar에서 escape 속성을 지원한다.
20.20. 변경 (orderByColumn / WESD-835)
헤더가 한 줄인 경우, 병합된 헤더를 클릭할 경우, 정렬 기준의 되는 Body 컬럼을 지정한다. 헤더가 두 줄인 경우, 병합된 헤더 셀을 클릭할 경우 정렬 기준의 되는 Body 컬럼을 지정한다.
20.21. 변경 (inputType=""textImage"" / WESD-830)
inputType=""textImage"" 컬럼에서 alt 속성을 통해 대체 텍스트를 설정할 경우, <img> 태그의 속성으로 표시된다.
20.22. 변경 (sortLabel / WESD-668)
sortLabel=""true"" 설정이 inputType=""select"", inputType=""autoComplete"", inputType=""custom"" 컬럼에 대해 적용된다.
20.23. 변경 (inputType=""checkbox"" & inputType=""radio"" / WESD-537)
checkboxLabelColumn 속성으로 지정한 컬럼의 데이터를 변경할 경우, 변경된 값이 inputType=""checkbox"" 컬럼에 반영된다. radioLabelColumn 속성으로 지정한 컬럼의 데이터를 변경할 경우, 변경된 값이 inputType=""radio"" 컬럼에 반영된다.
24.1. 기능 (출력 포맷 설정 / WESE-90)
editFormat 속성을 통해 출력 포맷을 설정할 수 있다. 
24.2. 기능 (소수점 자동 입력 / WESE-132)
dataType=""float"" 혹은 dataType=""bigDecimal""인 경우, autoDecimalPoint 속성을 통해 소수점 자동 입력 여부를 설정할 수 있다.
24.3. 기능 (모바일 키보드 입력 지원 / WPF-2153)
inputMode 속성을 통해 모바일 키보드 입력을 지원할 수 있다.
24.6. 변경 (maxLength / WESD-654)
dataType=""bigDecimal""인 경우, maxLength 설정이 정수부와 소수부를 분리해서 적용된다.
24.7. 변경 (onkeydown / WESD-626)
dataType=""float""인 경우, F1 ~ F12, Shift, Ctrl, Alt, Pause/Break, Caps Lock 키에 대해서 onkeydown 이벤트가 발생한다.
24.9. 변경 (dataType=""euro"" ""rupee"" ""tenge"" / WESD-423)
dataType이 ""euro"", ""rupee"", 혹은 ""tenge""인 경우 부호(+ 및 -)를 입력할 수 없다.",871
484,"25. InputCalendar
25.1. Function (Output format setting / WESE-90)
- Added useEditFormat attribute. The format set by ioFormat and displayFormat attributes is applied even in edit mode. The useEditFormat attribute is currently private.
25.2. Function (Maintaining selected date when moving month or year / WESD-928)
- Added dayMoveFixed attribute. When dayMoveFixed=""true"" is set, the currently selected date is maintained even when moving to a different month or year. The dayMoveFixed attribute is currently private.
25.3. Function (Canceling holiday settings / WESD-816)
- Added removeHoliday() function. All previously set holiday settings can be canceled using the setHoliday() and setHolidayRef() functions.
25.4. Function (Canceling existing holiday settings when setting new ones / WESD-816)
- Added toRemove argument to the setHoliday() function. When toRemove is set to ""true"", the previously set holiday settings are canceled. The default value is ""false"".
25.5. Function (Displaying day of the week as text / WESD-657)
- Added displayDayType attribute. The day of the week can be displayed as text or image. The default value is ""image"".
25.6. Function (Specifying renderType for mobile / WESD-557)
- Added mobileRenderType attribute. The renderType can be specified for mobile environments. The default value is ""component"".
25.7. Change (renderType / WESD-841)
- When generating XML in Studio, the default value of the renderType attribute (""component"") is specified. The default value is not included in the XML file.
25.8. Change (displayDayType=""text"" / WESD-772)
- When renderType=""native"", displayDayType=""text"" is now applied.
25.9. Change (Adding distinguishable classes for calendarValueType / WESD-591)
- Classes are now added for each attribute setting of calendarValueType.
25.10. Function (Disabling dates other than the current date / WESD-487)
- Added disableBeforeAfterDate attribute. Only the current date is enabled, and the previous and next dates are disabled. The default value is ""false"".
25.11. Function (Displaying validation failure through popup / WESD-475)
- Added dateValidSetCustom attribute. When set to ""true"", only the function defined in the invalidMessageFunc attribute is called when an invalid value is entered. The default value is ""false"".
25.12. Function (Overriding getValue() and setValue() functions / WESD-447)
- The getValue() and setValue() functions can now be customized through the config.xml file. This feature is currently private.
25.13. Function (Selecting next month's date on the calendar / WESD-394)
- Added nextLastMonthDataSelect attribute. When set to ""true"", clicking on the next month's date displayed in gray on the calendar selects that date. The default value is ""false"".
25.14. Change (Accessibility attribute made public / WESD-985)
- The following attributes are now public: keepFocusSelect, focusOnOuterDiv, and useButton.
25.15. Change (disableDate() / WESD-922)
- Holidays can now be disabled using the disableDate() function.",710
485,"InputCalendar
- calendarValueType 속성에 대한 클래스 추가됨
- getValue() 및 setValue() 함수 재정의됨
- disableAfterDate() & disableBeforeDate() 함수 변경됨
MapChart
- useDefaultPattern, accessibility 속성 추가됨
Menu
- escape 구분속성 추가됨
MultiUpload
- clearOnError, onbeforemodelchange 구분속성 추가됨
Output
- toolTip 속성을 tooltip으로 변경 후, setTooltip() 함수 동작
- setToolTip() 함수도 동작
Pivot
- headerYMerge 구분속성 추가됨
- noColumnMove=""true"" 설정을 사용할 경우 피벗의 컬럼과 행의 헤더 부분을 리사이징할 수 없음
- pivotExcelDownload() 함수 변경됨
Radio
- enableColumn 구분속성 추가됨
- enableColumnFalseValue 구분속성 추가됨
- setEnableColumn() 함수 추가됨
ScheduleCalendar
- scheduleClickPopup 구분속성 추가됨",251
486,"다음은 웹스퀘어의 셀렉트박스와 서치박스의 기능 개선 내용입니다.
셀렉트박스:
- 계층 구조의 선택 목록을 표시할 때, 높이와 너비를 직접 지정할 수 있는 depthColumnWidth와 depthColumnHeight 속성이 추가되었습니다.
- Tab 키를 이용하여 항목을 선택할 수 있는 selectByTabKey 속성이 추가되었습니다.
- 선택 항목을 계층 구조로 표시할 수 있는 depthColumn 속성이 추가되었습니다.
- 선택 항목에 대한 툴팁을 표시할 수 있는 itemTooltipDisplay와 itemTooltipFormatter 속성이 추가되었습니다.
- 항상 툴팁을 표시할 수 있는 tooltipShowAlways 속성이 추가되었습니다.
- 특정 선택 항목을 비활성화할 수 있는 enableColumn과 enableColumnFalseValue 속성이 추가되었습니다.
서치박스:
- ref 속성을 동적으로 설정할 수 있는 setRef() 함수가 추가되었습니다.
또한, 기본 날짜를 동적으로 설정할 수 있는 setDefaultDate() 함수가 scheduleClickPopup 속성에 추가되었습니다.",324
487,"SelectBox
- select1.setEnableColumn(col3, false); 실행 시 dataList1에서 col3 컬럼의 값이 ""false""인 행들은 select1의 선택 항목 목록에서 비활성화되어 표시됨.
- preventKeyList 속성을 사용하여 SelectBox 컴포넌트에서 상하좌우 화살표(37=left, 38=up, 39=right, 40=down) 키의 동작을 막을 수 있음.
- onselected 이벤트는 선택 항목 목록(itemTable)에서 항목이 클릭되거나 Enter 키로 선택될 때 발생. 현재 설정된 값과 동일한 값이 선택될 경우에도 발생.
- keyMoveSync 속성은 목록이 펼쳐지지 않은 상태에서 Up/Down 키로 항목을 선택할 때 SelectBox의 값을 설정. true(기본 값) : SelectBox 값을 동시에 설정. Enter 키를 누를 때만 onselected 이벤트를 발생. false : SelectBox 값을 동시에 설정하지 않음. 값 변경 이후 Enter 키에 의해서 SelectBox 값 설정.
ScheduleCalendar
- setDefaultDate() 함수를 사용하여 초기 화면에 설정되는 날짜(기본 날짜)를 동적으로 지정.
Spinner
- displayFormat 속성을 설정할 경우, autoFocus 및 nextTabID 설정이 정상 동작.
Submission
- setRequestHeader() 함수를 사용하여 submission 별로 request header를 설정.
- dataType=""number"" 혹은 ""bigDecimal"" 컬럼의 값이 없는 경우, 요청데이터에서 해당 컬럼 삭제.
TabControl
- onscrollleftbtnclick, onscrollrightbtnclick, onsubmenubtnclick 이벤트 추가.
- tabSplit 속성을 사용하여 마우스로 드래깅을 통한 탭 이동을 허용.
- keepDisabledTab 속성을 사용하여 부모 TabControl의 탭이 또 다른 TabControl을 포함한 경우, 자식 TabControl의 특정 탭을 비활성화하고, 자식 TabControl이 속한 부모 TabControl의 탭을 비활성화한 후 다시 활성화할 때, 비활성화된 자식 TabControl에 포함된 특정 탭의 비활성화 상태를 유지.
- changeActiveTab 속성을 사용하여 탭 스크롤 버튼(tabScroll=""true"")을 클릭할 경우 옆의 탭으로 이동하여 해당 탭을 활성화 함.",654
488,"변경 후 변경 전
변경 후
- TabControl의 높이를 직접 설정하지 않았고, 탭의 content 높이가 TabControl의 높이보다 큰 경우, 해당 탭을 클릭하면 브라우저 전체의 세로 스크롤이 이동하지 않도록 TabControl의 높이를 다시 계산해서 반영하도록 변경됨.
- <h3> 태그 사용 시 포커스가 이동할 수 있도록 tabindex=""0"" 추가되었음.
- tabScroll=""true"" 설정을 사용할 경우, tabPosition=""top""에 상관 없이 탭 목록이 항상 하단에 표시되도록 변경됨.
기능 추가/변경
- TextArea의 readOnly 모드에서도 placeholder 속성으로 지정된 값을 표시할 수 있도록 showPlaceHolderOnReadOnly 구분속성이 추가됨.
- TreeView의 노드에 CheckBox의 label을 표시할 수 있도록 showCheckboxLabel 구분속성이 추가됨.
- TreeView에서 마우스 우클릭 시 표시되는 컨텍스트 메뉴를 구현한 경우, 데이터가 없는 경우에도 컨텍스트 메뉴가 표시되도록 변경됨.
- Upload에서 decrypt 연계 시 확장자를 포함하여 파일명을 전달하도록 변경됨.
- callbackFunction 인자로 허용하지 않는 문자가 입력되는 경우 Console 창에 ""Invalid data format."" 로그를 출력하도록 변경됨.
- WidgetContainer에서 마우스를 바깥으로 이동해도 위젯의 리사이징 동작을 멈출 수 있도록 변경됨.
- WindowContainer에서 윈도우 생성 시 높이(defaultHeight) 및 너비(defaultWidth) 설정이 가능하도록 createWindow() 함수 옵션 추가됨.
- WindowContainer에서 핀 버튼(useFixButton=""true"")으로 고정한 윈도우를 네임레이어의 맨 앞으로 이동할 수 있도록 nameLayerRearrange 속성이 추가됨.",542
489,"윈도우 컨테이너의 기능과 변경 사항에 대해 설명합니다. 윈도우 크기 조절 방향을 결정하는 dragResizableHeader 속성, 현재 열려 있는 윈도우 목록을 확인할 수 있는 useWindowScrollButton 속성과 windowScrollVisibleRowNum 속성, 윈도우 자동 정렬을 위한 autoArrange 속성, 특수 문자 표시를 가능하게 하는 변경 사항, 윈도우 인덱스 초기화와 현재 선택된 윈도우 구분을 위한 변경 사항, 윈도우 목록에 창 닫기 버튼을 추가하는 useWindowScrollButton 속성, closeOthers() 함수의 인자 값으로 windowId 및 uniqueId 사용 가능, 윈도우 최대화를 위한 변경 사항 등이 있습니다. 또한, 컨텍스트 메뉴에 QR 보기 메뉴가 추가되어 Ctrl + 마우스 우클릭을 통해 QR 코드를 생성할 수 있습니다.",266
490,"성능 개선 가이드 8. 코드 분석
8.1 코드 분석
8.1.1 전역 변수의 도치 않은 선언 확인: 변수를 var 선언 없이 생성하면 전역 변수가 생성되어 메모리 누수가 발생할 수 있으므로 주의해야 한다. 
8.1.2 객체에 적절한 API 사용 여부 및 수식 형태 확인: API나 수식을 올바른 형태로 사용하지 않으면 에러가 발생하거나 잘못된 값이 반환될 수 있다. 
8.1.3 객체 생성: 공통 소스의 경우, 사용하는 객체의 Lifecycle을 확인하여 재사용하거나 사용하지 않을 경우 삭제해야 한다. 
8.1.4 스크립트 수행 시간 최소화: 자주 호출되는 함수는 최소한의 자원 사용으로 결과를 반환할 수 있도록 작성해야 한다. 
8.1.5 가독성: 코드 분량과 코드 실행에 필요한 자원을 고려하여 최대한 가독성이 높은 형태로 코드를 작성해야 한다.",310
491,"scwin.dateTime 함수는 인자로 받은 날짜 정보를 문자열 형태로 반환하는 함수입니다. 수정 후에는 인자로 받은 날짜 정보를 년, 월, 일, 시, 분, 초로 분리하여 문자열 형태로 반환합니다. scwin.getMonthTerm 함수는 두 날짜 사이의 개월 수를 반환하는 함수입니다. 수정 후에는 날짜 비교를 위해 dateDiff 함수를 사용하고, 반환값이 없는 경우 빈 문자열을 반환합니다. 변수 선언 및 참조 방식은 메모리 절약을 위해 수정되었습니다. 팝업 파라미터 전달 방식은 Object 형식으로 변경되었습니다. 실행 시간 최소화를 위해 중복되는 코드를 제거하고, 이미 오픈된 창일 경우 창을 호출하지 않도록 수정되었습니다.",229
492,"주어진 코드는 MDI 환경에서 윈도우 객체를 생성하고, 해당 객체의 정보를 가져오는 코드입니다. 또한, 메모리 관리와 성능 개선을 위한 방법을 설명하고 있습니다.
먼저, 코드에서는 MDI 환경에서 윈도우 객체를 생성하고, 해당 객체의 정보를 가져오는 API를 사용합니다. 이를 통해 윈도우 객체의 id를 반환하고, 해당 id를 이용하여 페이지 URL, 메뉴 코드, 화면 이름 등을 설정합니다.
또한, 코드에서는 데이터 변경 시 발생하는 이벤트를 처리하는 방법을 설명합니다. 데이터 변경 시 이벤트가 발생하는 경우, 한 번에 데이터를 변경하는 것이 좋다는 것을 강조합니다.
또한, 메모리 관리와 성능 개선을 위한 방법을 설명합니다. 메모리 누수를 방지하기 위해 WebSquare 공개 API를 사용하고, jQuery의 제한적 사용을 권장합니다. 이를 통해 브라우저의 백화 현상이나 브라우저 동작 불능 등의 문제를 예방할 수 있습니다.",319
493,"WebSquare에서는 함수나 상수 값 선언 시 객체의 속성으로 설정하여 사용하고, 전역 변수도 객체의 속성으로 등록하여 사용하는 것을 권장합니다. 또한, 화면 unload 시점에 선언된 객체의 속성으로 등록된 함수 및 상수를 제거하여 메모리 누수를 방지해야 합니다. Submission 생성 시에는 미리 필요한 통신 객체를 생성해 놓는 것이 좋으며, 동일한 ID를 사용할 경우 기존 Submission의 ID를 수정하거나 삭제해야 합니다. Submission 실행 시에는 비동기 모드의 통신을 권장하며, $p.ajax API를 사용할 경우 응답 결과 객체를 변수 등에 직접 할당하지 않도록 주의해야 합니다. Closure 함수 내부에서는 Object 형태의 외부 객체를 직접 참조하지 않도록 하고, DataCollection은 개발도구나 API를 통해 생성할 수 있습니다.",267
494,"업무화면에서는 DataCollection을 개발도구에서 선언하고 스크립트에서 사용하는 것을 권장합니다. API를 이용하여 DataCollection을 생성할 때, 이미 존재하는 id가 있다면 삭제 후 생성해야 합니다. DataList는 removeAll, DataMap은 reset API를 이용하여 등록된 데이터를 삭제해야 합니다. 변수명은 일반적인 네이밍 규칙에 따라 영문으로 시작하는 변수명을 사용해야 합니다. WebSquare에서 제공하는 컴포넌트는 id를 지정해야 하지만, 이벤트 등록이나 스크립트에서 호출할 필요가 없는 경우 id를 생략할 수 있습니다. 팝업에서 opener의 함수를 호출하는 경우, 호출된 함수가 정상적으로 완료되어 참조 관계가 끝난 뒤에 팝업을 종료해야 합니다. 다른 Frame간 전달되는 Object의 타입은 String 타입의 객체를 파라미터로 전달해야 합니다. JavaScript는 느슨한 타입 언어이므로 변수 선언 시 var 문자를 누락하면 해당 변수는 전역에 선언되어 메모리 누수 현상을 유발합니다.",346
495,"공통 코드 조회 시, 비동기 통신을 사용할 경우 공통 코드 조회가 완료되기 전에 업무 페이지의 데이터가 먼저 로드될 수 있으므로, 동기 통신을 사용하거나 MDI 혹은 WindowContainer를 사용하여 한번 조회한 공통 코드는 공통 영역에 저장하는 것이 좋습니다. 또한, 웹사이트 성능 최적화를 위해 Expires 헤더 추가와 Gzip 압축을 사용하고, TabControl 컴포넌트에서는 frameMode 속성값으로 iframe과 wframe을 제공하며, 메모리 점유율을 고려하여 iframe을 사용할 경우 메인 층에서만 사용하는 것이 좋습니다. 동기 요청은 성능 저하로 이어질 수 있으므로 하나의 요청으로 처리 가능한 함수를 구현하는 것이 좋습니다. 초기 화면 네트워크 튜닝을 위해 리소스 로딩과 네트워크 문제 진단을 수행하고, 큐에 저장되거나 지연된 일련의 항목이 발견되면 클라이언트에서 너무 많은 리소스를 가져오고 있다는 의미이므로 확인해야 합니다.",357
496,"한번에 12개의 항목을 요청하는 경우, 첫 6개부터 먼저 시작되고 나머지 절반은 큐에 저장됩니다. 느린 TTFB는 긴 대기 시간 즉 녹색이 많이 나타나는 경우입니다. 처리 용량 확보를 위해 네트워크 요청 횟수 튜닝, CSS Sprites, 브라우저 기본 폰트 사용, 시스템 사용을 위한 외부 프레임워크 연계 등의 해결 방안을 제시합니다. jQuery 셀렉터 사용 시 id 셀렉터, 태그 셀렉터, 메서드 체인, 셀렉터 캐싱, 셀렉터 범위 지정 등의 방법을 사용하여 검색 속도를 개선할 수 있습니다. 재귀 호출형 함수는 스택 메모리가 쌓이는 문제가 있으므로 반복문을 사용하는 것이 좋습니다. DataCollection의 데이터 변경은 한번에 설정하는 것이 좋습니다.",304
497,"8.4.3 DataCollection 튜닝
DataCollection은 많은 양의 데이터를 저장하고 화면에 표시하는 데 사용됩니다. 데이터를 추가하거나 변경할 때마다 이벤트가 발생하므로, 이벤트를 중지하고 변경이 완료된 후 이벤트를 발생시키는 것이 좋습니다. 또한, 여러 행을 추가하는 경우 Array를 만들어 DataCollection에 한 번에 추가하는 것이 좋습니다. 이를 위해 권장되는 코드를 사용하는 것이 좋습니다.
8.4.4 성능 개선을 위한 추가 기능
WebSquare 엔진, 공통 CSS, 공통 JavaScript 등 여러 화면에서 공통으로 사용되는 모듈과 화면 소스의 Lifecycle을 분리하여 화면 로딩 및 전환 속도를 높이는 SPA 기능과, WFrame을 사용하여 전역 메모리 영역을 공유하지만 각 WFrame은 분리된 지역 변수를 참조하여 개발 생산성과 메모리 및 성능을 향상시키는 기능이 있습니다.
8.5 성능 저하 원인 및 해결 방안
성능 저하가 발생할 경우, 웹 서버 설정, WebSquare 설정 등을 확인하여 문제를 해결할 수 있습니다. 예를 들어, JSON, JS, XML, CSS 다운로드 속도를 높이기 위해 gzip 설정을 추가하거나, 정적인 자원에 대한 Caching 설정을 변경하여 캐싱 오류를 해결할 수 있습니다. 또한, SSL Handshake가 수행되어 속도가 저하되는 경우 SSL Keep Alive 설정을 추가하여 문제를 해결할 수 있습니다.",472
498,"8.5.3 통신 최적화
8.5.3.1 화면 프리징
- 원인: synchronous 방식의 HTTP Request 사용
- 해결 방안: 업무 프로그램 튜닝
8.5.3.2 HTTP 오류 발생
- 원인: 404, 500과 같은 HTTP 오류 발생 시 화면 처리 속도가 저하됨
- 해결 방안: 업무 프로그램 수정 및 리소스 캐싱
8.5.3.3 HTTP 1.1 Max Connection 초과
- 원인: 브라우저별 동일한 도메인으로 맺을 수 있는 최대 Connection 수를 초과
- 해결 방안: 업무 프로그램 튜닝
8.5.3.4 동시에 다수의 HTTP 요청
- 원인: 최대 100건 이상의 HTTP 요청이 발생
- 해결 방안: 업무 프로그램 튜닝
8.5.3.5 다수의 JS 파일 요청
- 원인: 외부 자바스크립트 파일에 대한 HTTP 요청 시 성능 부담이 증가
- 해결 방안: JS 파일 통합 및 난독화 기능을 형상 관리에 추가, 외부 자바스크립트 파일 개수 최소화 권장
8.5.4 데이터 튜닝
8.5.4.1 XML 방식의 대량 데이터 사용
- 원인: IE에서 MSXML Parser가 없어서 발생
- 해결 방안: MSXML Parser 설치 또는 JSON 방식으로 변경
8.5.5 리소스 중복 로딩
8.5.5.1 CSS, JS 중복 로딩 오류
- 원인: 동일한 CSS, JS 파일을 중복 로딩하여 속도 저하 발생
- 해결 방안: 중복 CSS, JS 로딩 여부 검토
8.5.6 화면 튜닝
8.5.6.1 TabControl이 여러 Tab을 포함
- 원인: TabControl 컴포넌트를 사용하여 여러 화면을 탭으로 구성할 때, 브라우저가 그려야 하는 모든 컴포넌트를 고려하지 않음
- 해결 방안: alwaysDraw 속성을 사용하여 숨겨진 Tab 영역까지 한번에 Rendering, 초기 로딩 시 첫번 째 탭의 컴포넌트만 렌더링하고 사용자 이벤트 혹은 스크립트 이벤트로 각 탭이 선택되는 시점에 해당 탭의 화면을 렌더링함.",737
499,"WebSquare 성능 향상을 위한 대처 방안에 대해 설명합니다. alwaysDraw=""false"" 설정을 사용할 경우, 초기 랜더링 후 첫 번째 탭을 제외한 나머지 탭의 컴포넌트는 객체화가 되지 않습니다. 이를 해결하기 위해서는 메뉴 클릭 또는 CTI inbound call시 화면 전환 속도를 향상시키거나 업무 프로그램 튜닝을 해야 합니다. 또한, 외부 컴포넌트 수를 적절하게 제한하고, 그리드 엑셀 업/다운로드로 인한 서버 메모리 부족 문제를 해결하기 위해 메모리 사용량을 계산해야 합니다. 그리드 컬럼이 100개를 초과하거나 대량 데이터를 사용하는 경우, 적절한 수로 제한해야 합니다. IE 브라우저에서의 렌더링 속도 저하 문제를 해결하기 위해서는 config.xml 파일에서 useActiveXObject 설정을 확인하고, JavaScript 기반 파서(xmlsax.js, xmlw3cdom.js) 사용을 지양해야 합니다. 또한, WebSquare 로그를 통해 성능 분석을 해야 합니다.",360
500,"로그는 시간, 상태, URL 등의 정보를 담고 있으며, 로그 출력 시간과 이전 로그 출력 후 경과 시간, 첫 로그 출력 후 경과 시간, 로그 출력기, 메시지 등으로 구성된다. 로그는 코드에서 발생한 이벤트를 추적하고 디버깅에 도움을 준다. 오류 로그는 코드에서 예외가 발생한 경우 출력되며, 오류 메시지와 스택 트레이스 등의 정보를 담고 있다. 메모리 누수 및 성능 문제를 방지하기 위해서는 Window 팝업을 alert이나 iframe 형태의 팝업으로 처리하고, 통신 관련 공통 함수에서는 객체 대신 string을 사용하지 않도록 주의해야 한다.",216
501,"1. 객체 대신 string을 사용했는가?
2. 객체 형태로 전달 시 메모리 누수 발생 여부 확인
3. 웹 폰트 사용 시 중복 호출 여부 확인
4. 외부 모듈 연계 시 document mode(DocType)의 지원 범위 확인
5. 외부 모듈의 메모리 누수 여부 확인
6. 외부 모듈(bootstrap 사용 시)의 버전 별 메모리 해제 여부 확인
7. SSL 환경에서 멀티업로드(플래시 모드) 사용 시 업로드 성능 저하 여부 확인
8. 대용량 엑셀 다운로드 시 Server에서 Data를 처리하도록 Provider 사용 권장
9. IE8을 지원해야 하는 프로젝트에서 웹 폰트 사용 권장하지 않음
10. 캐시가 적절히 사용되고 있는지 확인
11. Data 처리를 비효율적으로 API를 반복하여 사용하지 않았는지 확인
12. 대량 Data 처리 시 Data 구조체를 적절하게 사용했는지 확인
13. Fasoo DRM 모듈 사용 시 메모리 사용량 증가 여부 확인
14. 그리드의 Cell 별로 다양한 서식을 적용하는 경우 화면 렌더링 속도 및 스크롤 속도 저하 가능성 있음
15. TabControl 사용 시 다수의 탭을 사용하는 경우 화면 로딩 속도 저하 가능성 있음",418
502,"17. TabControl 내부 Content 항목에서는 별도의 xml 파일을 사용하도록 권장하며, iframe을 포함하여 중복 사용되는 현상이 발생할 수 있습니다. alwaysDraw=""false""를 사용하여 탭이 선택될 때 로딩하는 방식을 권장합니다.
18. JavaScript 함수 작성 시 var 선언을 생략하면 전역변수로 생성되어 메모리 과다 점유 현상이 발생할 수 있으므로, 지역변수를 적절하게 사용해야 합니다.
19. Sync 방식은 완료시까지 스크립트 정지 현상이 발생하므로 async 방식을 권장합니다.
20. MDI(WindowContainer) 사용 시 화면 중복 오픈 금지 및 오픈 창 개수 제한이 필요합니다. MDI 개별 Window가 지나치게 많아지면 메모리 과다로 인해 화면 조작이 불가능해질 수 있습니다.
21. JavaScript 로직 내의 오류가 발생하면 화면 렌더링 속도가 저하될 수 있으므로, 오류를 최소화해야 합니다.
22. 하나의 xml 파일 내의 JavaScript 양이 많을 경우 렌더링 속도가 저하될 수 있으므로, 공통으로 사용되는 함수 등은 별도의 .js 파일로 분리하여 관리하는 것이 좋습니다.
23. 특정 모바일 장비에서는 자체 xml parser가 내장되어 있지 않으므로, config.xml에서 <userAgentPattern XPathParser=""Android 4.3[\w\W]+N900|Android 4.3[\w\W]+E300|Android 4.4""/>을 추가하고, /websquare/externalJS/xpath/xpath.js를 로딩하여 사용해야 합니다. 근본적인 처리 방안이 없으므로 해당 기기를 사용하지 않는 것이 좋습니다.
24. jQuery 1.7.2를 사용할 경우 메모리 누수가 발생할 수 있으므로, 최신 버전을 사용하는 것이 좋습니다.
25. 통신 객체나 데이터 객체를 동적으로 생성할 때, 동일한 id로 중복 생성하지 않도록 주의해야 합니다. 중복 생성할 경우 메모리 누수가 발생할 수 있습니다.
26. 통신 함수에서 사용자 함수 호출 시 응답 결과가 다른 곳과 참조 관계가 없는지 확인해야 합니다.
27. 컴포넌트 및 함수의 네이밍은 가이드된 네이밍 규칙을 준수해야 합니다.
28. 팝업(프레임)간 Object를 전달할 때는 Primitives형(예: String)이 아닌 Object를 직접 전달하지 않도록 주의해야 합니다.
29. 스크립트 오류가 발생하면 함수가 정상적으로 종료되지 않아 화면 렌더링 속도가 저하될 수 있으므로, 오류를 최소화해야 합니다.
30. 웹폰트 사용 시 부모 페이지 외의 자식 페이지에서 중복 호출되지 않도록 주의해야 합니다.
31. 외부 모듈을 연계할 때는 document mode(DocType)의 지원 범위가 표준을 준수하는지 확인해야 합니다. 비표준 모드인 경우 브라우저 하위 버전으로 설정되어 렌더링 속도에 영향을 미칠 수 있습니다.
32. 외부 모듈을 연계할 때 해당 모듈의 메모리 누수 여부를 확인해야 합니다. 특히 SPA기능 사용 시 외부 모듈 추가 로드 또는 사용 완료 시에 메모리에 사용에 문제가 없는지 확인해야 합니다.
33. 캐시를 적절히 사용해야 합니다. 웹스퀘어 config.xml 내의 캐시 관련 설정이 적용되어 있는지와 서버 설정을 확인해야 합니다.
34. 그리드의 Cell 별로 다양한 서식을 적용하는 경우, Row가 많은 경우는 Server에서 서식을 적용하는 것이 좋습니다.
35. JavaScript 함수 작성 시 var 누락 또는 가이드에 따라 변수/함수가 지정되어 있는지 확인해야 합니다.
36. 전체 Layout 화면 구성 시 IFrame 개수가 지나치게 많이 사용되지 않도록 주의해야 합니다. 가능한 iframe을 wframe으로 변환해서 처리할 수 있도록 권장합니다.",1256
503,"WebSquare.uiplugin.progressbar는 진행 상태를 표시하는 컴포넌트로, autoClose, class, duration, id, max, min, progressClass, ref, step, valueType 등의 속성을 가지고 있다. addClass, animate, bind, changeClass, focus, get, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, set, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, show, stop, toggleClass, trigger, unbind 등의 메서드를 제공한다. 이 컴포넌트는 CSS class를 추가하거나 애니메이션 효과를 설정하고, 이벤트와 핸들러 함수를 동적으로 할당할 수 있다.",241
504,"commObj 객체에 ev_click 함수를 정의하고, input1 컴포넌트에 onclick 이벤트와 ev_click 함수를 동적으로 할당한다. changeClass 함수를 사용하여 웹스퀘어 컴포넌트의 class를 변경할 수 있다. get 함수는 상태 바의 현재 위치 값을 반환하며, getDisabled 함수는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환한다. getGenerator 함수는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다. getID 함수는 웹스퀘어 컴포넌트의 ID를 반환하며, getInitStyle 함수는 컴포넌트의 초기 스타일을 반환한다. getOpacity 함수는 웹스퀘어 컴포넌트의 불투명도 값을 반환하며, getOriginalID 함수는 컴포넌트의 originalID를 반환한다. getPluginName 함수는 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하며, getPosition 함수는 웹스퀘어 컴포넌트의 위치(left, top) 값을 반환한다. getReadOnly 함수는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScope 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. getScopeWindow 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하며, 아닌 경우 전역 window 객체를 반환한다. getSize 함수는 웹스퀘어 컴포넌트의 크기(width, height) 값을 반환하며, getStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다.",498
505,"웹스퀘어 컴포넌트의 CSS 속성 값을 반환하거나 설정하는 메서드들이다. getStyle, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, set, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle 등이 있다. 각 메서드들은 각각의 기능에 맞게 파라미터와 반환값을 가지고 있다. 예를 들어, setStyle 메서드는 propertyName과 value를 파라미터로 받아 해당 컴포넌트의 CSS 속성을 설정한다. 이러한 메서드들은 웹스퀘어 컴포넌트에서 자주 사용되며, 각각의 기능을 이해하고 활용할 수 있어야 한다.",215
506,"웹스퀘어 컴포넌트에서 사용 가능한 함수들에 대한 설명입니다. setStyle 함수는 CSS 속성과 값을 설정하며, setUserData 함수는 컴포넌트에 임의의 데이터를 설정합니다. show 함수는 CSS display 속성을 설정하여 컴포넌트를 화면에 표시하며, stop 함수는 상태 바의 애니메이션 효과를 중단합니다. toggleClass 함수는 컴포넌트에서 특정 class를 추가하거나 제거합니다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시키며, unbind 함수는 컴포넌트에서 이벤트를 제거합니다. visible 함수는 CSS visibility 속성을 설정합니다.",209
507,"오픈소스 및 외부 라이브러리 연계
9. 오픈소스 및 외부 라이브러리 연계
9.1 JQuery 연계
JQuery는 오픈소스 자바스크립트 라이브러리로, dom 탐색 및 제어, ajax, 이벤트처리, 애니메이션 처리 등을 쉽게 구현할 수 있습니다. 웹스퀘어 페이지에서는 주로 애니메이션 처리를 위해 JQuery를 연계하여 사용합니다. JQuery를 사용하기 위해서는 script 태그 중 src에 지정된 외부 js 파일을 loading하고, 각 컴포넌트의 toHTML()을 통해 화면을 그립니다. JQuery와 웹스퀘어 구동 순서에 따른 주의사항이 있으므로, 해당 순서를 보장하기 위해 ready 함수를 사용할 필요는 없습니다.
9.2 ExtJS 연계
ExtJS는 javascript 기반의 라이브러리로, 차트 등을 구현할 때 사용됩니다. ExtJS에서 제공하는 파일을 Context-Root 하위에 복사하고, 웹스퀘어 XML Page에서 ExtJS에서 제공하는 chart stylesheet와 js 파일을 include합니다.",341
508,"Chart를 표시할 영역에 group 컴포넌트를 생성합니다. submission을 생성하여 서버로부터 Data를 조회한 후 Chart를 그리는 function을 호출합니다. script를 include하는 시점은 상관없지만 document.ready의 이벤트는 WebSquare Page가 그려진 후에 호출될 수 있도록 합니다. Component의 css 변경은 addClass 또는 removeClass와 같이 제공된 api를 이용하여 처리하는 것을 권장합니다. 여러 Object로 구성된 Component는 JQuery를 이용하여 컨트롤하지 않습니다. ExtJS를 연계하는 방법을 소개합니다. ExtJS에서 제공하는 파일을 Context-Root 하위에 복사하고, chart stylesheet와 js 파일을 include합니다.",193
509,"주어진 코드는 ExtJS, Highchart, Daum 우편번호 서비스와 관련된 코드입니다. 각각의 라이브러리를 사용하여 차트를 그리거나 우편번호 검색 기능을 구현하는 등의 작업을 수행합니다. 코드에서는 각 라이브러리의 API를 이용하여 필요한 기능을 구현하고 있으며, JSON 객체나 XML 데이터를 이용하여 차트 데이터를 셋팅하고, 그 결과를 화면에 출력합니다. 또한, Daum 우편번호 서비스를 사용하기 위해 해당 API를 동적으로 로딩하고, 이를 화면에 삽입하는 방법을 보여주고 있습니다.",201
510,"WebSquare5와 Daum 우편번호 서비스 간의 충돌을 피하기 위해, websquare/config.xml 파일에 아래 설정을 추가해야 합니다. 
<WebSquare> 
  ..중략.. 
  <visibleHelper> 
    <targetHandler value=""_visibleHelper""/> 
  </visibleHelper> 
</WebSquare>
websquare/websquare.html 파일에 visibleHelper 정의를 추가해야 합니다. 
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> 
<html xmlns='http://www.w3.org/1999/xhtml' xmlns:ev='http://www.w3.org/2001/xml-events' xmlns:w2='http://www.inswave.com/websquare' xmlns:xf='http://www.w3.org/2002/xforms'> 
<head> 
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /> 
  <meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" /> 
  <title> WebSquare </title> 
  <script type=""text/javascript"" src=""javascript.wq?q=/bootloader""></script> 
  <script type=""text/javascript""> 
    window.onload = init; 
    function init() { 
      try{ 
        WebSquare.startApplication(); 
      } catch(e) { 
        alert(e.message); 
      } 
    } 
    var _visibleHelper = function( htmlStr ) { 
      var obj = document.getElementById(""visDiv""); 
      obj.innerHTML = htmlStr; 
    } 
  </script> 
</head> 
<body> 
  <div id=""visDiv""></div> 
  <script type=""text/javascript"" src=""http://dmaps.daum.net/map_js_init/postcode.v2.js""></script> 
</body> 
</html>
WebSquare 화면 파일에서 Daum 우편번호 서비스를 호출할 때는 아래와 같이 작성합니다. 
$r_title(WebSquare 화면 파일 (예)) 
<?xml version=""1.0"" encoding=""UTF-8""?> 
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:ev=""http://www.w3.org/2001/xml-events"" xmlns:w2=""http://www.inswave.com/websquare"" xmlns:xf=""http://www.w3.org/2002/xforms""> 
<head> 
  <w2:type>DEFAULT</w2:type> 
  <w2:buildDate /> 
  <xf:model> 
    <xf:instance> 
      <data xmlns="""" /> 
    </xf:instance> 
    <w2:dataCollection baseNode=""map""></w2:dataCollection> 
    <w2:workflowCollection></w2:workflowCollection> 
  </xf:model> 
  <script type=""text/javascript""><![CDATA[ 
    new daum.Postcode({ 
      oncomplete: function(data) { 
        // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다. 
        // 예제를 참고하여 다양한 활용법을 확인해 보세요. 
      } 
    }).open(); 
  ]]></script> 
</head> 
<body> 
  <xf:input id=""inp_input1"" style=""position: relative;width: 144px;height: 21px;""></xf:input> 
</body> 
</html>",785
511,"WebSquare.uiplugin.header는 HTML5의 Header와 동일한 역할을 하는 컴포넌트이다. class 속성을 이용하여 CSS 파일이나 style 블럭에서 정의한 여러 개의 class를 공백으로 구분하여 적용할 수 있다. 또한, 각 컴포넌트에는 ID가 할당되며, 이를 이용하여 Script에서 해당 컴포넌트에 접근할 수 있다. 이 컴포넌트의 Property, Event, Method는 HTML의 class 속성과 동일한 기능을 제공한다. Engine 내부에서는 각 컴포넌트 별로 지정된 class를 적용하며, class 속성을 이용하여 컴포넌트의 CSS를 제어할 수 있다.",214
512,Output20.1OutputTextbox 컴포넌트는 Textbox 컴포넌트와 동일하게 사용할 수 있습니다. 하지만 현재는 Textbox 컴포넌트를 사용하는 것이 권장됩니다.,65
513,"TabControl은 탭 버튼 목록 영역과 컨텐츠 페이지 영역으로 나눠어져 있으며, 각 탭 버튼은 해당하는 컨텐츠 페이지로 바로 갈 수 있는 앵커를 제공하는 컴포넌트입니다. 다건의 탭과 컨텐츠를 생성할 수 있는 레이아웃용 컴포넌트로 동적으로 탭을 생성하거나 삭제할 수 있습니다. SPA모드 적용이 가능한 컴포넌트이며, 제약사항 등을 반드시 숙지해야 합니다. adaptive, adaptiveThreshold, alwaysDraw, closable, focusOnStart, hiddenTab, selectedIndex, spaInitCount, tableRender, tabMove, tabPosition, tabScroll, useAccessibilityMenu, useATagBtn, useTabKeyOnly, windowMaxNum 등의 속성을 제공합니다. 스타일 변경을 위해 해당 컴포넌트에 class를 추가하여 기존에 스타일 정의된 해당 class에 접근하여 오버라이딩 할 수 있습니다.",295
514,"웹스퀘어에서는 탭 디자인을 위해 스타일 시트를 사용합니다. 첫번째 div에는 ""tab01""라벨이 포함되어 있으며, 가운데 디자인 형태를 가지고 있습니다. 두번째 div는 왼쪽 디자인 형태를 가지고 있으며, 세번째 div는 오른쪽 디자인 형태를 가지고 있습니다. 탭의 오른쪽 상단에는 삭제 버튼이 있으며, closable을 true로 설정하면 추가됩니다. 탭 컨트롤 영역을 선택한 후 Property 창에서 useTabkeyOnly를 true로 설정하면 키보드 제어가 가능해져 접근성이 향상됩니다. 또한, 탭에는 타이틀을 넣을 수 있으며, 센스리더 모드에서 해당 탭 위에서 엔터키를 눌러 진입했을 경우, 해당 컨텐츠에 대한 내용을 센스리더에서 요약해서 읽어줄 수 있습니다. 탭 버튼이 비활성화 상태일 때는 opacity 값 30이 적용되며, 스타일을 주고 싶다면 .w2tabcontrol_disabled 클래스에 속성을 주면 됩니다. 탭컨트롤에는 position, 위치값(left/right/top/bottom), width, height가 인라인 스타일로 생성이 되며, 탭버튼위치(tabs)에는 width, height값이 컨텐츠 영역(content)에는 세로(height)값이 자동으로 생성됩니다.",443
515,"CSS 설정 시 인라인 스타일을 유념해야 하며, absolute를 사용할 때는 left, top 값을 수정하거나 right, bottom 값을 주어 사용할 수 있다. TabControl을 relative로 사용하려면 컴포넌트를 그룹으로 감싸고, 해당 그룹에 position:relative;를 준다. TabControl 컴포넌트에는 absolute로 값을 넣어준다. 별도 CSS를 사용할 때는 id와 class를 임의로 정의하여 사용하며, tabControl과 grid를 함께 사용할 때는 alwaysDraw 항목을 false로 지정하거나, grid를 싸고 있는 group을 display:none;했다가 block;시키는 형태와 동일한 방법으로 grid에 lazyDraw=""true""를 xml 편집기로 Propert를 삽입한다. 탭이 2개 이상이며, 그리드가 2개 이상 들어갈 때는 스크립트를 설정하여 사용한다. CSS Overriding을 통해 디자인을 바꿀 수 있다.",281
516,"Switch는 화면 전환을 할 수 있는 컴포넌트로, 여러 개의 case로 화면을 구성하고 동적으로 변경할 수 있습니다. 탭버튼 목록과 컨텐츠 페이지로 나뉘어져 각 탭버튼은 해당하는 컨텐츠 페이지로 바로 갈 수 있는 앵커를 제공합니다. Switch는 페이징 기능이 필요할 때 사용하는 컨테이너성 컴포넌트이며, 자동으로 화면이 바뀔 때는 사용자가 이를 중지할 수 있는 인터페이스를 제공해야 합니다. Switch의 속성 중 slide는 슬라이드 애니메이션을 적용할지를 지정하며, tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 제공합니다. Switch 컴포넌트를 그리면 최초 1개의 case를 가지며, 하나 이상의 case를 가질 수 있습니다. 슬라이드 효과를 주어 가로 터치 페이지 전환 기능을 사용할 수 있습니다.",308
517,PageInherit21.1PageInheritJSP의 Include와 비슷한 기능을 하는 컴포넌트가 있습니다. 이 컴포넌트는 다른 웹스퀘어 xml화면 파일을 현재 화면에 include할 때 사용됩니다. 이 컴포넌트는 접근성과 직접적인 관계는 없습니다.,101
518,"Canvas (HTML5)
Canvas is a new tag added in HTML5. It serves as a container for graphics and requires script writing to contain graphics.
19.1 Property
Property Description
id The ID of the component is assigned as a global object, and the component can be accessed with the ID in the script.
19.2 Browser Capture Screen
Figure 19-1.01
19.3 CSS Overriding
Figure 19-2.02
No Class Description
1 inline Edit the style directly in the style editor of websquare.
19.4 Precautions and Tips
As an additional element in HTML5, there are no separate attributes for websquare components, and if necessary, attributes can be added with the Attribute Add button.",153
519,"InputCalendar는 달력 컴포넌트와 Input 컴포넌트를 그룹화시킨 복합 컴포넌트입니다. 달력에서 선택한 날짜가 Input 컴포넌트에 출력됩니다. 달력 이미지를 출력하여 날짜를 선택할 수 있는 인터페이스를 제공하는 컴포넌트로 5가지의 디자인을 제공하고 있습니다. 달력의 종류는 3가지로, 년월, 년월일, 년월일시간을 나타낼 수 있습니다. 날짜 선택 시, 발생하는 이벤트 ondateselect(dateStr, dateObj)에서 선택된 날짜로 액션을 취할 수 있습니다. 이 컴포넌트는 table Tag를 이용하여 구성되어 있으며, InputBox와 관련된 것을 제외하고 InputCalendar와 동일한 속성을 가지고 있습니다. 단, 직접적인 날짜 입력은 불가능합니다.",286
520,"달력 컴포넌트를 사용할 때, 연도만 표시하고 싶을 경우 $blank를 사용합니다. calendarClass 프로퍼티는 팝업으로 뜨는 캘린더에 대한 클래스를 정의합니다. calendarValueType 프로퍼티는 캘린더에서 선택 가능한 값의 종류를 정의합니다. maxYear/minYear 프로퍼티는 선택 가능한 최대/최소 연도를 정의합니다. yearStartsOn 프로퍼티는 주의 시작 요일을 정의합니다. class를 이용해서 캘린더의 이미지를 변경할 수 있습니다. 웹 접근성을 고려하여 renderType 속성을 native로 설정하고, title 속성을 명확하게 기술해야 합니다. CSS Overriding을 사용하여 사용자 정의 클래스를 적용할 수 있습니다.",240
521,"WebSquare.uiplugin.dataList는 다건의 데이터를 저장하는 객체로, Column Info 영역과 Data 영역으로 나뉘어 있다. Column Info 영역은 column의 정보가 있으며 id 속성에 column의 이름을 정의한다. Data 영역은 column의 초기값을 정의하는 곳이다. DataList는 row 마다 사용자 제어에 따른 삽입/수정/삭제 등의 상태값을 가지고 있으며 getter API로 상태별 데이터를 꺼내올 수 있다. Event와 Method를 통해 동적으로 할당 및 제어가 가능하다. 이외에도 다양한 속성들이 존재하며, XML 데이터 타입에만 적용되는 속성도 있다.",201
522,"getColumnDistinctDataArray( column ) : 지정한 컬럼에서 중복된 데이터를 제거하고 오름차순으로 정렬된 데이터를 배열로 반환한다.
getColumnID( colIndex ) : DataList에 정의된 컬럼의 index를 받아 컬럼의 ID를 반환한다.
getColumnIndex( colID ) : DataList에 정의된 컬럼의 ID를 받아 컬럼의 index를 반환한다.
getColumnInfo( columnID ) : DataList에서 특정 column의 세부 정보를 조회한다.
getColumnName( columnInfo ) : DataList에 정의된 컬럼의 index 또는 ID를 받아 컬럼에 정의된 name을 반환한다.
getDataRow( rowIndex ) : rowIndex에 해당하는 행의 데이터를 컬럼의 ID를 key로 하는 Hash 형태로 반환한다.
getDeletedArray( ) : 삭제 상태(상태값:D,E,V)인 행들의 정보가 담긴 JSON을 반환한다.
getDeletedData( ) : 삭제 상태(상태값:D,E,V)인 행들의 데이터가 담긴 2차원 배열을 반환한다.
getDeletedIndex( ) : 삭제 상태(D,V,3,4)인 행의 index를 배열로 반환한다.
getDeletedJSON( ) : 삭제 상태(상태값:D,E,V)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.
getDeletedXML( ) : 삭제 상태(상태값:D,E,V)인 행들의 데이터를 XML로 반환한다.
getFilteredColData( colInfo ) : filter 및 sort가 적용된 열의 데이터를 배열로 반환한다.
getFilteredRowIndex( realRowIndex ) : 필터링된 상태의 행 인덱스를 반환한다.
getFilterList( ) : 필터링된 dataList의 컬럼 별 필터링 상태를 반환한다.
getFusionChartData( chartType, labelNode, seriesColumns ) : dataList를 fusionChart의 json데이터로 반환한다.
getFusionChartSimpleData( chartType, labelNode, seriesNode, valueNode ) : DataList의 데이터를 fusionChart의 simple모드인 singleSerise, multiSeries 차트의 JSON데이터로 반환한다.
getID( ) : dataList 객체의 id를 반환한다.
getInfo( ) : dataList의 세부 정보를 조회한다.
getInsertedArray( ) : 삽입 상태(상태값:C)인 행들의 정보가 담긴 JSON을 반환한다.
getInsertedData( ) : 삽입 상태(상태값:C)인 행들의 데이터가 담긴 2차원 배열을 반환한다.
getInsertedIndex( ) : 삽입 상태(상태값:C)인 행의 index를 배열에 담아 반환한다.
getInsertedJSON( ) : 삽입 상태(상태값:C)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.
getInsertedXML( ) : 삽입 상태(상태값:C)인 행들의 데이터를 XML로 반환한다.
getMatchedArray( colInfo, dataValue, exactMatch, stRowIndex, lastRowIndex ) : stRowIndex부터 lastRowIndex까지의 범위의 행 중에서 colInfo에 해당하는 값이 dataValue와 같은 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다.
getMatchedColumnData( matchCol, dataValue, targetCol, exactMatch, stRowIndex, lastRowIndex ) : stRowIndex부터 lastRowIndex까지의 범위의 행 중에서 matchCol에 해당하는 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 값을 1차원 배열로 반환한다.
getMatchedData( colInfo, dataValue, exactMatch, stRowIndex, lastRowIndex ) : stRowIndex부터 lastRowIndex까지의 범위의 행 중에서 colInfo의 값이 dataValue와 같은 행들의 data를 2차원 배열로 반환한다.
getMatchedIndex( conInfo, dataValue, exactMatch, stRowIndex, lastRowIndex ) : stRowIndex부터 lastRowIndex까지의 범위의 행 중에서 conInfo의 값이 dataValue와 같은 행들의 index를 반환한다.
getMatchedJSON( colInfo, dataValue, exactMatch, stRowIndex, lastRowIndex ) : stRowIndex부터 lastRowIndex까지의 범위의 행 중에서 colInfo의 값이 dataValue와 같은 행들의 JSON 데이터를 배열에 담아 반환한다.
getMatchedXML( colInfo, dataValue, exactMatch, stRowIndex, lastRowIndex ) : stRowIndex부터 lastRowIndex까지의 범위의 행 중에서 colInfo의 값이 dataValue와 같은 행들의 data를 XML로 반환한다.
getModifiedArray( ) : 변경 상태(상태값:C,U,D,E)행들의 정보가 담긴 JSON을 반환한다.
getModifiedData( ) : 변경 상태(상태값:C,U,D,E)행들의 데이터를 배열로 반환한다.
getModifiedIndex( ) : 변경 상태(상태값:C,U,D)행들의 index를 배열로 반환한다.
getModifiedJSON( options ) : 데이터가 삽입, 갱신, 삭제, 제거된 상태(U,C,D,E,1,2,3,5)의 행들의 데이터를 JSON으로 변환하여 1차원 배열에 담아 반환한다.
getModifiedXML( options ) : 데이터가 삽입, 갱신, 삭제, 제거된 상태(U,C,D,E,1,2,3,5)의 행들의 데이터를 XML로 반환한다.
getObjectType( ) : dataCollection의 Type을 반환한다.
getOnlyDeletedArray( ) : 삭제 상태(상태값:D,E)행들의 정보를 담은 JSON을 반환한다.
getOnlyDeletedData( ) : 삭제 상태(상태값:D,E)행들의 배열 데이터를 배열에 담아 반환한다.
getOnlyDeletedIndex( ) : 삭제 상태(상태값:D)행등의 index를 배열로 반환한다.
getOnlyDeletedJSON( ) : 삭제 상태(상태값:D,E)행들의 JSON 데이터를 배열에 담아 반환한다.
getOnlyDeletedXML( ) : 삭제 상태(상태값:D,E)행들의 데이터를 XML로 반환한다.
getOption( attr ) : 속성명으로 dataList에 정의된 속성의 값을 반환한다.
getOriginalCellData( rowIndex, colIndex ) : rowIndex와 colInfo에 해당하는 셀의 초기 데이터(최초에 설정된 데이터)를 반환한다.
getParentRowIndex( rowIndex ) : drilldown 사용 시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환한다.
getRangeArray( fromIdx, toIdx ) : fromIdx부터 toIdx까지 범위의 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다.
getRangeData( from, to ) : from부터 to까지의 범위의 행의 data를 1차원 배열로 반환한다.
getRangeJSON( from, to ) : from부터 to까지의 범위의 행의 JSON data를 담은 1차원 배열을 반환한다.
getRangeXML( from, to ) : from부터 to까지의 범위의 행의 data를 XML로 반환한다.
getRealRowIndex( ) : 실제 Row Index를 반환한다.
getRecursiveRowIndex( ) : depthColumn 사용 시 Row Index 하위의 모든 Row의 인덱스를 배열로 반환한다.
getRowArray( rowIndex ) : rowIndex에 해당하는 행들의 정보가 담긴 JSON을 반환한다.
getRowCount( ) : 화면에 보여지는 row의 건수를 반환하며 필터가 걸려있거나 GridView에 drilldown이 적용되어 있는 경우 접혀져 있는 데이터의 행의 수는 포함되지 않",1869
523,"col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 정보를 JSON으로 반환하는 함수 getUnmatchedArray()를 정의합니다. matchCol에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 컬럼의 데이터들을 배열로 반환하는 함수 getUnmatchedColumnData()를 정의합니다. col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 data를 배열 변환하여 배열에 담아 반환하는 함수 getUnmatchedData()를 정의합니다. col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 index를 배열로 반환하는 함수 getUnmatchedIndex()를 정의합니다. col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 data를 JSON으로 변환하여 배열에 담아 반환하는 함수 getUnmatchedJSON()를 정의합니다. col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 데이터를 XML로 반환하는 함수 getUnmatchedXML()를 정의합니다. 갱신 상태(1,U)인 행들의 데이터의 정보는 JSON으로 반환하는 함수 getUpdatedArray(), 갱신 상태(1,U)인 행들의 배열 데이터를 배열에 담아 반환하는 함수 getUpdatedData(), 갱신 상태(1,U)인 행의 index를 배열로 반환하는 함수 getUpdatedIndex(), 갱신 상태(1,U)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환하는 함수 getUpdatedJSON(), 갱신 상태(1,U)인 행들의 데이터를 XML로 반환하는 함수 getUpdatedXML(), 삽입 후 삭제 상태(4,V)인 행들의 정보가 담긴 JSON을 반환하는 함수 getVoidArray(), 삽입 후 삭제 상태(4,V)인 행들을 배열 데이터를 배열에 담아 반환하는 함수 getVoidData(), 삽입 후 삭제 상태(4,V)인 행의 index를 배열로 반환하는 함수 getVoidIndex(), 삽입 후 삭제 상태(4,V)인 행들의 JSON 데이터를 배열에 담아 반환하는 함수 getVoidJSON(), 삽입 후 삭제 상태(4,V)인 행들의 데이터를 XML로 반환하는 함수 getVoidXML(), dataList의 상태를 모두 ""R""로 변경하는 함수 initRowStatus(), rowIndex에 다건의 row를 1차원 Array로 삽입하는 함수 insertData(), rowIndex에 다건의 row를 JSON 객체로 삽입하는 함수 insertJSON(), rowIndex에 1건의 row를 삽입하는 함수 insertRow(), rowIndex에 다건의 row를 XML 데이터로 삽입하는 함수 insertXML(), JSON Data를 append할 때 이전에 설정된 rowPosition값을 유지할지 여부를 설정하는 함수 keepRowPosition(), 모든 행의 상태를 변경하는 함수 modifyAllStatus(), col에 해당하는 컬럼의 데이터와 dataValue의 값이 일치된 행의 상태를 변경하는 함수 modifyMatchedStatus(), from부터 to까지의 범위의 행들의 상태를 변경하는 함수 modifyRangeStatus(), rowIndex에 해당하는 행의 상태를 변경하는 함수 modifyRowStatus(), option에 따라서 여러개의 컬럼을 정렬하는 함수 multisort(), 데이터를 변경된 시점 최근 한단계로 되돌리는 함수 redo(), DataList의 originalData를 현재의 데이터로 바꾸고 모든 행의 상태를 초기화(R)하는 함수 reform(), DataList의 모든 데이터를 삭제하고 삭제된 Data를 1차원 배열로 반환하는 함수 removeAll(), col에 해당하는 컬럼에 적용된 filter를 삭제하는 함수 removeColumnFilter(), 모든 컬럼에 적용된 filter를 삭제하는 함수 removeColumnFilterAll(), startIdx와 endIdx사이의 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환하는 함수 removeRange(), rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환하는 함수 removeRow(), 다건의 row를 index가 담긴 배열을 통해 한번에 삭제하고 가지고 있던 data를 2차원 배열로 반환하는 함수 removeRows(), 데이터를 이전 한단계로 되돌리는 함수 restore(), rowIndex에 해당하는 row을 하나 아래로 내려주는 함수 rowMoveDown(), rowIndex에 해당하는 row를 하나 위로 올려주는 함수 rowMoveUp(), 1차원 배열의 데이터를 columnInfo의 컬럼 순서대로 DataList에 set하는 함수 setArray(), dataList 변경시 binding된 컴포넌트에 변경 여부를 알려줄지를 설정하는 함수 setBroadcast(), 필터링 되지 않은 rowIndex를 기준으로 setCellData를 실행하는 함수 setCellAllData(), rowIndex와 colIndex에 해당하는 셀에 data를 셋팅하는 함수 setCellData(), colIndex에 해당하는 열의 기본값을 defaultValue로 설정하는 함수 setColumnDefaultValue(), colIndex에 해당하는 컬럼에 필터링을 적용하는 함수 setColumnFilter(), 1차원 배열 데이터를 set 또는 append하는 함수 setData(), dataList column의 ignoreStatus 속성을 동적으로 제어하는 함수 setIgnoreStatus(), JSON Data를 설정(set)하거나 추가(append)하는 함수 setJSON(), getMatched류 (getMatchedJSON, getMatchedIndex 등)의 API 호출 시 대소문자를 구별하지 않을지 (true) 구별할지(false)를 설정하는 함수 setMatchIgnoreCase(), rowIndex에 해당하는 행에 1건(row)의 배열 데이터를 넣는 함수 setRowArray(), rowIndex에 해당하는 행에 1건(row)의 배역 데이터를 넣는 함수 setRowData",1501
524,"과거 엔진의 오작동으로 인해 하위 호환을 위해 만든 옵션으로, removeRow API로 삭제한 데이터의 상태값이 C에서 E로 바뀐 데이터까지 관리할지 여부를 설정하는 옵션입니다. saveRemovedData 속성이 true일 때만 의미가 있으며, removeDummyRowStatus 값이 true인 경우 insertRow했다가 removeRow한 데이터는 관리하지 않습니다. repeatNode는 DataType이 XML일 경우에만 적용되며, 데이터를 XML로 변환 시 반복이 되는 Data의 노드로 정의할 XPath를 명시합니다. rowNumData는 엔진 내부에서 row의 순서(index+1)를 rowNum 속성(key)으로 할당하여 반환할지의 여부를 설정하는 옵션입니다. rowStatusNodeName은 json 또는 xml형태로 data를 가져올 때 rowStatus 키(노드) 이름을 설정하는 기능입니다. saveRemovedData는 removeRow API로 삭제한 데이터의 상태값이 E인 데이터를 관리할지의 여부를 설정하는 옵션입니다. sortType은 dataList sort시 데이터 정렬 기준을 설정하는 옵션으로, numberFirst, dataType, number, text, bigDecimal 중 하나를 선택할 수 있습니다. undoRecursiveRow는 drilldown컬럼에서 undoRow 함수 실행 시, 대상이 되는 rowIndex와 해당 rowIndex 하위의 모든 rowIndex들도 undoRow 함수가 실행되도록 설정하는 옵션입니다. userData1, userData2, userData3는 사용자 정의 데이터 속성으로, getUserData API를 통해 설정한 값을 얻어올 수 있습니다. validateAllItemsetData는 dataList가 특정 컴포넌트의 itemset과 연동된 상태에서 filter가 된 경우에도 모든 데이터를 대상으로 validation할지에 대한 여부를 설정하는 옵션입니다. valueAttribute는 DataType이 XML일 경우에만 적용되며, 실 데이터를 attribute(속성)에 할당할 때 사용됩니다. onaftercolumnfilterchange, onbeforecelldatachange, onbeforecolumnfilterchange, onbeforerowpositionchange, oncelldatachange, ondataload, oninsertrow, onremoverow는 각각 DataList에서 발생하는 이벤트를 설정하는 옵션입니다.",562
525,"bind(eventType, function) : dataList의 이벤트를 동적으로 할당한다. eventType은 이벤트의 이름, function은 이벤트의 핸들러 함수이다. clearFilter() : 현재 dataList에 적용된 필터링을 모두 해제한다. clearSort() : Data의 정렬을 취소하며 GridView 컴포넌트의 정렬도 함께 취소된다. deleteRow(rowIndex) : rowIndex에 해당하는 행이 삭제되지 않으며 상태 값만 삭제(D)로 변경된다. deleteRows(rowIndexArr) : 다건의 row를 index가 담긴 배열을 통해 한번에 삭제(D)로 변경하고 가지고 있던 data를 2차원 배열로 반환한다. getAllArray() : DataList의 전체 data를 column의 정보와 1차원 배열로 변환 된 실 Data를 JSON에 담아 반환한다. getAllData() : DataList의 전체 data를 1차원 배열로 반환한다. getAllFilteredData() : filter가 적용된 데이터 전체를 array로 반환한다. getAllFilteredJSON() : filter가 적용된 데이터 전체를 JSON이 담긴 배열로 반환한다. getAllFilteredXML() : filter가 적용된 데이터 전체를 XML로 반환한다. getAllJSON() : DataList의 1row의 값을 JSON으로 변환하여 전체 data를 1차원 배열에 담아 반환한다. getAllXML() : DataList의 전체 data를 XML로 반환한다. getCellAllData(realRowIndex, colInfo) : 필터링 되지 않은 rowIndex를 기준으로 getCellData를 실행한다. getCellData(rowIndex, colInfo) : rowIndex와 colInfo(컬럼의 index 또는 ID)에 해당하는 셀의 데이터를 반환한다. getColData(colInfo) : 컬럼의 index 또는 ID에 해당하는 열의 데이터(filter나 sort가 적용 되지 않은)를 배열로 반환한다. getColumnDistinctDataArray(column) : 지정한 Index 또는 ID에 해당하는 컬럼에서 중복된 데이터를 제거한 후, 오름차순으로 정렬된 data를 배열로 반환한다. getColumnID(colIndex) : DataList에 정의 된 컬럼의 index를 받아 컬럼의 ID를 반환한다. getColumnIndex(colID) : DataList에 정의 된 컬럼의 ID를 받아 컬럼의 index를 반환한다. onremoverow : removeRow나 removeRows 함수를 호출하여 row가 삭제되면 발생한다. onrowpositionchange : DataList의 rowPosition이 변경된 경우 발생한다.",639
526,"colID: 그리드 컬럼 id를 반환하는 함수
getColumnInfo: 특정 column의 attribute를 표현한 json객체를 반환하는 함수
getColumnName: 컬럼의 index 또는 ID를 받아 컬럼에 정의된 name을 반환하는 함수
getDataRow: rowIndex에 해당하는 행의 데이터를 컬럼의 ID를 key로 하는 Hash형태로 반환하는 함수
getDeletedArray: 삭제 상태(상태값:D,E,V)인 행들의 정보가 담긴 JSON을 반환하는 함수
getDeletedData: 삭제 상태(상태값:D,E,V)인 행들의 데이터가 담긴 2차원 배열을 반환하는 함수
getDeletedIndex: 삭제 상태(D,V,3,4)인 행의 index를 배열로 반환하는 함수
getDeletedJSON: 삭제 상태(상태값:D,E,V)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환하는 함수
getDeletedXML: 삭제 상태(상태값:D,E,V)인 행들의 데이터를 XML로 반환하는 함수
getFilteredColData: filter 및 sort가 적용된 열의 데이터를 배열로 반환하는 함수
getFilteredRowIndex: 필터링된 상태의 행 인덱스를 반환하는 함수
getFilterList: 필터링된 dataList의 컬럼 별 필터링 상태를 반환하는 함수
getFusionChartData: dataList를 fusionChart의 json데이터로 반환하는 함수
getFusionChartSimpleData: DataList의 데이터를 fusionChart의 simple모드인 singleSerise, multiSeries 차트의 JSON데이터로 반환하는 함수
getID: dataList 객체의 id를 반환하는 함수
getInfo: dataList의 세부 정보를 조회하는 함수",418
527,"dataList1은 dataListInfo와 columnInfo를 가진 JSON 객체이다. getInsertedArray()는 상태값이 C인 행들의 정보가 담긴 JSON을 반환하며, getInsertedData()는 상태값이 C인 행들의 데이터가 담긴 2차원 배열을 반환한다. getInsertedIndex()는 상태값이 C인 행들의 index를 배열에 담아 반환하며, getInsertedJSON()은 상태값이 C인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다. getInsertedXML()은 상태값이 C인 행들의 데이터를 XML로 반환한다. getMatchedArray()는 범위 내에서 colInfo에 해당하는 값이 dataValue와 같은 행들의 컬럼 정보 및 data를 담은 JSON을 반환하며, getMatchedColumnData()는 범위 내에서 matchCol에 해당하는 값이 dataValue와 같은 행들의 targetCol 값을 1차원 배열로 반환한다. getMatchedData()는 범위 내에서 colInfo의 값이 dataValue와 같은 행들의 data를 2차원 배열로 반환하며, getMatchedIndex()는 범위 내에서 conInfo의 값이 dataValue와 같은 행들의 index를 배열로 반환한다. getMatchedJSON()은 범위 내에서 colInfo의 값이 dataValue와 같은 행들의 JSON 데이터를 배열에 담아 반환하며, getMatchedXML()은 범위 내에서 colInfo의 값이 dataValue와 같은 행들의 데이터를 XML로 반환한다. getModifiedArray()는 상태값이 C, U, D, E인 행들의 정보가 담긴 JSON을 반환하며, getModifiedData()는 상태값이 C, U, D, E인 행들의 데이터를 배열로 반환한다. getModifiedIndex()는 상태값이 C, U, D인 행들의 index를 배열로 반환한다.",471
528,"dataList1은 데이터를 관리하는 객체이다. 이 객체에서 제공하는 메소드들은 데이터를 다양한 형태로 반환하거나, 데이터의 상태를 확인하는 등의 기능을 제공한다. getModifiedIndex() 메소드는 변경된 행들의 index를 1차원 배열로 반환하고, getModifiedJSON() 메소드는 변경된 행들의 JSON 데이터를 1차원 배열로 반환한다. getModifiedXML() 메소드는 변경된 행들의 데이터를 XML로 반환한다. getObjectType() 메소드는 dataList1의 타입을 반환한다. getOnlyDeletedArray() 메소드는 삭제된 행들의 정보를 담은 JSON을 반환하고, getOnlyDeletedData() 메소드는 삭제된 행들의 배열 데이터를 배열에 담아 반환한다. getOnlyDeletedIndex() 메소드는 삭제된 행들의 index를 배열로 반환하고, getOnlyDeletedJSON() 메소드는 삭제된 행들의 JSON 데이터를 배열에 담아 반환한다. getOnlyDeletedXML() 메소드는 삭제된 행들의 데이터를 XML로 반환한다. getOption() 메소드는 dataList1에 정의된 속성의 값을 반환한다. getOriginalCellData() 메소드는 rowIndex와 colIndex에 해당하는 셀의 초기 데이터를 반환한다. getParentRowIndex() 메소드는 drilldown 사용 시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환한다. getRangeArray() 메소드는 fromIdx부터 toIdx 까지 범위의 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다. getRangeData() 메소드는 from부터 to 까지의 범위의 행의 data를 1차원 배열로 반환한다. getRangeJSON() 메소드는 from부터 to 까지의 범위의 행의 JSON data를 담은 1차원 배열을 반환한다. getRangeXML() 메소드는 from부터 to 까지의 범위의 행의 data를 XML로 반환한다. getRealRowIndex() 메소드는 실제 Row Index를 반환한다. getRecursiveRowIndex() 메소드는 depthColumn 사용 시 Row Index 하위의 모든 Row의 인덱스를 배열로 반환한다. getRowArray() 메소드는 rowIndex에 해당하는 행들의 정보가 담긴 JSON을 반환한다.",571
529,"DataList API는 DataList 객체에서 사용할 수 있는 다양한 함수를 제공합니다. getRowCount() 함수는 화면에 보여지는 row의 건수를 반환하며, getTotalRow() 함수는 전체 데이터의 row 건수를 반환합니다. getRowData(rowIndex) 함수는 rowIndex에 해당하는 행의 데이터를 배열로 반환하고, getRowJSON(rowIndex) 함수는 rowIndex에 해당하는 행의 데이터를 JSON 객체로 반환합니다. getRowStatus(rowIndex) 함수는 rowIndex에 해당하는 행의 상태를 코드(문자)로 반환하며, getRowStatusValue(rowIndex) 함수는 rowIndex에 해당하는 행의 상태를 숫자로 반환합니다. getRowXML(rowIndex) 함수는 rowIndex에 해당하는 행의 데이터를 XML로 반환합니다. getScope() 함수는 컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하며, getScopeWindow() 함수는 컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope 객체를 반환합니다. getTotalCol() 함수는 DataList에 정의된 컬럼 수를 반환하고, getUnmatchedArray(col, dataValue, exactMatch, stRowIndex, lastRowIndex) 함수는 col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 정보를 JSON으로 변환하여 반환합니다. getUnmatchedColumnData(matchCol, dataValue, targetCol, exactMatch, stRowIndex, lastRowIndex) 함수는 matchCol에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 컬럼의 데이터들을 배열로 반환합니다. getUnmatchedData(col, dataValue, exactMatch, stRowIndex, lastRowIndex) 함수는 col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위 중에서 데이터가 dataValue와 다른 행들의 data를 배열 변환하여 배열에 담아 반환합니다.",515
530,"DataList 객체의 다양한 메소드들에 대한 설명이다. getUnmatchedData(), getUnmatchedIndex(), getUnmatchedJSON(), getUnmatchedXML(), getUpdatedArray(), getUpdatedData(), getUpdatedIndex(), getUpdatedJSON(), getUpdatedXML(), getVoidArray(), getVoidData(), getVoidIndex(), getVoidJSON(), initRowStatus(), insertData(), insertJSON() 등이 있다. 각 메소드들은 다양한 파라미터를 받아서 처리하며, 반환값도 다양하다. 예를 들어, getUnmatchedData() 메소드는 컬럼의 rowIndex 범위 중에서 dataValue와 다른 행들의 데이터를 2차원 배열로 반환한다. 이와 같이 각 메소드들은 다양한 기능을 수행하며, DataList 객체를 다룰 때 유용하게 사용될 수 있다.",214
531,"insertJSON(rowIndex, dataObjArray) : rowIndex 위치에 dataObjArray에 있는 JSON 객체를 담고 있는 1차원 배열을 삽입한다. insertRow(rowIndex) : rowIndex 위치에 1건의 row를 삽입한다. insertXML(rowIndex, dataObjXML) : rowIndex 위치에 dataObjXML에 있는 XML 데이터를 삽입한다. keepRowPosition() : JSON 데이터를 append할 때 이전에 설정된 rowPosition 값을 유지할지 여부를 설정한다. modifyAllStatus(status) : 모든 행의 상태를 변경한다. modifyMatchedStatus(col, dataValue, status) : col에 해당하는 컬럼의 데이터와 dataValue의 값이 일치하는 행의 상태를 변경한다. modifyRangeStatus(from, to, status) : from부터 to까지의 범위의 행들의 상태를 변경한다. modifyRowStatus(rowIndex, status) : rowIndex에 해당하는 행의 상태를 변경한다. multisort(options) : option에 따라서 여러 개의 컬럼을 정렬한다. redo() : 데이터를 변경된 시점 최근 한 단계로 되돌린다. reform() : DataList의 originalData를 현재의 데이터로 바꾸고 모든 행의 상태를 초기화한다. removeAll() : DataList의 모든 데이터를 삭제하고 삭제된 Data를 1차원 배열로 반환한다. removeColumnFilter(col) : col에 해당하는 컬럼에 적용된 filter를 삭제한다. removeColumnFilterAll() : 모든 컬럼에 적용된 filter를 삭제한다. removeRange(startIdx, endIdx) : startIdx와 endIdx 사이의 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환한다. removeRow(rowIndex) : rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환한다. removeRows(rowIndexArr) : 다건의 row를 index가 담긴 배열을 통해 한 번에 삭제하고 가지고 있던 data를 2차원 배열로 반환한다. restore() : 데이터를 이전 한 단계로 되돌린다. rowMoveDown(rowIndex) : rowIndex에 해당하는 row을 하나 아래로 내려준다. rowMoveUp(rowIndex) : rowIndex에 해당하는 row을 하나 위로 올려준다.",568
532,"함수명: setArray
- jsonData: 컬럼 정보와 1차원 배열 데이터를 담고 있는 JSON
- columnInfo: 데이터를 셋팅할 컬럼의 순서
- data: columnInfo에 따른 컬럼의 데이터로 전체 데이터를 1차원 배열에 담는다.
- appendString: [default:false, true] append 여부
함수명: setData
- arr: 1차원 배열 데이터
- append: [default:false, true] append 여부
- columnArr: 데이터를 셋팅할 컬럼의 id가 담긴 배열
- rowStatus: 셋팅할 데이터의 rowStatus들을 담은 1차원 배열
함수명: setColumnDefaultValue
- colIndex: 열의 index 또는 id
- defaultValue: 열에 설정할 기본값
함수명: setColumnFilter
- filterOptions: 필터링 옵션
- filterOptions.type: [row, func, regExp] 필터 타입
- filterOptions.colIndex: 필터를 적용할 컬럼의 인덱스 혹은 ID
- filterOptions.key: 필터의 적용 Data로 type에 정의한 값에 따라 달라짐
- filterOptions.condition: [and, or] 이전 필터 데이터와의 병합 조건. 초기에는 ""and""로 정의를 해야함
- filterOptions.exactMatch: [true, false] row filter에서 equal 조건 검색 수행
- filterOptions.param: key의 값이 ""func""일 때 함수로 넘길 파라미터
함수명: setCellData
- rowIndex: 행 index
- colIndex: 컬럼 index 또는 id
- data: 셀에 넣어줄 데이터
함수명: setCellAllData
- realRowIndex: 필터링되지 않은 기준의 rowIndex
- colIndex: 컬럼 index 또는 id
- data: 셀에 넣어줄 데이터
함수명: rowIndex
- rowIndex: Yrow의 index
함수명: setBroadcast
- flag: [true, false] 설정 여부
- refresh: [true, false] refresh 여부",540
533,"dataList1.setData([""송지효"",""김상중""],false,[""name""],[""U"", ""D""]); //server에서 배열 형태의 문자열을 받은 경우
var tmpStr = ""송지효%||%홍보%||%김상중%||%준법감시"";
var tmpArr = tmpStr.split(""%||%"");
dataList1.setData(tmpArr); //server에서 배열 형태의 문자열을 받은 경우 다음과 같은 형태일 때 문자열을 배열로 자동변환해준다.
var tmpStr = ""[\""송지효\"",\""홍보\"",\""김상중\"",\""준법감시\""]"";
dataList1.setData(tmpStr);
setIgnoreStatus(flag)
dataList의 column의 ignoreStatus 속성을 동적으로 제어한다.
setJSON(jsonData, append)
JSON Data를 설정(set)하거나 추가(append). (행의 상태는 초기상태인 ""R""로 변경됨.)
setMatchIgnoreCase(flag)
getMatched류 (getMatchedJSON, getMatchedIndex 등)의 API 호출 시 대소문자를 구별하지 않을지 (true) 구별할지(false)를 설정하는 함수
setRowArray(rowIndex, dataObj, overwrite)
owIndex에 해당하는 행에 1건(row)의 배열 데이터를 넣는다. overwrite가 false인 경우에 행을 생성한다.
setRowData(rowIndex, rowData, overwrite)
owIndex에 해당하는 행에 1건(row)의 배열 데이터를 넣는다. overwrite가 false인 경우에 행을 생성한다.
setRowJSON(rowIndex, rowData, overwrite)
owIndex에 해당하는 행에 1건(row)의 JSON 데이터를 넣는다. overwrite가 false인 경우에 행을 생성한다.
setRowNumData(flag)
DataList의 get관련 API의 return 데이터의 type이 JSON, XML일 경우 row의 number값을 추가 할지 설정.
setRowPosition(position, noEvent)
DataList와 연동된 컴포넌트에서 선택할 행의 위치를 설정합니다. 단, ref 속성을 통해 연동되는 Input과 같은 단일 컴포넌트와 바인딩된 경우에만 사용하십시오.
setRowXML(rowIndex, XML, overwrite)
owIndex에 해당하는 행에 1건(row)의 XML 데이터를 넣는다. overwrite가 false인 경우에 행을 생성한다.
setXML(xmlData, append)
XML Data를 설정(set)하거나 추가(append). (행의 상태는 초기상태인 ""R""로 변경됨.)
sort(bodyColumnID, sortType)
단건의 컬럼을 정렬한다. (다건의 경우 multisort API를 이용) 본 API는 dataType에 상관없이 text로 간주하여 정렬이 된다.",682
534,"multisort API를 사용하여 number 타입의 컬럼을 정렬할 수 있습니다. trigger 함수를 사용하여 dataList에 등록된 이벤트를 발생시키고, unbind 함수를 사용하여 이벤트를 동적으로 제거할 수 있습니다. undeleteRow 함수를 사용하여 삭제 상태를 취소하고, undoAll 함수를 사용하여 전체 데이터를 초기 설정된 데이터로 바꾸고 행의 상태를 초기화할 수 있습니다. undoRow 함수를 사용하여 특정 행의 데이터와 상태값을 직전 데이터와 상태값으로 변경할 수 있습니다.",153
535,"본문 요약: 웹 접근성에 대한 가이드 문서인 ""Web Accessibility OPS""의 백매터 01.html 파일에 대한 안내입니다.
""Web Accessibility OPS""는 웹 접근성을 개선하기 위한 가이드 문서입니다. 이 문서의 백매터 01.html 파일은 웹 접근성을 개선하는 방법과 관련된 정보를 제공합니다. 이 파일은 웹 접근성을 개선하기 위한 다양한 기술과 방법을 설명하며, 웹 접근성을 개선하는 데 필요한 지침과 권장 사항을 제공합니다.
이 파일은 웹 개발자와 디자이너, 웹 접근성 전문가 등 모든 이용자들이 웹 접근성을 개선하는 데 도움이 될 수 있도록 작성되었습니다. 이 파일을 참고하여 웹 사이트나 애플리케이션을 개발할 때 웹 접근성을 고려하면서 개발할 수 있습니다.",299
536,"WebSquare.uiplugin.repeat는 데이터 갯수만큼 컴포넌트를 자동 생성하는 컴포넌트이다. Repeat 내에 Group을 그려 반복될 컴포넌트를 설정하고, Group의 position은 relative로 설정하여 사용한다. 사용 불가 컴포넌트는 Chart, Grid, Menu, Switch, TabContainer, Treeview, WindowContainer이다. Repeat를 사용하는 대신 Generator를 사용하는 것이 권장된다. Repeat의 속성으로는 autoCount, repeatKey, class, cols, direction, id, nodeset, rows, tabIndex, tooltip, tooltipLocaleRef, userData1, userData2, userData3이 있다. Repeat의 이벤트로는 onrepeatdone이 있다. Repeat의 메소드로는 addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getInstanceValue, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getRepeat, getRepeatChildren, getRepeatIndex, getRepeatInstanceNode, getScope, getScopeWindow, getSibling, getSiblingId, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, init, invoke, refreshRepeat, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind, visible이 있다.",342
537,"각 컴포넌트는 ID를 통해 Script에서 접근 가능하며, nodeset을 반복할 때는 repeatKey 노드의 값을 저장하는 변수를 사용하고, tabIndex는 Tab 키를 이용하여 포커스를 변경할 때 해당 컴포넌트에 포커스를 주는 순서를 나타내며, tooltip은 마우스 오버 시 표시되는 텍스트를 의미한다. userData1~3은 사용자 정의 데이터 속성으로, 각각의 값을 getUserData() API를 통해 얻어올 수 있다. addClass(), bind(), changeClass(), focus()는 컴포넌트에 CSS class를 추가하거나 이벤트와 핸들러 함수를 동적으로 할당하며, getDisabled()는 현재 컴포넌트에 설정된 disabled 속성 값을 반환한다. getGenerator()는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하며, getID()는 컴포넌트의 ID를 반환한다. getInitStyle()은 컴포넌트의 초기 스타일을 반환하며, getInstanceValue()는 현재 컴포넌트가 참조하고 있는 instance nodeValue를 반환한다. getOpacity()는 컴포넌트의 불투명도를 반환하며, getOriginalID()는 컴포넌트의 originalID를 반환한다. getPluginName()은 컴포넌트의 이름(pluginName)을 반환하며, getPosition()은 컴포넌트의 위치(left, top)를 반환한다.",431
538,"getReadOnly( )는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. getRepeat( )는 현재 컴포넌트를 반복시키는 Repeat의 객체를 반환합니다. getRepeatChildren( originalId )는 Repeat로 반복된 컴포넌트의 child 객체를 반환합니다. getRepeatIndex( )는 현재 컴포넌트가 속한 반복부의 index를 반환합니다. getRepeatInstanceNode( )는 현재 컴포넌트가 속한 반복부가 참조하고 있는 instance node를 반환합니다. getScope( )는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 아닌 경우, null을 반환합니다. getScopeWindow( )는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 아닌 경우, 전역 window 객체를 반환합니다. getSibling( originalID )는 현재 컴포넌트와 동일 반복부에 존재하는 컴포넌트 객체를 반환합니다. getSiblingId( originalID )는 현재 컴포넌트와 동일 반복부에 존재하는 컴포넌트 id를 반환합니다. getSize( sizeName )은 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. getStyle( propertyName )은 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getStyleValue( style )은 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환합니다. getTitle( )은 컴포넌트의 title 속성 값을 반환합니다. getUdcHome( )은 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다. getUdcRoot( )은 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다.",518
539,"UDC 객체의 메소드 중 getUdcHome()은 UDC 파일 경로를 반환한다. getUserData(key)는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. hasClass(className)는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide()는 웹스퀘어 컴포넌트를 화면에서 숨긴다. init(options)는 하위의 컴포넌트를 초기화한다. invoke(funcName, param, options)는 컴포넌트 하위의 모든 컴포넌트의 함수를 동일하게 호출한다. refreshRepeat()는 ref로 바인딩된 컴포넌트를 갱신한다. removeClass(className)는 웹스퀘어 컴포넌트에서 class를 삭제한다. setDisabled(disabled)는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause(evList, flag)는 지정한 이벤트를 중단한다. setInitStyle(property)는 컴포넌트의 초기 스타일을 복구한다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition(left, top, mode)는 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setSize(width, height)는 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다.",437
540,"웹스퀘어 컴포넌트에서 사용되는 다양한 함수들이 소개되어 있습니다. setStyle 함수는 CSS 속성을 설정하고, setUserData 함수는 임의의 데이터를 설정합니다. show 함수는 웹스퀘어 컴포넌트를 화면에 표시하고, toggleClass 함수는 특정 class를 추가하거나 제거합니다. trigger 함수는 이벤트를 발생시키고, unbind 함수는 이벤트를 제거합니다. visible 함수는 CSS visibility 속성을 설정합니다. 이 중 visible 함수는 deprecated 되었으며, show/hide 혹은 setStyle 함수를 사용하는 것이 권장됩니다.",181
541,"WebSquare.uiplugin.selectbox는 선택 항목 목록을 표시하여 단일 선택을 지원하는 컴포넌트이다. HTML에서 <select> 태그와 같은 기능을 제공하며, <select> 대신 <div> 태그를 최상위에 두고 하위에 복합 태그를 사용한다. allOption, animation, appearance, chooseOption, chooseOptionLabel, chooseOptionLabelLocaleRef, class, closeonmouseleave, customFormatter, customLabelFormatter, dataListAutoRefresh, delimiter, depthColumn, depthColumnHeight, depthColumnPathDelimiter, depthColumnShowPath, depthColumnWidth, direction, disabled, disabledClass, displaymessage, displayMode, emptyItem, emptyValue, enableColumn, enableColumnFalseValue, escape, id, invalidMessage, invalidMessageFunc, itemTooltipDisplay, itemTooltipFormatter, keyMoveListSync, labelWidthAuto, mandatory, nextTabID, optionOrder, preventKeyList, preventWheelEvent, ref, refreshSelectedIndex, renderType, setDataRemoveAll, sortMethod, sortOption, submenuSize, tabIndex, textAlign, title, tooltip, tooltipClass, tooltipDisplay, tooltipLocaleRef, tooltipShowAlways, tooltipTime, useItemLocale, useLocale, userData1, userData2, userData3, valueNotInList, visibleColumn, visibleColumnFalseValue, visibleRowNum, wmode 등의 속성과 이벤트, 메소드를 제공한다. 선택 항목을 추가하거나 삭제하고, 이벤트와 핸들러 함수를 동적으로 할당할 수 있다. 또한, 컴포넌트에 CSS class를 추가하거나 변경할 수 있다.",384
542,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 목록입니다. 예를 들어, getOriginalID()는 웹스퀘어 컴포넌트의 originalID를 반환하며, getPluginName()은 웹스퀘어 컴포넌트의 이름을 반환합니다. getPosition(positionName)은 웹스퀘어 컴포넌트의 위치를 반환하고, getReadOnly()는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. 이외에도 다양한 기능들이 있으며, 각각의 기능들은 자세한 설명과 함께 제공됩니다. 또한, 선택 항목 목록을 커스텀할 수 있는 사용자 정의 함수나, 선택 대상 목록이 DataList와 바인딩된 경우 자동 갱신 여부 등 다양한 옵션들도 제공됩니다.",261
543,"delimiter 속성은 선택 항목의 value와 label을 함께 표시할 때 사용하는 구분자이며, displayMode 속성에서 참조된다. depthColumn 속성은 선택 항목 목록을 계층 구조로 보여줄 때 사용하는 속성으로, depthColumnWidth, depthColumnHeight, depthColumnShowPath, depthColumnPathDelimiter 등의 관련 속성이 있다. disabled 속성은 컴포넌트를 비활성화하는 기능이며, disabledClass 속성은 disabled=""true""인 경우 적용할 class 명을 지정한다. displaymessage 속성은 validate API의 검증 결과가 실패일 경우, 결과 메시지를 표시할지 여부를 결정한다. emptyItem 속성은 선택 항목에 없는 value나 index가 동적으로 설정되는 경우 빈 값으로 label과 value를 설정한다. emptyValue 속성은 emptyItem=""true""인 경우 설정한 value 값을 지정한다. enableColumn 속성은 선택 항목 목록에서 특정 항목을 disable 처리하는 기능이다.",279
544,"SelectBox 컴포넌트의 속성과 API에 대한 설명입니다. enableColumnFalseValue는 enableColumn 속성에서 사용되며, 해당 값이 반환될 경우 해당 행이 disable 처리됩니다. escape 속성은 HTML Escape 문자로 변환하여 화면에 표시합니다. id는 컴포넌트 ID를 할당하며, invalidMessage는 validate() 함수를 통해 검증 결과가 실패인 경우 표시되는 메시지입니다. itemTooltipDisplay는 아이템 목록에 대한 툴팁 표시 여부를 설정하며, keyMoveListSync는 키보드로 선택 항목 목록을 이동하면서 동시에 SelectBox의 값을 설정하는 기능을 사용합니다. mandatory는 필수 선택 적용 여부를 설정하며, optionOrder는 전체 항목과 선택 항목을 동시에 사용하는 경우 출력 순서를 설정합니다. preventKeyList는 웹스퀘어 엔진 내부에서 처리하는 키 동작을 막는 기능을 제공합니다. ref는 DataCollection의 value 경로를 설정하며, renderType은 브라우저에 표현될 레이아웃 구조를 설정합니다. sortMethod는 선택 항목 목록 정렬 방법을 설정하며, sortOption은 선택 항목 목록 정렬 기준을 설정합니다.",359
545,"선택 항목 목록 크기를 결정하는 sortMethod 속성은 ascending 또는 descending으로 설정할 수 있으며, submenuSize 속성은 fixed 또는 auto로 설정할 수 있습니다. textAlign 속성은 center, left, right 중 하나로 설정할 수 있으며, renderType이 native 또는 select인 경우에만 text-align이 지원 가능합니다. title 속성은 마우스 오버 시 툴팁으로 표시됩니다. tooltip 속성은 선택 항목 목록의 추가 정보를 명시하는 웹스퀘어가 제공하는 툴팁입니다. tooltipDisplay 속성은 선택한 값에 대한 툴팁 표시 여부를 설정하며, useItemLocale 속성은 다국어 사용 여부를 결정합니다. visibleColumn 속성은 선택 항목 목록에서 특정 항목을 감추는 기능을 제공하며, addClass 함수는 컴포넌트에 CSS class를 추가합니다. addItem 함수는 선택 항목을 추가합니다.",272
546,"selectbox1.addItem( value, label, index ) : 항목을 추가하는 함수. index를 지정하지 않으면 제일 마지막에 추가됨. 
bind( eventType , function ) : 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. 
changeChooseOption( newValue , newLabel ) : chooseOption 속성을 변경하는 함수. 
changeClass( oldClassName , newClassName ) : 컴포넌트의 class를 변경하는 함수. 
deleteItem( idx , refresh ) : 주어진 index에 해당하는 항목을 삭제하는 함수. 
focus( ) : 웹스퀘어 컴포넌트에 포커스를 줌. 
getDataListInfo( ) : 컴포넌트와 바인딩된 DataList를 반환하는 함수. 
getDisabled( ) : 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하는 함수. 
getGenerator( ) : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하는 함수. 
getID( ) : 웹스퀘어 컴포넌트의 ID를 반환하는 함수. 
getInitStyle( CSS ) : 컴포넌트의 초기 스타일을 반환하는 함수. 
getItemCount( ) : 선택 항목 개수를 반환하는 함수. 
getNextTabID( ) : nextTabID 속성의 설정 값을 반환하는 함수. 
getOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 반환하는 함수. 
getOriginalID( ) : 웹스퀘어 컴포넌트의 originalID를 반환하는 함수. 
getPluginName( ) : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하는 함수.",464
547,"getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.
getReadOnly( ) : 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환.
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.
getSelectedIndex( ) : 선택된 항목의 인덱스를 반환. chooseOption 및 allOption 속성이 적용된 경우 해당 항목도 인덱스에 포함됨.
getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환. %로 설정된 경우, 픽셀로 변환된 값을 반환.
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환.
getStyleValue( style ) : [deprecated] 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.
getText( isOriginal ) : 현재 선택된 항목의 label을 반환.
getTitle( ) : 컴포넌트의 title 속성 값을 반환.
getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환.
getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환. 파일명을 포함하지 않음.
getUserData( key ) : setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환.
getValue( ) : 선택된 항목의 value 값을 반환.
hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인.
hide( ) : 컴포넌트를 화면에서 보이지 않도록 숨김.
emoveAll( isInitialize ) : 모든 항목을 삭제하는 기능. chooseOption 및 allOption 항목이 정의 된 경우 isInitialize값을 true로 적용하면 해당 항목은 삭제되지 않음.
emoveClass( className ) : 웹스퀘어 컴포넌트에서 class를 삭제.",696
548,"웹스퀘어 컴포넌트의 class를 삭제하기 위해서는 addClass로 추가된 class만 삭제 가능하다. 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 removeDefaultClass 설정을 추가해야 한다. disabled 속성을 설정하여 컴포넌트를 비활성화할 수 있으며, enableColumn 속성을 사용하여 특정 항목을 disable 시킬 수 있다. 이벤트를 중단하거나 중단을 해제할 수 있으며, gridViewItemset을 변경하거나 초기 스타일을 복구할 수 있다. 위치, 불투명도, readOnly 속성, ref 속성, 크기를 설정할 수 있다. 선택 항목 목록을 설정하고, setSelectedIndex를 사용하여 인덱스에 해당하는 항목을 선택/해제할 수 있다.",226
549,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. 각 기능들은 파라미터와 함께 사용되며, 예제 코드를 통해 사용 방법을 보여줍니다. setSize() 함수는 컴포넌트의 크기를 설정하고, setStyle() 함수는 CSS 속성을 설정합니다. setText() 함수는 label을 선택하고, setTitle() 함수는 title 속성을 설정합니다. setUserData() 함수는 임의의 데이터를 설정하고, setValue() 함수는 선택 항목을 설정합니다. setVisibleColumn() 함수는 visibleColumn 속성을 설정하고, show() 함수는 컴포넌트를 화면에 표시합니다. toggleClass() 함수는 class를 추가하거나 제거하고, trigger() 함수는 이벤트를 발생시킵니다. unbind() 함수는 이벤트를 제거하고, validate() 함수는 유효성 검사를 실행합니다.",252
550,"유효성 검사 결과 객체에는 관련 속성, 유효성 관련 속성, Return typedescription, object 등이 있다. selectbox1.validateObject() 함수를 사용하여 selectbox의 값이 있는 경우 비어있는 객체가 반환되며, 값이 없는 경우 returnObj 객체가 반환된다. displaymessage=""true"" 설정을 사용하면 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시된다. visible(flag) 함수는 엔진 내부적으로 CSS visibility 속성을 설정하며, show/hide 혹은 setStyle 사용을 권장한다.",153
551,"WebSquare.collection은 HTML 컬렉션을 다루는 데 사용되는 엔진입니다. 이 엔진은 다양한 속성, 이벤트 및 메소드를 제공합니다.
속성 요약, 이벤트 요약, 메소드 요약을 확인할 수 있으며, 각각의 상세 정보도 제공됩니다. 
이 엔진을 사용하여 HTML 컬렉션을 조작할 수 있습니다.",118
552,"3.1.1 websquare.html 파일은 C:\websquare\plugins\com.inswave.websquare.webapp.engine_1.0.0.201712131047\websquare\websquare.html 경로에서 찾을 수 있습니다.
3.1.2 websquare.html 파일에서 기본 언어를 설정하려면 html xml:lang=""ko"" lang=""ko""와 같이 명시해야 합니다.
3.1.3 건너뛰기 링크(Skip Navigation)는 tab focus 이동 시 포함되어야 합니다. 레이아웃에 따라 GNB 메뉴, Left 메뉴, Container 영역 등으로 추가하여 링크를 연결해야 합니다. 위 코드를 참고하여 구현해 주세요.",190
553,"MultiSelect50은 여러 항목 중에서 항목을 selectbox의 형태로 선택할 수 있는 컴포넌트입니다. class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, dataListAutoRefresh는 multiselect의 선택 대상 목록이 DataList와 바인딩된 경우, addItem 혹은 deleteItem 함수 실행에 따른 DataList 자동 갱신 여부를 설정합니다. disabled는 HTML의 disabled 속성과 동일한 기능을 제공하며, escape는 특수문자를 HTML Escape 문자로 변환하여 화면에 표시합니다. nextTabID는 tab으로 이동시 이동할 컴포넌트 ID를 설정하며, style은 InputBox의 style 속성을 설정합니다. tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 설정하며, useLocale은 다국어 사용 여부를 지원합니다. MultiSelect 컴포넌트를 제작할 때의 기본 레이아웃 구조는 테이블 레이아웃으로 구성됩니다.",290
554,"Multiupload는 여러 개의 파일을 동시에 업로드할 수 있는 flash 기반 컴포넌트이다. 투명모드(ode:transparent)를 지원하여 UI를 변경할 수 있다. 그러나 웹접근성이나 모바일에서는 사용할 수 없다. Property로는 action, displaySizeUnit, filter, lang, maxcount, maxsize, mode, sizeUnit, subSize, tabIndex, uploadButton이 있다. Upload 컴포넌트는 image와 button의 두 가지 속성을 가지며, CSS Overriding을 통해 디자인을 변경할 수 있다. 주의사항으로는 mode=""transparent""을 사용하여 선택한 파일목록을 그리드로 구현하고, 버튼 위에 mode=""transparent"" 속성의 multiupload 컴포넌트를 위치시켜야 한다.",222
555,"본 문서는 웹스퀘어 컴포넌트의 접근성 지원 판단 기준을 설명합니다. 컴포넌트는 화면낭독기 사용자의 사용 가능 기능의 범위에 따라 권장, 비권장, 사용금지 컴포넌트로 구분됩니다. 센스리더 2.0 이상, JAWS 11 이상의 가상커서 모드로 사용하는 것을 권장합니다. 웹스퀘어 컴포넌트로 구성된 화면을 사용하기 위한 센스리더와 JAWS의 최적의 환경 설정을 각각 표 1, 표 2에 나타내었습니다. 컴포넌트가이드대로 컴포넌트를 구성한다면 화면낭독기 사용자가 그 컴포넌트의 모든 기능을 추가적인 지식이 없이 기본적인 인터넷 사용지식만으로도 사용 가능한 컴포넌트를 의미하며, 이들 컴포넌트 목록은 표 3와 같습니다.",322
556,"FusionChart는 JavaScript 기반의 차트로 거의 모든 브라우저에서 작동하며, WebSquare5에서도 사용 가능하다. FusionChart는 44가지 종류의 차트를 지원하며, json과 xml 데이터를 사용할 수 있다. 차트를 그리기 위해서는 Id, chartType, drawType을 설정하고, setJSONData() API를 이용하여 데이터를 설정한다. FusionChart는 데이터와 스타일 옵션을 결합하여 사용하며, chart element에 들어가는 Attribute를 설정하거나, trendLine, vtrendLine, style 등을 추가할 수 있다. 차트마다 옵션과 API가 다르므로, FusionChart 공식 홈페이지 documents에서 specification sheet을 확인하고 사용해야 한다. FusionChart는 xml과 json을 지원하며, single series와 multi series 등의 데이터 구조가 있다. 데이터 바인딩은 차트 Properties를 이용하거나, refFusionChart와 DataCollection 데이터 연동을 사용한다.",259
557,"labelNode / seriesColumns 옵션은 FusionChart에서 사용하는 DataCollection의 column ID값을 설정하는 옵션입니다. labelNode는 FusionChart의 label로 사용할 DataCollection의 column ID값을 설정하며, 공백일 경우 DataCollection의 첫 번째 column을 사용합니다. seriesColumns은 FusionChart의 series 데이터로 사용할 DataCollection column을 설정하며, 공백일 경우 DataCollection의 첫 번째 column을 제외한 dataType이 number인 column을 사용합니다. seriesColumns은 객체를 넣을 수 있으며, Single Series, Scatter, Zoom Lines 차트에서는 사용할 수 없습니다. 객체에는 id, seriesname, renderas, showValues, parentyaxis, displayValue 등의 속성을 설정할 수 있습니다. setChartColumnRef API를 이용하여 동적으로 DataCollection을 바인딩할 수 있으며, getFusionChartData API를 이용하여 DataCollection을 차트 데이터로 변환할 수 있습니다. 반환된 json 객체를 핸들링하여 원하는 옵션을 추가할 수 있습니다.",255
558,"<w2:fusionchart> 태그를 사용하여 차트를 그리는 방법에 대한 설명이다. MSStackedColumn2DLineDY, Scatter, ZoomLine 차트를 예시로 설명하며, Compact JSON data를 사용한 차트도 소개한다. 각 차트의 모델과 스크립트를 제공하며, 차트를 그리는 방법을 자세히 설명한다. Pie 차트와 Doughnut 차트도 소개한다.",131
559,죄송합니다. 질문이 없어서 답변을 드릴 수 없습니다. 다른 질문이 있다면 언제든지 물어보세요!,47
560,"16. Navigation
16.1 Accordion
여러 개의 패널에 컨텐츠를 표시하는 기능을 제공하는 컴포넌트. 패널의 추가, 삭제, 열기/닫기가 가능하며, 다른 컨텐츠를 패널 별로 분리해서 한 화면에 표시할 때 유용하다.
16.2 Menu
메뉴를 구성하는 컴포넌트. TreeView와 같은 형태의 데이터를 사용한다.
16.3 PageControl
페이지 이동용 UI를 제공하는 컴포넌트. 단순히 앞으로 가기 및 뒤로 가기의 기능만 제공하며, 전체 페이지 수 및 페이지 당 표시하고 싶은 데이터 수는 직접 구현해야 한다.
16.4 PageList
페이지 수와 페이지를 선택하는 인터페이스를 제공하는 컴포넌트. 페이지 번호 입력란을 추가할 수 있으며, 페이지 이동 버튼의 종류를 지정할 수 있다.",293
561,"개발자는 페이지당 표시할 데이터 수와 전체 페이지 수를 구현해야 합니다. DataCollection에서 원하는 양의 데이터를 가져와 새로운 DataCollection을 만들고, GridView 컴포넌트에 바인딩해야 합니다. TreeView는 계층적인 데이터를 트리 형태로 표시하며, 드래그 앤 드롭을 통해 동적으로 편집할 수 있습니다. Inner XML 또는 ItemSet을 사용하여 데이터를 입력할 수 있으며, Add Child, Add Sibling, Delete 버튼으로 노드를 추가, 삭제할 수 있습니다. 노드 정보는 Label, Value, NodeSet, Depth로 구성되며, 노드 이미지와 아이콘, 선택 및 해제, 노드 라벨 포맷, 노드 접기/펼치기, 체크박스 등의 기능을 제공합니다. 체크박스는 showCheckbox 속성을 사용하여 표시하며, hierarchy 속성을 추가하면 부모의 체크박스를 선택할 때 자식 노드를 모두 선택할 수 있습니다.",311
562,"VI. 사용하기
25. 개발 전 확인할 내용
26. 선택용 컴포넌트
27. 입력 검증
28. 입출력 제어
29. 탭 키 이동 순서
30. 툴팁
31. Excel 업로드/다운로드
32. 적응형 디자인
33. jQuerySupport
34. SPA
35. escape 설정",103
563,FloatingLayer는 팝업 형태로 띄우는 UI 컴포넌트입니다. 기본적인 html 구조는 div 안에 table로 만들어진 구조를 가지고 있습니다. 팝업을 띄울 화면에 미리 배치시키고 show/hide API를 이용하여 숨기거나 보여지게 합니다. 컴포넌트 하위로 직접 컴포넌트를 배치하거나 WFrame 또는 IFrame 컴포넌트를 배치시켜 화면을 link할 수도 있습니다. FloatingLayer의 layout이 복잡한 구조를 가지고 있기 때문에 css의 selector를 이용하여 하위 항목에 접근해야합니다. 주의사항으로는 z-index 값을 변경하여 FloatingLayer가 다른 컴포넌트보다 상위에 놓이도록 해야합니다.,243
564,"Fliptoggle은 모바일용 컴포넌트로, 터치 드래그를 통해 on/off를 토글방식으로 선택할 수 있습니다. Property로는 accessibility, class, escape, id, label, tabIndex, useClickToggle이 있습니다. 스타일 변경은 class를 이용하여 가능하며, CSS Overriding도 가능합니다. 주의사항으로는 디자인뷰에서 더블클릭하여 항목값을 변경할 수 있으며, 기본값은 on/off입니다.",142
565,"WebSquare.uiplugin.calendar는 달력을 출력하는 컴포넌트이다. calendarClass 속성을 이용하여 달력의 스킨을 변경할 수 있으며, calendarValueType 속성을 이용하여 1줄 달력 혹은 시분초 선택이 포함된 달력 등을 선택할 수 있다. 컴포넌트 style 변경은 calendarClass 속성을 활용하는 것을 추천한다. 이 컴포넌트는 최상위에 <div>가 사용되며, 컴포넌트의 style을 손쉽게 변경할 수 없는 구조이다. 
이 컴포넌트의 속성으로는 calendarClass, calendarValueType, cancelButtonShow, caption, dayMoveFixed, delimiter, displayDayType, displayFormat, displayFormatFunc, displayHrMinSec, focusOnOuterDiv, footerDiv, highlightSelectedWeek, id, keepFocusSelect, maxYear, minYear, monthNames, ref, renderType, skipConfirm, skipConfirmOnly, summary, tabIndex, title, tooltip, tooltipLocaleRef, topLayout, useButton, useMonthSelect, userData1, userData2, userData3, useYearSelect, visibleHourList, visibleMinList, visibleSecList, visibleWeekNum, weekStartsOn, yearSuffix이 있다.
이 컴포넌트의 이벤트로는 oncancel, onchange, onclick, onconfirm, ondateselect, ondblclick, onmonthselect, onviewchange, onyearselect이 있다. 이 컴포넌트의 메소드로는 addClass, bind, changeClass, disableAfterDate, disableBeforeDate, disableDate, enableAllDate, enableDate, focus, getDataListInfo, getDateFormat, getDisabled, getFormattedValue, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope가 있다.",450
566,"웹스퀘어 컴포넌트의 다양한 API를 설명하는 글입니다. getScopeWindow()는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. getSelectedDay()는 현재 선택된 요일을 소문자 영문으로 반환하며, getSize(sizeName)은 웹스퀘어 컴포넌트의 크기를 반환합니다. getStyle(propertyName)은 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하며, getStyleValue(style)은 더 이상 사용되지 않습니다. getTitle()은 컴포넌트의 title 속성 값을 반환하고, getUdcHome()은 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. getUdcRoot()는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUserData(key)는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환합니다. getValue()는 선택된 날짜값을 구분자 없이 반환하며, gotoCalendar(dateStr)은 dateStr에 해당하는 날짜로 이동합니다. gotoLastMonth()는 현재 선택된 날짜를 1달 전으로 이동하고, gotoLastYear()는 현재 선택된 날짜에서 1년 전으로 이동합니다. gotoMonth(month)는 month에 해당하는 월로 이동하며, gotoNextMonth()는 현재 선택된 날짜를 1달 뒤로 이동합니다. gotoNextYear()는 현재 선택된 날짜를 1년 뒤로 이동하며, gotoTime(hour, minute)은 시간을 선택 할 수 있는 달력에서 hour과 minute에 해당하는 시간으로 이동합니다. gotoToday()는 현재 날짜로 이동하고, gotoYear(year)는 year에 해당하는 연도로 이동합니다. hasClass(className)은 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하며, hide()는 컴포넌트를 화면에서 보이지 않도록 숨깁니다. removeAllCellClass()는 setCellClass한 모든 날짜의 class를 초기화하고, removeCellClass(dateStr)는 특정 날짜에 setCellClass한 class를 초기화합니다. removeClass(className)은 웹스퀘어 컴포넌트에서 class를 삭제하며, removeHoliday()는 holiday 설정을 초기화합니다. setCellClass(dateStr, className)은 특정 날짜에 class를 지정하고, setDateFormat(format)은 dateFormat을 설정합니다. setDisabled(disabled)는 컴포넌트의 disabled 속성을 설정하며, setEventPause(evList, flag)는 지정한 이벤트를 중단합니다. setHoliday(dateStr, removeHoliday)는 특정 날짜에 holiday를 지정하고, setHolidayRef(setHolidayRef)는 holidayRef 속성을 설정합니다. setInitStyle(property)은 컴포넌트의 초기 스타일을 복구하며, setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정합니다. setPosition(left, top, mode)은 웹스퀘어 컴포넌트의 위치를 설정하고, setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. setSize(width, height)는 웹스퀘어 컴포넌트의 크기를 설정하며, setSkin(skinName)은 skin을 설정합니다. setStyle(propertyName, value)는 웹스퀘어 컴포넌트의 CSS 속성을 설정하고, setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. show(displayType)은 컴포넌트를 화면에 보이도록 설정하며, toggleClass(className)은 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가합니다. trigger(type, array)는 컴포넌트에서 특정 이벤트를 발생시키고, unbind(type, function)은 컴포넌트에서 이벤트를 제거합니다. 마지막으로, Property Detail에는 calendarClass, calendarValueType, cancelButtonShow, caption, dayMoveFixed, delimiter, displayDayType, displayFormat, displayFormatFunc, displayHrMinSec, focusOnOuterDiv, footerDiv, highlightSelectedWeek, id, keepFocusSelect, maxYear, minYear, monthNames, ref, renderType, skipConfirm 등의 속성이 정의되어 있습니다.",1209
567,"skipConfirmOnly: 월(month) 목록에서 직접 월을 선택할 경우 확인 버튼 클릭 없이 자동으로 월이 선택됨. true일 경우, 월 목록에서 월을 선택할 경우 해당 값이 자동으로 설정됨. tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. title: 마우스 오버 시, title로 저장한 값이 툴팁으로 표시됨. tooltip: 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트. tooltipLocaleRef: 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key. topLayout: Today 및 닫기 버튼을 우측 상단으로 이동. useButton: 웹접근성 사용 시, '확인', '취소' 요소를 div태그에서 button태그로 변경. useMonthSelect: 기본 달력 타입(calendarValueType속성의 값이 yearMonthDate)일 때만 적용되며 월(month) selectbox의 disabeld 적용 여부. useYearSelect: 기본 달력 타입(calendarValueType속성의 값이 yearMonthDate)일 때만 적용되며 년도(year) selectbox의 disabeld 적용 여부. visibleHourList: 시간이 표시되는 달력에서 시간 항목을 설정하는 속성. visibleMinList: 분이 표시되는 달력에서 분 항목을 설정하는 속성. visibleSecList: 초가 표시되는 달력에서 초 항목을 설정하는 속성. visibleWeekNum: 달력에 표시할 주(Week)의 개수를 설정. weekStartsOn: 시작 요일을 설정한다(0:일, 1:월, 2:화, 3:수, 4:목, 5:금, 6:토). yearSuffix: 연도 selectbox의 display되는 값의 숫자(연도) 뒤에 들어갈 문자열. Event Detail: oncancel, onchange, onclick, onconfirm, ondateselect, ondblclick, onmonthselect, onviewchange, onyearselect. Method Detail: addClass( className ).",585
568,"웹스퀘어 컴포넌트의 다양한 API를 설명하는 글이다. addClass, bind, changeClass, disableAfterDate, disableBeforeDate, disableDate, enableAllDate, enableDate, focus, getDataListInfo, getDateFormat, getDisabled, getFormattedValue, getGenerator, getID, getInitStyle, getOpacity, getOriginalID 등의 API가 있다. 각 API의 기능과 사용 방법이 자세히 설명되어 있다. 예제 코드를 통해 API를 쉽게 이해할 수 있다.",136
569,"getID() 함수는 웹스퀘어 컴포넌트의 ID를 반환하며, getOriginalID() 함수는 웹스퀘어 컴포넌트가 정의된 ID를 반환한다. getPluginName() 함수는 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition() 함수는 웹스퀘어 컴포넌트의 위치 값을 반환한다. getReadOnly() 함수는 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환하며, getScope() 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환한다. getScopeWindow() 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환하며, 해당 컴포넌트가 scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우 전역 window 객체를 반환한다. getSelectedDay() 함수는 현재 선택된 요일을 반환하며, getSize() 함수는 웹스퀘어 컴포넌트의 크기 값을 반환한다. getStyle() 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하며, getTitle() 함수는 웹스퀘어 컴포넌트의 title 속성 값을 반환한다. getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData() 함수는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, getValue() 함수는 선택된 날짜값을 구분자 없이 반환한다. gotoCalendar() 함수는 입력한 날짜로 이동한다.",459
570,"함수 이름과 설명
- gotoCalendar(dateStr): 지정한 날짜로 이동한다.
- gotoLastMonth(): 현재 선택된 날짜를 1달 전으로 이동한다.
- gotoLastYear(): 현재 선택된 날짜에서 1년 전으로 이동한다.
- gotoMonth(month): 지정한 월로 이동한다.
- gotoNextMonth(): 현재 선택된 날짜를 1달 뒤로 이동한다.
- gotoNextYear(): 현재 선택된 날짜를 1년 뒤로 이동한다.
- gotoTime(hour, minute): 시간을 선택할 수 있는 달력에서 지정한 시간으로 이동한다.
- gotoToday(): 현재 날짜로 이동한다.
- gotoYear(year): 지정한 연도로 이동한다.
- hasClass(className): 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다.
- hide(): 컴포넌트를 화면에서 보이지 않도록 숨긴다.
- removeAllCellClass(): setCellClass한 모든 날짜의 class를 초기화한다.
- removeCellClass(dateStr): 특정 날짜에 setCellClass한 class를 초기화한다.
- removeClass(className): 웹스퀘어 컴포넌트에서 class를 삭제한다.
- removeHoliday(): holiday 설정을 초기화한다.
- setCellClass(dateStr, className): 특정 날짜에 class를 지정한다.
- setDateFormat(format): dateFormat을 설정한다.
- setDisabled(disabled): 컴포넌트의 disabled 속성을 설정한다.
- setEventPause(evList, flag): 지정한 이벤트를 중단한다.
- setHoliday(dateStr, removeHoliday): 특정 날짜에 holiday를 지정한다.
※ 모든 함수는 웹스퀘어 컴포넌트 공통이다.",477
571,"setHolidayRef( setHolidayRef )는 DataCollection과 연동시 ""data:""라는 prefix를 꼭 붙여야하며, 명시하지 않는 경우 InstanceData의 XPath로 인식된다. setInitStyle( property )는 initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작하며, 컴포넌트의 초기 스타일을 복구한다. setOpacity( value )는 웹스퀘어 컴포넌트의 불투명도를 설정하며, 엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정한다. setPosition( left , top , mode )는 웹스퀘어 컴포넌트의 위치(left, top)를 설정하며, mode는 위치 설정 방법을 나타낸다. setReadOnly( readOnly )는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setSize( width , height )는 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. setSkin( skinName )은 skin을 설정한다. setStyle( propertyName , value )는 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. setUserData( key , value )는 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. show( displayType )는 컴포넌트를 화면에 보이도록 설정한다. toggleClass( className )는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다. trigger( type , array )는 컴포넌트에서 특정 이벤트를 발생시킨다. unbind( type , function )은 컴포넌트에서 이벤트를 제거한다. visible( flag )는 엔진 내부적으로 CSS visibility 속성을 설정한다.",504
572,"WebSquare.util은 다양한 유틸리티 함수를 제공합니다. 이 중 일부 함수는 아래와 같습니다.
- appendingPathComponent(starturl, endurl): url 경로에 다른 경로를 덧붙이는 함수입니다.
- clearInterval(key, force): WebSquare.util.setInterval로 등록한 함수를 직접 clearInterval시킵니다.
- clearPage(): 브라우저를 갱신하여 브라우저를 초기상태로 되돌리는 함수입니다.
- clearTimeout(key, force): WebSquare.util.setTimer로 등록한 함수를 직접 clearTimeout시킵니다.
- closePopup(id): id를 찾아서 popup을 닫아줍니다.",174
573,"WebSquare.util.closePopup(""popup1""); : popup1이라는 id를 가진 popup을 닫는 함수입니다. 
WebSquare.util.createPopup(id, type, popupName, style, useIFrame, modal, srcORurl, srcData, destData, xml); : popup을 생성하는 함수입니다. id, type, srcORurl은 필수 입력값입니다. 
WebSquare.util.dbltoHexacode(dbl); : 주어진 정수값을 RGB 색상을 표현하기 위한 hexa code 형태로 변환하여 반환하는 함수입니다. 
WebSquare.util.deleteLocale(url); : 클라이언트 다국어 언어팩을 삭제하는 함수입니다. 
WebSquare.util.encodeParameter(); : config encodeParameter 옵션을 활성화 시켰을 때 uri로 넘어온 parameter를 암호화하는 함수입니다. 
WebSquare.util.first(elem); : 주어진 html 객체의 첫 번째 child node를 반환하는 함수입니다. 
WebSquare.util.getBoolean(boolstr); : ""true""면 true를 반환하고 ""false""면 false를 반환하는 함수입니다. 
WebSquare.util.getChildNodeAt(obj, idx); : 객체 obj의 idx 번째 child node를 반환하는 함수입니다. 
WebSquare.util.getChildren(component, options); : 특정 component의 자식 component들을 배열로 반환하는 함수입니다. 
WebSquare.util.getComponentById(id); : 주어진 id에 해당하는 웹스퀘어 컴포넌트를 찾아 반환하는 함수입니다. 
WebSquare.util.getCurrentScreen(); : 현재 페이지에 설정된 mediaInfo의 screen 중에 현재 브라우저 크기에 맞는 screen 값을 반환하는 함수입니다. 
WebSquare.util.getData(key); : 특정 key로 등록된 data를 가져오는 함수입니다. 
WebSquare.util.getDate(str); : Date String에서 '/'를 제거하는 함수입니다. 
WebSquare.util.getDocumentSize(sizeName); : scroll bar 영역의 사이즈는 제외한 document의 width나 height를 구하는 함수입니다. 
WebSquare.util.getEventTarget(this); : 이벤트로 등록된 함수에서 인자로 this를 넘겨 getEventTarget API를 호출할 경우 호출한 컴포넌트 정보를 반환하는 함수입니다. 
WebSquare.util.getGlobalFunction(str); : window 영역에서 함수를 찾아와 반환하는 함수입니다. 
WebSquare.util.getIntervalKeyList(); : WebSquare.util.setIntervalKey로 등록된 키값 전부를 array로 반환하는 함수입니다. 
WebSquare.util.getKeyCode(comp, e); : key event가 발생하는 컴포넌트 객체와 event 객체를 입력 받아서 keyCode값 또는 unicode값을 반환하는 함수입니다. 
WebSquare.util.getMediaInfo(); : 현재 페이지에 설정된 mediaInfo를 JSON Object 형태로 반환하는 함수입니다. 
WebSquare.util.getMetaValue(key); : head 영역에 정의한 Meta key에 해당하는 value를 반환하는 함수입니다. 
WebSquare.util.getNumber(str); : 입력된 String에서 콤마(',')를 제거한 후 parseInt/parseFloat를 실행한 결과를 반환하는 함수입니다. 
WebSquare.util.getPopup(id); : id를 찾아서 해당 popup component를 반환하는 함수입니다.",758
574,"getPopupParam( ) : popup을 만들 때 xml 속성으로 넘긴 xmlDocument의 string을 반환합니다.
getPopupWindow( id ) : id를 찾아서 해당 popup의 window를 반환합니다.
getStringByteSize( str , ignoreChar ) : 주어진 string의 byte size를 반환합니다.
getSubmissionURL( url ) : submissionURL 정보를 읽어들여서 필요시 경로처리하는 함수.
getTextNodeValue( element ) : 주어진 html element의 text node 값을 반환합니다.
getTime( str ) : Time String에서 ':'을 제거합니다.
getTimeoutKeyList( ) : WebSquare.util.setTimer로 등록된 키값 전부를 array로 반환합니다.
hexacodetoDbl( hexa ) : 주어진 hexa code 값을 정수로 변환하여 반환합니다.
isEmptyObject( obj ) : 인자로 넘어온 객체가 빈 객체이면 true를 반환하고 빈 객체가 아닐 경우 false를 반환합니다.
isHybrid( ) : 브라우저 실행환경이 모바일 하이브리드 앱인지를 판별하는 함수입니다.
isInteger( num ) : 주어진 숫자가 정수인지 판별합니다.
isMobile( ) : 현재 동작중인 기기가 모바일 기기인지 판별합니다.
isNull( value ) : 주어진 값이 null인지 체크합니다.
isNumber( value ) : 주어진 값의 타입이 Number인지 체크합니다.
isOdd( num ) : 주어진 정수가 홀수인지 판별합니다.
isPopup( ) : 현재 Window가 popup이면 true 아니면 false를 반환합니다.
isString( value ) : 주어진 값의 타입이 String인지 체크합니다.
js( scriptUrl , callback ) : 여러 개의 외부 script를 로드할 때 스크립트별 순서제어가 필요한 경우 사용합니다.
last( elem ) : 주어진 html 객체의 마지막 child node를 반환합니다.
loadLocale( url ) : 클라이언트 다국어 JS 파일을 로드합니다.
multipleDataListDownload( options , infoArr ) : DataList의 데이터를 Excel 파일로 저장합니다.",535
575,"scale 옵션을 사용할 경우 fitToPage 옵션은 false로 설정해야 합니다. options.printSet.pageSize는 Excel 프린터 출력 시 인쇄 용지 크기를 설정하는데, fitToPage=""true""인 경우에만 유효합니다. options.showProcess는 다운로드 시 프로세스 창을 보여줄지 여부를 설정하며, options.processMsg는 showProcess=""true"" 설정을 사용할 경우, 프로세스 창에 표시할 문자열을 설정합니다. options.dataProvider는 대량데이터 처리 및 사용자 데이터를 가공할 수 있는 Provider Package를 설정하며, options.providerRequestXml는 Provider 내부에서 사용할 XML 문자열을 설정합니다. options.userDataXml는 사용자가 서버 모듈 개발 시 필요한 데이터를 전송할 수 있는 변수를 설정합니다. options.bodyWordwrap는 다운로드 시 body의 줄 바꿈 기능을 설정하며, options.useEuroLocale는 다운로드 시 ("",""와 "".""이 반대로 사용된) Euro화 처리를 설정합니다. options.useHeader는 다운로드 시 Header를 출력할지 여부를 설정하며, options.separator는 다운로드 시 서버로 데이터를 전송할 때, 데이터를 구분짓는 구분자를 설정합니다. options.freezePane은 틀 고정을 위한 좌표값 및 좌표값의 오픈셋을 설정하며, options.autoSizeColumn은 너비 자동 맞춤 설정 유무를 설정합니다. options.displayGridlines는 엑셀 전체 셀의 눈금선 제거 유무를 설정하며, options.useDataFormat은 dataList dataType이 text인 경우, 엑셀의 표시형식 '텍스트' 출력 유무를 설정합니다. infoArr은 그리드의 데이터를 엑셀 파일로 저장할 때, 추가로 다른 셀에 표현하는 경우 사용하는 배열입니다.",486
576,"JDK 1.5 이상에서 사용 가능한 그리드의 엑셀 다운로드 옵션 파일 정보 관련 옵션입니다. options 객체에 JSON 형태로 저장된 그리드의 엑셀 다운로드 옵션 파일 정보를 입력합니다. options.fileName은 다운로드하려는 파일의 이름을, options.multipleSheet는 다운로드시 gridView별 sheet분리 출력 여부를, options.gridId는 다운로드하려는 gridView의 ID를, options.wframeId는 다운로드하려는 dataList가 포함된 WFrame의 ID를 입력합니다. Excel 관련 옵션으로는 sheet의 이름, 다운로드 가능한 최대 행 개수, 데이터 타입, 삭제하려는 열의 번호, 삭제하려는 Header의 row index, fold하려는 열의 번호, 그리드의 데이터가 시작되는 행과 열의 번호, header, body, subtotal, footer 부분의 색, font name, font size, font 색 등이 있습니다. 인쇄 관련 옵션으로는 fitToPage, 가로 방향 출력 여부, 용지너비, 용지높이, 확대/축소 배율, 인쇄 용지 크기 등이 있습니다. 기타 옵션으로는 프로세스 창을 보여줄지 여부, 대량데이터 처리 및 사용자 데이터를 가공할 수 있는 Provider Package, 사용자가 서버모듈 개발 시 필요한 데이터를 전송 할 수 있는 변수, 바디의 줄 바꿈 기능, 유로화 처리 기능, Header/SubTotal/Footer를 출력 할지 여부, 데이터를 구분짓는 구분자, subTotal 평균계산시 소수점 자리수, Round를 지정하는 등의 옵션이 있습니다.",469
577,"options.useStyle : [default: false] 다운로드시 css를 제외한, style을 excel에도 적용할 지 여부
options.freezePane : [default: """"] 틀고정을 위한 좌표값 및 좌표값의 오픈셋
options.autoSizeColumn : [default: false] 너비자동맞춤 설정 유무
options.displayGridlines : [default: false] 엑셀 전체 셀의 눈금선 제거 유무
options.colMerge : [default: false] colMerge된 컬럼을 Merge해서 출력 할 지 여부
options.useDataFormat : [default: 없음] 그리드 dataType이 text인 경우, 엑셀의 표시형식 '텍스트' 출력 유무
infoArrObjectN그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열
infoArr.rowIndex : 내용을 표시할 행번호
infoArr.colIndex : 내용을 표시할 열번호
infoArr.rowSpan : 병합할 행의 수
infoArr.colSpan : 병합할 열의 수
infoArr.text : 표시할 내용
infoArr.textAlign : 표시할 내용의 정렬 방법 (left, center, right)
infoArr.fontSize : font size 설정
infoArr.fontName : font name 설정
infoArr.color : font color 설정
infoArr.fontWeight : font weight 설정
infoArr.drawBorder : cell의 border 지정
infoArr.wordWrap : cell의 줄 바꿈 기능
WebSquare.util.multipleExcelDownload(options); : 다운로드시 여러 개의 엑셀 파일을 다운로드하는 함수
WebSquare.util.next(xmlDoc); : 텍스트 노드를 제외한 다음 노드 검색해서 반환하는 함수
WebSquare.util.openPopup(url, options, params, target); : popup을 속성에 따라 만드는 함수
WebSquare.util.createPopup(url, options, params, target); : popup을 속성에 따라 만드는 함수",507
578,"WebSquare.util는 다양한 유틸리티 함수를 제공합니다. options 객체를 사용하여 팝업창을 생성하거나, parseFloat, parseInt, setDisabled, setInterval, setTimeout 등의 함수를 사용할 수 있습니다. 또한, setData, getData, removeData 함수를 사용하여 데이터를 등록, 조회, 삭제할 수 있으며, setDate, setNumber, setTime 함수를 사용하여 문자열에 날짜, 숫자, 시간 형식을 추가할 수 있습니다.",122
579,"WebSquare.util.setTimeout 함수는 caller, delay, args, before_call, callback 등의 옵션을 통해 지정된 시간 후에 함수를 실행합니다. toHexColor 함수는 rgb(r, g, b) 형식의 string을 입력받아 #RRGGBB 형식의 color code를 반환합니다. url 함수는 w2xPath와 options를 인자로 받으며, options에는 spa, forceReload, replaceHistory, param, shortURL, transition, urlHashText 등의 옵션이 있습니다. 이를 통해 페이지 이동 시 전체 url 대신 경로만 전달하거나, 페이지 이동 후 브라우저를 강제로 갱신하거나, 페이지 이동 시 추가로 전달할 인자들을 json형태로 나타내거나, 페이지 이동 시 화면전환효과를 지정할 수 있습니다.",216
580,"탭 키 이동 순서
상대 좌표를 이용하여 디자인한 화면은 탭 키 이동을 지원합니다. 사용자는 브라우저에서 탭 키를 눌러 UI 컴포넌트 사이를 이동할 수 있습니다. 보통의 경우, UI 컴포넌트의 배치 순서에 따라 탭 키가 이동합니다. 
반응형 웹의 경우, 탭 키 이동 순서를 강제적으로 지정해야 할 필요가 있습니다. 이를 지원하는 기능을 제공하며, 개발자는 nextTabID 속성에 탭 키를 통해 이동할 컴포넌트 ID를 지정할 수 있습니다. 
탭 키 이동 순서를 편집하려면, Design 탭에서 화면을 우클릭한 후 [Tab Order 편집모드]를 선택합니다. 그리고 기준이 될 컴포넌트를 클릭한 후, 탭 키를 이동할 순서대로 컴포넌트를 Ctrl 버튼을 누른 채로 클릭합니다. 
지정한 순서에 따라 nextTabID가 속성이 지정되고 파란색 버튼이 빨간색으로 변경됩니다. 탭 키 이동 순서 편집 모드를 종료하려면 [Tab Order 편집모드]를 다시 선택합니다. 
nextTabID 속성을 지원하는 컴포넌트는 Anchor, AutoComplete, CheckBox, CheckComboBox, GridView, InputBox, InputCalendar, MultiSelect, Radio, SearchBox, SelectBox (native제외), Spinner, Trigger, TextArea, WFrame (WFrame내의 컴포넌트의 firstTabID는 따로 지정) 입니다.",491
581,"입출력 제어
28.1 입력 제어
28.1.1 allowChar
사용자 입력을 제어하기 위해 입력 가능한 텍스트를 지정할 수 있습니다. dataType=""number""인 경우 IME-MODE, allowChar, ignoreChar 등을 추가로 사용하지 않아도 숫자만 입력 가능합니다. allowChar 속성을 ""0-9""로 설정하면 숫자만 입력 가능합니다. allowChar 속성을 ""가-힣""로 설정하면 한글만 입력 가능합니다.
28.1.2 ignoreChar
입력 불가 텍스트를 지정하여 사용자 입력을 제어할 수 있습니다. ignoreChar=""a-z A-Z""로 설정하면 영어 소문자 및 대문자 입력이 금지됩니다.
28.1.3 preventCopyPaste
복사하기 & 붙여넣기 방지하는 속성으로 기본값은 false입니다.
28.2 출력 제어
displayFormat 및 displayFormatter 속성을 사용하여 사용자가 입력하는 데이터의 출력 방식을 설정할 수 있습니다.
28.2.1 displayFormat
데이터 유형별 입력 설정 및 특정 포맷을 지정할 수 있는 속성입니다. dataType에 따라 사용가능한 포맷이 다르며, 단순 포맷을 정의할 수 있습니다. dataType으로는 text, number, date, time, bigDecimal 이 있습니다.
28.2.2 displayFormatter
displayFormatter 속성에 사용자정의 함수를 설정하여 해당 사용자정의 함수의 반환값을 표시합니다. 대문자로 변환하는 예제가 제공됩니다.",398
582,"Workflow는 직관적인 GUI를 통해 다수의 복잡한 비동기 통신을 쉽게 호출할 수 있는 기능입니다. 사용자는 각 비동기 호출의 결과에 대한 처리 로직만 간단히 구현하면 됩니다. Workflow는 여러 건의 Submission을 처리하는 순서를 정의한 것으로, WorkflowCollection은 Workflow의 그룹을 의미합니다. 비동기 통신 프로그래밍이 용이하며, Promise workflow 사용이 용이합니다. Submission의 비동기 처리가 용이하며, 정의된 submission 및 submissionCallback의 실행순서를 보장합니다. Workflow를 생성하기 위해서는 Submission 뷰에서 Workflow에 포함할 Submission들을 선택하고 Workflow Manager 창에서 Workflow의 기본 정보를 설정하고 Service List를 생성합니다. API로는 getWorkflow, executeWorkflow, getRunningWorkflow 등이 있습니다.",231
583,"본 문서는 웹스퀘어 가이드 SP4 릴리스 노트의 백매터 01.html 파일입니다. 이 파일은 웹스퀘어 가이드 SP4 릴리스 노트의 일부로, 웹스퀘어 개발자들이 웹스퀘어를 사용할 때 필요한 정보를 제공합니다. 이 파일은 웹스퀘어 개발자들이 웹스퀘어를 사용할 때 필요한 정보를 제공합니다. 이 파일은 웹스퀘어 개발자들이 웹스퀘어를 사용할 때 필요한 정보를 제공합니다. 이 파일은 웹스퀘어 개발자들이 웹스퀘어를 사용할 때 필요한 정보를 제공합니다. 이 파일은 웹스퀘어 개발자들이 웹스퀘어를 사용할 때 필요한 정보를 제공합니다.",244
584,"Snippets는 마우스 클릭으로 쉽게 생성할 수 있습니다. 제공되는 Snippets는 공통 CSS에서 style과 위치를 지정하기 때문에, WebSquare 스튜디오의 ""Draw Mode""를 변경해야 합니다. Snippet을 넣을 위치(컴포넌트)를 선택한 후, ""change Draw Mode""를 활성화하면 생성 상세 다이얼로그가 노출됩니다. 삽입 위치를 선택할 수 있으며, 자식으로 넣을 수 있는 컴포넌트와 넣을 수 없는 컴포넌트가 있습니다. Snippets에는 float 속성이 지정되어 있지 않습니다.",182
585,"Snippets를 내보내는 방법은 다음과 같습니다. Snippets View에서 Export Snippets 아이콘()을 클릭하여 Export Wizard를 엽니다. 내보낼 Snippets를 선택하고 저장 위치를 결정한 후 저장하면 해당 위치에 Snippets이 저장됩니다. 저장 위치에 Export Snippets을 확인할 수 있습니다. (그림 5-1, 5-2 참조)",102
586,"WebSquare.uiplugin.tabContainer는 탭 형태의 화면을 생성하는 컴포넌트입니다. 여러 개의 Layer 내에 여러 화면들을 탭으로 구성하여 사용자가 선택한 탭에 포함된 화면을 표시합니다. 이 컴포넌트는 alwaysDraw, class, contentsClass, selectedIndex, tabDefaultCenterImageClass, tabDefaultCenterImageStyle, tabDefaultLeftImageClass, tabDefaultLeftImageStyle, tabDefaultRightImageClass, tabDefaultRightImageStyle, tabHoverCenterImageClass, tabHoverCenterImageStyle, tabHoverLeftImageClass, tabHoverLeftImageStyle, tabHoverRightImageClass, tabHoverRightImageStyle, tabPosition, tabSelectedCenterImageClass, tabSelectedCenterImageStyle, tabSelectedLeftImageClass, tabSelectedLeftImageStyle, tabSelectedRightImageClass, tabSelectedRightImageStyle, userData1, userData2, userData3 등의 속성을 가지고 있습니다. 또한, onbeforeselect, onchange, ontabclick 등의 이벤트와 addClass, addTab, bind, changeClass, deleteTab, disableTab, enableTab, focus, getCount, getDisabled, getGenerator, getID, getInitStyle, getLabelText, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSelectedID, getSelectedIndex, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, getWindow, hasClass, hide, init, invoke, removeClass, setDisabled, setEventPause, setInitStyle, setLabelText, setOpacity, setPosition, setReadOnly, setSelectedIndex, setStyle, setUserData, show, toggleClass, trigger, unbind, visible 등의 메서드를 제공합니다.",402
587,"CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다. Engine 내부에서 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어할 수 있습니다. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능합니다. 이벤트와 핸들러 함수를 동적으로 할당할 수 있으며, tab의 전체 갯수를 반환하거나, 웹스퀘어 컴포넌트의 ID를 반환하는 등의 기능을 제공합니다. 또한, 사용자 정의 데이터 속성을 설정하여 값을 얻어올 수 있습니다.",214
588,"함수 fn_validCheck의 tmpObj 매개변수는 getID() 메서드를 호출할 수 있는 웹스퀘어 컴포넌트입니다. getInitStyle(CSS) 메서드는 웹스퀘어 컴포넌트의 초기 스타일을 반환하며, CSS 매개변수를 지정하지 않으면 모든 정보를 출력합니다. getLabelText(idx) 메서드는 idx로 지정한 탭의 라벨을 반환합니다. getOpacity() 메서드는 웹스퀘어 컴포넌트의 불투명도를 반환하며, 반환 값은 0~1 사이의 실수입니다. getOriginalID() 메서드는 웹스퀘어 컴포넌트의 originalID를 반환합니다. getPluginName() 메서드는 웹스퀘어 컴포넌트의 이름을 반환합니다. getPosition(positionName) 메서드는 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. getReadOnly() 메서드는 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환합니다. getScope() 메서드는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하며, 아닌 경우 null을 반환합니다. getScopeWindow() 메서드는 getScope()와 동일하지만, scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우 전역 window 객체를 반환합니다. getSelectedID() 메서드는 선택된 탭의 id를 반환합니다. getSelectedIndex() 메서드는 선택된 탭의 index를 반환합니다. getSize(sizeName) 메서드는 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. getStyle(propertyName) 메서드는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getTitle() 메서드는 웹스퀘어 컴포넌트의 title 속성 값을 반환합니다. getUdcHome() 메서드는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다.",565
589,"getUdcHome( )는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot( )는 UDC 파일 경로를 반환한다. getUserData( key )는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getWindow( idx )는 Tab Index에 해당하는 window content를 반환한다. hasClass( className )는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide( )는 웹스퀘어 컴포넌트를 화면에서 숨긴다. init( options )는 컴포넌트 하위의 옵션에 해당하는 컴포넌트를 제외한 컴포넌트의 값을 초기화한다. invoke( funcName , param , options )는 컴포넌트 하위의 모든 컴포넌트의 함수를 동일하게 호출한다. removeClass( className )는 웹스퀘어 컴포넌트에서 class를 삭제한다. setDisabled( disabled )는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause( evList , flag )는 지정한 이벤트를 중단한다. setInitStyle( property )는 웹스퀘어 컴포넌트의 초기 스타일을 복구한다. setLabelText( idx , label )는 idx로 tab을 찾아서 tab의 label을 바꿔준다. setOpacity( value )는 웹스퀘어 컴포넌트의 불투명도를 설정한다.",425
590,"setOpacity(값) : 불투명도를 설정합니다. 값은 0과 1 사이의 실수입니다.
setPosition(left, top, mode) : 웹스퀘어 컴포넌트의 위치를 설정합니다. left와 top은 설정할 위치 값이며, mode는 위치 설정 방법입니다.
setReadOnly(readOnly) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. readOnly 속성 활성화 여부를 ""true"" 또는 ""false""로 설정합니다.
setSelectedIndex(idx) : tab의 index를 인자로 받아 그 index로 tab을 선택합니다.
setStyle(propertyName, value) : 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다. propertyName은 설정할 CSS 속성, value는 해당 CSS 속성에 적용할 값입니다.
setUserData(key, value) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. key는 설정 가능한 key를 입력하며, value는 설정한 데이터의 value입니다.
show(displayType) : 웹스퀘어 컴포넌트를 화면에 표시합니다. displayType은 적용할 CSS display 속성의 값입니다.
toggleClass(className) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가합니다.
trigger(type, array) : 컴포넌트에서 특정 이벤트를 발생시킵니다. type은 발생시킬 이벤트, array는 이벤트 핸들러에 전달할 파라미터 배열입니다.
unbind(type, function) : 컴포넌트에서 이벤트를 제거합니다. type은 제거할 이벤트, function은 제거할 이벤트의 핸들러 함수입니다.
visible(flag) : 엔진 내부적으로 CSS visibility 속성을 설정합니다. (deprecated)",488
591,"Checkbox 컴포넌트는 renderType=”checkboxgroup”와 renderType=”native” 두 가지 형태로 사용할 수 있습니다. 그러나, renderType=”native”로 사용할 경우 websquare API를 사용할 수 없으므로 가급적 renderType=”checkboxgroup”을 사용하는 것이 좋습니다. Checkbox 컴포넌트를 사용할 때는 포커스 상태의 테두리(outline)가 명확하게 나타나는지, Checkbox에 대응하는 title 또는 label을 제공하고 있는지, tagname과 itemTagname이 올바르게 적용되어 있는지 확인해야 합니다. renderType=”native”의 경우, 레이아웃 구조를 위한 어떠한 태그 없이 순수 <input type=”checkbox”> 태그 하나만 생성하는 형태입니다. 레이블 텍스트는 textbox 컴포넌트를 이용해 직접 생성해야 합니다. Checkbox 컴포넌트에 title 속성을 사용하지 않을 경우 반드시 <label> 태그로 렌더링되는 textbox 컴포넌트와 연계해야 합니다. renderType=”checkboxgroup”의 경우, checkbox와 label이 결합된 상태로 label의 for 속성이 자동으로 연결되며, tagname과 itemTagname 속성을 이용하여 mark-up 구조를 변경할 수 있습니다.",375
592,"Calendar8 컴포넌트는 날짜를 선택할 수 있는 달력을 제공합니다. 이 컴포넌트를 접근성을 고려하여 사용하려면 renderType=""native"", keepFocusSelect=""true"", footerDiv=""true"" 속성을 설정해야 합니다. 또한, 달력의 의미를 명확히 하기 위해 title 속성과 caption, summary를 제공해야 합니다. 이때, caption은 ""달력""으로 설정하고, summary는 ""달력: 원하는 날짜를 선택하세요.""로 설정합니다. 또한, 키보드를 사용하여 초점이 논리적으로 이동하고, 포커스 상태의 테두리가 명확하게 나타나는지 확인해야 합니다. 이러한 접근성 지침은 2.1.1. 키보드 사용 보장, 2.1.2. 초점 이동, 3.2.1. 사용자 요구에 따른 실행, 3.3.2. 표의 구성과 관련이 있습니다.",294
593,웹 접근성 샘플 다운로드를 위해 첨부된 파일을 클릭해주세요. 이 파일을 다운로드하면 웹 접근성 가이드를 살펴볼 수 있습니다.,64
594,"81. HTML5 Video 태그는 플러그인 없이 동영상을 웹에서 보여줄 수 있습니다. controls 속성은 브라우저가 제공하는 재생 도구를 표시하며, id 속성은 컴포넌트의 ID로 script에서 해당 ID로 컴포넌트에 접근할 수 있습니다. CSS Overriding은 websquare의 style 편집기에서 해당 style을 직접 수정하는 것입니다. HTML5 Video 컴포넌트는 속성이 없으며, 필요한 경우 Attribute Add로 버튼으로 속성을 추가해야 합니다.",171
595,"Upload 컴포넌트는 파일을 업로드할 수 있는 기능을 제공하는데, input과 button 속성을 가지고 있습니다. Image는 input과 button이 결합된 형태로 만들어져 있으며, input Type=”text”을 사용하며 button은 브라우저의 형태이며, input Type=”file”을 사용합니다. accept 속성은 IE10부터 지원되며, 파일 유형을 제한할 수 있습니다. class와 style 속성을 이용하여 디자인을 변경할 수 있으며, CSS Overriding을 통해 덮어쓰기가 가능합니다.",170
596,"$p.data는 DataCollection을 전체적으로 제어하는 기능을 제공한다. 복수의 데이터 객체에서 한번에 데이터 꺼내오기, 데이터 설정하기, 혹은 동적 데이터 객체 생성하기 등의 기능을 제공한다. create() 함수는 dataList 및 dataMap을 동적으로 생성하는 함수이다. get() 함수는 조건에 의해 다건의 dataList와 dataMap의 객체를 꺼내온다. getAllDataCollection() 함수는 한 화면 내에 있는 모든 DataCollection 정보를 반환한다. getBroadcast() 함수는 DataCollection의 broadcast 상태를 가져온다. getInfo() 함수는 DataCollection의 상세 정보(xml에서 입력한 attribute 값)를 조회하는 함수이다. remove() 함수는 dataList, dataMap, linkedDataList를 삭제하는 함수이다. set() 함수는 생성되어 있는 여러개의 dataList와 dataMap의 값을 한번에 설정한다. setBroadcast() 함수는 모든 dataCollection의 broadcast 상태를 설정한다.",234
597,"13장. Applet
13.1 Property
속성 값에 따라 객체의 특성을 지정합니다. accesskey는 객체의 단축 접속키를, align은 태그에 대한 정렬 값을, alt는 객체 로딩 실패 시 대체 HTML을, archive는 여러 파일을 압축하여 다운로드할 수 있도록 지원하는 jar 파일을, class는 사용자가 정의한 class를, code는 Java class를 포함하는 파일의 주소를, codebase는 ActiveX 컨트롤이 아직 설치되지 않은 경우 컨트롤을 다운로드할 위치를, datafld는 이벤트에 의한 데이터 필드를, datasrc는 데이터에 연결된 src 값을, groupid는 groupid 값을, hidefocus는 객체의 포커싱 인식 여부를, hspace는 좌우측에 삽입할 공백 크기를, id는 사용자가 정의한 id를, lang은 사용된 언어 코드를, language는 작성된 스크립트 언어를, name은 객체의 Name 속성을, src는 객체의 로딩 주소를, title은 일반적인 title 값을, unselectable은 Element의 선택 비활성 유무를, vspace는 상하측에 삽입할 공백 크기를 지정합니다.
13.2 브라우저 캡쳐화면
13.3 class 적용과 스타일 변경
13.4 CSS Overriding
13.5 주의사항 및 Tip
Applet에서 사용되는 파라미터는 Applet 컴포넌트를 더블클릭하면, 파라미터 대화창에서 설정할 수 있습니다.",450
598,"Anchor 컴포넌트는 HTML의 <a> 태그와 유사한 인터페이스를 갖는 컴포넌트입니다. HTML에서 사용하는 anchor에 사용하는 style 효과는 동일하게 사용이 가능합니다. 웹스퀘어에서는 이미지 버튼을 만드는 경우 trigger 대신 anchor를 사용하도록 권장되어 있습니다. outerDiv 속성이 공백이거나 true일 경우 최상위는 div Tag로 이루어지며, outerDiv가 false일 경우 최상위는 a Tag 단독으로 이루어집니다. Property 중 class는 HTML의 class 속성과 동일한 기능을 제공하며, css 파일 또는 style 블록에 정의한 class를 1개 또는 공백(space)를 이용하여 다중 적용이 가능합니다. 다중 클래스는 class를 2개 이상 사용하는 것을 말하며, 공백으로 구분합니다. 다중 클래스 적용은 IE6 이하 버전에서는 적용되지 않습니다.",281
599,"텍스트 링크를 사용해야 할 경우, 이미지가 필요하지 않은 경우 anchor 컴포넌트를 사용하는 것이 좋습니다. OutDiv 속성이 true이거나 지정되지 않은 경우 웹스퀘어 엔진에서 자동으로 정의된 클래스인 w2anchor가 부여됩니다. OutDiv 속성이 false인 경우 w2anchor2 클래스가 자동으로 부여됩니다. OutDiv 속성값이 공백이거나 false이면 a태그만 사용되며, 텍스트나 이미지 버튼에 사용됩니다. OutDiv 속성값이 true이면 a태그를 DIV태그가 감싸게 되며, 가변성 버튼을 사용할 때 즉, 버튼 내부의 텍스트 길이에 따라 버튼의 크기가 변경될 때 사용됩니다.",218
600,"WebSquare.ModelUtil은 workflow와 submission을 실행하고, Instance 내부의 노드를 조작하는 기능을 제공합니다. abort(), copyChildrenNodes(), copyNode(), executeParallel(), executeSerial(), executeSubmission(), executeWhilst(), executeWorkflow(), findInstanceNode(), findInstanceNodes(), findSerializedNode() 등의 메소드를 사용할 수 있습니다. 각 메소드의 파라미터와 반환값은 다양합니다. 예를 들어, copyChildrenNodes() 메소드는 srcXPath가 가리키는 하위노드들을 destXPath가 가리키는 하위노드들로 복사합니다. 이 때 mode에 따라 완전히 srcXPath의 하위노드로 replace하는 것과 srcXPath와 destXPath의 하위노드를 merge하는 것과 srcXPath의 하위노드와 destXPath의 하위노드 간 합집합을 구하는 것(destXPath 하위노드에 존재하는 노드만 값을 세팅하는 것)으로 나누어집니다.",254
601,"WebSquare.ModelUtil는 다양한 기능을 제공합니다. findSerializedNode()는 XPath를 사용하여 serialize된 Document Element를 반환하며, getInstanceValue()는 주어진 XPath에 해당하는 Instance 내부의 노드의 nodeValue를 반환합니다. getRefToReqData()는 submission 객체의 ref를 request String으로 변환하여 반환하며, getRunningWorkflow()는 실행중인 첫번째 Workflow 객체를 반환합니다. getSubmission()은 id에 해당하는 submission을 반환하며, getWorkflow()는 id에 해당하는 Workflow 객체를 반환합니다. isRunningWorkflow()는 실행중인 Workflow가 있는지 여부를 반환하며, rejectWorkflow()는 실행중인 Workflow를 Reject 시킵니다. removeChildNodes()는 xpath에 해당하는 부모의 childNode들을 제거하고, removeInstanceNode()는 xpath에 해당하는 node를 부모로부터 제거합니다. removeInstanceNodes()는 xpath에 해당하는 여러 개의 node를 부모로부터 제거합니다. setInstanceNode()는 Document 혹은 Element를 Instance의 xpath에 해당하는 경로에 위치시키며, setInstanceValue()는 주어진 XPath에 해당하는 Instance 내부 노드를 찾아 nodeValue를 설정합니다.",294
602,"Alias DataCollection은 메인 화면의 DataCollection을 여러 화면의 GridView가 참조할 수 있도록 지원하는 기능이다. 각 WFrame 내에 AliasDataCollection을 정의한 후, 메인 화면의 DataCollection과 연결하여 사용할 수 있다. AliasDataCollection은 부모 페이지에 있는 DataCollection 참조만 지원하며, 동일한 유형만 링크할 수 있다. AliasDataCollection에서는 DataCollection이 제공하는 모든 API를 사용할 수 있으며, 속성과 함수를 통해 AliasDataCollection을 동적으로 변경할 수 있다. AliasDataCollection은 script를 이용하여 동적으로 생성할 수 있으며, 컴포넌트에 바인딩할 때 DataCollection 바인딩 방식과 동일하게 사용할 수 있다.",207
603,"DataCollection은 웹 브라우저에서 다양한 종류의 방대한 데이터를 쉽게 제어하기 위한 데이터 모델이다. DataMap은 단일 데이터 객체, DataList는 다건 데이터 객체, LinkedDataList는 DataList 객체에 Filter/Sort를 적용한 결과표이다. DataCollection은 XML 구조와 XPath에 대한 이해 없이도 데이터 구조를 이해할 수 있는 직관적인 인터페이스를 제공하며, JSON, XML, JSON Array 포맷으로 설정하거나 반환 받을 수 있다. DataMap과 DataList는 초기값을 정의할 수 있고, 데이터의 상태(추가/수정/삭제)값을 관리할 수 있다. 이외에도 DataCollection은 UI 컴포넌트와 연동하여 화면에서 사용하고자 하는 임시 데이터를 출력하거나, 서버로부터 받은 데이터를 관리할 수 있는 인터페이스를 제공한다. 이벤트 핸들러인 onbeforemodelchange는 데이터 값이 변경되기 직전에 발생하며, 입력된 값으로 데이터가 변경될지 여부를 결정할 수 있다.",297
604,"기본값을 표시할 경우 Data 탭에서 use data를 선택하고, 컬럼 별 데이터를 입력합니다. 그리고 DataList에 정의된 형태의 데이터를 출력할 GridView를 Design 탭에 그립니다. 그 후, Outline – Head – DataCollection 선택 후 바인딩할 DataList를 GridView로 드래그-앤-드롭합니다. 바인딩 상태를 확인하려면 GridView 상의 툴팁 혹은 dataList 속성 설정을 통해 확인할 수 있습니다. LinkedDataList는 DataList의 데이터를 필터링하거나 정렬한 결과만을 저장하는 객체입니다. LinkedDataList는 행 추가, 데이터 일괄 추가, 데이터 전체 삭제 기능을 제외한 DataList에서 지원하는 함수를 모두 지원합니다. LinkedDataList의 정렬 및 필터링 조건을 설정하려면 setCondition() 함수를 사용하고, setColumnFilter() 함수를 사용하여 LinkedDataList의 데이터를 필터링할 수 있습니다. Studio에서 DataList, DataMap, LinkedDataList를 생성한 후, 웹스퀘어가 제공하는 디버깅 메뉴를 이용하여 생성한 DataList, DataMap, LinkedDataList의 데이터를 확인할 수 있습니다.",315
605,"DataCollection 메뉴에서 DataMap, DataList, LinkedDataList를 확인할 수 있습니다. $p.data.create() 함수를 사용하여 DataCollection을 동적으로 생성할 수 있으며, 특정 Page의 DataCollection을 복사해서 다른 Page에서 사용할 수 있습니다. API를 통해 여러 기능을 직접 사용할 수 있으며, getAllDataCollection(), getAllJSON(), getFilterList(), getFilteredRowIndex(), setJSON(), setData(), setXML(), getRowCount(), getCellData(), getUserData(), setUserData() 등이 있습니다. 자세한 내용은 API 가이드를 참고하십시오.",153
606,"DataCollection 컴포넌트는 모두 동일하게 사용할 수 있습니다. setUserData와 getUserData 함수를 사용하여 데이터를 설정하고 가져올 수 있습니다. dataList.column의 importFormatter 속성을 사용하여 컬럼 데이터를 변경할 수도 있습니다. DataCollection 이벤트(onbeforecelldatachange, oncelldatachange, onbeforerowpositionchange, onrowpositionchange, oninsertrow, onremoverow, ondataload)를 사용하여 데이터 변경 및 행 위치 변경 등을 감지할 수 있습니다. 이벤트 예제 파일과 동영상은 인터넷에서 다운로드할 수 있습니다.",161
607,"화면에 다수의 입력 항목을 받는 경우, 각각의 입력 컴포넌트와 연관된 textbox 컴포넌트를 <label> 태그로 렌더링해야 합니다. 이는 시각장애인 사용자가 각 항목이 무엇인지 알 수 있도록 하기 위함입니다. 예를 들어, 회원 가입이나 게시글 등록 화면에서 이름, 주민등록번호, 성별 등을 입력 받는 경우, 각각의 입력 컴포넌트와 연관된 textbox 컴포넌트를 <label> 태그로 렌더링해야 합니다. 이를 위해 Websquare XML 예시에서는 <xf:group>과 <w2:textbox>, <xf:input>, <xf:select1> 등의 태그를 사용하여 입력 항목을 구성하고 있습니다.",244
608,"SearchBox64.SearchBox는 InputBox 컴포넌트의 확장 버전으로, 우측에 ""X"" 아이콘이 추가되어 있다. 이 아이콘은 input에 Text가 입력되어 있을 때 보여진다. 이 컴포넌트는 class, disabled, displayFormat, id, maxlength, minlength, nextTabID, onfocusClass, readOnly, readOnlyClass, style, tabIndex, title, html attributes 등의 속성을 제공한다. 이 컴포넌트는 input[type=text]::-ms-clear { display: none; } 또는 ::-ms-clear { display: none; }와 같은 CSS를 사용하여 IE10 이상에서 ""X"" 아이콘을 해제해야 한다. 이 컴포넌트의 최상위는 HTML input Tag로 되어 있다.",206
609,"InputBox 컴포넌트는 <input type=""password"" />와 유사한 인터페이스를 제공하며, HTML input Tag로 이루어져 있다. 이 컴포넌트는 다중 적용이 가능한 class 속성과 disabled, id, maxLength, minLength, nextTabID, onfocusClass, readOnly, readOnlyClass, style, tabIndex, title 속성을 제공한다. 또한, 웹스퀘어 엔진에서 정의된 클래스인 w2input과 websquare의 style 편집기에서 해당 style을 직접 수정하는 inlinestyle을 사용할 수 있다. 이 컴포넌트는 로그인에서의 패스워드를 입력하는데 권장된다.",191
610,현재 웹스퀘어에서 제공하는 메뉴 컴포넌트는 웹접근성을 지원하지 않습니다. 따라서 메뉴 화면은 group 컴포넌트와 anchor 컴포넌트를 조합하여 구성해야 합니다. 위의 예시는 메뉴 화면을 구현한 XML 소스의 일부입니다. 스타일과 관련된 자바스크립트는 포함되어 있지 않습니다.,137
611,"WebSquare.uiplugin.pivot는 데이터를 2차원으로 표시하며, 통계치를 지원하는 피봇 기능을 제공한다. Sum, Avg, Count, Minimum, Maximum 등의 통계치를 지원하며, 사용자 함수를 통한 통계치 정의도 가능하다. Excel의 pivotTable과 비슷한 기능을 제공하며, 지원 브라우저는 IE10 이상이다. PropertyEventMethod 중 aggregatorName은 기본 aggregator(통계함수)를 설정하는 옵션으로, allTotalName은 총합계 부분 label을 설정하는 옵션이다. autoFit은 pivot table에 정의된 width에 맞춰 여백이 없이 가득 채워주는 기능으로 가로 스크롤이 생기지 않는다. cols는 pivot을 초기에 보여줄 때 column축에 둘 컬럼을 정의하는 옵션이며, dataList는 pivot과 연동할 dataList id를 설정하는 옵션이다. EventMethod 중 oncellclick은 셀이 클릭 된 경우 발생하는 이벤트이며, onrefresh는 pivot 설정이 동적으로 바뀐 경우 발생하는 이벤트이다. Method 중 bind는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하는 기능이며, pivotCSVDownload는 데이터를 CSV 파일로 저장하는 기능이다.",377
612,"웹스퀘어 컴포넌트의 기능들을 설명하는 문서입니다. setPivotInit()는 pivot의 vals 영역을 새로 설정한 후 해당 설정에 맞게 pivot을 다시 그리는 기능입니다. setPosition()은 웹스퀘어 컴포넌트의 위치를 설정하는 기능이며, setReadOnly()는 웹스퀘어 컴포넌트의 readOnly 속성을 설정하는 기능입니다. setSize()는 웹스퀘어 컴포넌트의 크기를 설정하는 기능이며, setStyle()은 웹스퀘어 컴포넌트의 CSS 속성을 설정하는 기능입니다. setUserData()는 웹스퀘어 컴포넌트에 임의의 데이터를 설정하는 기능입니다. setvals()는 pivot의 vals 영역을 새로 설정한 후 해당 설정에 맞게 pivot을 다시 그리는 기능입니다. show()는 웹스퀘어 컴포넌트를 화면에 표시하는 기능이며, toggleClass()는 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가하는 기능입니다. trigger()는 컴포넌트에서 특정 이벤트를 발생시키는 기능이며, unbind()는 컴포넌트에서 이벤트를 제거하는 기능입니다. 그 외에도 여러 가지 옵션들이 있습니다.",400
613,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. addClass 함수를 사용하여 클래스를 추가하거나, bind 함수를 사용하여 이벤트와 핸들러 함수를 동적으로 할당할 수 있습니다. changeClass 함수를 사용하여 클래스를 변경하거나, focus 함수를 사용하여 포커스를 줄 수 있습니다. getDisabled 함수를 사용하여 disabled 속성 값을 반환하거나, getGenerator 함수를 사용하여 부모 Generator 객체를 반환할 수 있습니다. getID 함수를 사용하여 컴포넌트의 ID를 반환하거나, getOriginalID 함수를 사용하여 originalID를 반환할 수 있습니다. getPluginName 함수를 사용하여 컴포넌트의 이름을 반환하거나, getPosition 함수를 사용하여 위치 값을 반환할 수 있습니다. getReadOnly 함수를 사용하여 readOnly 속성 값을 반환하거나, getScope 함수를 사용하여 부모 WFrame 객체를 반환할 수 있습니다. getSize 함수를 사용하여 크기 값을 반환할 수 있습니다.",259
614,"컴포넌트의 크기 값을 반환하는 getSize(), CSS 속성 값을 반환하는 getStyle(), title 속성 값을 반환하는 getTitle(), 행의 개수를 반환하는 getTotalRow(), UDC 파일 경로를 반환하는 getUdcHome()과 getUdcRoot(), key에 해당하는 value를 반환하는 getUserData(), 특정 class를 포함하는지 확인하는 hasClass(), 컴포넌트를 화면에서 숨기는 hide(), Pivot 데이터를 CSV 파일로 저장하는 pivotCSVDownload(), CSV 파일을 읽어 Pivot 데이터를 설정하는 pivotCSVUpload(), Pivot 데이터를 엑셀 파일로 저장하는 pivotExcelDownload() 등의 웹스퀘어 컴포넌트 공통 함수들이 있다. 이 함수들은 각각의 기능에 따라 필요한 파라미터를 받아 실행되며, 반환되는 값의 타입은 각각의 함수에 따라 다르다.",234
615,"options.separator : [기본값: ,] 다운로드시 데이터를 구분짓는 구분자, 기본값은 쉼표(,)입니다.
options.freezePane : [기본값: """"] 틀고정을 위한 좌표값과 오픈셋을 설정합니다. (ex. freezePane=""3,4""는 X축 3, Y축 4에서 틀고정, freezePane=""0,1,0,5""는 X축 0, Y축 1에서 X축으로 0, Y축으로 5로 틀고정)
options.autoSizeColumn : [기본값: false] 너비 자동 맞춤 설정 여부
options.displayGridlines : [기본값: false] 엑셀 전체 셀의 눈금선 제거 여부
options.useDataFormat : [기본값: 없음] ""true""인 경우, dataType에 따라 Excel 파일의 표시 형식을 출력합니다. dataType=""text""인 셀은 Excel의 표시 형식에 '텍스트' 출력하고, dataType=""number"" 혹은 ""bigDecimal"" 셀은 bodyFormat에 따라 데이터를 출력합니다. (예: bodyFormat=""#,##0.00"")
options.optionParam : [기본값: 없음] DRM연계시 연계모듈에 전달할 데이터 (서버에서 (String)request.getAttribute(""optionParam"") 로 참조 가능)
options.printSet : JSON 형태로 저장된 Excel Print 관련 설정
infoArrObjectNPivot : 다른 셀에 표현하는 경우 사용하는 배열
emoveClass(className) : 웹스퀘어 컴포넌트에서 class를 삭제합니다.
setDisabled(disabled) : 웹스퀘어 컴포넌트의 disabled 속성을 설정합니다.
setEventPause(evList, flag) : 지정한 이벤트를 중단합니다.
setFixedColumn(fixedColNum) : 세로 틀고정을 설정합니다.
setFixedRow(fixedRow) : 가로 틀고정을 설정합니다.
setInitStyle(property) : 컴포넌트의 초기 스타일을 복구합니다.
setOpacity(value) : 웹스퀘어 컴포넌트의 불투명도를 설정합니다.
setPivotInit(valsStr) : pivot의 vals 영역을 새로 설정한 후 해당 설정에 맞게 pivot을 다시 그립니다.
setPosition(left, top, mode) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다.
setReadOnly(readOnly) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다.
setSize(width, height) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정합니다.
setStyle(propertyName, value) : 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다.",747
616,"웹스퀘어 컴포넌트에서 사용 가능한 API들이다. setStyle()은 CSS 속성을 설정하고, setUserData()는 임의의 데이터를 설정한다. setvals()는 pivot의 vals 영역을 설정하고, show()는 컴포넌트를 화면에 표시한다. toggleClass()는 특정 class를 추가하거나 제거하고, trigger()는 이벤트를 발생시킨다. unbind()는 이벤트를 제거하고, visible()은 CSS visibility 속성을 설정한다.",147
617,"80 Websquare Guide SP4 사용자 가이드 OPS 후반부 02.html. 찾아보기 찾아보기 A D E G J L S ㄱ AAWD•DDataCollection•DataMap•Design 뷰 분리•Eeach()•Gget(wqAPI, value)•Jjq()•jQuerySupport•LLinkedDataList•SSelector•SPA•ㄱ그리드 에디터•
위의 문서는 Websquare Guide SP4 사용자 가이드의 후반부 02.html입니다. 이 문서에서는 AAWD, DataCollection, DataMap, Design 뷰 분리, each(), get(wqAPI, value), jq(), jQuerySupport, LinkedDataList, Selector, SPA, 그리드 에디터 등에 대해 설명합니다.",187
618,"이 문서는 웹스퀘어 가이드 SP4 사용자 가이드의 백매터 중 일부입니다. 여기서는 웹스퀘어에서 사용되는 몇 가지 용어와 함수에 대해 설명합니다.
- AAWD: 웹스퀘어 디자이너에서 사용되는 약어로, ""Application, Adapter, Widget, Data""의 첫 글자를 따서 만들어졌습니다.
- DataCollection: 웹스퀘어에서 데이터를 수집하는 데 사용되는 객체입니다.
- DataMap: 데이터를 매핑하는 데 사용되는 객체입니다.
- Design 뷰 분리: 웹스퀘어 디자이너에서 디자인 뷰와 코드 뷰를 분리하는 기능입니다.
- each(): jQuery에서 제공하는 함수 중 하나로, 선택한 요소에 대해 반복 작업을 수행합니다.
- get(wqAPI, value): 웹스퀘어에서 데이터를 가져오는 데 사용되는 함수입니다.
- jq(): 웹스퀘어에서 jQuery를 사용하기 위한 함수입니다.
- jQuerySupport: 웹스퀘어에서 jQuery를 지원하는 데 사용되는 객체입니다.
- LinkedDataList: 웹스퀘어에서 사용되는 데이터 리스트 객체입니다.
- Selector: 웹스퀘어에서 요소를 선택하는 데 사용되는 객체입니다.
- SPA: Single Page Application의 약어로, 웹 애플리케이션의 일종입니다.
- 그리드 에디터: 웹스퀘어에서 제공하는 그리드를 편집하는 데 사용되는 에디터입니다.",427
619,"WebSquare Guide SP4 릴리즈 노트 OPS 6장
1. 요약
1.1. 엔진 정보
- 엔진 버전: 5.0_4.4775B.20221202.171342
- 릴리즈 날짜: 2022년 12월 02일
1.2. 변경 내역
- 컴포넌트별 변경 내역 표
2. Engine
2.1. 버그 (디버깅 메뉴 표시 후 화면 축소 / WESD-1232)
- 수정 전: 화면 우측에 여백이 표시됨
- 수정 후: 여백 없이 화면이 정상적으로 줄어듦
3. $p.openPopup()
3.1. 버그 (창닫기 버튼 / WESD-1266)
- 수정 전: 모바일 안드로이드 디바이스에서 창을 닫는 X 버튼이 동작하지 않음
- 수정 후: 창을 닫는 X 버튼이 정상 동작
3.2. 버그 (창닫기 버튼 / WESD-1262)
- 수정 전: 창을 닫는 X 버튼이 "" 창닫기' ""로 표시됨
- 수정 후: "" 창닫기 ""로 표시됨
4. WebSquare.date
4.1. 기능 (음력 날짜를 양력 날짜로 변환 / WESD-1059)
- WebSquare.date.toSolar() 함수 추가
5. AutoComplete
5.1. 버그 (interactionMode=""true"" / WESD-1271)
- 수정 전: chooseOption 및 chooseOptionLabel 속성 설정이 정상 동작하지 않음
- 수정 후: chooseOption 및 chooseOptionLabel 속성을 설정할 경우 정상 동작
6. GridView
6.1. 변경 (setVisibleRowNum() / WESE-269)
- 변경 전: setVisibleRowNum() 함수를 이용하여 GridView에 표시하도록 설정할 경우, GridView 높이 계산에 오류가 발생
- 변경 후: setVisibleRowNum() 함수를 이용하여 설정한 행의 수만큼 GridView 높이가 정상 계산되어 표시됨
6.2. 변경 (customPasteFormatter / WESD-1272)
- 셀을 편집할 경우, customPasteFormatter 속성값으로 지정한 함수가 호출되지 않음
- 지정한 함수가 정상 호출됨
7. gridView.column
7.1. 버그 (checkboxLabelColumn / WESE-263)
- 수정 전: inputType=""checkbox"" 컬럼의 셀을 체크하면, checkboxLabelColumn 값에 HTML 태그가 포함됨
- 수정 후: HTML 태그를 제외한 텍스트만 포함됨
7.2. 버그 (dataType=""bigDecimal"" / WESD-1263)
- 수정 전: dataType=""bigDecimal"" 컬럼의 displayFormat 속성값이 ""%""을 포함하는 GridView를 advancedExcelDownload() 함수로 다운로드할 경우, 해당 컬럼의 값에 100이 곱해져서 다운로드됨
- 수정 후: 100이 곱해지지 않고 원래의 값이 다운로드됨
8. InputBox
8.1. 버그 (displayFormat / WESD-1242)
- 수정 전: dataType=""number"" 및 displayFormat 속성을 사용할 경우, 숫자 이외의 문자키를 입력하면 전용 브라우저(W-Browser)에서 동작이 멈추는 현상 발생
- 수정 후: 전용 브라우저 멈춤 없이 정상 동작
9. SelectBox
9.1. 기능 (상위 항목 표시 / WESD-1259)
- depthColumnShowPath 속성 추가: SelectBox에서 선택된 항목의 부모 목록을 모두 표시
- depthColumnPathDelimiter 속성 추가: 항목 간의 구분자로 사용할 문자열을 지정
10. Submission
10.1. 버그 (상태 메시지 / WESD-1252)
- 수정 전: submission1을 실행하면 processMsg1 상태 메시지가 표시됨. submission2를 실행하면 processMsg1 상태 메시지가 표시됨.
- 수정 후: submission2를 실행하면 processMsg2 상태 메시지가 표시됨.
11. TabControl
11.1. 버그 (adaptive=""layout"" / WESE-261)
- 수정 전: 화면 스크롤을 내린 후 화면 하단의 탭을 클릭하면, 화면 스크롤이 다시 상단으로 이동
- 수정 후: 화면 스크롤의 이동이 없음.",1213
620,"WebSquare.uiplugin.generator는 특정 영역을 동적으로 추가/삭제하며, 반복 혹은 동일한 영역의 동적 추가/삭제를 지원하는 컴포넌트입니다. Generator 컴포넌트의 안쪽(하위)에 정의된 영역이 반복되며 script를 통해 제어 가능합니다. 일정 관리용 캘린더, 메뉴, 설문지 등에 주로 사용됩니다. Generator 하위에 정의한 자식 컴포넌트의 ID는 재설정되며 초기에 설정한 ID로 접근이 불가능합니다. Generator가 제공하는 API를 통해 자식 컴포넌트에 접근해야 합니다. Generator의 최상위는 <div>로 표현되며 tagname속성을 통해 다른 HTML 태그로 변경 가능합니다. Generator는 다양한 API를 제공합니다. 예를 들어, 컴포넌트에 CSS class를 추가하거나, 이벤트와 핸들러 함수를 동적으로 할당하거나, 컴포넌트의 위치나 크기를 설정하는 등의 기능을 수행할 수 있습니다.",331
621,"웹스퀘어 컴포넌트의 공통 기능을 설명하는 문서입니다. addClass, bind, changeClass, focus, getChild, getDisabled, getGenerator, getID, getInitStyle, getLength, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope 등의 함수가 있습니다. 각 함수의 파라미터와 반환값을 설명하고, 예제 코드를 제공합니다. 이 문서를 참고하여 웹스퀘어 컴포넌트를 사용할 수 있습니다.",138
622,"textbox1.getScope(); // (반환 값) scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. 그렇지 않은 경우, 전역 window 객체를 반환. Return typedescription ObjectWFrame 객체의 scope 객체 또는 전역 window 객체 Sample // (예제) var scope = textbox1.getScopeWindow(); getSize( sizeName ) 웹스퀘어 컴포넌트의 크기(width, height)를 반환. %로 설정된 경우, 픽셀로 변환된 값을 반환. Parameter nametyperequireddescription sizeNameStringY크기 값의 종류. Return typedescription Number컴포넌트의 크기 값 Sample var returnValue = componentId.getSize(""width""); // (반환 예) 100 getStyle( propertyName ) 웹스퀘어 컴포넌트의 CSS 속성 값을 반환. Parameter nametypyperequiredescription propertyNameStringY반환할 CSS 속성 Return typedescription StringCSS 속성 값 Sample var returnValue = input1.getStyle(""width""); // (반환 값) ""144px"" getTitle( ) 컴포넌트의 title 속성 값을 반환. Return typedescription Stringtitle 속성 값. Sample var tmpTitle = input1.getTitle(); // (반환 값 예시) ""이름 입력"" hasClass( className ) 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. Parameter nametyperequireddescription classNameStringY검색할 class 이름 Return typedescription Booleanclass의 포함 여부 Sample var returnValue = input1.hasClass(""tmpInputClass""); // (반환 값) true hide( ) 웹스퀘어 컴포넌트를 화면에서 숨김. Sample componentId.hide(); removeClass( className ) 웹스퀘어 컴포넌트에서 class를 삭제. Parameter nametyperequireddescription classNameStringY삭제 할 class명 Sample input1.removeClass(""tmpInputClass""); setDisabled( disabled ) 웹스퀘어 컴포넌트의 disabled 속성을 설정. Parameter nametyperequireddescription disabledBooleanYdisabled 상태. Sample componentId.setDisabled(true);",542
623,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. propertyStringN: CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). setOpacity( value ): 웹스퀘어 컴포넌트의 불투명도를 설정. setPosition( left , top , mode ): 웹스퀘어 컴포넌트의 위치(left, top)를 설정. setReadOnly( readOnly ): 웹스퀘어 컴포넌트의 readOnly 속성을 설정. setSize( width , height ): 웹스퀘어 컴포넌트의 크기(width, height)를 설정. setStyle( propertyName , value ): 컴포넌트의 propertyName에 해당하는 style의 값을 설정. setUserData( key , value ): 컴포넌트에 사용자 데이터를 설정. show( displayType ): 웹스퀘어 컴포넌트를 화면에 표시. toggleClass( className ): 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. trigger( type , array ): 컴포넌트에서 특정 이벤트를 발생시킴. unbind( type , function ): 컴포넌트에서 이벤트를 제거. visible( flag ): [deprecated] show/hide 혹은 setStyle 사용을 권장.",367
624,"엔진 버전은 5.0_4.4772B.20221124.185837이며, 릴리즈 날짜는 2022년 11월 24일입니다. 변경된 내용은 다음과 같습니다. CKEditor에서 업로드 할 수 있는 이미지 파일 크기 제한, AutoComplete의 renderType=""native"" 속성 설정에 대한 CSS 클래스 추가, CheckComboBox의 enableColumn 속성 버그 수정, GridView의 필터에 대한 HTML 태그 수정, advancedExelUpload() 함수 버그 수정, gridView.column의 embeddedInput=""true"" 속성 설정에 대한 HTML 태그의 title 옵션 값 수정, MultiUpload의 callbackSync 구분속성 추가, Pivot의 headerYMerage: ""true"" 옵션 설정 적용, SelectBox의 renderType=""native"" 속성 설정에 대한 CSS 클래스 추가, refreshSelectedIndex=""true"" 속성 설정 적용, WindowContainer의 options.fixed 옵션 설정 동작 수정. 또한, 설정 파일에 imgUpload-maxUploadSize 항목이 추가되었습니다.",262
625,"WebSquare.uiplugin.WorkflowCollection은 workflowCollection을 정의하는 uiplugin Type입니다. 이 Type은 Property, Event, Method를 가지고 있습니다.
Property Summary:
- 없음
Event Summary:
- onselect: workflowCollection에서 item을 선택했을 때 발생하는 이벤트입니다.
Method Summary:
- getSelectedWorkflow: 선택된 workflow의 정보를 반환합니다.
- refresh: workflowCollection을 새로고침합니다.
Property Detail:
- 없음
Event Detail:
- onselect: workflowCollection에서 item을 선택했을 때 발생하는 이벤트입니다.
  - item: 선택된 item의 정보를 담고 있는 객체입니다.
Method Detail:
- getSelectedWorkflow: 선택된 workflow의 정보를 반환합니다.
  - 반환값: 선택된 workflow의 정보를 담고 있는 객체입니다.
- refresh: workflowCollection을 새로고침합니다.",201
626,"WebSquare.uiplugin.object는 ActiveX를 지원하는 오브젝트입니다. align, classid, codebase, codetype, data, groupid, hspace, id, name, standby, tooltip, tooltipLocaleRef, type, usemap, viewastext, vspace 등의 속성을 가지고 있습니다. 이 중 tooltipLocaleRef는 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 나타냅니다. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능합니다.",150
627,"화면 상단 공통은 페이지 최상단에 위치하며, 페이지 타이틀과 공통 버튼을 제공합니다. 이는 화면 내 상단 공통 레이아웃을 만드는 데 사용됩니다. 상단 우측 버튼 영역에는 인쇄, 도움말, 즐겨찾기 공통 버튼이 들어갑니다. 아래 그림 9-2와 그림 9-3은 각각 화면 상단 공통 영역과 상단 우측 버튼 영역을 나타냅니다.",180
628,"화면 Layout Snippets는 페이지 내에서 화면을 분할하고 배치하는 데 사용된다. 페이지를 시작할 때 all.css와 content.css를 import하며, 좌/우, 좌/중/우 등 다양한 분할 방식을 제공한다. 분할 방식은 class를 수정하여 변경할 수 있으며, 사용자가 직접 width 값을 지정할 수도 있다. 또한, 좌측 고정 2단 분할과 같이 가로고정 Layout의 고정값을 변경할 수 있다.",143
629,"PivotTable은 다차원 데이터 분석 기능을 제공하는 테이블로, 평균 합, 카운트 등을 나타내고 싶을 때 사용합니다. Property 중 allTotalName은 SP2 총합계 부분 label을, autoFit은 pivot table에 정의된 width에 맞춰 여백이 없이 가득 채워주는 기능을 나타냅니다. autoFitMinWidth는 pivot의 최소 width(px단위)를 지정하는 기능이며, autoFit속성의 값이 allColumn일 때 적용됩니다. dataList은 pivotTable과 연동할 dataList id를, defaultAggregator는 기본 aggregator(통계함수)를 설정하는 옵션을 나타냅니다. 그 외에도 cols, rows, vals 등 다양한 Property가 있으며, CSS Overriding을 통해 디자인을 바꿀 수 있습니다.",241
630,"Anchor4.1Anchor는 <a> 태그를 표현하기 위한 컴포넌트입니다. 레이블 텍스트만으로 정보를 전달할 수 없는 경우, title 속성에 내용을 기술합니다. href, name, target 속성을 사용할 수 있습니다. 이 컴포넌트를 사용하여 '본문 바로가기'나 '메뉴 건너뛰기'를 구현할 수 있습니다. 마우스 이벤트에 대응하는 키보드 이벤트를 함께 제공하고, 포커스 상태의 테두리가 명확하게 나타나며, 적절한 링크 텍스트를 제공하고 title 속성을 이용하여 부가 설명을 제공해야 합니다. 예제 코드는 다음과 같습니다.
<w2:anchor id=""anchor2"" title=""새창"" href=”http://naver.com” target=”_blank”>     <xf:label><![CDATA[링크텍스트]]></xf:label> </w2:anchor>",286
631,Article5.1Articlehtml5 태그는 독립적인 자체에 포함된 내용을 지정할 때 사용됩니다. 이 태그는 접근성과 직접적인 관계가 없습니다.,58
632,"PageList는 데이터양이 많은 그리드를 사용할 때 유용한 컴포넌트입니다. 페이지 수와 페이지를 선택할 수 있도록 페이징 처리를 제공합니다. API를 사용하여 정상 작동하며, Property에서는 buttonShowType, deliImage, deliWidth, delimiter, displayButtonType, displayFormat 등을 설정할 수 있습니다. 브라우저 캡쳐화면과 Class를 적용하여 스타일을 변경할 수 있으며, setCount() API를 사용하여 페이지 수를 설정할 수 있습니다. pagelist 컴포넌트를 designView에 그리고 property의 Class에 사용자 정의 class를 정의한 다음 Preview하여 디자인을 바꿀 수 있습니다.",193
633,"WebSquare5는 Static 및 Absolute 그리기 모드를 제공합니다. Static 모드는 Palette 뷰에서 추가할 컴포넌트를 클릭하고 Design 뷰에서 추가할 위치를 지정하여 컴포넌트를 추가합니다. Absolute 모드는 Palette 뷰에서 추가할 컴포넌트를 선택하고 Design 뷰에서 직접 마우스 드래그하여 컴포넌트의 위치와 크기를 결정합니다. 사용자는 드래그 & 드롭을 통해 컴포넌트를 선택, 이동, 리사이징할 수 있습니다. 컴포넌트를 클릭 후 원하는 크기로 드래깅하여 크기를 변경하거나 여러 컴포넌트를 한번에 선택하여 이동하는 것도 가능합니다. 컴포넌트 생성 및 이동 시 동일한 모드를 사용하며, Group과 같이 하위에 컴포넌트를 포함할 수 있는 경우, 하위 이동도 가능합니다.",281
634,"Design 뷰와 Component 뷰에서 Group 하위로 이동된 컴포넌트를 확인할 수 있습니다. 컴포넌트를 클릭하거나 마우스를 가져다 대면 툴팁이 표시되며, 이벤트 및 ref 바인딩 정보를 확인할 수 있습니다. 선택한 컴포넌트에 대한 퀵 툴바가 스페이스바를 누르면 나타나며, GridView의 경우 inputType 속성을 변경할 수 있습니다. 컴포넌트를 우클릭하면 컨텍스트 메뉴가 표시되며, 등록된 이벤트는 "" * "" 기호와 함께 표시됩니다. 또한, Palette에서 컴포넌트를 검색하거나 Property 뷰와 Outline 뷰에서 속성과 요소를 검색할 수 있습니다.",247
635,"10.8 검색 기능
컴포넌트 명이나 설명을 키워드로 입력하여 검색할 수 있습니다. Property, Event, Style, Meta 탭에서 Key, Value, Description 항목에 대한 키워드를 통해 각 속성 및 이벤트, 스타일 등을 검색할 수 있습니다. Design, Script, Head 탭에서 키워드를 입력하여 해당 요소를 검색할 수 있습니다. WebSquare Search 기능을 이용하여 WebSquare 페이지 파일을 효율적으로 검색할 수 있습니다.
10.9 Script 뷰
Script 뷰에서는 스크립트 작성 시, Ctrl + Space를 누르면 자동 완성 기능이 제공됩니다. 또한, 코드 작성 시 자동 들여쓰기를 지원하며, 작성한 스크립트를 포맷할 수 있습니다.
10.10 Property 뷰
Design 뷰에서 컴포넌트를 선택하면 해당 컴포넌트의 속성이 Property 뷰에 표시됩니다. 각 속성을 선택하면, 해당 속성에 대한 정보가 툴팁으로 표시됩니다. 속성은 카테고리 별로 분류되어 표시되며, 사용자가 직접 입력한 값은 검정색으로 굵게 표시됩니다. 또한, 속성을 오름차순 정렬, 내림차순 정렬, 카테고리 표시 순으로 표시할 수 있습니다.
10.11 Outline 뷰
Outline 뷰에서는 Design, Script, Head 탭에서 각각 검색 기능을 제공합니다. Design 탭은 현재 화면의 구성 형태를 표시하며, Script 탭은 현재 페이지에 포함된 스크립트 목록을 표시합니다. Head 탭에서는 DataCollection, Submission 항목을 추가할 수 있습니다.
10.12 화면 가이드
Design 뷰에서는 눈금자, 눈금선, 안내선 기능을 제공합니다. 눈금자는 Design 뷰 외곽에 표시되며, 눈금선은 Design 뷰 바탕에 격자 무늬로 표시됩니다. 안내선은 눈금자 위의 원하는 지점에서 생성할 수 있습니다. 또한, WebSquare Studio는 뷰어 기능을 제공하여 WebSquare Viewer에서 페이지가 어떻게 렌더링되는지 확인할 수 있습니다.",697
636,"브라우저 설정은 설정 아이콘을 클릭하여 확인할 수 있습니다. [Windows] - [Preferences] - [External Programs]에서 개발자가 작업한 파일을 표시할 수 있으며, 기본 브라우저에서도 확인 가능합니다. 스타일 제거 기능을 사용하면 컴포넌트를 스타일 정보 없이 그릴 수 있습니다. WebSquare5 Studio는 SVN 및 Git 플러그인을 포함하고 있으며, 고유 ID 부여 기능을 사용하여 중복되지 않는 ID를 부여할 수 있습니다. Design 뷰 확대/축소 아이콘을 사용하여 Design 뷰 화면을 확대/축소할 수 있으며, 청사진 기능을 사용하여 컴포넌트의 가시성을 높일 수 있습니다. 또한, 툴팁, 눈금자, 안내선, 퀵 툴바 등 다양한 기능을 제공합니다.",278
637,"11. 프로젝트 및 페이지 생성
11.1 프로젝트 생성
- 모든 파일은 프로젝트 단위로 생성됩니다.
- Project Explorer에서 [New] - [WebSquare Project]를 선택하여 프로젝트를 생성합니다.
- 프로젝트 이름을 입력하고 Finish 버튼을 클릭합니다.
11.2 페이지 생성
- 프로젝트를 우클릭한 후 [New] - [WebSquare Page]를 선택하여 새로운 화면 파일을 작업합니다.
- 이름을 입력하고 Finish 버튼을 클릭합니다.
- 페이지 생성 시, Page 템플릿 기능을 이용하면 더욱 편리합니다.
11.3 페이지 템플릿
- WebSquare5는 Page를 템플릿 기반으로 관리하고 생성할 수 있는 기능을 제공합니다.
- 템플릿으로 등록된 WebSquare Page 파일들은 썸네일 이미지 형태로 제공되기 때문에 개발자들은 손쉽게 템플릿을 선택하고 원하는 Page를 좀 더 효율적으로 개발할 수 있습니다.
11.4 onpageload & onpageunload
- Scope 기능을 사용할 경우, Page 생성 시 onpageload와 onpageunload 이벤트가 자동 생성됩니다.
- 각 이벤트에 대한 동작을 추가할 수 있습니다.",375
638,"WebSquare.uiplugin.scheduleCalendar는 일정을 칼렌다 형태로 표시하는 컴포넌트이다. 3가지 형태로 표시 가능하며, HTML의 class 속성과 동일한 기능을 제공하는 class 속성과 CSS 파일 렌더링 순서를 조정하는 cssRenderOrder 속성을 제공한다. dataList 속성으로 ScheduleCalendar와 바인딩할 DataList를 지정하고, defaultDate 속성으로 컴포넌트 로딩 후 초기 화면에 설정되는 날짜를 지정할 수 있다. editable 속성을 설정하면 일정을 변경할 수 있다. 
일정의 '종료 날짜' 값으로 사용할 dataList의 column id를 설정하는 endColumn 속성과 일정을 정렬할 때 기준 값으로 설정될 dataList의 column id를 설정하는 eventOrderColumn 속성을 제공한다. headerLeftBtn 속성으로 좌측 상단에 세 개의 버튼(""<"", "">"", ""오늘"")을 표시하고, headerRightBtn 속성으로 우측 상단에 세 개의 스케줄 단위 버튼(""월"", ""주"", ""일"")을 표시할 수 있다. 
헤더의 중앙 타이틀을 보이도록 설정하는 headerTitle 속성과 컴포넌트 ID를 설정하는 id 속성, 일정의 고유 ID로 사용할 dataList의 column id를 설정하는 idColumn 속성을 제공한다. includeScheduleEnd 속성은 fullCalendar 내부 정책으로 스케줄의 마지막 일자가 화면에 표시되지 않는 현상을 해결하기 위한 속성이다. 
start, end column에 입력된 날짜 포멧을 설정하는 ioFormat 속성과 ScheduleCalanedar에서 사용할 언어를 설정하는 locale 속성, 스케줄의 마지막 일자에 스케줄을 렌더링하는 기준 시간을 설정하는 nextDayThreshold 속성, 여러 날짜의 선택 가능 여부를 설정하는 selectable 속성, Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정하는 tabIndex 속성, 일정의 theme을 지정할 dataList의 column id를 설정하는 themeColumn 속성, 일정에 출력되는 시간 표시 형식을 설정하는 timeFormat 속성, 일정의 title 값과 사용자가 정의한 값을 title 속성으로 사용하는 titleColumn 속성, 사용자가 선택한 값에 대한 툴팁 표시 여부를 설정하는 tooltipDisplay 속성, ScheduleCalendar에서 사용할 버전을 설정하는 version 속성 등이 있다. 
addSchedule() 메소드나 selectable 속성을 이용하여 스케줄을 추가할 때 발생하는 onaddschedule 이벤트, 마우스로 날짜를 클릭했을 때 발생하는 onclick 이벤트, 마우스 드래그-앤-드랍을 이용하여 스케줄을 이동하거나 리사이징할 때 발생하는 onmoveschedule 이벤트를 제공한다. 
addClass(), bind(), changeClass(), changeView(), focus(), getDataListInfo(), getDisabled(), getGenerator(), getID(), getInitStyle(), getOpacity(), getOriginalID(), getPluginName(), getPosition(), getReadOnly(), getScheduleIndex(), getScheduleInfo(), getScope(), getScopeWindow(), getSize(), getStyle(), getTitle(), getUdcHome(), getUdcRoot(), getUserData(), setUserData() 등 다양한 메소드를 제공한다.",940
639,"웹스퀘어 컴포넌트의 여러 속성들을 설명하는 문서입니다. show(displayType)는 웹스퀘어 컴포넌트를 화면에 표시하고, toggleClass(className)는 특정 class를 추가하거나 제거합니다. trigger(type, array)는 컴포넌트에서 특정 이벤트를 발생시키며, unbind(type, function)는 이벤트를 제거합니다. visible(flag)는 class 속성과 같은 기능을 제공합니다. cssRenderOrder는 CSS 파일 렌더링 순서를 조정하며, dataList은 ScheduleCalendar와 바인딩할 DataList를 지정합니다. defaultDate는 컴포넌트 로딩 후 초기 화면에 설정되는 날짜를 지정하고, defaultView는 초기 화면에 표시되는 일정 단위를 설정합니다. editable은 일정을 변경할 수 있는 기능을 설정하며, endColumn은 일정의 '종료 날짜' 값으로 사용할 dataList의 column id를 지정합니다. eventLimit는 이벤트가 여러 개 등록된 경우, 화면에 보이는 이벤트 개수를 제한합니다. eventOrderColumn은 일정을 정렬할 때 기준 값으로 설정될 dataList의 column id를 지정합니다. headerLeftBtn은 좌측 상단에 버튼을 표시하며, headerRightBtn은 우측 상단에 스케줄 단위 버튼을 표시합니다. headerTitle은 헤더의 중앙 타이틀을 보이도록 설정하며, id는 컴포넌트 ID를 지정합니다. includeScheduleEnd는 스케줄의 마지막 일자가 화면에 표시되지 않는 현상을 해결하기 위한 속성입니다. ioFormat와 start, end column은 날짜 포멧을 설정하며, lang은 ScheduleCalanedar에서 사용할 언어를 지정합니다. locale은 3.6 이상 버전에서 사용될 언어를 설정하며, nextDayThreshold는 스케줄의 마지막 일자에 스케줄을 렌더링하는 기준 시간을 지정합니다. selectable은 여러 날짜의 선택 가능 여부를 설정하며, tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 지정합니다. themeColumn은 일정의 theme을 지정할 dataList의 column id를 지정하며, timeFormat은 일정에 출력되는 시간 표시 형식을 설정합니다. titleColumn은 일정의 title 값으로 사용할 dataList의 column id를 지정하며, titleFormatter는 사용자가 정의한 값을 title 속성으로 사용합니다. tooltipDisplay는 사용자가 선택한 값에 대한 툴팁 표시 여부를 설정합니다.",771
640,"옵션 설명: ""true""는 툴팁을 표시하고, ""false""는 툴팁을 표시하지 않음. version은 ScheduleCalendar에서 사용할 버전을 설정하는데, ""2.3""은 fullCalendar 2.3.2 버전을 로딩하고, ""3.6""은 3.6.2 버전을 로딩함. viewIcon은 화면에 사용될 헤더 아이콘으로, 일정 종류 및 순서를 정의함. addSchedule() 메소드는 스케줄을 추가할 때 발생하며, 추가된 스케줄 정보를 JSON 형식으로 반환함. onclick 이벤트는 마우스로 날짜를 클릭했을 때 발생하며, 포커스된 날짜 값이 반환됨. onmoveschedule 이벤트는 마우스 드래그-앤-드랍을 이용하여 스케줄을 이동하거나 리사이징할 때 발생하며, 이동 전후의 스케줄 정보를 JSON 형식으로 반환함. addClass() 메소드는 컴포넌트에 CSS class를 추가함. addSchedule() 메소드는 일정을 추가함. bind() 메소드는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당함. changeClass() 메소드는 컴포넌트의 class를 변경함. changeView() 메소드는 scheduleCalendar의 view를 변경함. focus() 메소드는 컴포넌트에 포커스를 줌. getDataListInfo() 메소드는 컴포넌트와 바인딩된 DataList를 반환함. getDisabled() 메소드는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환함. getGenerator() 메소드는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환함. getID() 메소드는 웹스퀘어 컴포넌트의 ID를 반환함. getInitStyle() 메소드는 컴포넌트의 초기 스타일을 반환함. getOpacity() 메소드는 웹스퀘어 컴포넌트의 불투명도를 반환함. getOriginalID() 메소드는 웹스퀘어 컴포넌트의 originalID를 반환함.",646
641,"WFrame에서 사용되는 컴포넌트 ID는 prefix(wframeID + ""_"")가 추가된 originalID로 변경됩니다. getPluginName은 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하며, getPosition은 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. getReadOnly는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScheduleIndex는 일정 ID에 해당하는 dataList rowIndex를 반환합니다. getScope는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하며, getScopeWindow는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체의 scope 객체를 반환합니다. getSize는 웹스퀘어 컴포넌트의 크기(width, height)를 반환하며, getStyle은 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. getTitle은 컴포넌트의 title 속성 값을 반환하며, getUdcHome는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다. getUdcRoot는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, 파일명을 포함하지 않습니다. getUserData는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환합니다. getView는 ScheduleCalendar의 현재 view 정보를 조회하며, gotoCalendar는 특정 날짜로 이동합니다.",410
642,"일정을 삭제하거나, 컴포넌트의 위치, 크기, CSS 속성 등을 설정하는 웹스퀘어 컴포넌트의 메소드를 설명합니다. setDisabled() 메소드는 컴포넌트의 disabled 속성을 설정하며, setReadOnly() 메소드는 readOnly 속성을 설정합니다. setPosition() 메소드는 컴포넌트의 위치를 설정하고, setSize() 메소드는 크기를 설정합니다. setStyle() 메소드는 CSS 속성을 설정하며, setUserData() 메소드는 임의의 데이터를 설정합니다. show() 메소드는 컴포넌트를 화면에 표시하고, hide() 메소드는 컴포넌트를 숨깁니다. toggleClass() 메소드는 특정 class를 추가하거나 제거합니다. hasClass() 메소드는 컴포넌트가 특정 class를 포함하는지 확인합니다. setEventPause() 메소드는 지정한 이벤트를 중단하거나 중단을 해제합니다. setHeaderBtn() 메소드는 칼렌더 좌우 상단에 버튼 및 타이틀을 설정하며, setDayNameStyle() 메소드는 칼렌더의 요일 컬럼에 적용할 스타일을 지정합니다. removeClass() 메소드는 컴포넌트에서 class를 삭제합니다.",384
643,"웹스퀘어 컴포넌트에서 class를 추가하거나 삭제하는 방법과 이벤트를 발생시키고 제거하는 방법, 그리고 visible 함수에 대한 설명이 있다. class를 추가하거나 삭제할 때는 addClass와 removeClass를 사용하며, 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 설정을 추가해야 한다. 이벤트를 발생시키기 위해서는 trigger 함수를 사용하며, 이벤트를 제거하기 위해서는 unbind 함수를 사용한다. visible 함수는 show/hide 혹은 setStyle 사용을 권장하며, 엔진 내부적으로 CSS visibility 속성을 설정한다.",183
644,"WebSquare.uiplugin.slideHide는 슬라이딩으로 숨김/표시가 가능한 컴포넌트로, 이벤트에 따라 특정 layer를 animation으로 표시한다. 처음에는 정해진 크기(showSize)만큼만 표시되며, slideEvent가 발생할 경우, slideDirection으로 정해진 크기(moveSize)만큼 이동하면서 내부 내용을 표시한다. 퀵 메뉴와 같이 마우스를 올리면 UI를 잠시 표시하는 상황에서 사용한다. accessibility 속성은 웹 접근성 지원 기능을 사용할지에 대한 여부를 설정하며, class 속성은 HTML의 class 속성과 동일한 기능을 제공한다. firstStatus는 처음 표시/숨김 여부를 설정하며, hideEvent는 hide가 발생할 이벤트를 설정한다. id는 컴포넌트 ID를 설정하며, moveSize는 한번에 움직이는 단위를 설정한다. showSize는 처음에 보여주고 있는 size를 설정하며, slideDirection은 슬라이딩 방향을 설정한다.",315
645,"- ""right"": 오른쪽 방향
- slideEvent: slide가 발생할 이벤트
- tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. HTML의 tabindex 속성과 동일
- useKeyboardNavagation: slideHide에 키보드 제어 기능을 직접 제공할지에 대한 여부. ""true""일 경우 slideHide에 tabIndex=0을 추가하여 포커스를 키보드로 이동할 수 있게 된다. 또한 포커스가 이동한 상태에서 space 또는 enter키를 입력하면 slideHide가 toggle되는 기능이 추가로 제공된다. ""false"" (기본 값)일 경우 tabIndex 속성을 별도로 설정하지 않는 이상 slideHide에 포커스가 키보드 tab키로 이동되지 않으며, 별도의 toggle 키보드 제어 기능을 제공하지 않는다.
- accessibility=""false"": 기본적으로는 useKeyboardNavagation보다는 accessibility 속성을 true로 적용하고 사용할 것을 권장한다.
- userData1~3: 사용자 정의 데이터 속성. getUserData(""userData1~3"") API를 통해 설정한 값을 얻어올 수 있음.
- addClass(className): 컴포넌트에 CSS class를 추가
- bind(eventType, function): 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당
- changeClass(oldClassName, newClassName): 웹스퀘어 컴포넌트의 class를 변경
- focus(): 웹스퀘어 컴포넌트에 포커스를 줌
- getDisabled(): 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환
- getGenerator(): 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환
- getID(): 웹스퀘어 컴포넌트의 ID를 반환
- getInitStyle(CSS): 컴포넌트의 초기 스타일을 반환
- getOpacity(): 웹스퀘어 컴포넌트의 불투명도를 반환
- getOriginalID(): 웹스퀘어 컴포넌트의 originalID를 반환
- getPluginName(): 웹스퀘어 컴포넌트의 이름(pluginName)을 반환
- getPosition(positionName): 웹스퀘어 컴포넌트의 위치(left, top)를 반환
- getReadOnly(): 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환",713
646,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. 각 함수들은 해당 컴포넌트의 속성 값을 반환하거나 설정하는 역할을 합니다. 예를 들어, getReadOnly 함수는 readOnly 속성 값을 반환하며, setDisabled 함수는 disabled 속성 값을 설정합니다. 이 외에도, getSize 함수는 컴포넌트의 크기 값을 반환하며, getStyle 함수는 CSS 속성 값을 반환합니다. 이러한 함수들을 사용하여 웹스퀘어 컴포넌트를 보다 효율적으로 제어할 수 있습니다.",174
647,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. propertyStringN: CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). setOpacity( value ): 웹스퀘어 컴포넌트의 불투명도를 설정. setPosition( left, top, mode ): 웹스퀘어 컴포넌트의 위치(left, top)를 설정. setReadOnly( readOnly ): 웹스퀘어 컴포넌트의 readOnly 속성을 설정. setSize( width, height ): 웹스퀘어 컴포넌트의 크기(width, height)를 설정. setSlideHide( status ): slide 상태 또는 hide 상태로 변환. setStyle( propertyName, value ): 웹스퀘어 컴포넌트의 CSS 속성을 설정. setUserData( key, value ): 웹스퀘어 컴포넌트에 임의의 데이터를 설정. setWidth( width ): slideHide 객체의 넓이를 설정. show( displayType ): 웹스퀘어 컴포넌트를 화면에 표시. startHide(): slideHide객체의 hide를 시작. startSlide(): slideHide객체의 slide를 시작. toggleClass( className ): 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. trigger( type, array ): 컴포넌트에서 특정 이벤트를 발생시킴. unbind( type, function ): 컴포넌트에서 이벤트를 제거. visible( flag ): [deprecated] show/hide 혹은 setStyle 사용을 권장.",440
648,"WebSquare.uiplugin.embed는 Flash 사용을 지원하는 임베드 기능을 제공합니다. 이 기능은 다양한 속성과 이벤트를 가지고 있습니다. 객체의 단축 접속키(key)를 설정하는 accesskey, 객체가 텍스트와 연관된 정렬을 설정하는 align, 전체선택 가능 여부를 설정하는 atomicselection, 자동시작 여부를 설정하는 autostart, 배경색상을 설정하는 bgcolor, 객체에 적용할 class를 설정하는 class, 내용을 읽는 순서를 설정하는 dir, 컴포넌트 비활성 여부를 설정하는 disabled, groupid 속성을 설정하는 groupid, 숨김 여부를 설정하는 hidden, 포커싱 인식 여부를 설정하는 hidefocus, 컴포넌트 ID를 설정하는 id, 사용된 언어 코드를 설정하는 lang, 작성된 스크립트 언어를 설정하는 language, 반복 재생 횟수를 설정하는 loop, name 속성을 설정하는 name, 전경 또는 배경색을 설정하는 palette, 사용된 plug-in의 주소를 설정하는 pluginspage, 품질을 설정하는 quality, 콘트롤 영역 표시 여부를 설정하는 ShowControls, 디스플레이 영역 표시 여부를 설정하는 ShowDisplay, 상태바 영역 표시 여부를 설정하는 ShowStatusBar, 로딩 주소(URL)를 설정하는 src, 단위를 설정하는 units, 선택 비활성 유무를 설정하는 unselectable, wmode 속성을 설정하는 wmode 등이 있습니다. 이러한 속성들은 embed 태그의 속성으로 사용됩니다.",442
649,"위젯 컨테이너는 위젯 생성 및 관리를 담당하며, 위젯들 간의 상호작용을 관리합니다. 드래그-앤-드롭을 통한 위젯 재배치 및 리사이징이 가능하며, 내부적으로 이차원 격자로 구성됩니다. 위젯 이동 및 리사이징이 가능하며, 내부 위젯들의 정보를 JSON을 통해 추출하고 원복할 수 있습니다. 위젯 컨테이너는 다양한 속성과 이벤트를 가지고 있으며, 위젯 추가, 삭제, 이동, 리사이징 등 다양한 기능을 제공합니다.",199
650,"웹스퀘어 컴포넌트의 속성과 이벤트에 대한 설명이다. setCols, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setTitleClass, setUserData, show, toggleClass, trigger, unbind, visible 등의 속성과 onafterwidgetclose, onbeforewidgetclose, onclickcustombtn, onload, onwidgetfix, onwidgetload, onwidgetmaximize, onwidgetminimize, onwidgetmove, onwidgetresize, onwidgetrestore 등의 이벤트가 있다. 각 속성과 이벤트에 대한 자세한 설명이 포함되어 있다.",161
651,"addClass( className ) : 컴포넌트에 CSS class를 추가합니다. Parameter로 className을 받으며, 추가할 class의 이름을 지정합니다.
addWidgets( option ) : widget의 options 객체, 또는 options 객체의 배열을 받아 새로운 widget을 추가합니다. Parameter로 option을 받으며, widget 생성 도중 오류가 발생할 시, 모든 생성을 취소하고 rollback을 시도합니다.
bind( eventType , function ) : 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다. Parameter로 eventType과 function을 받으며, 이벤트에 대한 핸들러 함수를 정의하여 할당할 수 있습니다.
changeClass( oldClassName , newClassName ) : 웹스퀘어 컴포넌트의 class를 변경합니다. Parameter로 oldClassName과 newClassName을 받으며, 변경할 class와 새로 사용할 class를 지정합니다.
enableWidgetMove( isMovable ) : 위젯컨테이너의 위젯이동 여부를 설정합니다. Parameter로 isMovable을 받으며, 이동 가능 여부를 지정합니다.
enableWidgetResize( isResizable ) : 위젯컨테이너의 위젯리사이즈 여부를 설정합니다. Parameter로 isResizable을 받으며, 리사이징 가능 여부를 지정합니다.
enableWidgetTitle( showTitle ) : 위젯컨테이너 내부의 모든 위젯의 타이틀바를 제어합니다. Parameter로 showTitle을 받으며, 타이틀을 보여줄지 숨길지의 여부를 지정합니다.
exportWidget( widgetId ) : widgetContainer가 현재 가지고 있는 여러 개의 위젯 중 주어진 ID에 해당하는 위젯 객체만 반환합니다. Parameter로 widgetId를 받으며, ID에 해당하는 정보가 없을 경우 null을 반환합니다.
exportWidgets( ) : widgetContainer가 현재 가지고 있는 widget들의 정보를 객체의 배열(JSON)로 반환합니다.
focus( ) : 웹스퀘어 컴포넌트에 포커스를 줍니다.
getDisabled( ) : 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다.
getGenerator( ) : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다.
getID( ) : 웹스퀘어 컴포넌트의 ID를 반환합니다.
getInitStyle( CSS ) : 컴포넌트의 초기 스타일을 반환합니다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작하며, CSS를 지정하지 않으면 모든 정보를 출력합니다.
getOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 반환합니다. 엔진 내부적으로 CSS의 opacity 속성 값을 반환하며, 반환 값은 0 ~ 1 사이의 실수입니다.
getOriginalID( ) : 웹스퀘어 컴포넌트의 originalID를 반환합니다. originalID는 Scope 기능을 사용할 경우 존재하며, scope=""true""인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + ""_"")가 추가되는 방식으로 변경됩니다.",885
652,"getID( ) : 웹스퀘어 컴포넌트의 ID를 반환한다. (웹스퀘어 컴포넌트 공통.) getOriginalID( ) : prefix가 추가되기 전 ID를 반환한다. (웹스퀘어 컴포넌트 공통.) getPluginName( ) : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환한다. getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환한다. getReadOnly( ) : 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환한다. getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다. getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환한다. getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getTitle( ) : 컴포넌트의 title 속성 값을 반환한다. getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData( key ) : 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getWidgetById( id ) : widget의 id를 받아 해당 widget 객체를 반환한다. getWidgetByTitle( id ) : widget의 title을 받아 해당 widget 객체를 반환한다.",463
653,"위젯 컨테이너에서 사용되는 함수들에 대한 설명입니다. 함수들은 각각 다른 기능을 수행합니다. 함수들은 다음과 같습니다. getWidgetByTitle, hasClass, hide, importWidget, importWidgets, isValidPos, moveWidget, redraw, removeClass, removeTitleClass, removeWidgets, resizeWidget, setCols, setDisabled, setEventPause, setInitStyle.",100
654,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. NCSS 속성을 지정하지 않으면 모든 속성의 초기 값으로 복구된다. 웹스퀘어 컴포넌트의 불투명도를 설정하려면 setOpacity( value )를 사용한다. setPosition( left , top , mode )를 사용하여 웹스퀘어 컴포넌트의 위치(left, top)를 설정할 수 있다. readOnly 속성을 설정하려면 setReadOnly( readOnly )를 사용한다. setSize( width , height )를 사용하여 웹스퀘어 컴포넌트의 크기(width, height)를 설정할 수 있다. setStyle( propertyName , value )를 사용하여 웹스퀘어 컴포넌트의 CSS 속성을 설정할 수 있다. titleClass 속성에 따라 정의된 타이틀 영역에 클래스를 추가하려면 setTitleClass( id , className )를 사용한다. 웹스퀘어 컴포넌트에 임의의 데이터를 설정하려면 setUserData( key , value )를 사용한다. show( displayType )를 사용하여 웹스퀘어 컴포넌트를 화면에 표시할 수 있다. toggleClass( className )를 사용하여 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가할 수 있다. trigger( type , array )를 사용하여 컴포넌트에서 특정 이벤트를 발생시킬 수 있다. unbind( type , function )를 사용하여 컴포넌트에서 이벤트를 제거할 수 있다. visible( flag )는 show/hide 혹은 setStyle 사용을 권장하며, 엔진 내부적으로 CSS visibility 속성을 설정한다.",483
655,"이 문서는 웹스퀘어 개발자 가이드의 백매터 중 하나인 ""OPS back matter 01.html""입니다. 이 문서에서는 웹스퀘어의 Workflow과 WorkflowCollection에 대해 설명합니다. Workflow는 작업 흐름을 정의하고 실행하는 데 사용되며, WorkflowCollection은 여러 Workflow를 그룹화하여 관리하는 데 사용됩니다. 아래는 예시 코드입니다.
Workflow 예시 코드:
```
<Workflow name=""MyWorkflow"">
  <StartNode>
    <Action type=""WebService"" url=""http://example.com/api/start"" method=""POST"" />
    <Transition to=""NextNode"" />
  </StartNode>
  <ActionNode name=""NextNode"">
    <Action type=""WebService"" url=""http://example.com/api/next"" method=""POST"" />
    <Transition to=""EndNode"" />
  </ActionNode>
  <EndNode />
</Workflow>
```
WorkflowCollection 예시 코드:
```
<WorkflowCollection>
  <Workflow name=""Workflow1"">
    <!-- Workflow1 definition -->
  </Workflow>
  <Workflow name=""Workflow2"">
    <!-- Workflow2 definition -->
  </Workflow>
</WorkflowCollection>
```",276
656,"WebSquare.uiplugin.editor는 웹 에디터(CKeditor)를 제공하는 컴포넌트로, CKEditor를 생성하고 옵션을 통해 다양한 기능을 지원합니다. editorHeight, editorWidth, id, imageLoadURL, language, menubar, resizable, subDir, tabIndex, transParentDisabled, useCKFinder, version 등의 속성과 onchange, onload 등의 이벤트, addClass, bind, changeClass, getDisabled, getDomain, getGenerator, getHTML, getID, getImageLoadURL, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getText, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, resize, setDisabled, setDomain, setEventPause, setHTML, setImageLoadURL, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setText, setUserData, show, toggleClass, trigger, unbind, visible 등의 메소드를 제공합니다. 이 컴포넌트는 CKFinder 설정 시 추가적인 서버 설정이 필요하며, 사용 시 주의해야 합니다.",288
657,"input1 컴포넌트에 onclick 이벤트 핸들러 함수를 할당하는 예제와, 웹스퀘어 컴포넌트의 class를 변경하는 changeClass 함수, 그리고 웹스퀘어 컴포넌트의 여러 속성 값을 반환하는 함수들(getDisabled, getDomain, getGenerator, getHTML, getID, getImageLoadURL, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize)에 대한 설명이 있다. 이 함수들은 각각의 기능에 따라 필요한 파라미터를 받아서 값을 반환하며, 웹스퀘어 컴포넌트의 공통적인 속성 값을 다룬다. 예제 코드를 통해 함수 사용 방법을 확인할 수 있다.",219
658,"getSize( ) : 컴포넌트의 크기 값을 반환한다. getStyle( ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getStyleValue( ) : 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환한다. getText( ) : editor의 textarea에서 html태그를 무시하고 text만 반환한다. getTitle( ) : 컴포넌트의 title 속성 값을 반환한다. getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData( ) : 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다. hasClass( ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨긴다. removeClass( ) : 웹스퀘어 컴포넌트에서 class를 삭제한다. resize( ) : editor의 resize를 적용한다. setDisabled( ) : 컴포넌트의 disabled 속성을 설정한다. setDomain( ) : CrossDomain 처리를 위해 Editor에 domain을 셋팅한다. setEventPause( ) : 지정한 이벤트를 중단한다. setHTML( ) : html을 editor에 textarea에 입력한다. setImageLoadURL( ) : imageLoadURL을 셋팅한다. setInitStyle( ) : 컴포넌트의 초기 스타일을 복구한다. setOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition( ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다.",527
659,"컴포넌트의 top을 100px로 설정하는 방법은 componentId.setPosition(null, 100)입니다. readOnly 속성을 활성화하려면 setReadOnly(true)를 사용하고, setSize(width, height)를 사용하여 웹스퀘어 컴포넌트의 크기를 설정할 수 있습니다. setStyle(propertyName, value)를 사용하여 CSS 속성을 설정할 수 있으며, setText(value)를 사용하여 에디터에 값을 입력할 수 있습니다. setUserData(key, value)를 사용하여 웹스퀘어 컴포넌트에 임의의 데이터를 설정할 수 있습니다. show(displayType)를 사용하여 웹스퀘어 컴포넌트를 화면에 표시할 수 있으며, toggleClass(className)를 사용하여 특정 클래스를 추가하거나 제거할 수 있습니다. trigger(type, array)를 사용하여 컴포넌트에서 이벤트를 발생시키고, unbind(type, function)를 사용하여 이벤트를 제거할 수 있습니다. visible(flag)는 deprecated되었으며, show/hide 혹은 setStyle 사용을 권장합니다.",303
660,"80 Websquare Guide SP4 사용자 가이드 OPS 파트 01.html. 
I. 소개
1. 구성
2. 엔진 설치
3. 스튜디오 설치
4. 디버깅
Websquare Guide SP4 사용자 가이드 OPS 파트 01.html은 Websquare 엔진 및 스튜디오 설치와 디버깅에 대한 소개를 제공합니다. 이 가이드는 Websquare 사용자가 엔진과 스튜디오를 설치하고 디버깅하는 데 필요한 정보를 제공합니다. 이 가이드를 사용하여 Websquare를 더욱 효율적으로 사용할 수 있습니다.",181
661,"WebSquare.uiplugin.fwRealtimeChart는 FusionWidget에 포함된 7종의 차트 중 하나로, 실시간 차트를 구현할 수 있습니다. FusionWidgets의 데이터는 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있으며, WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원합니다. 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. fwRealtimeChart의 속성으로는 chartType, dataStreamUrl, id, labelNode, plotColor, ref, refreshInterval, seriesArray, seriesNode, submissionId, timeformat, valueNode, version이 있으며, 이벤트로는 addClass, bind, changeClass, clearChart, draw, exportJSChart, fc, focus, getChartAttribute, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getSVGString, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, isUpdateActive, removeClass, restartUpdate, setChartAttribute, setDataStreamInfo, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, show, stopUpdate, toggleClass, trigger, unbind, visible이 있습니다.",355
662,"웹스퀘어 컴포넌트의 공통 함수들에 대한 설명입니다. addClass 함수는 클래스 이름을 추가하고, bind 함수는 이벤트와 핸들러 함수를 동적으로 할당합니다. changeClass 함수는 클래스를 변경하고, clearChart 함수는 fwRealtimeChart의 dataPlot을 초기화합니다. draw 함수는 fwRealtimeChart를 화면에 출력하고, exportJSChart 함수는 fwRealtimeChart를 jpg, png, pdf 형식으로 export합니다. fc 함수는 fwRealtimeChart 타입의 fusionWidget 객체를 반환하며, focus 함수는 웹스퀘어 컴포넌트에 포커스를 줍니다. getChartAttribute 함수는 fwRealtimeChart의 attribute 값을 반환하고, getDisabled 함수는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다. getGenerator 함수는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다. getID 함수는 웹스퀘어 컴포넌트의 ID를 반환하고, getInitStyle 함수는 컴포넌트의 초기 스타일을 반환합니다. getOpacity 함수는 웹스퀘어 컴포넌트의 불투명도를 반환하며, getOriginalID 함수는 웹스퀘어 컴포넌트의 originalID를 반환합니다. getPluginName 함수는 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하고, getPosition 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. getReadOnly 함수는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환하며, getScope 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. getScopeWindow 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하고, 그렇지 않은 경우 전역 window 객체를 반환합니다.",549
663,"웹스퀘어 컴포넌트의 불투명도를 설정하는 함수이다. (웹스퀘어 컴포넌트 공통.) Parameter로는 value 값을 받으며, value 값은 0~1 사이의 실수이다. 0에 가까울수록 투명하고, 1에 가까울수록 불투명해진다. Sample // (예제) 컴포넌트의 불투명도를 50%로 설정. componentId.setOpacity(0.5);",153
664,"웹스퀘어 컴포넌트에서 사용 가능한 함수들이다. setOpacity()는 불투명도를 설정하고, setPosition()은 위치를 설정한다. setReadOnly()는 readOnly 속성을 설정하며, setSize()는 크기를 설정한다. setStyle()은 CSS 속성을 설정하고, setUserData()는 임의의 데이터를 설정한다. show()는 화면에 표시하며, stopUpdate()는 실시간 기능 사용시 update를 중지한다. toggleClass()는 특정 class를 추가하거나 제거하며, trigger()는 특정 이벤트를 발생시킨다. unbind()는 이벤트를 제거하며, visible()은 CSS visibility 속성을 설정한다.",196
665,"WebSquare의 차트 컴포넌트는 다양한 통계를 출력할 수 있으며, 대략 22종의 차트 타입을 지원합니다. 이 컴포넌트는 모바일에서 사용을 권장하지 않으며, FusionChart 컴포넌트를 권장합니다. 차트의 타입은 type 속성을 이용하여 변경할 수 있으며, ColumnChart, BarChart, LineChart, RadialChart, PieChart 등이 기본적으로 제공됩니다. 이외에도 3D 타입 등 다양한 확장 타입을 사용할 수 있습니다. 
차트 컴포넌트의 최상위는 HTML div Tag로 이루어져 있으며, 하위로 복합 Tag들로 구성되어 있습니다. Property는 차트의 속성을 설정하는데 사용되며, axis3dBackgroundColor, axis3dBorderColor, backgroundBorderColor, backgroundBorderWidth, backgroundGradient, bgColorPalette, dataAxisChanged, displayFormat, displayFormatter, displayXAxis, displayYAxis, elementTitle, fitGuidLine, gradientColorPalette, guidLineStyle, id, labelData, labelNode, labelPerValue, labelSeparator, labelSeries, labelValue, lineStyle, mainGrid, mainGridLineOnly, maxYAxis, minYAxis, refdataCollection, rootNode, roundRectangle, seriesBorderColor, seriesBorderWidth, seriesColor, seriesPosition, seriesShow, seriesSymbol, style, subGrid, tabIndex, tableDisplayFormat, tableDisplayFormatter, tableShow, title, titlePosition, titleShow, titleStyle, toolTip, type, usePopup, valueType, xAxisTitle, xAxisTitleShow, xAxisTitleStyle, y1AxisTitle, y1AxisTitleShow, y1AxisTitleStyle, y1DisplayFormat, y1DisplayFormatter, y2DisplayFormat, y2DisplayFormatter 등이 있습니다. 
차트 컴포넌트를 그리고 더블 클릭하면 차트 마법사를 이용할 수 있습니다. 차트 마법사를 이용하면 차트 모양, 차트 제목, 범례, 축, 테이블, 레이블, 눈금선 등 다양한 차트 설정을 손쉽게 할 수 있습니다. 차트에 사용되는 데이터 형태는 root노드와 각 노드의 value 속성값을 제외하고 변경할 수 없으며, series 노드는 범례에 해당하고, data 노드는 X, Y축에 해당하는 데이터입니다.",645
666,"차트에 데이터를 표현하는 방법은 데이터 XML이 주어지면 간단합니다. 차트의 type과 rootNode이 설정되면 기본적인 데이터 표현이 가능합니다. 데이터 포맷, 차트 제목, 범례, 테이블, X/Y축 제목 등을 표현하는 방법은 차트 마법사로 설정하거나 속성을 사용할 수 있습니다. 범례와 X축 간의 축 변경을 통해 다른 형태로 차트를 표현할 수 있으며, 팝업을 사용하여 차트 설정 메뉴를 사용할 수 있습니다. Y축이 하나인 기본 차트를 좌, 우에 Y축을 2개로 하여 이중차트로 표현할 수 있습니다. 차트 데이터를 엑셀로 다운로드하는 기능도 제공됩니다. 데이터 연동 방법은 DataCollection을 만들고 해당 컴포넌트의 ref에 연결하거나 소스에서 instance의 data 안에 데이터를 넣은 뒤 해당 컴포넌트 property의 rootNode에 연결합니다.",308
667,"체크박스는 다중 항목 선택이 가능한 컴포넌트로, 각 항목에 선택할 수 있는 버튼이 있습니다. HTML에서 제공되는 Input 객체의 type=checkbox와 유사한 인터페이스를 제공합니다. appearance 속성은 사용자 정의를 위한 영역이며, cols 속성은 항목을 나열할 열의 수를 정의합니다. disabled 속성은 컴포넌트를 비활성화 시킵니다. displaymessage 속성은 validate API를 호출하였을 때 검증 실패에 대한 결과 메세지를 표시할지의 여부를 설정하며, invalidMessageFunc 속성은 검증 실패에 대한 결과 메세지를 별도로 정의한 Function에서 동적으로 표현할 수 있는 기능입니다. renderType 속성은 렌더링되는 레이아웃 구조에 따라 “table”, “native”, “checkboxgroup” 세 가지 renderType 속성을 지원합니다. 이 renderType 속성값에 따라 접근성을 지원하기 위한 사용법이 조금씩 달라지는데, 이를 설명하면 다음과 같습니다.",325
668,"Checkbox 컴포넌트에 title 속성을 사용하지 않으면 <label> 태그로 렌더링되는 textbox 컴포넌트와 연계해야 합니다. renderType=”checkboxgroup” 레이아웃 구조를 위한 태그를 개발자가 직접 결정하는 형태로서, tagname과 itemTagname 속성이 추가적으로 사용됩니다. checkbox 및 radio를 생성 시 html에서 파싱되는 태그는 기본적으로 table 구조입니다. 하지만 접근성 프로젝트에서는 해당 태그들이 table 구조가 아닌 <input type=""checkbox""...... 이나 <input type=""radio"".... 같은 전통html 기본태그만 준수범위로 인정합니다. renderType이라는 속성을 넣어서 값은 native, table, checkboxgroup, radiogroup 등을 제공하고 있습니다. w2checkbox, ccbox는 웹스퀘어 엔진에서 정의된 클래스입니다. ccbox는 사용자 정의 클래스입니다. 해당 클래스를 이용하여 디자인을 바꿀 수 있습니다.",292
669,"WebSquare.uiplugin.grid는 대량 데이터를 그리드로 표시하기 위한 컴포넌트로, XML과 Array 형태의 데이터를 지원합니다. 그리드의 컬럼은 다양한 컴포넌트를 출력할 수 있으며, CRUD, Sort, Filter, DrillDown 기능 등을 지원합니다. adaptive, adaptiveThreshold, applyAllColumnStyle, autoFit, autoFitMinWidth, baseNode, class, columnMove, contextMenu, contextMenuAltClick, dataDragDrop, dataDragSelect, defaultCellHeight, disabledBackgroundColor, disabledFontColor, dragDisplayColumn, dragEndFunction, dragStartFunction, editModeEvent, enterKeyMove, escape, evenRowBackgroundColor, excludeDeletedRows, excludeModifiedRows, fastScroll, filterFocusMode, fixedColumn, fixedColumnWithHidden, fixedRow, focusFlow, focusMode, focusMove, footerCaption, footerSummary, hideHeader, id, keepDefaultColumnWidth, keyMoveEditMode, loadCount, mergeCells, mergeCellsFixedCols, mergeCellsFixedRows, moveKeyEditModeAll, noResultMessage, noResultMessageClass, noResultMessageStyle, noResultMessageVisible, noSelect, oddEvenColorDisplay, oddRowBackgroundColor, overflowX, overflowY, preventMultisort, readOnly, readOnlyBackgroundColor, readOnlyBackgroundImg, readOnlyBackgroundImgCSS, readOnlyPriority, readOnlyTabIgnore, ref, repeatNode, resize, rowMouseOver, rowMouseOverColor, rowNumBackgroundColor, rowNumHeaderValue, rowNumVisible, rowNumWidth, rowStatusHeaderValue, rowStatusVisible, rowStatusWidth, scrollByColumn, selectedCellColor, selectedCellOverColor, selectedRowColor, selectedRowOverColor, senseReader, setCellInputTypeCustom, showSortableImage, showSortableUseFilter 등의 속성을 제공합니다.",397
670,"sortable: 데이터 정렬 지원 여부를 설정하는 옵션으로, 기본 값은 false이며, 정렬 아이콘만 표시됩니다. 
sortEvent: 데이터 정렬을 위한 이벤트를 설정합니다. 
sortOrderReverse: 그리드의 헤더 클릭을 통한 데이터 정렬시 내림차순 정렬을 먼저 할지 여부를 설정합니다. 
summary: 그리드 요약을 설정합니다. 
syncScroll: 다수의 그리드를 동시에 세로로 scroll시키기 위한 옵션입니다. 
syncScrollId: scroll을 동기화 시킬 그리드의 id를 설정합니다. 
tooltipDisplay: 그리드의 셀 크기보다 긴 데이터의 경우 툴팁 사용 여부를 설정합니다. 
tooltipFormatter: tooltip의 내용(label)을 사용자 함수의 return값으로 표현하도록 하는 속성입니다. 
tooltipPositionX: tooltip의 x좌표를 설정하는 옵션입니다. 
tooltipPositionY: tooltip의 y좌표를 설정하는 옵션입니다. 
tooltipShowAlways: tooltip을 텍스트 길이에 상관없이 마우스 오버 시 항상 보여줄지에 대한 여부를 설정합니다. 
tooltipShowAlwaysColumns: 데이터에 대한 tooltip을 마우스 over 시 '컬럼단위'로 항상 보여줄지에 대한 여부로 데이터가 공백("""")인 경우를 제외하고는 항상 보여줍니다. 
useCtrlKey: ctrl키를 누르고 여러 개의 셀을 선택할지 여부를 설정합니다. 
useCtrlOnMultisort: 여러 개의 컬럼에 소팅을 하고자 할 때 ctrl키를 누르고 컬럼들을 선택할지 여부를 설정합니다. 
useFilterList: 필터링 대상 값을 목록으로 표시하는 옵션으로, 기본 값은 false입니다. 
userData1~3: 사용자 정의 데이터 속성을 설정합니다. 
useShiftKey: shiftKey를 이용하여 복수의 셀 선택 여부를 설정합니다. 
valueNode: 실제 데이터를 갖고 있는 attribute 이름을 설정합니다. 
visibleRowNum: 표시 항목행수를 설정합니다. 
wheelRows: 세로 휠 이동시 한번 이동하는 행의 개수를 설정합니다. 
wheelStop: 그리드 스크롤이 맨 아래로 내려갔을 때 wheel을 한 경우 브라우저 스크롤을 막을지에 대한 여부를 설정합니다. 
이벤트: onaftercolumnresize, onafteredit, onbeforeedit, onbeforesort, onbodymouseout, onbodymouseover, oncellclick, oncelldblclick, oncellindexchange, onchange, oncolumnindexchange, oncustomcopy, oncustompaste, ondatadragover, ondatadragstart, ondatadrop, oneditend, oneditkeydown, onfilereadend, onfocus, onfooterclick, onheaderclick, onrightbuttonclick, onrowindexchange, onscrollend, onscrollx, onscrolly, onsort, ontextimageclick, ontoggleclick, ontooltiphide, ontooltipshow, onviewchange. 
메소드: addClass, advancedExcelDownload, advancedExcelUpload, bind, changeClass.",851
671,"웹스퀘어 컴포넌트에서 사용할 수 있는 다양한 API들이 있다. checkAll(colIndex, dataValue)는 체크박스로 이루어진 열을 한번에 체크하거나 언체크하는 API이다. clearGroupby()는 그리드의 groupby를 해제하는 API이다. clearRowVisible()는 setRowVisible API를 이용하여 hidden 처리한 row를 모두 보이게 하는 API이다. clearSort()는 그리드의 모든 정렬을 취소해주는 API이다. deleteRow(rowIndex)는 rowIndex에 해당하는 행의 상태 값을 삭제로 바꿔주는 API이다. focus()는 웹스퀘어 컴포넌트에 포커스를 줄 수 있는 API이다. getAllData()는 그리드의 모든 data를 배열로 반환하는 API이다. getAllDisplayData()는 그리드의 화면에 보이는 data를 배열로 반환하는 API이다. getAllDisplayXML()는 그리드의 모든 data를 XML로 반환하는 API이다. getAllFocusedIndex()는 포커스가 위치한 모든 셀의 rowIndex와 colIndex를 반환하는 API이다. getAllVisibleData()는 그리드의 현재 보이는 data를 배열로 반환하는 API이다. getAllVisibleXML()는 그리드의 현재 보이는 data를 XML로 반환하는 API이다. getAllXML()는 그리드의 모든 data를 XML로 반환하는 API이다. getBottomRowIndex()는 현재 그리드에 그려진 최하단 row의 rowIndex를 반환하는 API이다. 등이 있다.",402
672,"웹스퀘어 컴포넌트의 다양한 기능을 제공하는 API 목록입니다. getRangeData, getRangeXML, getReadOnly 등 각각의 함수는 특정한 기능을 수행하며, 그리드의 데이터나 속성 값을 반환합니다. mergeByCol, mergeByRow 등은 셀을 병합하는 기능을 제공하며, modifyAllStatus, modifyRowStatus 등은 그리드의 행 상태를 변경하는 기능을 제공합니다. 그리드의 데이터를 읽어오는 readCSV, 그리드의 모든 행을 삭제하는 removeAll 등의 함수도 포함되어 있습니다. 이 외에도 다양한 기능을 제공하는 API가 있으며, 각각의 함수는 자세한 설명이 제공되어 있습니다.",211
673,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 목록입니다. 예를 들어, 열에 적용된 필터를 삭제하거나, 그리드의 셀에 지정되어 있는 모든 포커스를 제거하는 등의 기능이 있습니다. 또한, 그리드의 데이터를 CSV 파일로 저장하거나, 그리드의 사이즈에 맞게 컬럼의 크기를 변경하여 꽉차게 그려주는 등의 기능도 있습니다. 이 외에도, 그리드의 컬럼 순서를 재설정하거나, 그리드의 높이와 폭을 설정하는 등의 다양한 기능이 있습니다.",199
674,"웹스퀘어 컴포넌트의 위치, readOnly 속성 값, ref 속성, 배경색 및 글자색, 행 데이터, disabled 속성, rowNum 및 rowStatus 컬럼 폭, visible 속성, summary 값, CSS 속성, XML 데이터, 그리드 정렬, drilldown, 클래스 추가 및 제거, 이벤트 발생, 행 삭제 상태 복구, 그리드 크기, 시작 행 번호, 사용자 데이터 설정, CSS 스타일, 그리드 스타일, 그리드 스크롤 위치, XML 데이터 추가, 그리드 표시, 셀 선택, 드래그&드랍, 수정 모드, 엔터 입력시 포커스 이동 방향, HTML Escape 문자 변환 등의 기능을 제공합니다.",214
675,"false : Escape 문자로 변환하여 화면에 표시. evenRowBackgroundColor : 그리드 짝수 행 배경색. excludeDeletedRows : expression에서 deleted된 row를 제외합니다. excludeModifiedRows : subtotal(소계)과 footer(합계)등에 사용되는 expression속성에서 modifyRowStatus API로 ""D""상태가 적용된 row를 제외하고 계산한다. fastScroll : 세로 스크롤이동시 빠르게 스크롤되는 효과를 허용하는 시간내에 그려진 부분까지만 렌더링하는 옵션. filterFocusMode : 그리드의 헤더 클릭을 통한 데이터 정렬 지원 여부. fixedColumn : 그리드의 컬럼 고정값. fixedColumnWithHidden : fixedColumn에 hiddenColumn 포함 여부. fixedRow : 가로 틀고정을 시킬 로우의 위치로 첫번째 로우일 경우 ""1""로 입력 설정. focusFlow : 그리드의 포커스 흐름을 선형 혹은 2차원(기본값)으로 설정하는 옵션. focusMode : 포커스시 표현 방법. focusMove : 그리드에서 키를 통한 포커스 이동을 허용할지 여부. footerCaption : grid footer의 caption. footerSummary : grid footer의 요약. hideHeader : 그리드 헤더 숨김 여부. id : 컴포넌트 ID. keepDefaultColumnWidth : autoFit 시 그리드 행 번호 표시 컬럼, 행 상태 컬럼의 width 를 고정한다. keyMoveEditMode : 키를 통한 포커스 변경시 바로 수정모드로 변경여부. loadCount : onscrollend 발생 조건으로 사용되는 잔여 row 수. mergeCells : 행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다. never, bycol, byrow, bycolrec, byrowrec. mergeCellsFixedCols : fixedColumn 영역 내에서 행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다. never, bycol, byrow, bycolrec, byrowrec. mergeCellsFixedRows : fixedRow영역 내에서 행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다. never, bycol, byrow, bycolrec, byrowrec. moveKeyEditModeAll : 상하좌우 방향키로 원하는 방향에 위치한 셀의 editMode 상태에 바로 진입한다. noResultMessage : 조회 결과가 없을 시 표시되는 메세지. noResultMessageClass : 그리드의 결과 없음 메시지의 class. noResultMessageStyle : 그리드의 결과 없음 메시지의 style. noResultMessageVisible : 조회 결과가 없을 시 메시지 표시 여부. noSelect : drag할 경우나, shift key를 누르고 cell을 선택할 경우 browser 자체적으로 selection 여부 설정. oddEvenColorDisplay : 그리드 짝,홀수 행별 반복색 지정 여부. oddRowBackgroundColor : 그리드 홀수 행 배경색. overflowX : 그리드 좌우 스크롤 표시 여부. overflowY : 그리드 세로 스크롤 표시 여부. preventMultisort : multisort 기능을 막을지 여부. readOnly : 그리드의 읽기 전용 여부. readOnlyBackgroundColor : 읽기 전용으로 지정된 셀의 배경색. readOnlyBackgroundImg : 읽기 전용으로 지정된 셀의 배경이미지. readOnlyBackgroundImgCSS : 읽기 전용으로 지정된 셀의 배경이미지 CSS를 직접입력. readOnlyPriority : 읽기 전용의 우선 순위. readOnlyTabIgnore : cell이 읽기 전용인 경우에 tab을 무시 여부. ref : Instance Data와 grid를 연동 할 경우 연동 할 XML 데이터의 XPath를 명시한다. repeatNode : 그리드 데이터 xml의 반복 node xpath. resize : 헤더를 사용하여 커럼 폭 크기 조절 여부. rowMouseOver : 마우스 오버시 행 선택 표시 여부. rowMouseOverColor : 마우스 오버시 행의 배경색. rowNumBackgroundColor : 그리드 행 번호 배경 영역의 색상. rowNumHeaderValue : 그리드 행 번호 표시시 그리드 헤더에 표시할 텍스트. rowNumVisible : 그리드 행 번호 표시 여부. rowNumWidth : rowNum 컬럼의 width. rowStatusHeaderValue : 그리드 행 상태 표시시 그리드 헤더의 표시할 텍스트. rowStatusVisible : 그리드 행 상태 표시 여부. rowStatusWidth : rowStatus 컬럼의 width. scrollByColumn : 가로 스크롤시 컬럼 단위 이동. selectedCellColor : 선택된 셀의 배경색. selectedCellOverColor : 선택된 셀에 마우스 오버시 배경색. selectedRowColor : 선택된 행의 배경색. selectedRowOverColor : 선택된 행에 마우스 오버시 배경색. senseReader : 웹 접근성을 지원하기 위한 모드. setCellInputTypeCustom : inputType이 custom인 셀의 inputType을 동적으로 변경하기 위한 옵션. showSortableImage : 그리드의 해당 컬럼이 정렬가능한 경우, 해당 컬럼의 헤더에 이미지를 출력할지에 대한 여부. showSortableUseFilter : useFilterList와 showSortableImage 속성을 동시에 사용할 때 정렬 아이콘(sortable)과 사용자 정의 필터 아이콘(useFilterList",1497
676,"tooltipPositionX: tooltip의 x좌표를 설정하는 옵션. cell의 왼쪽 끝이 x좌표 원점. cellWidth, cellHeight 표현식을 사용할 수 있다. 오른쪽 끝을 원점으로 두려면 cellWidth를 더하면 된다. 기본값은 ""20"".
tooltipPositionY: tooltip의 y좌표를 설정하는 옵션. cell의 위쪽 끝이 y좌표 원점. cellWidth, cellHeight 표현식을 사용할 수 있다. 아래쪽 끝을 원점으로 두려면 cellHeight를 더하면 된다. 기본값은 ""3+cellHeight"".
tooltipShowAlways: tooltip을 텍스트 길이에 상관없이 마우스 오버 시 항상 보여줄지에 대한 여부. true시 label값이 공백("""")인 경우를 제외하고는 항상 보여준다.
useCtrlKey: ctrl키를 누르고 여러 개의 셀을 선택할지 여부.
useFilterList: 필터링 대상 값을 목록으로 표시. ""true""일 경우 ""사용자 필터""를 포함한 필터링 대상 값을 목록으로 표시한다.
userData1~3: 사용자 정의 데이터 속성.
useShiftKey: shiftKey를 이용하여 복수의 셀 선택 여부.
valueNode: 실제 데이터를 갖고 있는 attribute 이름, 빈 값의 경우 텍스트 노드에 셀 데이터를 갖음.
visibleRowNum: 표시 항목행수. ""all""이라면 모든 row가 표시됨.
wheelRows: 세로 휠 이동시 한번 이동하는 행의 개수.
wheelStop: 그리드 스크롤이 맨 아래로 내려갔을 때 wheel을 한 경우 브라우저 스크롤을 막을지에 대한 여부.",519
677,"이벤트:
- oncellclick: 셀 클릭 시 발생
- oncelldblclick: 셀 더블 클릭 시 발생
- oncellindexchange: 셀 선택 시 인덱스 변경 시 발생
- onchange: 셀 데이터 변경 시 발생
- oncolumnindexchange: 열 선택 시 인덱스 변경 시 발생
- oncustomcopy: copy 이벤트 대체 시 발생
- oncustompaste: paste 이벤트 대체 시 발생
- ondatadragover: 다른 그리드에 데이터 오버 시 발생
- ondatadragstart: 데이터 드래그 시작 시 발생
- ondatadrop: 다른 그리드에 데이터 드랍 시 발생
- oneditend: 셀 에디트 종료 시 발생
- oneditkeydown: 셀 에디트 시 키 입력 시 발생
- onfilereadend: 엑셀 업로드 종료 시 발생
- onfocus: 포커스 획득 시 발생
- onfooterclick: footer 클릭 시 발생
- onheaderclick: header 클릭 시 발생
- onrightbuttonclick: 마우스 오른쪽 버튼 클릭 시 발생
- onrowindexchange: 행 선택 시 인덱스 변경 시 발생
- onscrollend: 세로 스크롤이 loadcount 만큼 행을 남긴 경우 발생
- onscrollx: 가로 스크롤 움직임 시 발생
- onscrolly: 세로 스크롤 움직임 시 발생
- onsort: sortable 속성이 적용된 헤더에서 정렬 방식 변경 시 발생
- ontextimageclick: textImage 인 경우 image 클릭 시 발생
- ontoggleclick: drilldown일 때 토글 버튼 클릭 시 발생
- ontooltiphide: 툴팁 사라질 때 발생
- ontooltipshow: 툴팁 나타날 때 발생
- onviewchange: 값 변경 시 발생
메소드:
- addClass: CSS class 추가",532
678,"웹스퀘어 컴포넌트 공통
- className(String): 추가할 class의 이름을 지정합니다.
- input1.addClass(""oddClass"");: input1 컴포넌트에 oddClass라는 class를 추가합니다.
advancedExcelDownload(options, infoArr)
- 그리드의 데이터를 엑셀 파일로 저장합니다. (JDK 1.5 이상에서 사용 가능)
- options(Object): JSON 형태로 저장된 그리드의 엑셀 다운로드 옵션입니다.
- options.fileName(String): 다운로드하려는 파일의 이름을 지정합니다. (default: excel.xls)
- options.sheetName(String): excel의 sheet의 이름을 지정합니다. (default: sheet)
- options.type(Number): type이 0인 경우 실제 데이터, 1인 경우 눈에 보이는 데이터를, 2이면 들어가 있는 data 그대로(filter 무시 expression 타입의 셀은 나오지 않음) 출력합니다. (default: 0)
- options.removeColumns(String): 다운로드시 excel에서 삭제하려는 열의 번호를 여러 개일 경우 ,로 구분하여 지정합니다. (default: 없음)
- options.removeHeaderRows(String): 다운로드시 excel에서 삭제하려는 Header의 row index를 여러 개일 경우 ,로 구분하여 지정합니다. (default: 없음)
- options.foldColumns(String): 다운로드시 excel에서 fold하려는 열의 번호를 여러 개일 경우 ,로 구분하여 지정합니다. (default: 없음)
- options.startRowIndex(Number): excel파일에서 그리드의 데이터가 시작되는 행의 번호(헤더 포함)를 지정합니다. (default: 0)
- options.startColumnIndex(Number): excel파일에서 그리드의 데이터가 시작되는 열의 번호(헤더 포함)를 지정합니다. (default: 0)
- options.headerColor(String): excel파일에서 그리드의 header부분의 색을 지정합니다. (default: #33CCCC)
- options.headerFontName(String): excel파일에서 그리드의 header부분의 font name을 지정합니다. (default: 없음)
- options.headerFontSize(Number): excel파일에서 그리드의 header부분의 font size를 지정합니다. (default: 10)
- options.headerFontColor(String): excel파일에서 그리드의 header부분의 font색을 지정합니다. (default: 없음)
- options.bodyColor(String): excel파일에서 그리드의 body부분의 색을 지정합니다. (default: #FFFFFF)
- options.bodyFontName(String): excel파일에서 그리드의 body부분의 font name을 지정합니다. (default: 없음)
- options.bodyFontSize(Number): excel파일에서 그리드의 body부분의 font size를 지정합니다. (default: 10)
- options.bodyFontColor(String): excel파일에서 그리드의 body부분의 font색을 지정합니다. (default: 없음)
- options.subTotalColor(String): excel파일에서 그리드의 subtotal부분의 색을 지정합니다. (default: #CCFFCC)
- options.subTotalFontName(String): excel파일에서 그리드의 subtotal부분의 font name을 지정합니다. (default: 없음)
- options.subTotalFontSize(Number): excel파일에서 그리드의 subtotal부분의 font size를 지정합니다. (default: 10)
- options.subTotalFontColor(String): excel파일에서 그리드의 subtotal부분의 font색을 지정합니다. (default: 없음)
- options.footerColor(String): excel파일에서 그리드의 footer부분의 색을 지정합니다. (default: #008000)
- options.footerFontName(String): excel파일에서 그리드의 footer부분의 font name을 지정합니다. (default: 없음)
- options.footerFontSize(Number): excel파일에서 그리드의 footer부분의 font size를 지정합니다. (default: 10)
- options.footerFontColor(String): excel파일에서 그리드의 footer부분의 font색을 지정합니다. (default: 없음)
- options.showProcess(Boolean): 다운로드 시 프로세스 창을 보여줄지 여부를 지정합니다. (default: true)
- options.massStorage(Boolean): 대용량 다운로드 여부를 지정합니다. (default: true)
- options.showConfirm(Boolean): 다운로드 확인창을 띄울지 여부를 지정합니다. (default: false)
- options.dataProvider(Object): 대량데이터 처리 및 사용자 데이터를 가공할 수 있는 Provider Package입니다. (default: 없음)
- options.providerRequestXml(String): Provider 내부에서 사용할 XML 문자열을 지정합니다. (default: 없음)
- options.userDataXml(String): 사용자가 서버모듈 개발 시 필요한 데이터를 전송 할 수 있는 변수를 지정합니다. (default: 없음)
- options.bodyWordwrap(Boolean): 다운로드시 바디의 줄 바꿈 기능을 지정합니다. (default: false)
- options.useEuroLocale(Boolean): 다운로드시 유로화 처리 기능(,와 .이 반대인 경우처리)을 지정합니다. (default: false)
- options.useHeader(Boolean): 다운로드시 Header를 출력 할지 여부를 지정합니다. (default: true)
- options.useSubTotal(Boolean): 다운로드시 SubTotal을 출력 할지 여부를 지정합니다. (default: false)
- options.useFooter(Boolean): 다운로드시 Footer를 출력 할지 여부를 지정합니다. (default: true)
- options.separator(String): 다운로드시 서버로 데이터 전송할때, 데이터를 구분짓는 구분자를 지정합니다. (default: ,)
- options.subTotalScale(Number): 다운로드시 subTotal 평균계산시 소수점 자리수를 지정합니다. (default: -1)
- options.subTotalRoundingMode(String): 다운로드시 subTotal 평균계산시 Round를 지정합니다. (""CEILING"",""FLOOR"",""HALF_UP"") (default: 없음)
- options.useStyle(Boolean): 다운로드시 css를 제외한, style을 excel에도 적용할 지 여부를 지정합니다. (default: false)
- options.freezePane(String): 틀고정을 위한 좌표값 및 좌표값의 오픈셋을 지정합니다. (ex) freezePane=""3,4"" X축 3, Y축 4에서 틀고정, freezePane=""0,1,0,5"" X축 0, Y축 1에서 X축으로 0, Y축으로 5로 틀공정 ) (default: """")
- options.autoSizeColumn(Boolean): 너비자동맞춤 설정 유무를 지정합니다. (default: false)
- options.displayGridlines(Boolean): 엑셀 전체 셀의 눈금선 제거 유무를 지정합니다. (default: false)
- options.colMerge(Boolean): colMerge된 컬럼을 Merge해서 출력 할 지 여부를 지정합니다. (default: false)
- options.useDataFormat(Boolean): 그리드 dataType이 text인 경우, 엑셀의 표시형식 '텍스트' 출력 유무를 지정합니다. (default: 없음)
- options.printSet(Object): JSON 형태로 저장된 Excel Print관련 설정입니다.
- options.printSet.fitToPage(Boolean): 엑셀 프린터 출력시 쪽맞춤 사용 유무를 지정합니다. (default: false)
- options.printSet.landScape(Boolean): 엑셀 프린터 출력시 가로 방향 출력 유무를 지정합니다. (default: false)
- options.printSet.fitWidth(Number): 엑셀 프린터 출력시 용지너비를 지정합니다. (default: 1)
- options.printSet.fitHeight(Number): 엑셀 프린터 출력시 용지높이를 지정합니다",1957
679,"options.printSet.pageSize : [기본값: A4] 엑셀 프린터 출력용지 설정 (ex) ""A3"", ""A4"", ""A5"", ""B4"") infoArrObjectN그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열 infoArr.rowIndex : 내용을 표시할 행 번호 infoArr.colIndex : 내용을 표시할 열 번호 infoArr.rowSpan : 병합할 행의 수 infoArr.colSpan : 병합할 열의 수 infoArr.text : 표시할 내용 infoArr.textAlign : 표시할 내용의 정렬 방법 (left, center, right) infoArr.fontSize : font size 설정 (ex) ""20px"") infoArr.fontName : font name 설정 infoArr.color : font color 설정 (ex) ""red"") infoArr.fontWeight : font weight 설정 (ex) ""bold"") infoArr.drawBorder : cell의 border 지정 (ex) true) infoArr.wordWrap : cell의 줄 바꿈 기능 (ex) ""true"") infoArr.bgColor : cell의 배경 color 설정 (ex) ""red"") Sample // id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드 var options = { fileName: ""user.xls"", type: ""1"", removeColumns: ""1,3"", foldColumns: ""2"", startRowIndex: 3, startColumnIndex: 0, headerColor: ""#DBEEF3"", footerColor: ""#92CDDC"", showProcess: true, dataProvider: ""com.provider.Provider1"", providerRequestXml: WebSquare.xml.serialize(WebSquare.ModelUtil.findInstanceNode(""request"")) }; var infoArr = []; var infoObj = { rowIndex: 1, colIndex: 3, rowSpan: 1, colSpan: 2, text: ""데이터표시"", textAlign: ""center"" }; infoArr.push(infoObj); grid1.advancedExcelDownload(options, infoArr); A || C D E F ┌──────────────┐┌──────────┬──────┬──────┬──── 1 | || | | | | || ┌──────┴──────┐ 2 | || | 데이터표시 | | || └──────┬──────┘ 3 | || | | | 4 | a || e | | | -> 그리드 헤더. 5 | Renaissance || 20111231 | | | -> 그리드 데이터. 6 | ... (생략) advancedExcelUpload(options) 엑셀 파일을 읽어 그리드의 데이터를 설정합니다. (JDK 1.5 이상에서 사용 가능) Parameter nametyperequireddescription optionsObjectYJSON 형태로 저장된 그리드의 엑셀 업로드 옵션 options.type : [기본값: 0] 1이면 엑셀 파일이 그리드의 보이는 결과로 만들어져 있을 때 0이면 엑셀 파일이 그리드의 실제 데이터로 구성되어 있을 때 options.sheetNo : [기본값: 0] excel 파일에서 그리드의 데이터가 있는 sheet 번호 options.startRowIndex : [기본값: 0] excel 파일에서 그리드의 데이터가 시작되는 행의 번호(헤더 포함) options.startColumnIndex: [기본값: 0] excel 파일에서 그리드의 데이터가 시작되는 열의 번호 options.endColumnIndex: [기본값: 0] excel 파일에서 그리드의 데이터가 끝나는 열의 index (엑셀 컬럼 수가 그리드 컬럼 수보다 작은 경우 그리드 컬러 수를 설정) options.headerExist : [기본값: 0] excel 파일에서 그리드의 데이터에 header가 있는지 여부(1이면 header 존재 0이면 없음) options.footerExist : [기본값: 1] excel 파일에서 그리드의 데이터에 footer가 있는지 여부(1이면 footer 존재, 0이면 없음. 기본값은 1. 그리드에 footer가 없으면 적용되지 않음.) options.append : [기본값: 0] excel 파일에서 가져온 데이터를 그리드에 append시킬지 여부(1이면 현재 그리드에 데이터를 추가로 넣어줌 0이면 현재 그리드의 데이터를 삭제하고 넣음) options.hidden : [기본값: 0] 읽어들이려는 엑셀 파일에 hidden column이 저장되어 있는지 여부를 설정하는 int형 숫자(0이면 엑셀 파일에 hidden 데이터가 없으므로 그리드 hidden column에 빈 데이터를 삽입 1 : 엑셀 파일에 hidden 데이터가 있으므로 엑셀 파일로부터 hidden 데이터를 삽입) options.fillHidden : [기본값: 0] Grid에 hiddenColumn에 빈 값을 넣을지를 결정하기 위한 int형 숫자(1이면 hidden Column에 빈 값을 저장하지 않음,0이면 hidden column이 저장되어 있지 않은 Excel File이라 간주하고 hidden Column에 빈 값을 넣어줌)(hidden이 0인 경우에는 fillhidden은 영향을 끼치지 않음) options.skipSpace : [기본값: 0] 공백 무시 여부(1이면 무시 0이면 포함) options.insertColumns : radio, checkbox와 같은 컬럼을 엑셀에서 받아 오지 않고, 사용자 컬럼 설정으로 업로드 (데이터 구조: [{columnIndex:1, columnValue:""1""}]) options.popupUrl : 업로드시에 호출할 popup의 url options.instanceBind : [기본값: false] grid에 instance ref가 걸려 있을 경우 instance 갱신 여부 options.features : upload 화면이 뜰 때 string 형식의 스타일 정보. 지정되지 않은 경우 upload 창이 기본 스타일로 생성 Sample var options = { type: ""1"", sheetNo: 0, startRowIndex: 3, startColumnIndex: 0, headerExist: ""1"", footerExist: """,1497
680,"grid1.getAllData()는 그리드의 모든 데이터를 배열로 반환합니다. 반환된 배열의 길이는 100이며, 첫 번째 행의 a컬럼의 값은 returnArr[0]으로, 첫 번째 행의 b컬럼의 값은 returnArr[1]으로, 두 번째 행의 a컬럼의 값은 returnArr[5]로 접근할 수 있습니다. 
grid1.getAllDisplayData()는 그리드의 화면에 보이는 데이터를 배열로 반환합니다. 반환된 배열의 길이는 100이며, 첫 번째 행의 a컬럼의 값은 returnArr[0]으로, 첫 번째 행의 b컬럼의 값은 returnArr[1]으로, 두 번째 행의 a컬럼의 값은 returnArr[5]로 접근할 수 있습니다. 
grid1.getAllDisplayXML()은 그리드의 모든 데이터를 XML로 반환합니다. 
grid1.getAllFocusedIndex()는 포커스가 위치한 모든 셀의 rowIndex와 colIndex를 배열로 반환합니다. 
grid1.getAllVisibleData()는 그리드의 현재 보이는 데이터를 배열로 반환합니다. 
grid1.getAllVisibleXML()는 그리드의 현재 보이는 데이터를 XML로 반환합니다. 
grid1.getAllXML()은 그리드의 모든 데이터를 XML로 반환합니다. 
grid1.getBottomRowIndex()는 현재 그리드에 그려진 최하단 row의 rowIndex를 반환합니다. 
grid1.getCellBackgroundColor(rowIndex, colIndex)는 rowIndex와 colIndex에 해당하는 셀의 배경색을 반환합니다. 
grid1.getCellChecked(rowIndex, colIndex)는 rowIndex와 colIndex에 해당하는 셀의 check 여부를 반환합니다. 
grid1.getCellClass(rowIndex, colIndex)는 grid 셀에 동적으로 적용한 사용자 class 이름을 반환합니다. 
grid1.getCellColor(rowIndex, colIndex)는 rowIndex와 colIndex에 해당하는 셀의 글자색을 반환합니다. 
grid1.getCellData(rowIndex, colIndex)는 rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다. 
grid1.getCellDisabled(rowIndex, colIndex)는 colIndex와 rowIndex에 해당하는 셀의 disabled속성 값을 반환합니다. 
grid1.getCellDisplayData(rowIndex, colIndex)는 rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환합니다. 
grid1.getCellInputType(rowIndex, colIndex)는 rowIndex와 colIndex에 해당하는 셀의 inputType을 반환합니다. 
grid1.getCellPosition(row, colIndex, propertyName)는 셀의 위치 정보(top이나 left)를 반환합니다. 
grid1.getCellReadOnly(rowIndex, colIndex)는 colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 반환합니다. 
grid1.getCellSize(row, colIndex, sizeName)는 셀의 크기 정보(width나 height)를 반환합니다. 
grid1.getCheckedData(colIndex)는 colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 데이터를 배열로 반환합니다.",741
681,"해당 그리드에서 사용 가능한 함수들을 설명하는 문서입니다. 각 함수는 파라미터와 반환값이 있으며, 함수의 이름과 설명을 통해 어떤 기능을 하는지 알 수 있습니다. 함수의 사용 예시도 제공됩니다.",74
682,"getFocusedColumnIndex( )는 포커스가 위치한 셀의 colIndex를 반환합니다. getFocusedRowIndex( )는 포커스가 위치한 셀의 rowIndex를 반환합니다. getFocusedRowStatus( )는 포커스가 위치한 셀이 속한 row의 상태 값을 반환합니다. getFooterData( footerId , display )는 footerId에 해당하는 footer의 값을 반환합니다. getFooterStyle( footerId , style )는 그리드의 footerId에 해당하는 footer의 스타일 속성값을 가져옵니다. getGenerator( )는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다. getGridReadOnly( )는 그리드의 읽기 전용 속성을 반환합니다. getHeaderBackgroundColor( headerId )는 그리드의 헤더 셀에 적용된 배경색 값을 가져옵니다. getHeaderColor( headerId )는 그리드의 헤더 셀에 적용된 글씨 색상값을 가져옵니다. getHeaderID( header )는 header index로 header id를 찾아옵니다. getHeaderIndex( header )는 header id로 header index를 찾아옵니다. getHeaderPosition( headerId , propertyName )는 header의 위치 정보(top이나 left)를 반환합니다. getHeaderSize( headerId , sizeName )는 header의 크기 정보(width나 height)를 반환합니다. getHeaderValue( headerId )는 헤더의 값을 반환합니다. getID( )는 웹스퀘어 컴포넌트의 ID를 반환합니다. getInitStyle( CSS )는 컴포넌트의 초기 스타일을 반환합니다. getInsertedData( )는 삽입 상태인 행들의 데이터를 배열로 반환합니다. getInsertedIndex( )는 삽입 상태인 행의 번호를 배열로 반환합니다. getInsertedXML( )는 삽입 상태인 행들의 데이터를 XML로 반환합니다. getMatchedColumnData( matchCol , dataValue , targetCol , exactMatch , stRowIndex , lastRowIndex )는 stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다. getMatchedData( colIndex , dataValue , exactMatch , stRowIndex , lastRowIndex )는 stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 data를 배열로 반환합니다. getMatchedIndex( colIndex , dataValue , exactMatch , stRowIndex , lastRowIndex )는 stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 index를 반환합니다.",705
683,"getMatchedIndex(colIndex, dataValue, exactMatch, stRowIndex, lastRowIndex): 해당 그리드에서 colIndex 열의 값이 dataValue와 일치하는 행의 인덱스를 배열로 반환합니다. stRowIndex부터 lastRowIndex까지의 범위에서 검색합니다. exactMatch가 true이면 정확히 일치하는 행만 반환합니다.
getMatchedXML(colIndex, dataValue, exactMatch, stRowIndex, lastRowIndex): 해당 그리드에서 colIndex 열의 값이 dataValue와 일치하는 행의 데이터를 XML 형태로 반환합니다. stRowIndex부터 lastRowIndex까지의 범위에서 검색합니다. exactMatch가 true이면 정확히 일치하는 행만 반환합니다.
getMerged(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀이 병합되어 있는지 여부를 반환합니다.
getMergedInfo(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀이 병합되어 있는지 여부와 병합된 첫 번째 셀과 마지막 셀의 인덱스를 반환합니다.
getModifiedData(): 변경(삽입, 갱신, 삭제)된 행들의 데이터를 2차원 배열로 반환합니다.
getModifiedIndex(): 변경(삽입, 갱신, 삭제)된 행들의 인덱스를 배열로 반환합니다.
getModifiedXML(): 변경(삽입, 갱신, 삭제)된 행들의 데이터를 XML 형태로 반환합니다.
getOpacity(): 해당 컴포넌트의 불투명도 값을 반환합니다.
getOpenStatus(rowIndex): rowIndex에 해당하는 행의 drilldown이 열려있는지 닫혀있는지 여부를 boolean으로 반환합니다.
getOriginalCellData(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀의 초기 데이터를 반환합니다.
getOriginalID(): 해당 컴포넌트의 원래 ID 값을 반환합니다.
getOverflowX(): 그리드의 overflowX 설정 값을 반환합니다.
getOverflowY(): 그리드의 overflowY 설정 값을 반환합니다.
getPluginName(): 해당 컴포넌트의 이름(pluginName)을 반환합니다.
getPosition(positionName): 해당 컴포넌트의 위치(left, top) 값을 반환합니다.
getRangeData(from, to): from부터 to-1까지의 범위의 행의 데이터를 1차원 배열로 반환합니다.",588
684,"getRangeXML(from, to): from부터 to-1까지의 행의 데이터를 XML로 반환합니다. 
getReadOnly(type, rowIndex, colIndex): type에 따라 readOnly 속성을 반환합니다. 
getRealRowIndex(rowIndex): rowIndex에 대한 실제 데이터의 rowIndex를 반환합니다. 
getRowBackgroundColor(rowIndex): rowIndex에 해당하는 행의 배경색을 반환합니다. 
getRowColor(rowIndex): rowIndex에 해당하는 행의 글자색을 반환합니다. 
getRowCount(): 그리드의 데이터 row의 건수를 반환합니다. 
getRowData(rowIndex, display): rowIndex에 해당하는 행의 데이터를 배열로 반환합니다. 
getRowDisabled(rowIndex): rowIndex에 해당하는 행에 적용된 disabled 속성 값을 반환합니다. 
getRowIndexByStatus(statusStr): statusStr과 상태가 일치하는 행의 번호를 배열로 반환합니다. 
getRowNumVisible(): rowNumVisible 옵션 값을 반환합니다. 
getRowReadOnly(rowIndex): rowIndex에 해당하는 행에 적용된 readOnly 속성 값을 반환합니다. 
getRowStatus(rowIndex): rowIndex에 해당하는 행의 상태를 반환합니다. 
getRowStatusValue(rowIndex): rowIndex에 해당하는 행의 상태를 숫자로 반환합니다. 
getRowVisible(rowIndex): 특정 row를 감추거나 보이게 합니다. 
getRowXML(rowIndex): rowIndex에 해당하는 행의 데이터를 XML로 반환합니다. 
getScope(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. 
getScopeWindow(): scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. 전역 window 객체를 반환하는 경우도 있습니다. 
getSize(sizeName): 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다.",436
685,"웹스퀘어 컴포넌트에서 사용되는 다양한 함수들에 대한 설명이다. getSize 함수는 %로 설정된 경우, 픽셀로 변환된 값을 반환하며, getSortableArr 함수는 각 컬럼이 sortable한지 여부를 array로 반환한다. getSortableStatus 함수는 sorting된 컬럼의 순서대로 해당 컬럼의 header 정보를 담은 object를 array로 반환한다. getStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하며, getStyleValue 함수는 deprecated 되었다. getTitle 함수는 컴포넌트의 title 속성 값을 반환하며, getTopRowIndex 함수는 현재 그리드에 그려진 최상단 row의 rowIndex를 반환한다. getTotalCol 함수는 컬럼의 개수를 반환하며, getTotalRow 함수는 행의 개수를 반환한다. getUdcHome 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환하며, getUdcRoot 함수는 파일명을 포함하지 않는 경로를 반환한다. getUncheckedData 함수는 colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 XML로 반환하며, getUncheckedIndex 함수는 colIndex에 해당하는 열의 radio/checkbox가 uncheck된 행의 Index를 배열로 반환한다. getUncheckedXML 함수는 colIndex에 해당하는 열의 radio/checkbox가 uncheck된 행의 data를 XML로 반환한다. getUnmatchedColumnData 함수는 stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환한다. getUnmatchedData 함수는 stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 data를 배열로 반환하며, getUnmatchedIndex 함수는 stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 index를 배열로 반환한다.",543
686,"grid1.getRowCount() : 그리드의 전체 행 수를 반환합니다.
grid1.getUnmatchedIndex(colIndex, dataValue, exactMatch, stRowIndex, lastRowIndex) : colIndex 열의 값이 dataValue와 일치하지 않는 행의 인덱스를 배열로 반환합니다. stRowIndex부터 lastRowIndex-1까지의 범위에서 검색합니다.
grid1.getUnmatchedXML(colIndex, dataValue, exactMatch, stRowIndex, lastRowIndex) : colIndex 열의 값이 dataValue와 일치하지 않는 행의 데이터를 XML 형태로 반환합니다. stRowIndex부터 lastRowIndex-1까지의 범위에서 검색합니다.
grid1.getUpdatedData() : 갱신된 행들의 데이터를 2차원 배열로 반환합니다.
grid1.getUpdatedIndex() : 갱신된 행들의 인덱스를 배열로 반환합니다.
grid1.getUpdatedXML() : 갱신된 행들의 데이터를 XML 형태로 반환합니다.
input1.getUserData(key) : key에 해당하는 값을 반환합니다.
grid1.getVisibleColData(colIndex) : colIndex 열의 화면에 보이는 데이터를 배열로 반환합니다.
grid1.getVisibleRowNum() : 현재 그리드에 그려진 행의 수를 반환합니다.
input1.hasClass(className) : className을 포함하는지 여부를 반환합니다.
componentId.hide() : 해당 컴포넌트를 화면에서 숨깁니다.
grid1.initGrid() : 그리드를 초기화합니다.
grid1.insertRow(rowIndex) : rowIndex에 해당하는 행에 새로운 행을 삽입합니다.
grid1.isEditing() : 그리드가 현재 편집 중인지 여부를 반환합니다.
grid1.mergeByCol(options) : 같은 열 내에서 같은 데이터가 연속적으로 나타나는 경우 이들을 모두 병합합니다.
grid1.mergeByColRec(options) : mergeByCol을 수행하고, 그 후에 병합되지 않은 셀들을 대상으로 mergeByRow를 수행합니다.
grid1.mergeByRestriCol(options) : 같은 열 내에서 연속적으로 같은 데이터가 나타나면서 동시에 자신의 왼쪽에 위치한 열이 병합된 경우 해당 행들을 병합합니다.
grid1.mergeByRestriRow(options) : 같은 행 내에서 연속적으로 같은 데이터가 나타나면서 동시에 자신의 위쪽에 위치한 행이 병합된 경우 해당 행들을 병합합니다.
grid1.mergeByRow(options) : 같은 행 내에서 같은 데이터가 연속적으로 나타나는 경우 이들을 모두 병합합니다.
grid1.mergeByRowRec(options) : mergeByRow를 수행하고, 그 후에 병합되지 않은 셀들을 대상으로 mergeByCol을 수행합니다.",724
687,"병합 기능 관련 API 설명입니다. mergeCell()은 지정한 셀을 병합하며, mergeCells()는 지정한 영역 내에서 같은 데이터를 가진 셀을 병합합니다. mergeCellsFixedCols()와 mergeCellsFixedRows()는 각각 fixedColumn 영역과 fixedRow 영역에서만 병합을 실행합니다. mergeClear()는 동적으로 병합된 셀들의 병합을 모두 해제합니다. mergeCol()과 mergeRow()는 데이터를 통해 자동으로 병합하는 기능에서 특정 컬럼 또는 행을 제외할 때 사용합니다. mergeFocusedCell()은 현재 포커스된 셀만 병합하며, mergeSplitFocusedCell()은 포커스를 받은 셀의 병합을 분리합니다. modifyAllStatus()는 모든 행의 상태를 변경하며, modifyCheckedStatus()는 checkbox가 check된 행의 상태를 변경합니다. modifyMatchedStatus()는 지정한 열의 값과 일치하는 행의 상태를 변경하며, modifyRangeStatus()는 지정한 범위 내의 행들의 상태를 변경합니다.",318
688,"status값 변경으로 데이터를 조작할 수 없는 원칙에 따라 ""E""는 인자값으로 사용할 수 없습니다. modifyRangeStatus(1, 3, 'D')는 두번째, 세번째 행을 삭제 상태로 변경합니다. modifyRowStatus(rowIndex, status)는 rowIndex에 해당하는 행의 상태를 param으로 입력받은 상태로 변경합니다. modifyUncheckStatus(col, status)는 col에 해당하는 열의 checkbox가 uncheck된 행의 상태를 status로 변경합니다. moveFooterColumn(fromIdx, toIdx)는 footer 컬럼을 fromIdx 위치로 부터 toIdx 이전의 위치로 이동합니다. multisort(options)는 option에 따라 여러개의 열을 동시에 정렬합니다. readCSV(options)는 csv 파일을 읽어 그리드의 데이터를 설정합니다. redrawColumn(colIndex, valid)는 colIndex에 해당하는 열을 다시 그려줍니다. reform()은 그리드의 originalData를 현재의 데이터로 바꿔주고 모든 행의 상태를 초기화합니다. refreshColumnItemset(colIndex)는 colIndex에 해당하는 열의 itemset을 갱신합니다. removeCellClass(rowIndex, colIndex)는 grid 셀에 적용된 사용자 class를 삭제합니다. removeClass(className)는 웹스퀘어 컴포넌트에서 class를 삭제합니다. removeColumnFilter(colIndex)는 colIndex에 해당하는 열에 적용된 filter를 삭제합니다. removeColumnFilterAll()은 모든 열에 적용된 filter를 삭제합니다. removeFocusedCell()은 그리드의 셀에 지정되어 있는 모든 포커스를 제거합니다. removeFocusedMultiCell(startRow, startCol, endRow, endCol)은 직사각형 영역만큼 cell의 focus를 해제합니다.",453
689,"removeRange(startIdx, endIdx): startIdx와 endIdx 사이의 그리드의 모든 행을 삭제하고 가지고 있던 data를 반환합니다. startIdx와 endIdx는 삭제할 범위의 시작 행과 끝 행을 의미합니다. 반환 값은 삭제된 범위 사이의 데이터 2차원 배열입니다.
emoveRow(rowIndex): rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 반환합니다. 반환 값은 삭제한 행이 가지고 있던 data 배열입니다.
emoveRows(rowIndexArr): rowIndexArr 배열에 저장된 index에 해당하는 행들을 삭제하고 가지고 있던 data들을 반환합니다. 반환 값은 삭제한 행들이 가지고 있던 data(2차원 배열)입니다.
owMoveDown(rowIndex): rowIndex에 해당하는 행을 하나 아래로 내려줍니다.
owMoveUp(rowIndex): rowIndex에 해당하는 행을 하나 위로 올려줍니다.
saveCSV(options): 그리드의 데이터를 CSV 파일로 저장합니다. options는 JSON 형태로 저장된 그리드의 csv 다운로드 옵션입니다.
setAutoFit(options): 그리드의 사이즈에 맞게 컬럼의 크기를 변경하여 꽉차게 그려줍니다. autoFit 옵션이 lastColumn인 경우 마지막 컬럼의 폭만 변경이 되고, allColumn인 경우 전체 컬럼을 폭을 균일하게 변경합니다.
setBottomRowIndex(bottomRowIndex): 그리드의 세로 스크롤 위치를 이동하여 최하단에 bottomRowIndex 해당하는 row가 위치하도록 조정합니다.
setCaption(htmlStr): 그리드 테이블의 caption의 innerHTML 값을 설정합니다.
setCellAllowChar(rowIndex, colIndex, allowChar): 특정 cell의 allowChar 속성을 변경합니다.
setCellBackgroundColor(rowIndex, colIndex, color): rowIndex와 colIndex에 해당하는 셀에 param으로 들어온 color를 배경색으로 설정합니다.
setCellChecked(rowIndex, colIndex, dataValue): rowIndex와 colIndex에 해당하는 셀이 checkbox/radio인 경우 dataValue가 true이면 체크, false이면 uncheck해 줍니다.
setCellClass(rowIndex, colIndex, className): grid 셀에 동적으로 사용자 class를 적용합니다.
setCellColor(rowIndex, colIndex, color): rowIndex와 colIndex에 해당하는 셀에 param으로 들어온 color를 글자색으로 설정합니다.
setCellData(rowIndex, colIndex, data): rowIndex와 colIndex에 해당하는 셀의 값을 data로 바꿔줍니다.
setCellDataType(rowIndex, colIndex, dataType): 특정 cell의 dataType 속성을 변경합니다.
setCellDisabled(rowIndex, colIndex, disabled): colIndex와 rowIndex에 해당하는 셀의 disabled 속성 값을 param으로 들어온 disabled 값으로 설정합니다.",703
690,"setCellDisabled(rowIndex, colIndex, disabled) : rowIndex와 colIndex에 해당하는 셀의 disabled 속성을 param으로 들어온 disabled로 설정합니다.
setCellDisableEdit(rowIndex, colIndex, onoff) : rowIndex와 colIndex에 해당하는 셀이 autoComplete인 경우 disableEdit 속성을 변경합니다.
setCellDisplayFormat(rowIndex, colIndex, displayFormat) : rowIndex와 colIndex에 해당하는 셀의 allowChar 속성을 변경합니다.
setCellInputType(rowIndex, colIndex, info) : rowIndex와 colIndex에 해당하는 셀의 inputType을 변경합니다. (inputType=""custom""일 경우)
setCellMaxLength(rowIndex, colIndex, maxLength) : rowIndex와 colIndex에 해당하는 셀의 maxLength 속성을 변경합니다.
setCellReadOnly(rowIndex, colIndex, readOnly) : rowIndex와 colIndex에 해당하는 셀의 readonly 속성 값을 param으로 들어온 readOnly 값으로 설정합니다.
setColumnBackgroundColor(colIndex, color) : colIndex에 해당하는 열에 param으로 들어온 color를 배경색으로 설정합니다.
setColumnColor(colIndex, color) : colIndex에 해당하는 열에 param으로 들어온 color를 글자색으로 설정합니다.
setColumnDisabled(colIndex, disabled) : colIndex에 해당하는 열에 disabled 속성을 param으로 들어온 disabled로 설정합니다.
setColumnFilter(filterOptions) : colIndex에 해당하는 열에 filter를 적용합니다.
setColumnOrder(columnOrderArray) : 주어진 array를 기준으로 하여 그리드의 컬럼 순서를 재 설정합니다.
setColumnReadOnly(colIndex, readOnly) : colIndex에 해당하는 열에 readonly 속성을 param으로 들어온 readOnly로 설정합니다.
setColumnVisible(colIndex, colVisible) : 주어진 column의 hidden 여부를 설정합니다.
setColumnWidth(colIndex, size) : 지정한 컬럼의 폭을 변경합니다.
setCustomFormatter(colIndex, customFormatter) : 컬럼의 customFormatter 속성을 설정합니다.
setData(arr, append, columnArr) : 1차원 Array 형태의 String을 Grid에 추가합니다. (행의 상태는 초기상태인 ""R""로 변경됩니다.)",523
691,"그리드의 다양한 기능을 설정하는 함수들을 설명합니다. setDisabled 함수는 그리드, 행, 열, 셀의 disabled 속성 값을 설정합니다. setDisplayFormat 함수는 그리드의 컬럼에 포맷을 설정합니다. setDisplayFormatter 함수는 그리드의 컬럼에 포맷터 함수를 설정합니다. setDrillDownDragDrop 함수는 drillDown 컬럼이 포함된 그리드에서 dataDragDrop 속성을 설정하고 drillDown drag drop을 동작하게 합니다. setEventPause 함수는 지정한 이벤트를 중단합니다. setFixedColumn 함수는 고정된 컬럼 영역을 설정합니다. setFocusedCell 함수는 그리드의 특정 셀로 포커스를 이동합니다. setFocusedHeaderObj 함수는 그리드 헤더가 가진 object로 포커스를 이동합니다. setFocusedMultiCell 함수는 직사각형 영역만큼 여러 cell에 focus를 줍니다. setFooterCaption 함수는 그리드 footer 테이블의 caption의 innerHTML 값을 설정합니다. setFooterData 함수는 footerId에 해당하는 footer의 inputType이 text인 경우에 data의 값을 footer에 넣어줍니다. setFooterDisplayFormat 함수는 그리드의 footerId에 해당하는 footer의 포맷을 설정합니다. setFooterStyle 함수는 그리드의 footerId에 해당하는 footer cell의 스타일 속성을 설정합니다. setFooterValue 함수는 footerId에 해당하는 footer의 inputType이 text인 경우에 data의 값을 footer에 넣어줍니다. setGridHeight 함수는 그리드의 높이를 설정합니다. setGridReadOnly 함수는 그리드의 읽기 전용 속성을 설정합니다. setGridSize 함수는 그리드의 높이와 폭을 설정합니다. setGridWidth 함수는 그리드의 폭을 설정합니다. setHeaderBackgroundColor 함수는 그리드의 헤더 셀의 배경 색상을 지정합니다. setHeaderColor 함수는 그리드의 헤더 셀의 글씨 색상을 지정합니다.",532
692,"headerId, disabled를 받아 해당하는 헤더를 disabled 상태로 만들거나 해제합니다. hide를 받아 header를 숨기거나 나타나도록 합니다. headInputType이 select일 경우, headerId에 해당하는 header 컬럼 selectbox itemset의 Model 바인딩 ref를 셋팅합니다. headerId, order, sortOrd를 받아 header에 나타나는 sort 이미지를 조절합니다. headerId에 해당하는 header cell의 스타일 속성을 설정합니다. headerId에 해당하는 header 컬럼의 value를 설정합니다. 컴포넌트의 초기 스타일을 복구합니다. JSON Data를 Grid에 넣거나 추가합니다. 데이터 없음을 표시하기한 문자열을 설정합니다. noResultMessageVisible 값을 동적으로 설정합니다. 웹스퀘어 컴포넌트의 불투명도를 설정합니다. 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. type, rowIndex, colIndex, readOnly를 받아 해당하는 type의 readOnly 속성 값을 param으로 들어온 readOnly값으로 설정합니다. ref 속성을 설정하는 기능입니다. rowIndex에 해당하는 행에 param으로 들어온 color를 배경색으로 설정합니다. rowIndex에 해당하는 행에 param으로 들어온 color를 글자색으로 설정합니다. rowIndex에 해당하는 행에 rowData를 넣어줍니다. colIndex에 해당하는 행의 disabled속성을 param으로 들어온 disabled로 설정합니다. rowNum컬럼의 폭을 변경합니다. rowIndex에 해당하는 행의 readonly속성을 param으로 들어온 readonly로 설정합니다.",427
693,"setRowReadOnly( rowIndex, readOnly ) : 속성을 설정할 행 번호와 readOnly 속성에 적용할 값을 입력하여 해당 행의 readOnly 속성을 적용합니다.
setRowStatusColumnWidth( size ) : rowStatus 컬럼의 폭을 변경합니다.
setRowVisible( rowIndex, flag ) : 특정 row를 감추거나 보이게 합니다.
setRowXML( rowIndex, rowData, overwrite ) : rowIndex에 해당하는 행에 rowData를 넣어줍니다. overwrite가 false인 경우에 행을 만들어서 넣어줍니다.
setSize( width, height ) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정합니다.
setStartRowNumber( startRowNumber ) : startRowNumber에 해당하는 인덱스를 행번호의 시작점으로 설정합니다.
setStyle( propertyName, value ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다.
setStyleAll( styleObj ) : 그리드의 스타일을 지정하는 함수입니다.
setSummary( str ) : 그리드 테이블의 summary 값을 설정합니다.
setTopRowIndex( topRowIndex ) : 그리드의 세로 스크롤 위치를 이동하여 최상단에 topRowIndex에 해당하는 row가 위치하도록 조정합니다.
setUserData( key, value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다.
setXML( element, append, options ) : XML[xml데이터]을 Grid에 넣거나 추가합니다.
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시합니다.
sort( bodyColumnID, sortType ) : bodyColumnID에 해당하는 열을 정렬합니다.
spanAll( openFlag ) : drilldown을 사용하는 grid에서 전체 데이터를 모두 펼치거나 모두 접습니다.",478
694,"openFlag: 데이터를 펼칠지 여부를 설정하는 파라미터. 숫자를 입력하면 해당 depth까지 데이터를 펼칩니다. toggleClass(className): 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거합니다. trigger(type, array): 웹스퀘어 컴포넌트에서 특정 이벤트를 발생시킵니다. unbind(type, function): 웹스퀘어 컴포넌트에서 이벤트를 제거합니다. undeleteRow(rowIndex): 삭제된 행을 복구합니다. undoAll(): 갱신이나 삭제된 행들의 data를 처음 입력된 데이터로 바꿔주고 행의 상태를 초기화합니다. undoRow(rowIndex): 특정 행의 data를 수정되기 전 data로 바꿔주고 행의 상태를 복구합니다. visible(flag): CSS visibility 속성을 설정하여 컴포넌트를 보이거나 숨깁니다.",262
695,"WebSquare.uiplugin.output은 브라우저에 문자열을 출력하는 기능을 제공하는데, 최상위에 <div> 태그를 사용하며, 텍스트 출력 및 포맷 적용 등의 기능을 제공한다. 현재는 Deprecated 상태이며, TextBox 사용을 권장한다. 이 컴포넌트는 class 속성과 동일한 기능을 제공하며, CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다. dataType은 컴포넌트 value의 data type을 나타내며, disabled는 컴포넌트의 비활성 여부를 설정한다. displayFormat은 엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며, value의 format을 적용하는 방식처럼 동작한다. escape는 <>&""를 HTML Escape 문자로 변환하여 화면에 표시한다. escapeFormatter는 사용자 format을 정의할 수 있는 기능으로, format을 정의한 function의 이름을 명시한다. id는 컴포넌트 ID를 설정하며, label은 컴포넌트의 value로 화면에 출력하고자 하는 text를 정의한다. localeRef는 클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key를 설정하며, ref는 DataCollection의 value 경로를 설정한다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정하며, tooltip은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 설정한다. userData1, userData2, userData3은 사용자 정의 데이터 속성을 설정한다. 이 컴포넌트는 onblur, onclick, ondblclick, onfocus, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup 등의 이벤트를 지원하며, addClass, bind, changeClass, focus, getDataListInfo, getDisabled, getFormatValue, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getRawValue, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, setValue, hasClass, hide, removeClass, setBackgroundImage, setDisabled, setDisplayFormat, setEventPause, setHeight, setInitStyle, setLabel, setLocaleRef, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setUserData, setWidth, show, toggleClass, trigger, unbind, unbindRef, visible 등의 메소드를 제공한다.",698
696,"CSS 파일이나 style 블럭에서 여러 개의 class를 공백으로 구분하여 적용할 수 있다. 컴포넌트의 CSS를 제어하기 위해 class 속성을 이용할 수 있다. dataType은 value의 data type을 나타내며, displayFormat 등의 속성에서 참조된다. disabled는 컴포넌트의 비활성 여부를 나타내며, displayFormat은 dataType에 따라 value의 format을 적용한다. escape는 <>&""를 HTML Escape 문자로 변환하여 화면에 표시한다. escapeFormatter는 사용자 format을 정의한 function의 이름을 명시한다. id는 컴포넌트 ID를 나타내며, label은 컴포넌트의 출력 텍스트를 정의한다. localeRef는 클라이언트 다국어 적용시 출력하는 텍스트의 key를 나타낸다. ref는 DataCollection의 value 경로를 나타내며, useLocale은 다국어 사용 여부를 나타낸다. userData1~3은 사용자 정의 데이터 속성을 나타낸다. Event Detail은 컴포넌트 이벤트에 대한 설명을 나타내며, Method Detail은 웹스퀘어 컴포넌트의 메소드에 대한 설명을 나타낸다.",359
697,"getFormatValue( )는 String 타입의 displayFormat이 적용된 값을 반환하며, getGenerator( )는 부모 Generator 객체를 반환한다. getID( )는 웹스퀘어 컴포넌트의 ID를 반환하며, getInitStyle( CSS )는 초기 스타일을 반환한다. getOpacity( )는 웹스퀘어 컴포넌트의 불투명도 값을 반환하며, getOriginalID( )는 컴포넌트의 originalID를 반환한다. getPluginName( )은 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition( positionName )은 컴포넌트의 위치 값을 반환한다. getRawValue( )는 format이 적용되지 않은 value를 반환하며, getReadOnly( )는 현재 설정된 readOnly 속성 값을 반환한다. getScope( )는 scope=""true""인 WFrame의 부모 객체를 반환하며, getScopeWindow( )는 scope=""true""인 WFrame의 부모 객체 또는 전역 window 객체를 반환한다. getSize( sizeName )는 컴포넌트의 크기 값을 반환하며, getStyle( propertyName )은 CSS 속성 값을 반환한다. getTitle( )은 컴포넌트의 title 속성 값을 반환하며, getUdcHome( )은 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다.",367
698,"getUdcHome( )는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot( )는 UDC 파일 경로를 반환한다. getUserData( key )는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getValue( )는 화면에 보여지는 값을 반환하며, hasClass( className )는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide( )는 웹스퀘어 컴포넌트를 화면에서 숨기며, removeClass( className )는 웹스퀘어 컴포넌트에서 class를 삭제한다. setBackgroundImage( url )은 배경이미지를 설정하며, setDisabled( disabled )는 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setDisplayFormat( format )은 displayFormat 속성을 설정하며, setEventPause( evList , flag )는 지정한 이벤트를 중단한다. setHeight( height )는 height를 설정하며, setInitStyle( property )는 컴포넌트의 초기 스타일을 복구한다. setLabel( label )은 label속성(value)의 값을 변경한다. setLocaleRef( localeRef )는 localeRef 속성값을 설정하며, setOpacity( value )는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition( left , top , mode )는 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. setReadOnly( readOnly )는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setRef( 설정할 )은 ref 속성을 설정한다. setSize( width , height )는 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다.",498
699,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는 문서입니다. setSize, setStyle, setUserData, setValue, setWidth, show, toggleClass, trigger, unbind, unbindRef, visible 등의 함수들이 소개되어 있습니다. 각 함수들의 파라미터와 예제 코드가 함께 제공되어 있습니다. 이 문서를 참고하여 웹스퀘어 컴포넌트를 보다 효율적으로 사용할 수 있습니다.",136
700,"Slider는 상하, 좌우로 슬라이드되는 형태의 컴포넌트로, 버튼을 드래그하여 값을 선택하는 UI를 만들 수 있습니다. Property로는 class, id, increment, maxValue, minValue, ref model, setBackground, showScale, tabIndex, title, tooltipDisplay, value, vertical이 있습니다. CSS Overriding에서는 w2slider, w2slider_horizon, w2slider_startLayer, w2slider_centerLayer, w2slider_endLayer, w2thumb 클래스가 사용됩니다. 주의사항으로는 thumbmove 이벤트는 핸들을 이동하며 발생되는 이벤트이고, onmovedone 이벤트는 핸들을 이동한 후 발생되는 이벤트입니다.",186
701,"SlideHide는 특정 이벤트에 따라 layer를 animation으로 보였다가 사라지게 하는 컴포넌트입니다. 사용자가 지정한 이벤트(click, mouseOver)가 발생하면 좌, 우 또는 상, 하 중 사용자가 지정한 방향으로 영역이 슬라이드 되면서 보이거나 숨김 처리가 가능합니다. 
SlideHide의 Property는 class, firstStatus, hideEvent, id, moveSize, showSize, slideDirection, slideEvent, tabIndex이 있습니다. 
SlideHide의 CSS Overriding은 slideHide, slide_hide, slideHide_slideHideMain 클래스를 사용합니다. slideHide는 웹스퀘어 엔진에서 정의된 클래스이며, slide_hide는 사용자 정의 클래스로 Stylesheet_ext.css 다음에 적용됩니다. slideHide_slideHideMain은 웹스퀘어 엔진에서 정의된 클래스로, SlideHide 컴포넌트의 실제 영역입니다. 
SlideHide를 사용할 때는 Property와 CSS Overriding을 적절히 활용하여 원하는 디자인을 구현할 수 있습니다.",295
702,"12. 파일 업로드/다운로드
12.1 업로드
12.1.1 Upload/MultiUpload
파일을 업로드할 때, WEBSQUARE_HOME의 config 폴더에 있는 websquare.xml에 설정을 추가해야 합니다. 설정 항목으로는 baseDir, subDir1, encoding, duplicatedFilePostFix, maxUploadSize, subSize1, deniedExtension, allowedExtension, uploadMode, folderName, fileDefiner, decrypt, removeKeyPath이 있습니다. 파일 업로드 경로를 기본 설정으로 충족할 수 없는 경우, AbstractUploadFileDefiner를 상속받아 파일 업로드 경로 및 파일 이름을 정의하는 사용자 정의 클래스를 구현할 수 있습니다. DRM과의 연계가 필요한 경우, AbstractUploaDecrypter를 상속받아 파일을 반환하는 클래스를 구현할 수 있습니다.",223
703,"주어진 코드는 파일 업로드와 관련된 내용으로, 파일의 암호화와 복호화, 그리드뷰 컴포넌트에서의 엑셀 파일 업로드 설정 등이 포함되어 있다. 
파일 업로드를 위한 기본 경로와 하위 경로를 설정하고, 업로드 가능한 파일의 확장자와 제외할 파일의 확장자를 설정할 수 있다. 또한, 파일명을 변경하거나 저장 경로를 변경하는 사용자 정의 클래스를 구현할 수 있다. 
그리드뷰 컴포넌트에서 엑셀 파일을 업로드할 경우, DRM 암호화 해제에 필요한 클래스와 임시 폴더, 각 셀의 데이터를 가공하는 클래스, 셀 데이터를 읽는 방법 등을 설정할 수 있다. 
복호화를 위해 WorkPackager 클래스를 사용하며, 복호화가 성공하면 파일을 반환하고, 실패하면 오류 정보를 출력한다. 
이 코드를 사용하여 파일 업로드와 관련된 기능을 구현할 수 있다.",302
704,"클라이언트에서 업로드한 파일을 복호화하여 처리하는 방법을 설명하고, CSV 파일 업로드 시 설정해야 하는 항목과 최대 업로드 크기를 지정하는 방법을 소개한다. 또한, 파일명 처리를 위한 설정 방법과 처리 방법을 설명한다. 셀 데이터의 가공이 필요한 경우, ICellDataProvider를 상속받아 convertValue 함수를 구현하고, AbstractCellDataProvider 클래스를 extend하여 convertValue 함수를 구현한 후 websquare.xml에 설정을 추가한다. 파일 업로드 후 DRM 암호화 해제에 필요한 클래스의 전체 경로를 decrypt 설정에 추가하고, 임시 폴더를 설정한다. 파일명 처리를 위해 websquare.xml에서 uploadMode, baseDir, folderName, duplicatedFilePostFix, firstFilePostFix를 설정한다.",226
705,"WebSquare5에서는 파일 업로드와 다운로드를 지원합니다. 업로드 시 파일명 중복 처리 방법과 업로드 경로를 업무별로 분리하는 방법을 설정할 수 있습니다. 또한, 파일 경로와 파일명을 재설정하는 사용자 정의 class를 구현하여 업로드할 수 있습니다. 업로드한 이미지 파일명은 editor 컴포넌트를 사용하여 설정할 수 있습니다. 다운로드는 $p.download(url경로) API를 사용하거나 JSP나 servlet으로 구현할 수 있습니다. WebSquare.net.download를 통해 다운로드를 수행할 경우, JSP로 파라미터를 전달할 수 있습니다.",193
706,"위 코드는 GridView 컴포넌트에서 Excel 파일을 다운로드하는 방법과, DRM 암호화가 필요한 경우 DRM 암호화 클래스를 구현하는 방법을 설명하고 있다. Excel 파일을 다운로드할 때는 websquare.xml 파일에 설정을 추가해야 하며, DRM 암호화가 필요한 경우 AbstractDownloadEncrypter 클래스를 상속하여 파일을 암호화하여 stream에 write하는 방법을 사용한다. 이를 위해 Fasoo ADK Packager를 사용하여 Excel 파일을 암호화한다.",142
707,"CSVGridView 컴포넌트에서 CSV 파일을 다운로드할 때, websquare.xml 파일에 encrypt 항목을 추가해야 합니다. 이 항목은 DRM으로 CSV 파일을 암호화하고, stream으로 write하는 클래스의 전체 경로를 지정합니다. 이 클래스는 websquare.download.handl.AbstractDownloadEncrypter를 상속하며, JDK 1.5 이상과 DRM을 연계합니다. 아래는 websquare.xml 파일의 설정 예시입니다.
<WebSquare>
  <csv>
    <encoding value=""UTF-8"" />
    <useBOM value=""true"" />
    <download>
      <encry value=""com.inswave.Encrypt""/>
    </download>
  </csv>
</WebSquare>
이 설정은 5.0_1.2596A.20170406.123456 버전부터 지원되며, 5.0_1.2682A.20170626.101341 버전에서 추가되었습니다.",228
708,"UDC(User Defined Component)는 WebSquare5에서 제공하는 기본 컴포넌트를 조합하거나 오픈 소스를 사용하여 사용자가 원하는 컴포넌트를 정의할 수 있는 기능입니다. UDC는 WebSquare XML로 정의되며, 상속하여 또 다른 UDC를 정의하거나 하나의 페이지에 여러 개의 UDC를 포함할 수 있습니다. UDC 생성 방법은 오픈 라이브러리 이용, 기존 컴포넌트 상속, 기존 컴포넌트 조합으로 나뉘며, 각 방법에 따라 UDC를 생성할 수 있습니다. UDC 생성 시 UDC Wizard를 이용하여 일반 정보, 속성, 이벤트, 함수를 구현할 수 있습니다.",226
709,"BindParentbindColumn 유형인 경우, 컬럼의 부모 DataCollection을 지정하고 DescriptionProperty, 풍선도움말 또는 Property view 하단에 표시됩니다. UDC Wizard에서 Finish 버튼을 클릭한 후, Source 탭에서 <script ev:event=""oncreated(options)"" type=""text/javascript""> 노드에 아래와 같이 속성을 정의하고 구현합니다. 이벤트 탭에서 행 추가 버튼을 이용하여 이벤트를 추가하고, APIs 탭에서 함수를 추가합니다. UDC를 테스트하기 위해, Palette 탭의 UDC 항목을 선택하고, Open test page를 선택하여 테스트 페이지를 열고, Design 탭으로 이동하여 UDC를 구성합니다. 추가한 속성이 Property 뷰에 표시되는지 확인하고, 이벤트와 함수를 구현합니다.",229
710,"UDC Wizard를 사용하여 주민번호 입력 UDC를 만드는 방법을 설명합니다. Input, Span, Secret, Trigger 컴포넌트를 조합하여 구성하고, Group으로 묶은 후 UDC add action() 버튼을 클릭하여 UDC Wizard를 실행합니다. General 탭에서 Plugin Name을 정의하고, Properties 탭에서 속성을 설정합니다. Events 탭에서 이벤트를 설정하고, APIs 탭에서 API를 정의합니다. 마지막으로 Source 탭에서 UDC 주석이 생성되는지 확인합니다.",144
711,"UDC 컴포넌트를 사용하기 위해서는 해당 UDC 파일을 먼저 등록해야 합니다. 등록된 UDC는 Studio의 Palette 탭의 UDC 탭 항목 표시되며, 사용자는 UDC 탭에서 사용할 UDC를 선택해서 Design 탭에 추가할 수 있습니다. UDC를 페이지에 포함할 경우, class 오버라이딩 순서를 따릅니다. UDC를 작성하고 등록한 후, Palette 탭의 UDC 항목을 선택하여 Design 탭에 그리고 속성을 정의합니다. UDC를 포함하는 WebSquare 페이지의 XML 파일 구조는 아래와 같습니다.",171
712,"80번 웹스퀘어 가이드 ""웹 접근성 OPS 파트 01""은 웹 접근성에 대한 개요와 컴포넌트 가이드를 제공합니다. 이 가이드는 웹 접근성을 개선하고자 하는 개발자들에게 유용한 정보를 제공합니다. 이 가이드에서는 웹 접근성의 중요성과 웹 접근성을 개선하기 위한 방법에 대해 설명하며, 웹 컴포넌트를 개발할 때 고려해야 할 사항들을 제시합니다. 이 가이드를 통해 개발자들은 보다 접근성이 높은 웹사이트를 개발할 수 있습니다.",210
713,"Snippets 생성
컴포넌트를 선택한 후 마우스 우클릭하여 <Snippet 추가> 메뉴를 선택합니다. <Snippet 추가> 메뉴를 선택하면 상세 다이얼로그가 노출됩니다. 상세 다이얼로그에서는 추가할 Snippet의 저장 경로, 이름, 설명, 아이콘을 설정할 수 있습니다. Snippets View에서도 추가한 Snippet을 확인할 수 있습니다. 저장한 경로에 Snippet 이름의 xml 파일이 생성됩니다. 저장 경로는 현재 선택된 Snippets View의 폴더나 최상위 폴더로 경로로 설정됩니다. 기본 경로는 [Project Workspace]\.settings\[최상위 폴더] 입니다. 이 경로로 지정하면 Snippets을 import 하지 않아도 바로 Snippets View에서 확인할 수 있습니다. 역으로 이외의 경로로 설정하면 <Import Snippets> 메뉴로 생성한 Snippet 파일을 불러와야 Snippets View에서 보여집니다.",263
714,"Snippets 도구 모음2에서는 Import Snippets, Export Snippets, Change Layout, Snippets Copy, Refresh Palette 등의 기능을 수행할 수 있습니다. Snippets View의 최 상위 폴더를 마우스 우클릭하여 새로운 폴더를 추가하거나 삭제할 수 있습니다. 또한, Snippet을 선택하고 마우스 우클릭하여 수정, 삭제, 또는 복사할 수 있습니다. 이러한 기능들은 Snippets View 우측 상단의 도구를 사용하여 수행할 수 있습니다.",152
715,"14. HTML5 기사
<article> 태그는 일반적으로 단독의 내용을 갖고 있는 문장 또는 포럼, 블로그, 뉴스, 코멘트 등의 내용을 포함합니다. 이 태그는 다음과 같은 속성을 가지고 있습니다.
14.1 속성
속성 | 설명
-- | --
id | 컴포넌트의 ID로 전역객체로 할당되며 script에서 본 id로 컴포넌트에 접근이 가능합니다.
14.2 브라우저 캡쳐화면
그림 14-1.01
14.3 class 적용과 스타일 변경
그림 14-2.02
Class를 적용하거나 스타일을 변경하려면 다음과 같은 방법을 사용합니다.
Class | 설명
-- | --
inline | websquare의 style 편집기에서 해당 style을 직접 수정합니다.
14.4 주의사항 및 팁
HTML5에 추가된 요소로서 웹스퀘어에서의 컴포넌트로서는 따로 속성이 없으며, 필요할 경우 Attribute Add로 버튼으로 속성을 추가해줍니다.",338
716,"15. Aside (HTML5)
<aside> 태그는 article과 비슷한 역할을 하며 일반적으로 측면에 위치합니다. 컴포넌트의 ID는 전역객체로 할당되며 script에서 해당 ID로 컴포넌트에 접근할 수 있습니다. 웹스퀘어의 style 편집기에서 해당 style을 직접 수정하거나 Attribute Add로 속성을 추가할 수 있습니다. HTML5에서 추가된 요소이며 웹스퀘어에서는 따로 속성이 없으므로 필요한 경우 버튼으로 속성을 추가해야 합니다.",173
717,"XSL86.XSL은 웹스퀘어의 data xml을 xsl을 이용하여 화면에 나타낼 때 사용하는 컴포넌트입니다. 사용자가 임의의 class나 id를 정의할 때 사용하는 Property와 웹스퀘어에서 만든 toolTip으로 컴포넌트의 추가정보를 명시하는 toolTip, 사용할 data의 xpath를 입력하는 xpath, xsl파일의 경로를 입력하는 xsl이 있습니다. XSL은 XML을 사용하여 데이터를 보여주는 스타일 시트를 만드는 언어입니다. XML은 W3에서 다목적 마크업 언어로 권장되는 언어입니다. CSS Overriding에 대한 주의사항과 Tip도 있습니다.",197
718,"WebSquare.uiplugin.roundRectangle는 둥근 모서리의 사각형을 제공하며, arcsize, borderColor, borderWidth, fillColor, id, tabIndex, userData1, userData2, userData3 등의 속성을 가집니다. 이 컴포넌트는 SVG를 활용하여 간단한 라운드 박스를 그릴 수 있지만, 다른 컴포넌트에 비해 속도가 느리므로 꼭 필요한 경우에만 사용하는 것이 좋습니다. addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind, visible 등의 메서드를 사용할 수 있습니다.",266
719,"removeDefaultClass value=""true"" 파라미터는 class를 변경할 때 기본 클래스를 제거할지 여부를 설정하는데 사용된다. getDisabled() 함수는 웹스퀘어 컴포넌트의 disabled 속성 값을 반환하며, getGenerator() 함수는 컴포넌트를 생성한 부모 Generator 객체를 반환한다. getID() 함수는 웹스퀘어 컴포넌트의 ID를 반환하며, getInitStyle(CSS) 함수는 컴포넌트의 초기 스타일을 반환한다. getOpacity() 함수는 웹스퀘어 컴포넌트의 불투명도 값을 반환하며, getOriginalID() 함수는 컴포넌트의 originalID 값을 반환한다. getPluginName() 함수는 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition(positionName) 함수는 컴포넌트의 위치 값을 반환한다. getReadOnly() 함수는 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환하며, getScope() 함수는 scope=""true""인 WFrame의 부모 객체를 반환한다. getScopeWindow() 함수는 scope=""true""인 WFrame의 부모 객체를 반환하며, getSize(sizeName) 함수는 컴포넌트의 크기 값을 반환한다. getStyle(propertyName) 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하며, getTitle() 함수는 컴포넌트의 title 속성 값을 반환한다.",403
720,"input 컴포넌트의 title 속성을 가져오는 예제이다. getUdcHome()은 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot()는 파일명을 포함하지 않은 경로를 반환한다. getUserData(key)는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, hasClass(className)는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide()는 웹스퀘어 컴포넌트를 화면에서 숨기며, removeClass(className)는 웹스퀘어 컴포넌트에서 class를 삭제한다. setDisabled(disabled)는 웹스퀘어 컴포넌트의 disabled 속성을 설정하며, setEventPause(evList, flag)는 지정한 이벤트를 중단한다. setInitStyle(property)는 컴포넌트의 초기 스타일을 복구하며, setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정한다. setPosition(left, top, mode)는 웹스퀘어 컴포넌트의 위치를 설정하며, setReadOnly(readOnly)는 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. setSize(width, height)는 roundRectangle의 넓이와 높이를 설정하며, setStyle(propertyName, value)는 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정하며, show(displayType)는 웹스퀘어 컴포넌트를 화면에 표시한다.",487
721,"displayType: CSS의 display 속성 값을 설정하는 함수. block, inline, none, """" 값을 사용할 수 있으며, """" 값은 show 수행 이전의 display 속성 값으로 복구한다. toggleClass: 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거하는 함수. removeDefaultClass 설정을 추가하여 컴포넌트의 속성으로 직접 정의된 class를 삭제할 수 있다. trigger: 컴포넌트에서 특정 이벤트를 발생시키는 함수. 이벤트 핸들러에 전달할 파라미터 배열을 사용할 수 있다. unbind: 컴포넌트에서 이벤트를 제거하는 함수. type과 function 값을 사용하여 제거할 이벤트와 핸들러 함수를 선택할 수 있다. visible: CSS의 visibility 속성 값을 설정하는 함수이며, show/hide 혹은 setStyle 사용을 권장한다.",250
722,"Submission은 AJAX를 통해 서버와 데이터 통신을 하는 모듈이다. Submission은 DataCollection 형식으로 전송/수신 데이터를 정의하고, 화면의 전환 없이 데이터만 전송할 수 있다. 동기/비동기 통신 선택 가능하며, 각 이벤트에 호출할 함수를 정의할 수 있다. Submission은 Script를 통해 동적으로 생성할 수 있으며, ID를 제외한 속성은 동적 변경이 가능하다. Submission을 등록하는 것을 권장하며, 화면의 코드성 데이터 통신은 공통 모듈을 만들어 이용할 것을 권장한다. Submission 생성은 Outline – Head 뷰에서 Add를 선택하여 생성할 수 있으며, 동적 생성도 가능하다. Submission 실행시 비동기(Asynchronous) 모드의 통신을 권장하며, Sync 모드 사용시 경고 메시지가 표시된다. Submission 이벤트는 Submit, Submit-done, Submit-error가 있다.",269
723,"응답 헤더의 content-type에 ""json"" 문자열이 있는 경우에만 변환을 수행합니다. xforms-submit-error는 Response Status 코드가 오류 (200 미만 300 이상) 일 경우 동작합니다. setRequestHeader() 함수를 사용하여 각 서브미션에 대해 request header를 설정할 수 있습니다. 데이터를 주고받기 위해서는 생성된 Submission을 실행시켜야 합니다. abortTrigger=""true"" 속성 설정을 통해 Submission을 중단할 수 있는 취소 버튼을 화면에 출력할 수 있습니다. dataType=""bigDecimal"" 혹은 ""number"" 컬럼의 데이터가 없는 경우 전송 데이터에서 제외할 수 있습니다. 한 개의 Submission으로 여러 DataCollection에 데이터를 로딩할 수 있습니다.",201
724,"개발 전 확인할 내용
아래 내용을 확인한 후 개발을 시작하세요.
표 25-1. 개발 전 확인할 내용
- 브라우저 지원: ActiveX 모듈은 IE만 지원합니다. 지원하려는 하위 IE의 버전을 선정하세요. HTML5의 MS 공식 지원은 IE10부터 지원됩니다. Safari 브라우저는 Mac OS에서 확인을 권장합니다.
- 화면 구성: PC를 기준으로 모니터 해상도까지 지원합니다. 가변형 화면 레이아웃의 경우 최소 IE8 이상부터 유연하게 개발 가능합니다. 모바일까지 지원합니다. CSS의 지식이 고급 이상이어야 합니다. IE6/IE7를 지원할 경우 고급 CSS 지식을 갖춘 HTML 전문가가 필요합니다.
- 기타: 대용량 데이터 화면, 다국어 지원 여부, 웹접근성 지원 여부를 확인하세요.",280
725,"ScrollView는 모바일 사이트에서 스크롤이 가능한 컴포넌트로, iScroll.js와 유사하게 동작합니다. 여러 컴포넌트를 그룹화할 수 있습니다. bounce, class, horizontalScroll, id, paging, scrollType, showHorizontalScroll, showVerticalScroll, style, verticalScroll, tabIndex 등의 속성을 가집니다. 스타일을 변경하기 위해서는 class를 지정하거나 CSS Overriding을 사용할 수 있습니다. 주의사항으로, ScrollView 자체에 스크롤을 생성하기 위해서는 해당 style 속성을 지정해야 합니다.",166
726,"Tag30.1Tag는 모든 HTML 태그를 생성할 수 있도록 개발된 컴포넌트입니다. 그러나, 다른 웹스퀘어 컴포넌트로도 생성 가능한 경우에는 Tag30.1Tag를 사용하지 않는 것이 좋습니다. 태그를 사용하고 속성을 넣을 경우, Property 창에서 html attributes 속성을 이용하거나 Source 창에서 직접 html attributes 속성을 넣을 수 있습니다. 이때, 렌더링된 태그 또는 태그 조합이 W3C 표준에 유효한지 확인해야 합니다. 예시로는 아래와 같은 a 태그 생성이 있습니다.
<w2:tag tagname=""a"" style=""width: 200px;height: 200px;"" id="""" herf=""http://www.naver.com""> </w2:tag>",234
727,"Textarea31.Textarea31.1Textarea는 <textarea></textarea> 태그를 나타내는 컴포넌트입니다. 이 컴포넌트는 적절한 title 속성을 사용하거나 <label> 태그로 렌더링 되는 textbox 컴포넌트와 함께 사용해야 합니다. 이를 위해 textarea의 id값과 textbox를 사용한 label의 for값이 서로 동일하게 연결되어 있는지 확인해야 합니다. 또한, Label을 사용할 수 없는 디자인일 때는 textarea에 title 속성을 제공해야 합니다. 이와 관련된 지침은 초점 이동과 레이블 제공입니다. 예시 코드로는 <w2:textbox id=""textbox1"" label=”메모” tagname=”label” for=""textarea1""></w2:textbox>와 <xf:textarea style=""width: 300px;height: 100px;"" id=""textarea1"" title=""메모입력""></xf:textarea>가 있습니다.",264
728,"ScheduleCalendar는 FullCalendar 외부 라이브러리를 사용하여 일정을 calendar에 출력하는 컴포넌트입니다. API를 통해 Customizing이 가능하며, dataList, defaultDate, editable, endColumn, headerLeftBtn, headerRightBtn, headerTitle, id, idColumn, ioFormat, lang, selectable, startColumn, style, tabIndex, titleColumn, version 등의 속성을 설정할 수 있습니다. FullCalendar의 공통 css 후에 사용자 정의 외부 스타일시트가 로딩되어야 할 경우 cssRenderOrder 속성을 true로 설정하면 됩니다. ScheduleCalendar 컴포넌트의 class명은 schedule_sample으로 주어지며, css overriding을 통해 스타일을 변경할 수 있습니다.",193
729,"2023년 1월 19일에 릴리즈된 WebSquare 5.0_4.4789A.20230119.154025_1.5 엔진의 변경 내역이 포함된 엔진 정보와 기능 개선 내용이 제공됩니다. 변경된 기능은 컴포넌트, 설정 파일 및 API에 대한 것으로, GridView, AutoComplete, Pivot, ScheduleCalendar, SearchBox, Spinner, TabControl, WidgetContainer 및 WindowContainer 등이 포함됩니다. 또한, 엔진 변경으로 인해 head title 값이 document.title 값으로 변경되었습니다.",153
730,"2.2. 변경: 웹 표준 준수를 위해 HTML에 포함되지 않아야 할 속성을 제거하고, 웹 표준에 맞게 수정합니다.
2.3. 변경: Submission 상태창을 WFrame으로 표시할 수 있도록 설정합니다. TabControl의 탭, WindowContainer의 윈도우, PopUp을 WFrame 화면으로 로딩할 경우, options.processMsgFrame=""true"" 설정을 통해 Submission 상태창을 WFrame으로 표시할 수 있습니다.
3. config.xml: calendarValueType에 따른 날짜 출력 형식 지정, maskFormatModelExcludeChar 속성으로 지정한 값을 제외하고 반환, GridView의 사용자 필터 숨기기, 모달 팝업 생성 후 브라우저 스크롤의 움직임 방지, 일본어 히라가나 및 숫자 동시 입력 지원, 비표준 태그 처리, 툴팁 제어 함수 등록 등의 기능을 추가합니다.
4. websquare.xml: GridView를 Excel 파일로 다운로드할 때 생성하는 로그 정보를 추가합니다.
5. WebSquare.util: 선택한 행의 데이터만 Excel 파일로 다운로드할 수 있도록 기능을 추가합니다.
6. Accordion: 패널의 열린 상태를 유지할 수 있도록 independentPanel 속성을 추가합니다.
7. AutoComplete: 웹 접근성을 지원하기 위해 renderType 속성을 추가하고, 검색 기능을 막을 수 있는 useFindItemFirstKeyChar 속성과 chooseOptionLabel을 동적으로 표시하거나 숨길 수 있는 showChooseOption 속성을 추가합니다.",436
731,"선택 목록에 chooseOptionLabel 속성으로 정의한 값을 표시하는 방법은, autoComplete1.showChooseOption(true)를 사용하여 설정할 수 있습니다. 또한, GridView에서는 필터 아이콘을 유지하기 위해 groupbyFilterIcon 속성을 사용할 수 있으며, 필터에 의해 숨겨진 셀 및 행을 동적으로 비활성화하거나 배경색을 설정할 수 있는 setCellDisabled(), setCellBackgroundColor(), setRowBackgroundColor() 함수를 사용할 수 있습니다. 또한, inputType=""checkbox"" 컬럼에서 헤더를 클릭하여 체크 박스를 선택하거나, 선택한 행의 데이터만 Excel 파일로 다운로드하는 기능도 제공됩니다. 마지막으로, GridView에 데이터가 없을 경우 정렬 버튼을 숨기는 hideSortIconOnNoData 속성도 제공됩니다.",237
732,"GridView의 새로운 기능과 변경 사항이 소개되었습니다. hideFilterIconOnNoData 속성을 사용하면 데이터가 없을 때 필터 버튼을 숨길 수 있습니다. advancedExcelUpload() 함수에는 useDialog와 filePath 옵션이 추가되어 WGear와의 연계를 지원합니다. showAllFilterList 속성을 사용하면 setColumnFilter() 함수를 실행한 후에도 전체 필터 목록을 표시할 수 있습니다. ctrlShiftKey 속성을 사용하면 Ctrl 키와 Shift 키를 함께 사용할 때 선택된 행을 기준으로 useShiftKey 속성 설정을 적용할 수 있습니다. advancedExcelDownload() 함수에는 desc와 useClass, numberLocale, bodyFontBold, subTotalFontBold, footerFontBold 옵션이 추가되어 Excel 파일로 다운로드할 때 로그 정보와 스타일 클래스, 로케일 정보, 볼드 폰트 적용 등을 지정할 수 있습니다. useHeaderContextMenu 속성을 사용하면 헤더에서 컨텍스트 메뉴를 표시할 수 있습니다. oncontextopen 이벤트를 사용하면 컨텍스트 메뉴가 표시될 때 발생하는 이벤트를 처리할 수 있습니다. fixedColumn 속성 설정을 사용할 경우, setColumnVisible() 함수가 동작하지 않는 경우와 컬럼폭이 GridView 너비를 초과하지 않을 때까지만 변경 가능한 제약 사항이 있습니다.",385
733,"10.23. 변경: mergeCell() 함수의 mergeInfo.rowspan 옵션으로 행들을 병합하고, 병합된 행에 이미지를 포함한 후, advancedExcelDownload() 함수로 GridView를 Excel 파일로 다운로드할 경우, 병합된 행의 첫번째 행에만 이미지가 포함됨. 하지만 이미지는 병합된 행 전체에 걸쳐 출력됨.
10.24. 변경: WGear와의 연계를 위해 useDialog 옵션을 사용할 경우, true는 boolean 형태(true)로 false는 string 형태(""false"")로 입력해야 함. 모두 boolean 형태(true 및 false)로 입력할 경우 정상 동작. 기본값은 true로 설정.
10.25. 변경: 값 입력 중 포맷을 적용할 경우, 입력이 끝난 후에 포맷이 유지되지 않았지만, 이제는 유지됨.
10.26. 변경: useFilterList=""true"" 속성 설정으로 표시되는 필터 목록에 가로 스크롤이 표시되지 않았지만, 이제는 필터 목록의 항목에 길이에 따라 가로 스크롤이 표시됨.
10.27. 변경: 웹 접근성 검사(senseReader=""true"")를 진행할 때 GridView의 <thead> 태그를 중복 생성했지만, 크롬 94버전 이후부터 불필요한 <thead> 태그는 생성하지 않음.
10.28. 변경: GridView에 대해 gropuby() 함수를 실행할 경우에는, GridView 컬럼의 필터링 기능(useFilter=""true"")이 적용되지 않았지만, 이제는 필터링 기능(useFilter=""true"")이 정상 적용되어, 그룹핑 후에도 필터 버튼이 표시됨.
11. GridView.column: escape 속성을 지원하지 않았지만, 이제는 지원하며, inputType=""spinner"" 컬럼에 대해 editModeEvent=""onclick"" 속성 설정이 적용됨.
12. InputBox: getValue() 함수를 실행할 경우, maskFormatModelExcludeChar 속성으로 설정한 문자를 제외한 InputBox의 값을 반환하며, autoDecimalPoint 속성을 사용하면 소수점을 자동으로 입력할 수 있음.
13. MultiSelect: 목록의 항목을 클릭할 때 발생하는 onrowclick 이벤트가 추가되었으며, info 오브젝트를 반환함.
14. Pivot: 필터 수를 1000개까지 지원하며, 필터 수가 1000개를 초과하면 필터 목록이 표시되지 않고 오류 메시지가 표시됨.
15. ScheduleCalendar: 웹 접근성을 지원하기 위해 headerTableSummary, headerTableCaptionStr, headerTableCaptionClass 구분 속성이 추가됨.
16. SearchBox: resetButtonDisplay 구분 속성을 추가하여 지우기 버튼 표시 여부를 결정할 수 있음.
17. SelectBox: disabled=""true"" 속성 설정을 사용할 경우 적용되는 CSS가 클래스로 제공됨.
18. Spinner: dataType=""date""인 경우, 유효하지 않은 날짜를 입력할 경우 브라우저 경고창 출력 여부를 useAlert 구분 속성으로 설정할 수 있음.",887
734,"false : 경고창 출력하지 않음. initValue : dataType=""number""인 경우 초기값을 지정. title : HTML <title> 태그 속성값을 정의. noUseTitle=""false"" : 마우스 오버 시 타이틀을 숨기지 않고 표시. useTitleTooltip=""true"" : 마우스 오버 시 각 탭의 title 속성으로 설정한 값을 툴팁으로 표시. rows : WidgetContainer의 행의 갯수를 지정. unitWidthPixel : WidgetContainer의 단위 너비의 픽셀값. setRows() : rows 속성 값을 동적으로 설정. createWindow() – userIconClass : 사용자가 정의한 아이콘에 적용할 CSS 스타일 클래스를 지정. createWindow() – userIconPosition : 사용자가 정의한 아이콘을 고정 버튼을 기준으로 어디에 표시할지 지정. changeActiveWindow : 스크롤 좌우 버튼을 클릭할 경우 한 칸씩 윈도우를 이동하며 해당 윈도우를 활성화하는 기능 사용 여부. swapZIndex : 네임레이어에서 윈도우를 선택하거나 윈도우를 클릭할 경우, 해당 윈도우의 z-index를 증가시키지 않음.",343
735,"WebSquare.uiplugin.canvas는 HTML5의 Canvas와 같은 기능을 제공하는 UI 플러그인이다. 이 플러그인은 class와 id 속성을 이용하여 CSS를 제어할 수 있으며, 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능하다. 이외에도 다양한 Property와 Event Method를 제공한다.",111
736,"WebSquare.uiplugin.Switch는 여러 상황에 대한 복수의 Group들이 겹쳐 존재하고, 각 상황에 대한 Group을 동적으로 표시할 수 있는 스위치 컴포넌트이다. 기본적으로 case1만 존재하며, 추가가 가능하다. 탭과 비슷하게 동작하지만, 화면에 표시할 case는 API를 통해 설정 가능하다. accessibility 속성은 웹 접근성 지원 기능을 사용할지에 대한 여부를 결정하며, alwaysDraw 속성은 switch를 그릴 때 case들을 html로 넣어줄지 말지를 결정한다. 다른 속성으로는 caseClass, detectionRange, id, motionDisplay, rotation, slide, tabIndex, tooltip, tooltipLocaleRef, touchMove, useKeyboardNavagation, useSelect 등이 있다. 이외에도 다양한 Method가 제공되며, 이를 활용하여 컴포넌트를 동적으로 제어할 수 있다.",272
737,"caseClass는 HTML의 class 속성과 같은 기능을 제공한다. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하며, detectionRange, id, motionDisplay, rotation, slide, tabIndex, tooltip, tooltipLocaleRef, touchMove, useKeyboardNavagation 등의 속성을 제공한다. 또한, addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName 등의 메서드를 제공한다. 이를 통해 컴포넌트의 CSS를 제어하거나, 이벤트와 핸들러 함수를 동적으로 할당할 수 있다. 또한, 컴포넌트의 속성 값을 반환하거나, 컴포넌트의 이름을 확인할 수 있다.",222
738,"getPosition( positionName ) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환합니다.
getReadOnly( ) : 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다.
getScope( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환합니다.
getScopeWindow( ) : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다. scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환합니다.
getSelectedID( ) : 현재 선택된 case의 id를 반환합니다.
getSelectedIndex( ) : 현재 설정되어있는 index를 반환합니다.
getSize( sizeName ) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. %로 설정된 경우, 픽셀로 변환된 값을 반환합니다.
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다.
getTitle( ) : 컴포넌트의 title 속성 값을 반환합니다.
getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환합니다.
getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환합니다.
getUserData( key ) : setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다.
hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다.
hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨김. display:none; 및 visibility:hidden; CSS를 적용합니다.
init( options ) : 지정한 컴포넌트를 제외한 모든 하위 컴포넌트를 초기화하는 함수입니다.",596
739,"switch 컴포넌트 하위의 초기화 가능한 컴포넌트를 초기화합니다. switch1.init(); switch 컴포넌트 하위의 grid, radio, id가 input1인 input, id가 calendar1인 calendar 컴포넌트를 제외한 컴포넌트 가운데 초기화 가능한 컴포넌트를 초기화하고 값 변경에 따른 이벤트를 발생시킵니다. var options = { excludePlugin : ""grid radio"", excludeId : ""input1 calendar1"", fireEvent : true }; switch1.init(options); case를 동적으로 추가합니다. Parameter name / type / required / description: caseElement(XML) / Y / 동적으로 추가할 case의 dom element 객체 또는 dom element로 parsing이 가능한 string. options(JSON) / N / 세부 설정. options.selected: 동적으로 추가한 case가 화면에 바로 보이도록 함. 컴포넌트 하위의 모든 컴포넌트의 함수를 동일하게 호출하는 함수입니다. switch1.invoke(""setValue"", ""WebSquare""); switch 하위의 모든 컴포넌트에 componentId.setValue(""WebSquare""); 한 것과 같습니다. 만약 하위의 컴포넌트에 setValue 함수를 가지지 않는 컴포넌트(예:grid)가 있다면 에러가 발생합니다. 기능을 수행하기 위해 사용자 정의 함수를 호출합니다. var options = { excludePlugin : ""grid calendar"", excludeId : ""radio1"" }; switch1.invoke(""setValue"", createValue, options); switch 하위의 grid와 calendar, id가 radio1인 컴포넌트를 제외하고 componentId.setValue(사용자 정의 함수(createValue)를 호출하여 반환된 리턴 값); 한 것과 같습니다. 인자로 받은 index의 case를 선택하여 화면을 이동합니다. switch1.moveToIndex(2); 이전 index의 case를 선택합니다. switch1.moveToLeft(); 다음 index의 case를 선택합니다. switch1.moveToRight(); 웹스퀘어 컴포넌트에서 class를 삭제합니다. input1.removeClass(""tmpInputClass""); 컴포넌트의 disabled 속성을 설정합니다. componentId.setDisabled(true); 지정한 이벤트를 중단합니다. input1.setEventPause(""onclick"", true); 컴포넌트의 초기 스타일을 복구합니다. group1.setInitStyle(); 웹스퀘어 컴포넌트의 불투명도를 설정합니다. componentId.setOpacity(0.45); 웹스퀘어 컴포넌트의 위치(left, top)를 설정합니다. componentId.setPosition(null, 100); 웹스퀘어 컴포넌트의 readOnly 속성을 설정합니다. componentId.setReadOnly(true); case를 id로 선택합니다. switch1.setSelectedID(""case1""); switch 객체의 index를 인자로 받아 이에 맞는 case를 사용자에게 보여줍니다. switch1.setSelectedIndex(0); 웹스퀘어 컴포넌트의 크기(width, height)를 설정합니다. componentId.setSize(null,100); 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다.",819
740,"웹스퀘어 컴포넌트에서 사용 가능한 함수들에 대한 설명입니다. setStyle 함수는 CSS 속성과 값을 설정하며, setUserData 함수는 컴포넌트에 임의의 데이터를 설정합니다. show 함수는 CSS display 속성을 설정하여 컴포넌트를 화면에 표시하며, toggleClass 함수는 컴포넌트에서 특정 class를 추가하거나 제거합니다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시키며, unbind 함수는 컴포넌트에서 이벤트를 제거합니다. visible 함수는 CSS visibility 속성을 설정하지만, 사용을 권장하지 않습니다.",197
741,"웹표준 호환성
7.1 비표준 태그 처리
사용자 정의 attribute를 사용하는 경우, w3c validator에서 오류가 검출됩니다. 이를 해결하기 위해 config.xml 설정 파일에 <dataPrefix> 항목을 아래와 같이 설정하면 ""data-"" prefix가 추가되어 오류가 발생하지 않습니다.
7.2 GridView의 <nobr> 태그
GridView에서 텍스트 데이터를 출력할 경우 <nobr> 태그로 출력됩니다. <nobr> 태그는 비권장 태그입니다. 이를 해결하기 위해 config.xml 설정 파일에 <gridView> – <dataTag> 항목을 아래와 같이 설정하여, <nobr> 태그 대신 <span> 태그로 출력하십시오.
7.3 XML의 namespace 제거
config.xml 설정 파일에 <removeXmlNameSpace> 항목을 아래와 같이 설정하면, XML 관련 namespace를 제거할 수 있습니다.
7.4 <table> 태그
일부 컴포넌트의 경우 <table> 태그에 cellpadding 및 cellspacing 속성이 생성됩니다. cellpadding 및 cellspacing 속성은 비권장 항목입니다. 이를 해결하기 위해 config.xml 설정 파일에 <paddingDisplay> 항목을 아래와 같이 설정하면, 두 속성을 제거할 수 있습니다. 관련 컴포넌트는 AutoComplete, Calendar, CheckBox, CheckComboBox, FloatingLayer, InputCalendar, MultiSelect, PageList, Radio, SelectBox, TreeView, Trigger 입니다.",394
742,"WebSquare.uiplugin.radio는 HTML <input> 태그의 type=""radio""와 동일하며, 단일 선택만 지원한다. 브라우저에 표현될 때는 <input> 대신 <div> 태그를 최상위에 두고 하위에 복합 태그를 사용한다. appearance, class, cols, disabled, displaymessage, enableColumn, enableColumnFalseValue, escape, id, ignoreTabIndex, invalidMessage, invalidMessageFunc, itemTagname, mandatory, name, nameScope, nextTabID, ref, renderType, rows, selectedIndex, tabIndex, tagname, title, tooltip, tooltipClass, tooltipDisplay, tooltipFormatter, tooltipItemLabel, tooltipLocaleRef, tooltipShowAlways, tooltipTime, useItemLocale, useLocale, useRadioTitle, userData1, userData2, userData3, validator, value, visibleColumn, visibleColumnFalseValue 등의 속성을 제공한다. 이외에도 onchange, onlabelclick, onradioclick, onviewchange 등의 이벤트와 addClass, addItem, bind, changeClass, click, deleteItem, focus, getDisabled, getGenerator, getID, getInitStyle, getItemCount, getItemDisabled, getOpacity, getOriginalID, getPluginName, getPosition, getScope, getScopeWindow, getSelectedIndex, getSize, getStyle, getText, getTitle, getUdcHome, getUdcRoot, getUserData, setUserData, getValue, hasClass, hide, removeAll, removeClass, reset, setDisabled, setEnableColumn 등의 메서드를 제공한다.",355
743,"이벤트 관련 함수인 setEventPause, trigger, unbind, unbindRef 함수와 초기 스타일 관련 함수인 setInitStyle, 선택 항목 목록 관련 함수인 setNodeSet, setSelectedIndex, setValue, setVisibleColumn, 그리고 CSS 관련 함수인 setOpacity, setPosition, setRef, setSize, setStyle, setTitle, toggleClass 함수 등이 있다. appearance 속성은 선택 항목 표현 방식을 minimal 또는 full로 설정할 수 있으며, class 속성은 HTML의 class 속성과 동일한 기능을 제공한다. disabled 속성은 컴포넌트를 비활성화할지 여부를 설정하며, displaymessage 속성은 validate 함수를 통해 검증 결과가 실패일 경우 메시지를 표시할지 여부를 설정한다. enableColumn 속성은 선택 항목 목록에서 특정 항목을 disable 처리하는 기능을 제공하며, escape 속성은 <>&""를 HTML Escape 문자로 변환하여 화면에 표시할지 여부를 설정한다. mandatory 속성은 필수 선택 적용 여부를 설정하며, name 속성은 항목의 group이 되는 이름으로 HTML의 name 속성과 동일하다. renderType 속성은 브라우저에 표현될 레이아웃 구조를 설정하며, ref 속성은 DataCollection의 value 경로를 설정한다.",374
744,"TextBox 컴포넌트를 사용하여 <label> 태그를 생성하고, title 속성을 생성하여 웹 접근성을 준수해야 합니다. ""radiogroup""은 레이아웃을 위한 Tag를 개발자가 직접 결정하는 형태로, <div> 태그를 사용하여 구성되며 tagname과 itemTagname 속성을 사용하여 최상위 태그와 항목별 태그를 설정할 수 있습니다. rows 속성은 선택 항목을 표시할 열의 수를 정의하며, selectedIndex 속성은 초기 선택 항목의 인덱스를 설정합니다. tabIndex 속성은 Tab 키를 사용하여 포커스를 변경할 때 해당 컴포넌트에 포커스를 주는 순서를 정의합니다. renderType=""radiogroup""일 때, 렌더링 될 객체의 태그 이름을 tagname 속성으로 설정할 수 있으며, title 속성은 마우스 오버 시 툴팁으로 표시됩니다. tooltip 속성은 사용자가 컴포넌트에 마우스 오버할 때 표시되는 텍스트를 설정하며, tooltipClass 속성은 툴팁에 적용할 스타일 class를 설정합니다. tooltipDisplay 속성은 사용자가 선택한 값에 대한 툴팁 표시 여부를 설정하며, tooltipFormatter 속성은 툴팁 내용을 변경할 사용자 함수명을 설정합니다. tooltipItemLabel 속성은 tooltipDisplay=""true""인 경우 표시할 툴팁의 텍스트를 설정하며, tooltipLocaleRef 속성은 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정합니다. tooltipShowAlways 속성은 텍스트 길이에 상관 없이 마우스 오버시 툴팁을 항상 표시할 것인지의 여부를 설정하며, tooltipTime 속성은 툴팁 표시 시간을 설정합니다. useItemLocale 속성은 아이템 목록 다국어 사용 여부를 설정하며, useLocale 속성은 클라이언트의 다국어 key를 이용하여 다국어 지원을 설정합니다. useRadioTitle 속성은 웹 접근성을 위해 radio의 항목(버튼)에 title의 표시 유무를 설정합니다. validator 속성은 유효성 체크 함수 이름을 설정하며, visibleColumn 속성은 선택 항목 목록에서 특정 항목을 감추는 기능을 설정합니다. onchange 이벤트는 사용자가 항목을 선택/변경하거나 API를 이용하여 value를 설정할 경우 발생하며, onlabelclick 이벤트는 label이 클릭된 경우 발생합니다. onradioclick 이벤트는 Radio가 클릭된 경우 발생하며, onviewchange 이벤트는 키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생합니다.",808
745,"이벤트가 발생한 항목의 index와 value를 포함한 오브젝트를 반환하는 메소드이다. addClass() 메소드는 컴포넌트에 CSS class를 추가하고, addItem() 메소드는 선택 항목을 추가한다. bind() 메소드는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하며, changeClass() 메소드는 컴포넌트의 class를 변경한다. click() 메소드는 index에 해당하는 항목에 클릭 이벤트를 발생시켜 해당 항목을 선택/해제한다. deleteItem() 메소드는 주어진 index에 해당하는 항목을 삭제하고, focus() 메소드는 컴포넌트로 포커스를 이동한다. getDisabled() 메소드는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하며, getGenerator() 메소드는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다. getID() 메소드는 웹스퀘어 컴포넌트의 ID를 반환하고, getInitStyle() 메소드는 컴포넌트의 초기 스타일을 반환한다. getItemCount() 메소드는 선택 항목 개수를 반환하며, getItemDisabled() 메소드는 주어진 index에 해당하는 항목의 disabled 설정을 반환한다. getOpacity() 메소드는 웹스퀘어 컴포넌트의 불투명도를 반환하고, getOriginalID() 메소드는 웹스퀘어 컴포넌트의 originalID를 반환한다. getPluginName() 메소드는 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하며, getPosition() 메소드는 웹스퀘어 컴포넌트의 위치(left, top)를 반환한다.",518
746,"getPosition( ) : 컴포넌트의 위치 값을 반환한다. getScope( ) : scope=""true""인 WFrame의 부모 WFrame 객체를 반환한다. getScopeWindow( ) : scope=""true""인 WFrame의 부모 WFrame 객체 또는 전역 window 객체를 반환한다. getSelectedIndex( ) : 선택된 항목의 인덱스를 반환한다. getSize( ) : 웹스퀘어 컴포넌트의 크기 값을 반환한다. getStyle( ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getText( ) : 선택된 항목의 label을 반환한다. getTitle( ) : 컴포넌트의 title 속성 값을 반환한다. getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData( ) : 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다. getValue( ) : 선택된 항목의 value를 반환한다. hasClass( ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨긴다. removeAll( ) : 모든 선택 항목을 삭제한다. removeClass( ) : 웹스퀘어 컴포넌트에서 class를 삭제한다. reset( ) : 항목의 선택을 해제한다. setDisabled( ) : 컴포넌트의 disabled 속성을 설정한다.",425
747,"disabledBooleanYdisabled 상태를 설정하는 속성. true: disabled 속성 활성화, false: disabled 속성 비활성화. 컴포넌트에 disabled 설정: componentId.setDisabled(true); enableColumn 속성을 동적으로 설정하는 메소드. enableColumn 속성으로 설정된 컬럼은 Radio와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있음. selectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작. enableColumn: enableColumnFalseValue. columnId: enableColumn으로 설정할 컬럼의 ID. enableColumnFalseValue: 목록을 disable 시키기 위한 조건에 해당하는 값. radio1.setEnableColumn(col3, false); setEventPause 메소드는 지정한 이벤트를 중단함. evList: 중단할 이벤트 목록. flag: 이벤트 중단 여부. true: 중단, false: 중단 해제. input1.setEventPause(""onclick"", true); setInitStyle 메소드는 컴포넌트의 초기 스타일을 복구함. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작함. property: CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). group1.setInitStyle(); setItemDisabled 메소드는 주어진 index에 해당하는 항목의 disabled 속성을 설정함. index: 항목의 index, flag: disabled 상태. true: disabled 속성 활성화, false: disabled 속성 비활성화. radio1.setItemDisabled(0, true); setNodeSet 메소드는 선택 항목 목록을 설정함. DataList와 바인딩할 경우 nodeset 파라미터는 ""data:""로 시작해야 함. nodeset: DataList의 ID. label: label로 설정할 컬럼의 ID. value: value로 설정할 컬럼의 ID. radio1.setNodeSet('data:dataList1','lbl','code'); setOpacity 메소드는 웹스퀘어 컴포넌트의 불투명도를 설정함. value: opacity 값 (0과 1 사이의 실수). componentId.setOpacity(0.45); setPosition 메소드는 웹스퀘어 컴포넌트의 위치(left, top)를 설정함. left: 설정할 left 위치 값 또는 null. top: 설정할 top 위치 값 또는 null. mode: 위치 설정 방법. [default: absolute, delta]. componentId.setPosition(null, 100); setRef 메소드는 ref 속성을 설정함. DataCollection과 연동시 ""data:""라는 prefix를 꼭 붙여야 함. path: 설정할 ref의 경로. radio1.setRef(""data:dataMap1.gender""); setSelectedIndex 메소드는 주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행함. index: 항목의 인덱스. radio1.setSelectedIndex(0); setSize 메소드는 웹스퀘어 컴포넌트의 크기(width, height)를 설정함. width: 새로 설정할 컴포넌트의 width 값 또는 null. height: 새로 설정할 컴포넌트의 height 값 또는 null. componentId.setSize(null,100); setStyle 메소드는 웹스퀘어 컴포넌트의 CSS 속성을 설정함. propertyName: 설정할 CSS 속성, value: 해당 CSS 속성에 적용할 값. componentId.setStyle(""width"", ""200px""); setTitle 메소드는 컴포넌트의 title 속성을 설정함. title: 속성으로 설정할 값. radio1.setTitle(""test""); setUserData 메소드는 웹스퀘어 컴포넌트에 임의의 데이터를 설정함. 컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨. key: 설정할 데이터의 key, value: 설정한 데이터의 value. componentId.setUserData(""data"", ""WebSquare""); setValue 메소드는 파라메터로 넘어온 값에 해당하는 선택 항목을 선택함. radio1.setValue(""M"");",1102
748,"setVisibleColumn( columnId , visibleColumnFalseValue ) : visibleColumn 속성을 동적으로 설정하는 함수. visibleColumn 속성으로 설정된 컬럼은 Radio와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있음. selectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시하는 함수. CSS display 속성을 주어진 값으로 설정하고 ""visibility: show;""를 적용.
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가하는 함수.
trigger( type , array ) : 컴포넌트에서 특정 이벤트를 발생시키는 함수.
unbind( type , function ) : 컴포넌트에서 이벤트를 제거하는 함수.
unbindRef( ) : ref 바인딩을 해제하는 함수.
validate( ) : 컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행하는 함수.
validateObject( ) : 컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행하는 함수.
visible( flag ) [deprecated] : show/hide 혹은 setStyle 사용을 권장. 엔진 내부적으로 CSS visibility 속성을 설정하는 함수.",395
749,"Scope은 웹 페이지를 구성하는 모든 단위 화면에 유효 범위를 설정하는 기능이다. Scope에 포함된 객체 및 스크립트는 Scope 내에서만 유효하다. Scope 기능을 사용하기 위해서는 각 화면을 WFrame으로 구성하고 WFrame 내에 표시할 화면(XML 파일)은 src 및 setSrc API를 통해 정적/동적으로 지정해야 한다. 각 WFrame을 Scope 객체로 지정하기 위해서는 SPA Variable에서 Scope 변수명을 설정해야 한다. Scope 변수명의 기본 값은 scwin이다. WFrame의 Scope 기능을 사용하기 위해서는 scriptPrecedence, strictMode, postDrawMode, SPA Variable, lazy=""false"", mode=""sync"", scope=""true"", getWindow searchTarget=""windowId"" 설정이 필요하다. strictMode는 메인 화면에 내부적으로 WFrame을 씌우는 기능으로, 메인 화면에 속한 컴포넌트의 ID는 ""메인 화면에 사용한 WFrame의 ID"" + ""_"" + ""컴포넌트 ID""로 변경된다. postDrawMode 설정은 다중 WFrame 구조를 사용하는 경우 필요하다. SPA Variable에서는 Scope 변수명을 설정한다.",325
750,"6.1.5 lazy=""false""
화면 파일(XML)을 스크립트 실행 순서에 따라 로딩하기 위한 설정으로, 각 화면 파일에서 설정합니다. Scope 기능을 사용하려면 JavaScript의 lazy=""false"" 모드를 설정해야 합니다. WebSquare 프로젝트의 Properties에서 Use JavaScript Section Lazy Loading flag 항목을 선택 해제합니다. 
6.1.6 mode=""sync"", scope=""true""
mode=""sync"" 설정은 다중 WFrame 구조를 사용하는 경우 필요합니다. scope=""true'"" 설정은 WFrame에 포함된 컴포넌트 및 스크립트의 유효 범위를 제한하기 위해 필요합니다. config.xml 파일에 설정을 추가하거나 WFrame 속성에서 설정할 수 있습니다.
6.1.7 getWindow searchTarget=""windowId""
WindowContainer를 위한 설정으로 getWindow 함수가 windowId를 기준으로 동작하도록 설정합니다. config.xml 파일에서 설정합니다.
6.2 ID 변경
strictMode를 사용할 경우, 최상단 메인 화면은 WFrame으로 감싸지고 메인 화면에 속한 컴포넌트의 ID는 변경됩니다. WFrame 내부에 포함된 컴포넌트의 ID도 변경됩니다. 이를 통해 ID 중복을 차단할 수 있습니다. 
6.2.2.1 ID 중복 허용
Scope 기능을 적용할 경우, 각 화면은 Scope 단위로 관리됩니다. 따라서 함수 역시 Scope 객체 내에서 실행되며, 해당 함수는 자신이 어느 Scope에서 실행되는지에 대한 정보가 필요합니다.",428
751,"Scope 정보를 별도의 인자로 받으면 코딩이 복잡해지므로, Scope 객체에 $w 계열 함수를 추가하여 유틸리티 기능을 제공합니다. 그러나 이 역시 코딩이 길어지는 문제가 있으므로, scwin.$w를 $p에 매핑하여 $p를 사용할 수 있도록 합니다. WFrame 간의 화면 참조는 getWindow(), parent(), top(), main() API를 사용합니다. 자식 → 부모, 형제, 부모 → 자식으로 참조할 수 있습니다. TabControl에서는 getFrame() API를 사용하고, WindowContainer에서는 getWinInfoObj() API를 사용합니다. WFrame 생성 시 dataObject 속성을 통해 데이터를 전달할 수 있으며, 호출된 페이지는 $p.getParameter로 해당 데이터를 참조할 수 있습니다. $p.openPopup을 통해 팝업을 생성할 때도 dataObject를 전달할 수 있습니다.",254
752,"팝업, 탭, 윈도우, WFrame에서 dataObject를 통해 파라미터를 전달할 수 있으며, $p.getParameter() 함수를 통해 전달받은 파라미터를 확인할 수 있습니다. dataObject의 data 객체 전달 시 JSON.stringify → JSON.parse를 통해 값을 복사하며, 객체에 함수를 직접 입력하거나 순환 참조를 포함할 수 없습니다. 또한, WFrame 사용 시 외부 라이브러리를 수동으로 릴리즈하고, onpageload 이벤트에서 setSrc를 호출할 경우 src 속성을 비워야 하며, Scope 기능 적용을 권장합니다. IFrame은 특수한 경우에만 사용하십시오.",205
753,"공통 함수는 WFrame에서 호출되어야 하며, 호출된 공통 함수는 해당 WFrame 내에서만 실행되어야 합니다. 이를 위해 공통 함수 개발자는 호출된 공통 함수가 어느 Scope에서 호출되었는지 파악할 수 있는 방법을 제공해야 합니다. 이를 위해 객체 생성 방식과 변수 전달 방식이 있으며, 객체 생성 방식이 권장됩니다. 외부 라이브러리 연동 시 scopeExternal과 scopeVariable 속성을 사용할 수 있으며, class selector를 사용하는 것이 좋습니다. ID selector를 사용해야 할 경우 jQuery를 사용할 수 있습니다.",178
754,"SP3 이상 버전에서는 외부 모듈이 ID를 통해 WebSquare 객체에 접근할 수 있도록 $p.$(""#"" + componentID) 형식으로 ID를 사용합니다. $p.$를 사용하여 객체를 검색하면 jQuery의 검색 결과와 동일하며, jQuery와 동일한 API를 사용할 수 있습니다. SPA를 구현하기 위해 SP3 이전 버전에서는 IFrame을 사용했지만, SP3 이후 버전에서는 WFrame으로 구성된 화면에서 setSrc(); 함수만 실행하여 SPA를 쉽게 구현할 수 있습니다. 디버깅을 위해 객체에 접근하려면 해당 객체가 존재하는 Scope을 찾아야 합니다. Scope는 $p.main() 또는 $p.top()으로 상위 Scope에 접근하거나 $p.getWindow를 사용하여 원하는 객체가 포함된 Scope에 접근할 수 있습니다. 디버깅용 API인 $p.debug.getScope(domElement)와 $p.debug.getFrame(domElement)를 사용하여 Scope 객체와 WFrame ID를 확인할 수 있습니다.",282
755,"GridView는 DataCollection의 데이터를 표현하기 위한 주 목적으로 사용되며, DataCollection을 Binding하여 편리하게 데이터를 표현할 수 있는 컴포넌트입니다. Grid 컴포넌트와 동일한 편집기능을 갖고 있으며, 데이터를 바인딩 할 때 기본값을 생성해줍니다. GridView는 Websquare5에서 새로 추가된 컴포넌트로, 기존의 Grid컴포넌트보다 더 강력한 편집기능을 탑재하였습니다. GridView의 속성 중 일부는 adaptive, applyAllColumnStyle, arrowMove, autoFit, captionAuto, class, columnMove, contextMenu, dataDragDrop, disabledBackgroundColordisabled, disabledFontColordisabled, disabledScrollHidden, drilldownToggleScrollFix, enterKeyMove, evenRowBackgroundColor, excludeModifiedRows, fixedColumn, fixedColumnWithHidden, fixedRow, footerSummaryAuto, hideHeader, hammerEnabled, hammerPressTime 등이 있습니다.",267
756,"GridView의 속성들에 대한 설명입니다.
- 단위는 ms이며, 기본값은 251ms입니다.
- id컴포넌트의 ID로 전역객체로 할당되며 script에서 본 id로 컴포넌트에 접근이 가능합니다.
- ignoreCellClickdrilldown 사용할 때 toggle 이미지 클릭시 gridView에 oncellclick 이벤트를 발생시키지 않음.
- ignoreToggleOnDisableddrilldown 사용할 때 toggle 이미지 클릭시 해당 셀에 disabled가 적용되어 있을 경우 toggle시키지 않음.
- keepDefaultColumnWidth[default:false, true] autoFit속성을 true로 설정할 경우 rowNum컬럼(rowNumVisible속성)과 rowStatus컬럼(rowStatusVisible속성)의 width를 고정한다.
- mergeCells SP2행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다.
- never : mergeCells에 의해 자동으로 merge된 것들을 해제한다.
- bycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 merge한다.
- byrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 merge한다.
- bycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행한다.
- byrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행한다.
- byrestriccol : 같은 column 내에서 연속적으로 데이터가 같으면서 동시에 자신의 왼쪽에 위치한 column이 merge된 경우 해당 row들을 merge한다. (n+1컬럼에 n컬럼을 upperColumn으로 지정한 형태)
- byrestricrow : 같은 row 내에서 연속적으로 데이터가 같으면서 동시에 자신의 위쪽에 위치한 row가 merge된 경우 해당 row들을 merge한다. (n+행에 n행을 upperRow으로 지정한 형태)
- mergeCellsFixedCols SP2fixedColumn 영역 내에서 행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다.
- mergeCellsFixedRows SP2fixedRow 영역 내에서 행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다.
- moveKeyEditMode SP2방향키로 원하는 방향에 위치한 셀의 editMode 상태에 바로 진입한다.
- numberMask SP2[default: """"] 화폐단위 변경을 위해 dataType = ""number"" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값.
- oddEvenColorDisplay[default:true, false] 행의 짝,홀수의 반복색을 사용할지의 여부.
- pasteOption SP2[default: """", focus] Ctrl(또는 cmd) + V를 눌러 클립보드에 복사된 컬럼 단위의 데이터의 붙여넣을 방법을 지정하는 속성.
- preventAddRowOnPaste SP2[default: false, true] Ctrl(또는 cmd)+V를 눌러 클립보드에서 그리드로 붙여넣기하는 경우 새로운 행을 추가시킬지의 여부.
- preventCopy SP2[default: false, true] Ctrl(또는 cmd)+C를 눌러 그리드 전체의 데이터를 클립보드에 복사하는 동작을 방지.
- preventCopyColumn SP2[default: """"] Ctrl(또는 cmd) + C를 눌러 컬럼 단위의 데이터를 클립보드에 복사하는 동작을 방지.
- preventPaste SP2[default: false, true] Ctrl(또는 cmd)+V를 눌러 클립보드에 복사된 컬럼 단위의 데이터를 붙여넣는 동작을 방지.
- preventPasteColumn SP2[default: """"] Ctrl(또는 cmd) + V를 눌러 컬럼 단위의 데이터를 붙여넣는 동작을 방지.
- readOnly[default:false, true] gridView전체의 각 cell을 readOnly로 적용하며 body 컬럼의 readOnly속성이 설정된 경우 해당 컬럼의 속성이 우선시 됩니다.
- readOnlyBackgroundColorreadOnly속성이 true인 cell의 배경색.
- readOnlyBackgroundImgreadOnly속성이 true인 cell의 배경 이미지의 경로.
- readOnlyBackgroundImgCSSreadOnly속성이 true인 cell의 배경이미지의 CSS 구문으로 readOnlyBackgroundImg속성보다 우선됩니다.
- resize[default:true, false] header의 컬럼 경계선에서 마우스 drag를 이용하여 컬럼의 폭 크기를 조절 할지의 여부.
- rowMouseOver[default:true, false] 마우스 over시에 over된 행의 배경색을 표시할지의 여부.
- rowNumBackgroundColorrowNumVisiblue속성이 true인 경우 해당 body 컬럼의 배경색.
- rowNumHeaderValue행 번호를 표시할 column의 head에 표시할 text.
- rowNumVisible행 번호 표시 여부.
- rowNumWidthrowNumVisiblue속성이 true인 경우 해당 컬럼의 width.
- rowStatusHeaderValue행 상태를 표시할 column의 head에 표시할 text.
- rowStatusVisible행 상태 표시 여부.
- rowStatusWidthrowStatusVisible 속성이 true인 경우 해당 컬럼의 width.
- rowNumLocaleRef SP2rowNum 컬럼에 설정할 localeRef 키.
- rowNumStatusUniqueId SP2[default:false, true] rowNumVisible 또는 rowNumStatus 사용 시 각 row별로 unique한 id를 사용할지에 대한 여부.
- rowStatusLocaleRef SP2rowStatus 컬럼에 설정할 localeRef 키.
- rupeeMask SP2[default: """"] 화폐단",1519
757,"기본값인 inputType = ""image""인 경우 tooltip 기능이 동작하지 않는다. syncScroll은 SP2에서 여러 그리드를 동시에 세로로 스크롤하기 위한 옵션이다. grid의 row의 갯수가 동일할 경우에만 동작한다. titleAuto는 cell의 header inputType = ""text""이고 cell의 inputType이 ""text, link, checkbox, button, radio, select(tableRender = ""ul""인 경우), secret""일 때, cell의 title속성에 자동으로 값을 설정하는 옵션이다. tooltipDisplay는 cell의 데이터가 width보다 긴 경우 해당 데이터를 마우스 over시 툴팁으로 표현할지의 여부를 설정하는 옵션이다. tooltipDisplayColumn은 특정 컬럼만 tooltip이 표현되도록 컬럼명을 설정하는 옵션이다. tooltipHeader는 gridView의 header에 tooltip을 나타내는 설정으로, tooltipDisplay = ""true""(또는 tooltipShowAlways=""true"")로 설정 후 동작한다. tengeMask는 화폐단위 변경을 위해 dataType = ""tenge"" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값이다. visibleRowNum은 화면에 표현 될 행 수를 설정하는 옵션이다. autofit는 그리드 컬럼의 width를 자동으로 늘리거나 줄여 그리드에 지정된 width를 채워서 그리는 옵션이다. autofit=""allColumn""은 화면에 보이는 모든 컬럼이 균등하게 늘어나 그리드 width를 채운다. autofit=""lastColumn""은 화면에 보이는 마지막 컬럼만 늘어나 그리드 width를 채운다. autoFitMinWidth는 최소넓이 값을 설정하는 옵션이다. inputType은 그리드셀을 선택한 후 해당셀의 inputType을 설정하는 옵션이다.",520
758,"input, a, checkbox, button, 이미지, radio, select, 달력폼, expression, textarea, drilldown, textImage, checkcombobox, autoComplete, secret, visibleRowNum, tooltipDisplay, grid.insertRow(), 브라우저 캡쳐화면, class 적용과 스타일 변경, CSS Overriding, datacollection 설정, Grid와 GridView 차이점, 주의사항 및 Tip. 그리드뷰에서 리스트를 만들려면 DataCollection의 행의 갯수가 있어야만 보여집니다. 그리드뷰를 Palette에서 그릴 경우 height:150px; 스타일 생성이 되는데, height값을 지우면 그리드가 보이지 않습니다.",185
759,"그리드뷰에서 리스트의 높이를 외부 스타일 시트로 설정할 때, inline-style로 들어간 컬럼 높이값도 동일하게 맞춰야 합니다. 바디 컬럼의 높이값은 기본적으로 height=""20px"" 인라인스타일로 들어갑니다. 외부스타일 시트에서 !important를 사용하여 강제로 height값을 주더라도, Dom에서 먼저 인라인 스타일로 들어간 height값을 읽어 그려지기 때문에 브라우저에서 확인할 경우 그리드뷰가 깨지거나, 불필요한 스크롤이 발생할 수 있습니다. 따라서, !important를 사용하거나 바디컬럼의 인라인스타일 height값을 삭제하여 쓰지 마시기 바랍니다.
InputType의 drilldown 사용시 depthColumn, depthType, showDepth 속성을 같이 설정해야 합니다. InputType의 textImage 사용시 imageHeight, imageSrc, imageWidth 속성을 같이 설정하며, 이미지 높이값은 그리드 컬럼의 높이값과 같거나 작아야 합니다. 웹스퀘어 Config에서 설정할 수 있는 속성으로는 rowNumBackgroundColor, selectedRowColor, evenRowBackgroundColor, oddRowBackgroundColor, rowMouseOverColor 등이 있으며, 그 외에도 tooltipStyle, noResultMessage, noResultMessageStyle, chooseOptionLabel 등이 있습니다.
주의할 점은 config 파일에서 설정할 경우, 웹스퀘어 엔진 패치가 새롭게 이루어지면 기존에 변경된 설정은 초기화됩니다. 따라서, 설정이 변경된 config 파일은 백업해 두었다가 재설정해주어야 합니다.",487
760,"Group13.Group13.1Groupdiv(Division) 태그는 레이아웃 구성이나 인라인 요소를 그룹화하는 블록 레벨 요소입니다. Tagname 속성을 사용하면 원하는 형태의 HTML 마크업이 가능합니다. Group 컴포넌트 자체는 접근성과 직접적인 관련이 없지만, tagname 속성을 사용할 때는 해당하는 접근성 지침을 준수해야 합니다.",137
761,"GridView 컴포넌트의 접근성 설정은 컴포넌트 설정과 각 컬럼의 inputType에 따른 컬럼 설정으로 구분된다. readOnly 속성을 true(조회용), false(편집용) 값으로 설정하여 사용하며, 부분적으로 편집이 가능한 컬럼이 필요한 경우 각 컬럼에서도 readOnly 설정을 할 수 있다. 그리드 컬럼에 컴포넌트들은 embedded 형태로 랜더링 되어 keyboard tab키 만을 이용하는 환경이나 센스리더와 같은 음성 낭독 프로그램을 사용하는 환경에서도 제약 없이 이용할 수 있다. 또한 caption, summary, sort 버튼 등의 접근성 관련 속성을 이용하면 보다 웹 접근성이 보장되는 그리드를 제작할 수 있다. 각 컬럼의 inputType에 따라 title, label, alt 등의 속성을 이용하여 적절한 설명을 제공하고, 의미가 있는 이미지에는 대체텍스트를 제공해야 한다. 또한 inputType이 user인 경우 작성된 html 코드가 요소의 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없는지 확인해야 한다.",370
762,"ID/Headers 자동 생성 방법
복잡한 그리드 테이블에서는 th(제목)의 ID와 td(내용)의 Headers 속성을 이용하여 제목과 내용을 연결해야 한다. 이를 위해 ID매칭 작업을 완료한 후 “TD Headers 생성”을 실행한다. 만약 그리드를 수정해야 할 경우, 수정이 모두 끝난 후 “TD Headers 생성”을 다시 실행하여 새롭게 갱신해야 한다.
Tab키 이동시 그리드 시작과 끝에서 포커스가 사라지는 현상
그리드내 가상스크롤을 사용하면서 데이터의 처음과 끝으로 Tab키를 이동하면 포커스가 사라지는 현상이 발생한다. 이를 해결하기 위해 div를 추가하여 데이터 처음과 끝으로 이동시켜준다. 이렇게 하면 Tab이동이 되면 센서리드에서 텍스트를 읽어주어 현재 상태를 알 수 있다. 다른 유형의 복합적인 그리드는 유형에 따라 아래의 설정들을 조합하여 응용할 수 있다.",321
763,"이번 장에서는 Group 컴포넌트와 Textbox 컴포넌트를 조합하여 데이터를 바인딩하는 방법에 대해 알아보고, 데이터가 정적인 경우와 동적인 경우의 코딩 방법을 설명합니다. Tag 컴포넌트를 사용하여 하드 코딩을 할 수 있으며, Generator 컴포넌트를 사용하여 동적으로 반복되는 부분을 처리할 수 있습니다. Tag 컴포넌트를 사용할 때는 tbody를 직접 코딩하면 Design View에 나타나지 않는 현상이 있으므로, tbody의 내용만을 따로 table이 되는 Tag 컴포넌트의 자식 컴포넌트로 그리고, tbody의 자식들이 되는 tr td를 Source 편집기에서 하드코딩합니다. config.xml에 removeXmlNameSpace 노드를 추가하여 xmlns 속성을 제거할 수 있습니다.",267
764,"이전 장에서와 같이 모든 요소를 Textbox, Group 컴포넌트로 코딩하고, 반복될 row는 하나의 row만 코딩합니다. 그리고 Generator로 감싸기 위해 Generator 컴포넌트를 추가하고, Generator의 tagname을 tbody로 수정합니다. Generator가 동적으로 그려지기 위해서는 데이터와 자바스크립트 코드가 필요합니다. 데이터는 로컬 데이터인 instance와 데이터를 요청하는 submission이 있습니다. 이 두 데이터는 xml 형태의 데이터입니다. 스크립트와 데이터는 실제 개발할 때와 많이 달라질 수 있습니다.",181
765,"UI 작업 전 데이터 구조가 결정되어 있다면, Generator 컴포넌트를 사용하여 반복될 컴포넌트를 감싸고 tagname을 지정합니다. 리스트 형태의 코딩에도 데이터가 동적인지 정적인지에 따라 컴포넌트가 달라집니다. ul 태그로 리스트를 표현하는 경우, <ul><li><strong><span> 태그를 사용하여 마크업을 합니다. <ul> 태그에는 클래스명을 ""list01""로 지정하고, <li> 태그에는 리스트의 텍스트에 관련된 스타일을 지정합니다. <strong> 태그에는 마진과 폰트 색상을 주고, <li> 태그에는 불릿 스타일을 지정합니다. 브라우저 호환성을 위해 <ul>, <li> 태그가 가지고 있는 기본 속성을 초기화하고, 리스트 스타일을 지정합니다.",275
766,"WebSquare 5.0은 이전 버전보다 업그레이드된 UI 툴바를 제공합니다. 사용자 중심의 접근성을 개선하였습니다. WebSquare 5 Studio에서는 2가지 그리기 모드를 제공하며, 사용자는 편집 방식을 선택할 수 있습니다. Flexible Mode에서는 그룹 컴포넌트를 그리는 방법을 설명하고 있습니다. Palet 창에서 그룹을 클릭하면 생성 대화창이 활성화되며, 삽입 위치를 선택할 수 있습니다. Strict Mode에서는 Click & Drag 방식을 사용하며, 이전 버전과 같은 방식으로 개발할 수 있습니다. WebSquare 5.0에서는 position 값을 직접 선택할 수 있는 옵션을 제공하며, 키보드 보조 없이 화면을 그릴 수 있습니다. static 모드에서는 드래그 앤 드랍이 불가능하며, 원하는 위치에 화면을 그리려면 position 값을 relative나 absolute로 설정하고 드래그해야 합니다.",298
767,"웹스퀘어5에서는 시각적 효과와 편의성을 고려하여 더 많은 편집 정보를 제공합니다. 디자인 툴팁 기능을 통해 컴포넌트, 컴포넌트 아이디, position 모드, 블록/인라인 요소, float 정보, 컴포넌트 넓이, 높이 등의 정보를 제공합니다. Position 모드, margin, padding의 색상 변화를 통해 컴포넌트 이동 효과를 시각적으로 표현합니다. 컴포넌트 검색 기능을 통해 원하는 컴포넌트를 쉽게 찾을 수 있으며, 컴포넌트명 옆에 selector를 표시하여 사용자가 클래스 정보를 확인할 수 있습니다. 새로운 Event 개발 방식을 통해 script 영역에 생성되어 가독성이 향상되었으며, Websquare 2.0 방식도 지원합니다. Component View Head 영역 Navigation 기능을 통해 Head의 자식 노드를 체계적으로 보여주고, Refresh 성능 개선을 통해 빠르게 갱신할 수 있습니다.",353
768,"WebSquare.logger는 디버그 창에서 확인할 수 있는 로그를 남기는 기능입니다. printLog(msg) 메소드를 사용하여 로그 메시지를 남길 수 있습니다. 
- Property Summary: WebSquare.logger는 engine 타입의 패키지입니다. 
- Event Summary: WebSquare.logger는 이벤트를 지원하지 않습니다. 
- Method Summary: WebSquare.logger는 printLog(msg) 메소드를 제공합니다. 
- printLog(msg): 디버그 창에서 확인할 수 있는 로그를 남깁니다. 
  - Parameter: msg (String, 필수) - 로그 메시지 
  - 예시: WebSquare.logger.printLog('Log Test');",171
769,"WebSquare.bigDecimal는 JavaScript에서 10^22 이상인 정수와 10^(-7) 이하인 소수를 처리할 수 있도록 지수 형태로 강제 치환되는 문제를 보완하기 위해 String 문자열을 받아 bigDecimal 타입으로 반환하는 기능을 제공한다. WebSquare.bigDecimal.calc는 String 문자열 연산식을 받아 bigDecimal 연산을 수행한다. bigDecimal을 사용하려면 config.xml 파일의 engine 노드에 <module src=""externalJS/big/big.min.js""/> 설정해야 한다. 
WebSquare.bigDecimal의 메소드로는 bigStr, calc, compare, divide, minus, mod, plus, pow, times가 있다. bigStr은 String 문자열을 받아 bigDecimal 타입으로 반환하고, calc는 String 문자열 연산식을 받아 bigDecimal 연산을 수행한다. compare는 입력받은 bigDecimal과 비교하여 더 큰 수 또는 더 작은 수를 반환하며, divide는 bigDecimal 타입의 데이터를 나누고, minus는 bigDecimal 타입의 데이터를 빼고, mod는 bigDecimal 타입의 데이터를 mod하며, plus는 bigDecimal 타입의 데이터를 더하고, pow는 bigDecimal 타입의 데이터를 제곱하며, times는 bigDecimal 타입의 데이터를 곱한다. 
각 메소드의 Parameter와 Return type, Sample 등 자세한 내용은 위의 표에서 확인할 수 있다.",370
770,"웹스퀘어를 사용하다 보면 디자인 수정 뿐 아니라 작업한 내용과는 상이한 결과물을 얻는 경우가 있습니다. 이를 확인하기 위해 브라우저에서 제공되는 개발자 도구를 활용하여 코딩의 과정을 단축할 수 있습니다. Internet Explorer, Chrome, Safari, Firefox, Opera 등의 브라우저에서 개발자 도구를 사용할 수 있으며, 스타일을 확인하고 수정하는 방법도 소개됩니다. 또한, 스크립트 디버깅을 위해 debugger 명령어를 사용할 수 있으며, 디버깅 시작 상태에서 여러 버튼을 이용하여 스크립트를 실행하거나 중지할 수 있습니다.",224
771,"디버깅은 소스코드의 오류를 찾아 수정하는 과정입니다. 디버깅 모드를 실행하면 스크립트가 한 단위씩 수행되며, 중지 포인트를 설정하여 해당 위치에서 스크립트를 중지시킬 수 있습니다. 안드로이드와 iOS 개발환경에서는 console.log api를 이용하여 로그를 출력하고, Weinre를 이용하여 디버깅할 수 있습니다. Weinre는 inspector를 활용하기 어려운 환경에서 유용하게 사용할 수 있습니다. 디버깅을 위해 스크립트에 debugger; 스크립트를 추가한 후, F12 버튼 또는 도구 메뉴의 개발자도구를 선택하여 개발자도구를 활성화시킵니다. 스크립트 입력창에서 값을 입력하고 Enter를 클릭하면 콘솔창에 해당값의 결과값이 출력됩니다. 스크립트를 끝까지 진행하고자 하는 경우 계속 버튼을 클릭하면 다음 중지 포인트까지 진행합니다.",321
772,"디버깅 시 deathTimeout을 길게 설정하는 것이 좋습니다. 로그 콘솔을 사용하여 웹스퀘어 페이지의 로그 및 사용자 디버그 로그를 확인할 수 있습니다. config.xml의 debug 값을 false로 설정하여 운영 환경에서 로그 콘솔을 사용하지 않도록 할 수 있습니다. 웹스퀘어 Fiddle은 웹기반의 개발도구로, 웹스퀘어 XML 파일을 웹브라우저에서 직접 편집하여 실행할 수 있습니다. 이를 사용하려면 웹스퀘어 화면에서 Ctrl+마우스 오른쪽 버튼을 클릭하여 Fiddle 보기를 선택합니다.",194
773,"WebSquare Fiddle은 XML 탭에서 웹스퀘어 화면 소스를 수정하고, 새로운 브라우저에서 결과를 확인할 수 있습니다. 또한, 소스의 가독성을 높이기 위해 indent를 정리하고, JSLint를 이용하여 스크립트를 검사할 수 있습니다. RUN 버튼을 클릭하여 실행한 기록을 조회하고, XML 탭을 창 전체로 키우거나 실행 결과를 창 전체로 키우는 화면 모드를 선택할 수 있습니다. 그러나 WebSquare Fiddle은 XML 파일의 경로를 상대 경로로 참조하는 로직이 있는 경우 정상 동작하지 않을 수 있으므로 주의해야 합니다. 또한, 배포된 소스를 수정하여 운영환경에 반영하면 안되며, fiddle 폴더를 삭제하거나 config.xml의 debugMenu를 block으로 설정하는 것을 권장합니다.",265
774,"동적 이벤트 가이드
4.1 component.bind(type, function);
이벤트를 등록하기 위한 함수입니다. type이 WebSquare 이벤트인 경우 해당 핸들러 함수로 WebSquare에서 전달하는 arguments가 전달됩니다. type이 Browser 이벤트인 경우 해당 핸들러 함수로 브라우저 이벤트 객체가 전달됩니다. type이 두 가지에 해당하지 않는 경우 trigger 함수를 통해 동작시킬 수 있습니다. 하나의 type에 대해 여러 function을 bind로 등록할 경우 이벤트 발생 시 bind를 호출한 순서대로 핸들러 함수가 호출됩니다.
4.2 component.unbind([type], [function]);
bind 함수로 등록한 event 핸들러를 제거하는 함수입니다. unbind 인자로 type, function이 모두 주어진 경우 해당 type으로 등록된 이벤트 핸들러 중 function과 정확히 일치하는 핸들러를 제거합니다. unbind 인자로 type만 주어진 경우 해당 type으로 등록된 모든 이벤트 핸들러를 제거합니다. unbind 인자로 아무 인자도 주어지지 않을 경우 해당 component에 등록된 모든 이벤트 핸들러를 제거합니다.
4.3 component.trigger(type, [array]);
이벤트를 발생시키기 위해 사용하는 함수입니다. type이 브라우저 이벤트이면서 WebSquare component event가 아닌 경우 document.dispatchEvent 또는 document.fireEvent 함수를 통해 이벤트를 직접 발생시킵니다. 그 외 type의 경우 해당 type으로 등록된 핸들러 함수들을 등록된 순서대로 호출합니다. array 형태로 추가 인자를 전달하면 해당 이벤트 핸들러 함수에 추가 인자가 전달됩니다.
※ bind, unbind, trigger 모두 WebSquare의 component 단위로 지원합니다. HTML element 단위로는 지원하지 않습니다.",505
775,"WebSquare.json은 XML과 JSON 데이터 간의 변환 기능을 제공합니다. 이 엔진은 JSON 형태의 데이터를 XML 형태로 변환하거나, XML을 JSON으로 변환하여 String 값으로 반환할 수 있습니다. 
JSON2XML 메소드는 JSON 형태의 데이터를 XML 형태로 변환하여 반환합니다. 이 메소드는 jsondata라는 Object 타입의 매개변수를 필요로 합니다. 반환 값은 Object 타입의 XML 데이터입니다.
XML2JSONString 메소드는 XML을 JSON으로 변환 후, String으로 반환합니다. 이 메소드는 data라는 Object 타입의 매개변수를 필요로 합니다. 반환 값은 String 타입의 JSON 데이터입니다. 
WebSquare.json은 Property, Event, Method를 제공합니다. 이를 통해 사용자는 더욱 편리하게 데이터 변환을 수행할 수 있습니다.",229
776,"게이지 컴포넌트는 입력값을 바늘로 나타내는 컴포넌트이다. centerX와 centerY는 게이지의 중심 축의 X, Y 좌표 값을 설정한다. backgroundImageSrc는 게이지의 배경 이미지 파일 경로를 설정하며, needleImageSrc는 바늘 이미지 파일 경로를 설정한다. maxAngle과 minAngle은 각각 게이지가 최대, 최소 값일 때 바늘의 각도를 설정하며, maxValue와 minValue은 게이지의 최대, 최소 값을 설정한다. needleCenterX와 needleCenterY는 바늘의 중심 축의 X, Y 좌표 값을 설정한다. tabIndex는 Tab Key를 이용한 컴포넌트의 포커스 순서를 설정한다. 게이지 컴포넌트는 지원하는 게이지 형태와 지원하지 않는 게이지 형태가 있다.",242
777,"FwSparkChart는 FusionWidget Wrapper 컴포넌트로, 차트의 데이터와 스타일 옵션을 결합하여 제공합니다. WebSquare5에서는 API를 통해 이를 분리하여 차트를 쉽게 Customizing 할 수 있습니다. Property로는 accessibility, chartType, refBinding, labelNode, seriesNode, seriesType, valueNode 등이 있습니다. 주의사항으로는 FwSparkChart의 디자인은 css로 변경하는 것이 아니라 차트가 제공하는 옵션에서 정의해야 하며, DataCollection을 만들고 ref, labelNode, valueNode 등을 연결해야 합니다.",166
778,"WebSquare.uiplugin.scrollView는 모바일 전용 터치 스크롤링을 제공하며, Group 컴포넌트처럼 하위에 여러 컴포넌트를 포함할 수 있다. accessibility 속성은 scroll에 키보드 제어 기능을 직접 제공할지에 대한 여부를 설정하며, bounce 속성은 튕기는 효과 사용 여부를 결정한다. class 속성은 HTML의 class 속성과 동일한 기능을 제공하며, horizontalScroll 속성은 가로 스크롤 사용 여부를 설정한다. paging 속성은 페이지 효과 사용 여부를 결정하며, scrollType 속성은 스크롤바 종류를 지정한다. showHorizontalScroll와 showVerticalScroll 속성은 가로/세로 스크롤 표시 여부를 결정한다. 이외에도 다양한 Method와 Property가 제공된다.",258
779,"tabIndex 속성을 이용하여 포커스를 변경할 때, 해당 컴포넌트에 포커스를 주는 순서는 HTML의 tabindex 속성과 동일하다. 또한, userData1, userData2, userData3 속성을 이용하여 사용자 정의 데이터 값을 설정하고, getUserData(""속성명"") API를 통해 값을 얻어올 수 있다. verticalScroll 속성은 세로 스크롤 사용 여부를 나타내며, onscrollbottom 이벤트는 스크롤뷰가 맨 아래까지 스크롤 되었을 때 발생한다. addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope 등의 메서드를 이용하여 컴포넌트에 CSS class를 추가하거나, 이벤트와 핸들러 함수를 동적으로 할당하고, 컴포넌트의 속성 값을 반환할 수 있다. 또한, scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하는 getScope 메서드를 이용할 수 있다.",324
780,"textbox1.getScope(); // (반환 값) wframe11 객체 getScopeWindow( ) scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope=""true""인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환. Return typedescription ObjectWFrame 객체의 scope 객체 또는 전역 window 객체
- textbox1의 부모 WFrame 객체를 반환하는 함수
- 만약 textbox1이 scope=""true""인 WFrame의 자식 컴포넌트가 아니라면 전역 window 객체를 반환
getScrollLeft( ) scrollView의 scrollLeft 값을 반환.
- scrollView의 scrollLeft 값을 반환하는 함수
getScrollTop( ) scrollView의 scrollTop 값을 반환.
- scrollView의 scrollTop 값을 반환하는 함수
getSize( sizeName ) 웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트의 크기를 반환하는 함수
- sizeName에 따라 반환되는 값이 다름
getStyle( propertyName ) 웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하는 함수
getStyleValue( style ) [deprecated]getStyle 사용 권장.웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.
- 해당 CSS 속성 값을 반환하는 함수
- getStyle 함수를 사용하는 것이 권장됨
getTitle( ) 컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)
- 컴포넌트의 title 속성 값을 반환하는 함수
getUdcHome( ) UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)
- UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하는 함수
- UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨
getUdcRoot( ) UDC 객체가 자신을 정의한 UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)
- UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하는 함수
- 파일명을 포함하지 않음
getUserData( key ) setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하는 함수
hasClass( className ) 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하는 함수
hide( ) 웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트를 화면에서 숨기는 함수
emoveClass( className ) 웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트에서 class를 삭제하는 함수
esetScrollBottom( ) 1회성 이벤트인 onscrollbottom 이벤트가 다시 발생할 수 있도록 설정.
- onscrollbottom 이벤트가 다시 발생할 수 있도록 설정하는 함수
scrollBy( xnum , ynum ) scrollView의 스크롤 위치를 입력 받은 수치만큼 증가시킴.
- scrollView의 스크롤 위치를 증가시키는 함수
scrollTo( scrollLeft , scrollTop ) scrollView의 스크롤 위치를 조정.
- scrollView의 스크롤 위치를 조정하는 함수
setDisabled( disabled ) 웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)
- 웹스퀘어 컴포넌트의 disabled 속성을 설정하는 함수
setEventPause( evList , flag ) 지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)
- 지정한 이벤트를 중단하는 함수
setInitStyle( property ) 컴포넌트의 초기 스타일을 복구한다.
- 컴포넌트의 초기 스타일을 복구하는 함수",1358
781,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. propertyStringN: CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). setOpacity( value ): 웹스퀘어 컴포넌트의 불투명도를 설정. setPosition( left , top , mode ): 웹스퀘어 컴포넌트의 위치(left, top)를 설정. setReadOnly( readOnly ): 웹스퀘어 컴포넌트의 readOnly 속성을 설정. setSize( width , height ): 웹스퀘어 컴포넌트의 크기(width, height)를 설정. setStyle( propertyName , value ): 웹스퀘어 컴포넌트의 CSS 속성을 설정. setUserData( key , value ): 웹스퀘어 컴포넌트에 임의의 데이터를 설정. show( displayType ): 웹스퀘어 컴포넌트를 화면에 표시. toggleClass( className ): 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. trigger( type , array ): 컴포넌트에서 특정 이벤트를 발생시킴. unbind( type , function ): 컴포넌트에서 이벤트를 제거. visible( flag ) [deprecated]: 엔진 내부적으로 CSS visibility 속성을 설정.",381
782,"WebSquare.uiplugin.multiupload는 복수의 파일을 동시에 업로드할 수 있는 기능을 제공하는데, 이는 Flash로 구현되어 제공된다. 이 기능을 사용하면 사용자는 파일 여러 개를 동시에 업로드할 수 있다. 이 기능을 사용하기 위해서는 uiplugin 속성 중 action, callbackSync, clearOnError, displaySizeUnit, filter, fireEventOnError, id, lang, maxcount, maxsize, mode, selectCallback, sizeUnit, subDir, subSize, tabIndex, uploadButton, userData1, userData2, userData3, wmode를 설정해야 한다. 이 기능에서 발생하는 이벤트는 onComplete, ondone, onerror, onprogress가 있다. 또한, 이 기능에서 사용할 수 있는 메소드는 addClass, bind, browserDisable, changeAction, changeClass, disableCancel, disableUpload, dropFiles, focus, getFileCount, getFileInfos, getFileNames, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, hasClass, hide, isUploading, removeAllFiles, removeClass, removeFile, setEventPause, setInitStyle, setMaxFileCount, setMaxFileSize, setMessageDuplicateText, setMessageMaxCountText, setMessageMaxSizeText, setOpacity, setParam, setParamJSON이 있다.",347
783,"웹스퀘어 컴포넌트의 위치, readOnly 속성, 멀티 업로드 컴포넌트의 취소중/진행중/완료 text, selectCallback 함수, 크기, CSS 속성, subDir 경로, input의 title 속성, 임의의 데이터, 화면에 표시, 업로드 시작, class 추가/제거, 이벤트 할당, 파일 업로드 완료/실패/진행상태 확인, 파일 열기 기능 disable 설정 등의 기능을 제공하는 웹스퀘어 컴포넌트의 API입니다. 멀티 업로드 컴포넌트의 최대 개수/크기, 업로드 가능한 파일 확장자, wmode 등의 옵션도 설정 가능합니다.",221
784,"disableBooleanYdisable 여부를 설정하여 멀티업로드 클릭 시 파일 업로드 기능을 비활성화합니다. 
actionStringYmultiupload할 때 전송될 URL을 설정합니다. 
oldClassNameStringY변경할 class, newClassNameStringY새로 사용할 class를 입력하여 웹스퀘어 컴포넌트의 class를 변경합니다. 
disableBooleanY취소 버튼을 disable 시킵니다. 
disableBooleanY업로드 버튼을 disable 시킵니다. 
eDragEventYdragEvent 객체를 입력하여 multiupload 컴포넌트의 drag&drop 업로드 기능을 구현합니다. 
웹스퀘어 컴포넌트에 포커스를 줍니다. 
전송할 파일의 수를 반환합니다. 
현재 멀티업로드 그리드에 있는 파일정보를 배열로 반환합니다. 
현재 멀티업로드 그리드에 있는 파일명을 배열로 반환합니다. 
컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다. 
웹스퀘어 컴포넌트의 ID를 반환합니다. 
컴포넌트의 초기 스타일을 반환합니다. 
웹스퀘어 컴포넌트의 불투명도를 반환합니다. 
웹스퀘어 컴포넌트의 originalID를 반환합니다. 
웹스퀘어 컴포넌트의 이름(pluginName)을 반환합니다. 
웹스퀘어 컴포넌트의 위치(left, top)를 반환합니다. 
현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환합니다. 
scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환합니다.",502
785,"getType( ) 
웹스퀘어 컴포넌트의 타입을 반환합니다. (웹스퀘어 컴포넌트 공통.)
Return type
String
컴포넌트 타입
Sample
 (예제)
var returnValue = componentId.getType();
 (반환 값 예시) ""inputBox""
getScopeWindow( )
웹스퀘어 컴포넌트가 속한 WFrame 객체의 scope 객체 또는 전역 window 객체를 반환합니다. (웹스퀘어 컴포넌트 공통.)
Return type
Object
WFrame 객체의 scope 객체 또는 전역 window 객체
Sample
 (예제)
 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재.
 그리고, wframe11 내부에 textbox1이 존재.
var scope = textbox1.getScopeWindow();
scope.wframe11 === textbox1.getScope(); // true
getSize( sizeName )
웹스퀘어 컴포넌트의 크기(width, height)를 반환합니다. (웹스퀘어 컴포넌트 공통.) %로 설정된 경우, 픽셀로 변환된 값을 반환합니다.
Parameter name	type	required	description
sizeName	String	Y	크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.
Return type
Number
컴포넌트의 크기 값
Sample
var returnValue = componentId.getSize(""width"");
 (반환 예) 100
getStyle( propertyName )
웹스퀘어 컴포넌트의 CSS 속성 값을 반환합니다. (웹스퀘어 컴포넌트 공통.)
Parameter name	type	required	description
propertyName	String	Y	반환할 CSS 속성
Return type
String
CSS 속성 값
Sample
아래와 같이 input 컴포넌트가 정의 된 경우
 (예제) 위의 inputBox 컴포넌트의 width 값을 확인
var returnValue = input1.getStyle(""width"");
 (반환 값) ""144px""
getTitle( )
컴포넌트의 title 속성 값을 반환합니다. (웹스퀘어 컴포넌트 공통.)
Return type
String
title 속성 값.
Sample
 아래와 같이 input 컴포넌트의 title 속성이 ""이름 입력""으로 정의된 경우
var tmpTitle = input1.getTitle();
 (반환 값 예시) ""이름 입력""
getUserData( key )
setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환합니다. (웹스퀘어 컴포넌트 공통.)
Parameter name	type	required	description
key	String	Y	데이터의 key
Return type
String
key에 해당하는 value
Sample
 Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제
 위에서 설정한 setTest을 값을 반환하는 예제.
input1.getUserData(""setTest""); // (반환 값) ""Hello""
hasClass( className )
웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인합니다. (웹스퀘어 컴포넌트 공통.)
Parameter name	type	required	description
className	String	Y	검색할 class 이름
Return type
Boolean
class의 포함 여부
Sample
 inputBox 컴포넌트에 class가 속성으로 직접 정의됨.
var returnValue = input1.hasClass(""tmpInputClass""); // (반환 값) true
hide( )
웹스퀘어 컴포넌트를 화면에서 숨깁니다. (웹스퀘어 컴포넌트 공통.) display:none; 및 visibility:hidden; CSS를 적용합니다.
Sample
 (예제) 컴포넌트를 숨김
componentId.hide();
isUploading( )
업로드 중인지 여부를 반환합니다.
Return type
Boolean
업로드 여부
Sample
var returnValue = multiupload1.isUploading(); // 업로드 중이면 returnValue는 true이다.
emoveClass( className )
웹스퀘어 컴포넌트에서 class를 삭제합니다. (웹스퀘어 컴포넌트 공통.) 기본적으로 addClass를 통해 추가된 class만 삭제 가능합니다. 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 설정을 추가해야 합니다.
Parameter name	type	required	description
className	String	Y	삭제 할 class명
Sample
 inputBox의 속성으로 class가 직접 정의된 경우,
 config.xml 파일에 아래 항목을 추가.
 <removeDefaultClass value=""true"" />
 removeClass를 통해 삭제 가능.
input1.removeClass(""tmpInputClass"");
setMaxFileCount( value )
멀티 업로드 컴포넌트의 전송 가능 파일 개수를 value로 설정합니다.
Parameter name	type	required	description
value	Number	Y	최대 개수
Sample
multiupload1.setMaxFileCount(5); // 한번에 전송 가능한 파일의 개수를 5개로 설정합니다.
setMaxFileSize( value )
멀티 업로드 컴포넌트의 전송 가능 파일 사이즈를 value로 설정합니다.
Parameter name	type	required	description
value	Number	Y	최대 파일 사이즈(Kb)
Sample
multiupload1.setMaxFileSize(1*1024); // 한번에 전송 가능한 파일의 사이를 1MB로 설정합니다.",1466
786,"setMessageDuplicateText(label)는 멀티 업로드 컴포넌트의 중복 메시지 text를 변경합니다. setMessageMaxCountText(label)는 최대 파일 세부 메시지 text를 변경하며, setMessageMaxSizeText(label)는 최대 사이즈 메시지 text를 변경합니다. setOpacity(value)는 웹스퀘어 컴포넌트의 불투명도를 설정하며, setParam(index, name, value)는 업로드 param을 지정합니다. setParamJSON(param)은 업로드하는 각 파일 별로 파라미터를 설정합니다. setPosition(left, top, mode)는 웹스퀘어 컴포넌트의 위치를 설정하며, setReadOnly(readOnly)는 readOnly 속성을 설정합니다. setRefCancelText(label), setRefProgressText(label), setRefSuccessText(label)는 각각 취소중, 진행중, 완료 text를 변경합니다. setSelectCallback(functionName)은 selectCallback 함수를 설정하며, setSize(width, height)는 웹스퀘어 컴포넌트의 크기를 설정합니다. setStyle(propertyName, value)는 CSS 속성을 설정하며, setSubDir(subDir)는 subDir 경로를 설정합니다. setTitleInput(title)은 input의 title 속성을 설정하며, setUserData(key, value)는 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다. show(displayType)은 웹스퀘어 컴포넌트를 화면에 표시하며, startUpload()는 업로드를 시작합니다. toggleClass(className)은 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가합니다.",450
787,"input1.toggleClass(""tmpInputClass"");는 tmpInputClass 클래스를 input1 요소에 추가하거나 제거합니다. trigger(type, array)는 컴포넌트에서 특정 이벤트를 발생시키며, type은 발생시킬 이벤트를, array는 이벤트 핸들러에 전달할 파라미터 배열을 나타냅니다. unbind(type, function)은 컴포넌트에서 이벤트를 제거하며, type은 제거할 이벤트를, function은 제거할 이벤트의 핸들러 함수를 나타냅니다. visible(flag)는 CSS visibility 속성을 설정합니다. 이 메서드는 show/hide 혹은 setStyle 사용을 권장합니다.",198
788,"WebSquare.uiplugin.inputCalendar는 Calendar와 InputBox를 조합한 복합 컴포넌트로, 사용자는 달력에서 날짜를 선택하거나 직접 입력할 수 있다. 유효성 검증(validCheck) 및 최소/최대 연도를 지정(minYear/maxYear)하는 기능을 제공하며, alt, autoFocus, buttonTitle, calendarClass, calendarDisplayFormat, calendarDisplayFormatFunc, calendarImage, calendarImageOver, calendarValueType, cancelButtonShow, caption, class, dateValidCheck, dateValidSet, dateValidSetCustom, dayMoveFixed, defaultDate, delimiter, disabled, disableDateValidSet, displayDayType, displayFormat, displayFormatFunc, displaymessage, dynamicHeaderOrder, editType, fixedDate, focusOnDateSelect, focusOnOuterDiv, footerDiv, handleIconClick, id, inputReadOnly, invalidMessageFunc, ioFormat, keepFixedDate, keepFocusSelect, keepInvalidDate, mandatory, maxYear, minYear, monthNames, monthNamesForYearMonthType, nextLastMonthDateSelect, nextTabID, outsideClickEvent, pickerType, placeholder, readOnly, ref, renderDiv, renderType, rightAlign, setCurrentDate, showPlaceHolderOnReadOnly, showToday, skipConfirm, skipConfirmOnly, summary, tabIndex, title, todaySelect 등의 속성이 있다.",309
789,"tooltipLocaleRef: 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key
topLayout: Today 및 닫기 버튼을 우측 상단으로 이동
type: HTML의 type 태그 속성과 동일
useAnchor: 앵커를 이용해 책갈피로 이동시킬 것인지 여부
useButton: 웹접근성 사용 시, '확인', '취소' 요소를 div태그에서 button태그로 변경
useCalendarTabIndex: useAnchor = false인 경우에도 달력에 tab키로 포커스 이동을 가능하게 할지에 대한 여부
userData1/2/3: 사용자 정의 데이터 속성
validateOnInput: 값을 직접 입력할 때 유효성에 어긋나는 값이 입력되지 않도록 하는 속성
validateOnInputMobile: 값을 직접 입력할 때 유효성에 어긋나는 값이 입력되지 않도록 하는 속성. 모바일 전용
validateRef: ref로 연동시에도 유효성 함수가 동작되도록 설정함
validator: 유효성 체크 함수 이름
visibleHourList: 시간이 표시되는 달력에서 시간 항목을 설정하는 속성
visibleMinList: 분이 표시되는 달력에서 분 항목을 설정하는 속성
visibleSecList: 초가 표시되는 달력에서 초 항목을 설정하는 속성
visibleWeekNum: 달력에 표시할 주(Week)의 개수를 설정
weekStartsOn: calendar의 시작 요일을 설정한다(0:일, 1:월, 2:화, 3:수, 4:목, 5:금, 6:토)
wmode: wmode를 사용하여 선택 항목 목록을 object 태그보다 상위에 표시
onblur: 포커스를 잃었을 때 발생하는 이벤트
onchange: component의 value가 변경되었을 때 발생하는 이벤트로 focus out 시점에 발생
onclick: 마우스로 inputcalendar를 클릭했을 때 발생
ondateselect: 날짜 선택 시 발생
onfocus: 포커스를 얻었을 때 발생
oniconclick: 달력 아이콘이 클릭되면 발생
onkeydown: 키보드에서 키를 눌렀을 때 발생
onkeypress: 키보드에서 키를 눌렀을 때(누르고 있는 동안에도) 발생
onkeyup: 키보드에서 키를 눌렀다 놓았을 때 발생
onmonthselect: 달력화면에서 월 변경시 발생
onviewchange: 키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생
onyearselect: 달력화면에서 연도 변경시 발생
addClass: 컴포넌트에 CSS class를 추가
bind: 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당
blur: input에 포커스를 제거(blur)한다
changeClass: 웹스퀘어 컴포넌트의 class를 변경
disableAfterDate: 입력 받은 날짜 이후의 날짜들을 달력에서 선택 불가능하도록 제한
disableBeforeDate: 입력 받은 날짜 이전의 날짜들은 달력에서 선택 불가능하도록 제한
disableDate: 특정 날짜를 비활성화
disableValidate: disableBeforeDate 또는 disableAfterDate 속성/API등으로 캘린더의 날짜중 일부를 '비활성화' 처리 했을 경우
enableAllDate: disableAfterDate 및 disableBeforeDate API를 통해서 입력일 이전/이후 날짜 선택을 가능하도록 변경
enableDate: 특정 날짜를 활성화
focus: 입련란으로 포커스를 이동
getButtonTitle: 설정된 buttonTitle 값을 가져온다
getDataListInfo: 컴포넌트와 바인딩된 DataList를 반환
getDefaultDate: 현재 컴포넌트에 설정된 defaultDate를 반환
getDisabled: 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환
getDisplayFormat: 현재 컴포넌트에 설정된 displayFormat을 반환
getDisplayValue: displayFormat이 적용된 날짜를 반환
getFormattedValue: formatStr의 패턴이 적용된 value를 반환하며 foramtStr의 값이 없는 경우 displayFormat속성에 적용된 패턴을 사용하여 value를 반환
getGenerator: 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환
getID: 웹스퀘어 컴포넌트의 ID를 반환
getInitStyle: 컴포넌트의 초기 스타일을 반환
getIoFormat: 현재 컴포넌트에 설정된 ioFormat속성값을 반환
getNextTabID: nextTabID 속성의 설정 값을 반환
getOpacity: 웹스퀘어 컴포넌트의 불투명도를 반환
getOriginalID: 웹스퀘어 컴포넌트의 originalID를 반환
getPluginName: 웹스퀘어 컴포넌트의 이름(pluginName)을 반환
getPosition: 웹스퀘어 컴포넌트의 위치(left, top)를 반환
getReadOnly: 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환
getScope: scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환
getScopeWindow: scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환
getSize: 웹스퀘어 컴포넌트의 크기(width, height)를 반환
getStyle: 웹스퀘",1604
790,"웹스퀘어 컴포넌트의 다양한 기능들을 설명하는데, removeHoliday( ), select( ), setButtonTitle( ), setCalendarValueType( ), setDefaultDate( ), setDisabled( ), setDisplayFormat( ), setEventPause( ), setHoliday( ), setHolidayRef( ), setInitStyle( ), setInputReadOnly( ), setIoFormat( ), setMaxYear( ), setMinYear( ), setNextTabID( ), setOpacity( ), setPlaceholder( ), setPosition( ), setReadOnly( ), setRef( ), setSkin( ), setStyle( ), setUserData( ), setValue( ), setValueCancel( ), show( ), toggleClass( ), trigger( ), unbind( ), unbindRef( ), validate( ), validateObject( ), visible( ) 등이 있다. 이들은 각각 컴포넌트의 속성값을 설정하거나 컴포넌트의 동작을 제어하는데 사용된다. 또한, alt, autoFocus, buttonTitle, calendarClass, calendarDisplayFormat, calendarImage, calendarImageOver, calendarValueType, cancelButtonShow, caption, class, dateValidCheck, dateValidSet, dateValidSetCustom, dayMoveFixed, defaultDate, delimiter, disabled, disableDateValidSet 등의 속성값들도 설명되어 있다. 이들은 각각 컴포넌트의 외형이나 동작에 영향을 미치는데 사용된다.",344
791,"기본 값인 ""false""는 비활성화된 날짜 값이 입력됩니다. ""disableBeforeDate""와 ""disableAfterDate""는 관련 API입니다. ""displayDayType""는 calendar의 요일 부분을 image 또는 text로 표현할지 설정합니다. ""displayFormat""은 input에 표현될 년월일에 대한 format으로 delimiter속성은 무시됩니다. ""displayFormatFunc"" 함수명을 입력받아 해당 함수의 return값으로 displayFormat을 설정합니다. ""validate()"" 함수를 통해 검증 결과가 실패일 경우, 메세지를 표시합니다. ""editType""은 사용자가 컴포넌트 클릭 시 결과 동작을 지정합니다. ""fixedDate""는 calendar의 하단에 표현되는 날짜를 사용자가 선택한 날짜가 아닌 현재일로 고정하여 표현할지의 속성입니다. ""focusOnDateSelect""은 모바일에서 달력의 날짜 선택시 input에 focus를 줄지 여부를 설정합니다. ""focusOnOuterDiv""는 calendar 외부 div에 tabindex와 포커스를 줄지 여부를 설정합니다. ""footerDiv""는 calendar의 선택된 날짜등이 있는 하위 영역을 table Tag가 아닌 div Tag로 표현할지 여부입니다. ""inputReadOnly""는 읽기 전용 설정을 합니다. ""invalidMessageFunc""은 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름입니다. ""mandatory""는 필수 선택 적용 여부를 설정합니다. ""maxYear""는 calendar에 표시되는 최대연도를 설정합니다. ""minYear""는 calendar에 표시되는 최소연도를 설정합니다. ""monthNames""는 calendar의 월에 해당하는 selectbox에 display값을 설정하는 기능입니다. ""nextLastMonthDateSelect""는 달력에서 다음달과 이전달 날짜를 클릭할 경우 바로 선택된 날짜를 설정합니다. ""pickerType""은 클릭할 경우 현재 날짜로 이동하는 Today 버튼 표시 여부를 설정합니다. ""placeholder""는 HTML5의 placeholder와 동일한 기능을 제공합니다. ""readOnly""는 readonly의 여부로 HTML의 readonly속성과 동일한 기능을 제공합니다. ""ref""는 DataCollection의 value 경로를 설정합니다. ""renderDiv""는 calendar를 div로 구성할지의 여부를 설정합니다. ""setCurrentDate""는 날짜 input 현재일 출력 유무를 설정합니다. ""showPlaceHolderOnReadOnly""는 읽기전용 모드에서도 placeholder 속성으로 지정된 값을 표시할지 여부를 설정합니다. ""showToday""는 클릭할 경우 현재 날짜로 이동하는 Today 버튼 표시 여부를 설정합니다.",731
792,"옵션 설명:
- default: true/false
- todaySelect: true/false
- skipConfirm: true/false
- skipConfirmOnly: true/false
- validateOnInput: true/false
- validateOnInputMobile: true/false
- validateRef: ref
- validator: function
- visibleHourList: 시간 목록
- visibleMinList: 분 목록
- visibleSecList: 초 목록
- visibleWeekNum: 주(Week) 개수
- weekStartsOn: 시작 요일
- wmode: true/false
- yearSuffix: 연도 selectbox의 문자열
기본 값:
- todaySelect: false
- skipConfirm: false
- skipConfirmOnly: false
- validateOnInput: false
- validateOnInputMobile: false
- wmode: false
속성:
- summary: HTML의 table Tag의 summary 속성과 동일한 기능을 제공한다.
- tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서.
- title: HTML의 title 속성과 동일.
- tooltip: 마우스 오버 시, title로 저장한 값이 툴팁으로 표시됨.
- tooltipLocaleRef: tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.
- topLayout: Today 및 닫기 버튼을 우측 상단으로 이동.
- type: HTML의 type 태그 속성과 동일.
- useAnchor: 앵커를 이용해 책갈피로 이동시킬 것인지 여부.
- useButton: 웹접근성 사용 시, '확인', '취소' 요소를 div태그에서 button태그로 변경.
- useCalendarTabIndex: useAnchor = false인 경우에도 달력에 tab키로 포커스 이동을 가능하게 할지에 대한 여부.
- userData1~3: 사용자 정의 데이터 속성.
- validCheck: 입력된 날짜의 유효성을 확인하여 유효하지 않은 날짜가 입력될 경우 alert을 표시.
- wmode: 선택 항목 목록을 object 태그보다 상위에 표시.
- yearSuffix: 연도 selectbox의 display되는 값의 숫자(연도) 뒤에 들어갈 문자열.",601
793,"이벤트에 대한 설명이 제공되며, onblur, onchange, onclick, onfocus, oniconclick, onkeydown, onkeypress, onkeyup, onmonthselect, onviewchange, onyearselect 이벤트에 대한 파라미터와 예시가 제공된다. 또한, addClass, bind, blur, changeClass, disableAfterDate, disableBeforeDate, disableDate, disableValidate, enableAllDate, enableDate, focus, getButtonTitle, getDataListInfo, getDefaultDate 메소드에 대한 설명과 예시가 제공된다.",135
794,"inputCalendar1 컴포넌트의 다양한 속성과 메소드를 설명하는 문서입니다. defaultDate, disabled, displayFormat, displayValue, formattedValue, generator, ID, initStyle, ioFormat, nextTabID, opacity, originalID, pluginName, position, readOnly, scope, scopeWindow, size 등의 속성과 메소드가 소개됩니다. 각각의 속성과 메소드는 어떤 값을 반환하는지와 예시 코드가 함께 제공됩니다.",129
795,"getSize( ) : 컴포넌트의 크기 값을 반환한다. width, height 등의 값을 반환하며, %로 설정된 경우 픽셀로 변환된 값을 반환한다.
getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다.
getUserData( key ) : 웹스퀘어 컴포넌트에 설정한 key의 value를 반환한다.
getValue( ) : input에 입력된 value를 구분자 없이 반환한다.
hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다.
hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨긴다.
emoveClass( className ) : 웹스퀘어 컴포넌트에서 class를 삭제한다.
select( ) : input에 입력된 값을 select한다.
setButtonTitle( ) : buttonTitle 값을 설정한다.
setCalendarValueType( calendarValueType, options ) : calendarValueType과 displayFormat 및 ioFormat속성을 동적으로 변경한다.
setDefaultDate( dateStr ) : defaultDate 속성을 설정한다.
setDisabled( disabled ) : 컴포넌트의 disabled 속성을 설정한다.
setDisplayFormat( format ) : 컴포넌트의 displayFormat속성을 설정한다.
setEventPause( evList, flag ) : 지정한 이벤트를 중단한다.",359
796,"input1.setEventPause(""onclick"", true); // (예제 2) // onfocus 및 onblur 이벤트의 중단을 해제. input1.setEventPause(""onfocus,onblur"", false); // (예제 3) // input1에 등록된 모든 사용자 이벤트를 중단. input1.setEventPause(null, true); 
setHoliday( dateStr , removeHoliday ) : 특정 날짜에 holiday를 지정한다. 전체 연도에 적용시에는 inputCalendar1.setHoliday(""*0815"");로 설정한다.
setHolidayRef( setHolidayRef ) : holidayRef 속성을 설정하는 기능으로 DataCollection과 연동시 ""data:""라는 prefix를 꼭 붙여야한다.
setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.
setInputReadOnly( readOnly ) : 인자로 넘겨받은 boolean값에 따라 inputbox만을 readOnly할 수 있다.
setIoFormat( ioFormat , displayFormat ) : inputCalendar의 ioFormat 및 displayFormat속성을 설정한다.
setMaxYear( maxYear ) : calendar의 maxYear를 동적으로 설정한다.
setMinYear( minYear ) : calendar의 minYear를 동적으로 설정한다.
setNextTabID( componentID , componentScope ) : nextTabID 속성을 설정.
setOpacity( value ) : 웹스퀘어 컴포넌트의 불투명도를 설정.
setPlaceholder( placeholderStr ) : placeholder 속성값을 변경한다.
setPosition( left , top , mode ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정.
setReadOnly( readOnly ) : readOnly 속성값을 설정한다.
setRef( ref ) : ref 속성을 설정.
setSkin( skin ) : calendar의 skin을 설정한다.
setStyle( propertyName , value ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정.
setUserData( key , value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정.
setValue( value ) : 컴포넌트의 value를 설정한다.
setValueCancel( ) : inputCalendar에 값이 입력 중인 상태일 때, 입력 중인 값을 무시하고 이전 값으로 되돌리는 함수.
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시.
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가.",662
797,"웹스퀘어 컴포넌트는 파라미터로 주어진 class를 추가하거나 삭제할 수 있습니다. 만약 컴포넌트에 이미 해당 class가 존재한다면, 삭제하고, 없다면 추가합니다. 기본적으로 addClass를 통해 추가된 class만 삭제 가능합니다. 만약 직접 정의된 class를 삭제하려면 config.xml 파일에 설정을 추가해야 합니다. trigger 함수는 특정 이벤트를 발생시키며, unbind 함수는 이벤트를 제거합니다. unbindRef 함수는 ref 바인딩을 해제하며, validate 함수는 컴포넌트의 유효성 검사를 실행합니다. visible 함수는 CSS visibility 속성을 설정합니다. 이 함수는 show/hide 혹은 setStyle 사용을 권장합니다.",220
798,"80 WebSquare 가이드 디자인 가이드 OPS 파트 01.html.
파트 I. 들어가기 전에
1. CSS 기본 문법
2. 개발자 도구로 WebSquare 컴포넌트 구조 파악 및 CSS 적용하기
3. stylesheet.css
4. config.xml
5. websquare.html
6. Context Root
7. 외부 CSS 파일 참조하기",108
799,"stylesheet.css는 웹스퀘어 엔진 내에서 기본으로 삽입되는 CSS 클래스의 기본 설정이 포함된 파일입니다. 이 파일은 로컬 엔진 사용 시 websquare(웹스퀘어 설치 폴더)\plugins\com.inswave.websquare.webapp.engine_1.0.0.xxxxxxxxxxxx\websquare\skin\stylesheet.css에 위치합니다. 그러나 프로젝트의 빌드 및 운영 환경에서는 별도의 위치에 있으므로 수정이 필요한 경우 프로젝트의 담당자와 상의해야 합니다. 로컬 엔진에서 파일을 수정하면 모든 웹스퀘어 프로젝트에 영향을 미치므로, 부득이한 경우가 아니면 새로운 CSS 파일을 생성하여 기존 stylesheet.css에서 설정한 스타일을 오버라이드하는 것이 권장됩니다.",250
800,"WebSquare에서 컴포넌트를 Design View에서 그리면 XML 코드가 생성됩니다. XML 파일을 미리보기 탭에서 확인하면 파싱되기 전의 소스로 파싱된 HTML을 확인할 수 없습니다. 이때, 개발자 도구를 이용하면 WebSquare 컴포넌트가 파싱된 HTML 구조 파악이 가능하며, WebSquare 엔진 내부에서 기본적으로 들어가는 CSS class 파악을 할 수 있어 CSS 설계가 손쉬워집니다. 개발자 도구는 각 브라우저에서 모두 제공됩니다. 개발자 도구를 이용하여 CSS를 적용하려면, 파싱된 엘리먼트 중 CSS 속성을 변경하고 싶은 요소를 선택합니다. SelectBox 컴포넌트는 기본적으로 <table>로 파싱되어 있고, 해당 아이템의 이름, 화살표가 서로 다른 td의 다른 클래스가 적용되어 있습니다. WebSquare에서는 관련 CSS Class를 제공하므로, 마우스 오버시에는 '_over', '_select'와 같은 클래스를 사용하는 것이 수월합니다. 컴포넌트 자기 자신의 마크업은 div가 될 확률이 많으므로, SelectBox 자기 자신에 적용할 CSS Class를 만들어서 사용하는 것이 좋습니다. 이 방법은 각각의 컴포넌트의 디자인을 위해서 사용하는 것이 수월하고, 해당 컴포넌트가 모두 공통의 디자인을 적용해야 한다면 기본 제공 Class selector를 추가한 CSS 파일에서 재정의하여 사용하는 것이 더 작업이 수월합니다.",494
801,"14장. 전체 버튼
• 화면에 사용되는 버튼을 생성한다.
14.1.1 검색_Table 버튼
그림 14-1에서는 검색, 추가, 삭제 버튼을 추가하는 방법을 설명한다.
1.1. 검색버튼_아이콘: 검색 영역 table 컬럼 내 검색(아이콘)버튼을 추가한다.
1.2. 추가버튼_아이콘: 검색 영역 table 컬럼 내 추가(아이콘)버튼을 추가한다.
1.3. 삭제버튼_아이콘: 검색 영역 table 컬럼 내 삭제(아이콘)버튼을 추가한다.
2.1. 공통버튼: 검색 영역 table 컬럼 내 공통버튼을 추가한다.
그림 14-2에서는 검색버튼_아이콘, 그림 14-3에서는 추가버튼_아이콘, 그림 14-4에서는 삭제버튼_아이콘, 그림 14-5에서는 공통버튼이 표시된다.
14.1.2 공통버튼
그림 14-6에서는 인쇄, 도움말, 즐겨찾기 버튼을 추가하는 방법을 설명한다.
1.1. 공통버튼 - 인쇄: 페이지 내 상단 공통버튼인 인쇄(아이콘)버튼을 추가한다.
1.2. 공통버튼 - 도움말: 페이지 내 상단 공통버튼인 도움말(아이콘)버튼을 추가한다.
1.3. 공통버튼 - 즐겨찾기: 페이지 내 상단 공통버튼인 즐겨찾기(아이콘)버튼을 추가한다.
2.1. 모듈제어버튼 - 공통: 공통 그리드와 table 상단 영역에 공통버튼을 추가한다.
2.2. 모듈제어버튼 - 엑셀: 엑셀 그리드와 table 상단 영역에 엑셀버튼을 추가한다.
2.3. 모듈제어버튼 - 행추가,행삭제: 그리드와 table 상단 영역에 행추가, 행삭제버튼을 추가한다.
3.1. 전체제어버튼 영역: 페이지 내 하단 전체제어버튼 영역을 추가한다.
그림 14-7에서는 공통버튼 - 인쇄, 그림 14-8에서는 공통버튼 - 도움말, 그림 14-9에서는 공통버튼 - 즐겨찾기, 그림 14-10에서는 모듈제어버튼 - 공통, 그림 14-11에서는 모듈제어버튼 - 엑셀, 그림 14-12에서는 모듈제어버튼 - 행추가,행삭제, 그림 14-13에서는 전체제어버튼 영역이 표시된다.",838
802,"컴포넌트 15. 컴포넌트 15.1 컴포넌트
- 자주 사용하는 폼 형태를 생성할 때 사용한다.
- 기본 컴포넌트: input, 필수 input, selectbox, 필수 selectbox, inputCalender, 필수 inputCalender, 라디오박스, 체크박스, input + 검색버튼, input + text
- 유동 컴포넌트: input 100%, selectbox 100%, textarea 100%",139
803,"WebSquare.uiplugin.fwBulletChart는 FusionWidget에 포함된 7종의 차트 중 하나로, 실제 차트에 보여줄 값과 스타일 옵션들이 하나로 결합되어 있는 형태입니다. WebSquare5는 차트를 쉽게 Customizing 할 수 있도록 API를 지원하며, 각 차트에 대한 자세한 내용은 FusionCharts 공식 홈페이지에서 확인 가능합니다. fwBulletChart의 Property와 Event Method는 chartType, id, ref, targetNode, valueNode, version 등이 있으며, addClass, bind, changeClass, draw, exportJSChart, fc, focus, getChartAttribute, getDataListInfo, getDisabled, getGenerator, getID, getInitStyle, getJSONData, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getSVGString, getTitle, getUdcHome, getUdcRoot, getUserData, setValue, hasClass, hide, removeClass, setChartAttribute, setDisabled, setEventPause, setInitStyle, setJSONData, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setUserData, show, toggleClass, trigger, unbind, unbindRef, visible 등이 있습니다.",313
804,"웹스퀘어 컴포넌트의 class 속성에서 직접 정의된 class를 삭제하려면 config.xml 파일에 <removeDefaultClass value=""true"" /> 설정을 추가해야 합니다. 또한, fwBulletChart를 화면에 출력하려면 fwFunnelChart1.draw()를 사용하고, fwBulletChart를 jpg, png, pdf 형식으로 export하려면 fwBulletChart.exportJSChart(""jpg"")를 사용합니다. 웹스퀘어 컴포넌트에 포커스를 주려면 focus()를 사용하고, fwBulletChart의 attribute 값을 반환하려면 getChartAttribute(""caption"")를 사용합니다. 또한, 컴포넌트와 바인딩된 DataList를 반환하려면 getDataListInfo()를 사용하고, 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하려면 getDisabled()를 사용합니다. 웹스퀘어 컴포넌트의 위치(left, top)를 반환하려면 getPosition(""left"") 또는 getPosition(""top"")을 사용하고, 크기(width, height)를 반환하려면 getSize(""width"") 또는 getSize(""height"")를 사용합니다. 마지막으로, 웹스퀘어 컴포넌트의 이름(pluginName)을 반환하려면 getPluginName()을 사용합니다.",357
805,"getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환하는 함수입니다. Parameter로 propertyName을 입력하면 해당 CSS 속성 값을 반환합니다.
getStyleValue( style ) [deprecated] : getStyle 함수를 사용하는 것을 권장합니다. 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환합니다.
getSVGString( ) : 차트로부터 SVG를 string 형태로 반환하는 함수입니다.
getTitle( ) : 컴포넌트의 title 속성 값을 반환하는 함수입니다.
getUdcHome( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환하는 함수입니다.
getUdcRoot( ) : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하는 함수입니다.
getUserData( key ) : 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환하는 함수입니다.
getValue( ) : fwBulletChart에 target,value 값을 객체로 반환하는 함수입니다.
hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하는 함수입니다.
hide( ) : 웹스퀘어 컴포넌트를 화면에서 숨기는 함수입니다.
emoveClass( className ) : 웹스퀘어 컴포넌트에서 class를 삭제하는 함수입니다.
setChartAttribute( options ) : fwBulletChart의 attribute의 value값을 변경하는 함수입니다.
setDisabled( disabled ) : 웹스퀘어 컴포넌트의 disabled 속성을 설정하는 함수입니다.
setEventPause( evList , flag ) : 지정한 이벤트를 중단하는 함수입니다.
setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구하는 함수입니다.
setJSONData( json ) : 지정된 json 객체로 fwBulletChart의 차트 데이터를 설정하는 함수입니다.
setOpacity( value ) : 웹스퀘어 컴포넌트의 불투명도를 설정하는 함수입니다.
setPosition( left , top , mode ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정하는 함수입니다.
setReadOnly( readOnly ) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정하는 함수입니다.
setRef( dataList , targetNode , valueNode ) : fwBulletChart에 dataList를 바인딩하는 함수입니다.",645
806,"fwBulletChart.setRef(""data:dataList1"",""targetNode"",""valueNode""); : fwBulletChart에 데이터를 설정합니다.
setSize( width , height ) : 웹스퀘어 컴포넌트의 크기를 설정합니다.
setStyle( propertyName , value ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정합니다.
setUserData( key , value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정합니다.
setValue( value ) : fwBulletChart에 value값을 설정합니다.
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시합니다.
toggleClass( className ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가합니다.
trigger( type , array ) : 컴포넌트에서 특정 이벤트를 발생시킵니다.
unbind( type , function ) : 컴포넌트에서 이벤트를 제거합니다.
unbindRef( ) : ref 바인딩을 해제합니다.
visible( flag ) : [deprecated] show/hide 혹은 setStyle 사용을 권장합니다. 엔진 내부적으로 CSS visibility 속성을 설정합니다.",316
807,"WebSquare.uiplugin.tableLayout.th는 테이블 레이아웃의 TH를 나타내는 컴포넌트이다. HTML의 class 속성과 동일한 기능을 제공하며, CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능하다. 컴포넌트 ID는 전역 객체로 할당되며, Script에서 해당 컴포넌트에 접근 가능하다. 이 컴포넌트의 CSS를 제어하기 위해 class 속성을 이용할 수 있다. 이 컴포넌트의 자세한 이벤트와 메소드는 문서에서 확인할 수 있다.",193
808,"WebSquare.uiplugin.upload는 파일을 서버에 업로드할 수 있는 기능을 제공하는 컴포넌트이다. accept 속성, action 속성, class 속성, clickOpenFileDialog 속성, disabled 속성, id 속성, imageClass 속성, imageStyle 속성, inputClass 속성, inputStyle 속성 등을 제공한다. 또한, 파일 업로드 끝날시 발생하는 ondone 이벤트와 입력창의 값이 변할때 발생하는 onInputValueChange 이벤트, addClass(), addParam(), bind(), changeClass(), changeFormAction(), focus(), getActionUrl(), getDisabled(), getGenerator(), getID(), getInitStyle(), getOpacity(), getOriginalID(), getPluginName(), getPosition(), getReadOnly(), getScope(), getScopeWindow(), getSize(), getStyle(), getStyleValue(), getSubDir(), getTitle(), getUdcHome(), getUdcRoot(), getUserData(), getValue(), hasClass(), hide(), removeClass(), reset(), setCallback(), setDisabled(), setEventPause(), setInitStyle(), setOpacity(), setPosition(), setReadOnly(), setSize(), setStyle(), setSubDir(), setUserData(), show(), submit(), toggleClass(), trigger(), unbind(), visible() 등의 메소드와 속성을 제공한다.",303
809,"upload 컴포넌트의 속성과 메소드를 설명하는 문서이다. subDir은 websquare.xml에서 설정된 값을 반환하며, 설정값이 없으면 baseDir 지정경로를 반환한다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 때 해당 컴포넌트에 포커스를 주는 순서를 설정한다. targetFrame은 파일 업로드를 위한 임시 IFrame을 생성할 위치를 지정한다. title은 마우스 오버 시 툴팁으로 표시되는 값으로 웹접근성 지원용으로 설정한다. type은 출력 타입을 설정하며, userData1~3은 사용자 정의 데이터 속성으로 API를 통해 값을 얻어올 수 있다. useXHR은 ajax통신으로 파일을 업로드할지 여부를 설정한다. ondone은 파일 업로드가 끝날 때 발생하는 이벤트로, 반환되는 XML document를 통해 업로드 후의 정보를 확인할 수 있다. addClass, addParam, bind, changeClass, changeFormAction, focus 등의 메소드를 사용하여 컴포넌트에 CSS class를 추가하거나, 업로드 시 전달할 값을 설정하거나, 이벤트와 핸들러 함수를 동적으로 할당할 수 있다. getActionUrl, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName 등의 메소드를 사용하여 컴포넌트의 속성 값을 반환할 수 있다.",397
810,"commObj 객체에는 여러 웹스퀘어 컴포넌트의 함수가 정의되어 있다. getPosition 함수는 컴포넌트의 위치 값을 반환하며, getReadOnly 함수는 readOnly 속성 값을 반환한다. getScope 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환하며, getScopeWindow 함수는 scope=""true""인 WFrame의 부모 WFrame 객체 또는 전역 window 객체를 반환한다. getSize 함수는 컴포넌트의 크기 값을 반환하며, getStyle 함수는 CSS 속성 값을 반환한다. getSubDir 함수는 subDir 설정값을 반환하며, getTitle 함수는 title 속성 값을 반환한다. getUdcHome 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, getUdcRoot 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData 함수는 웹스퀘어 컴포넌트에 설정한 key의 value를 반환하며, getValue 함수는 파일 이름을 반환한다. hasClass 함수는 컴포넌트가 특정 class를 포함하고 있는지 확인하며, hide 함수는 컴포넌트를 화면에서 숨긴다. removeClass 함수는 컴포넌트에서 class를 삭제하며, reset 함수는 컴포넌트를 초기화한다. setCallback 함수는 파일 업로드가 끝났을 경우에 호출하는 함수를 설정한다.",382
811,"upload1.setCallback( ) : 파일 업로드가 끝나면 실행할 함수를 설정한다. 
setDisabled( ) : 컴포넌트의 disabled 속성을 설정한다. 
setEventPause( ) : 지정한 이벤트를 중단하거나 중단을 해제한다. 
setInitStyle( ) : 컴포넌트의 초기 스타일을 복구한다. 
setOpacity( ) : 웹스퀘어 컴포넌트의 불투명도를 설정한다. 
setPosition( ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. 
setReadOnly( ) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. 
setSize( ) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. 
setStyle( ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. 
setSubDir( ) : subDir의 값을 새로 설정한다. 
setUserData( ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. 
show( ) : 웹스퀘어 컴포넌트를 화면에 표시한다. 
submit( ) : 파일을 전송한다. 
toggleClass( ) : 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가한다. 
trigger( ) : 컴포넌트에서 특정 이벤트를 발생시킨다. 
unbind( ) : 컴포넌트에서 이벤트를 제거한다.",439
812,"input1.unbind(""onviewchange""); // (예제 3)
input1.unbind(""onviewchange"", func1); // input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거합니다.
visible(flag) [deprecated] // show/hide 혹은 setStyle 사용을 권장합니다. 엔진 내부적으로 CSS visibility 속성을 설정합니다.
Parameter name	Type	Required	Description
flag	Boolean	Y	CSS visibility 속성 값 설정
true : visibility: visible;
false : visibility: hidden;",127
813,Navigation19.1Navigationhtml5 태그는 Navigation 영역을 지정할 때 사용됩니다. 이 태그는 접근성과 직접적인 관계는 없습니다.,49
814,"WebSquare.layer는 모달 레이어를 제어하는 기능을 제공합니다. hideModal() 메소드는 모달 레이어를 숨기고, showModal(popupComponents) 메소드는 모달 레이어를 띄우고 componentId를 팝업으로 표시합니다. popupComponents는 팝업으로 표시할 ComponentId 배열입니다.",97
815,"이 컴포넌트는 InputCalendar18.InputCalendar18.1InputCalendar으로, 키보드만으로 모든 기능을 사용할 수 있으며, 사용법은 calendar 컴포넌트와 유사합니다. senseReader=”true”, renderType=""native"", renderDiv=""true"", keepFocusSelect=""true"", footerDiv=""true""로 설정하고, 달력의 의미에 맞는 명확한 title 속성과 caption, summary를 기술합니다. senseReader 속성은 2017.03.14 이후 엔진에서 지원됩니다. 이 컴포넌트를 사용할 때는, senseReader=""true"", renderType=”native” renderDiv=”true” footerDiv=”true” keepFocusSelect=”true”로 설정되어 있는지 확인해야 합니다. 또한, 키보드에 의한 초점이 논리적으로 이동하고 있는지, 포커스 상태의 테두리(outline)가 명확하게 나타나는지, Input에 적절한 타이틀을 제공하고 있는지, 적절한 caption과 summary를 제공했는지(html5의 경우 caption만 제공) 확인해야 합니다. 이 컴포넌트를 사용할 때는 2.1.1. 키보드 사용 보장, 2.1.2. 초점 이동, 3.2.1. 사용자 요구에 따른 실행, 3.3.2. 표의 구성, 3.4.1. (레이블 제공) 관련 지침을 따라야 합니다.",414
816,"WebSquare.uiplugin.gauge는 계기판(게이지)을 표시하는 컴포넌트이다. 사용자는 바늘의 각도를 조정하여 입력 값을 선택할 수 있다. 이 컴포넌트의 속성으로는 backgroundImageSrc, centerX, centerY, id, maxAngle, maxValue, minAngle, minValue, needleCenterX, needleCenterY, needleImageSrc, tabIndex, value가 있다. 이 컴포넌트의 이벤트로는 onchange가 있다. 또한, 이 컴포넌트에서 사용할 수 있는 메소드로는 addClass, bind, changeClass, focus, getDisabled, getGenerator, getID, getInitStyle, getMaxValue, getMinValue, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome, getUdcRoot, getUserData, setUserData, getValue, hasClass, hide, removeClass, setDisabled, setEventPause, setInitStyle, setOpacity, setPosition, setReadOnly, setRef, setSize, setStyle, setValue, show, toggleClass, trigger, unbind, unbindRef, visible이 있다.",286
817,"input1.bind(""onclick"", commObj.ev_click ); 
changeClass(oldClassName, newClassName) : 웹스퀘어 컴포넌트의 class를 변경. addClass를 통해 추가된 class만 변경 가능. config.xml 파일에 <removeDefaultClass value=""true"" /> 설정을 추가하여 직접 정의된 class를 삭제 가능.
focus() : 웹스퀘어 컴포넌트에 포커스를 줌.
getDisabled() : 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환.
getGenerator() : 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환.
getID() : 웹스퀘어 컴포넌트의 ID를 반환.
getInitStyle(CSS) : 웹스퀘어 컴포넌트의 초기 스타일을 반환.
getMaxValue() : Gauge 컴포넌트의 최대값을 반환.
getMinValue() : Gauge 컴포넌트의 최소값을 반환.
getOpacity() : 웹스퀘어 컴포넌트의 불투명도를 반환. CSS의 opacity 속성 값을 반환.
getOriginalID() : 웹스퀘어 컴포넌트의 originalID를 반환. originalID는 Scope 기능을 사용할 경우 존재.
getPluginName() : 웹스퀘어 컴포넌트의 이름(pluginName)을 반환.
getPosition(positionName) : 웹스퀘어 컴포넌트의 위치(left, top)를 반환. 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.
getReadOnly() : 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환.
getScope() : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. 아닌 경우, null을 반환.
getScopeWindow() : scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. 아닌 경우, 전역 window 객체를 반환.
getSize(sizeName) : 웹스퀘어 컴포넌트의 크기(width, height)를 반환. %로 설정된 경우, 픽셀로 변환된 값을 반환.
getStyle(propertyName) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환.",629
818,"웹스퀘어 컴포넌트의 CSS 속성 값을 반환하는 getStyle, title 속성 값을 반환하는 getTitle, UDC 파일 경로를 반환하는 getUdcHome, getUdcRoot, 사용자 데이터 값을 반환하는 getUserData, 현재 값을 반환하는 getValue, 특정 class를 포함하는지 확인하는 hasClass, 컴포넌트를 숨기는 hide, class를 삭제하는 removeClass, disabled 속성을 설정하는 setDisabled, 이벤트를 중단하는 setEventPause, 초기 스타일을 복구하는 setInitStyle, 불투명도를 설정하는 setOpacity, 위치를 설정하는 setPosition, readOnly 속성을 설정하는 setReadOnly, ref 속성을 설정하는 setRef, 크기를 설정하는 setSize, CSS 속성을 설정하는 setStyle 등의 기능이 있다.",207
819,"웹스퀘어 컴포넌트에서 사용 가능한 함수들에 대한 설명입니다. setStyle 함수는 CSS 속성과 값을 설정하며, setUserData 함수는 컴포넌트에 임의의 데이터를 설정합니다. setValue 함수는 Gauge에 값을 설정하며, show 함수는 CSS display 속성을 설정하여 컴포넌트를 화면에 표시합니다. toggleClass 함수는 컴포넌트에서 특정 class를 추가하거나 제거합니다. trigger 함수는 컴포넌트에서 특정 이벤트를 발생시키며, unbind 함수는 컴포넌트에서 이벤트를 제거합니다. unbindRef 함수는 ref 바인딩을 해제합니다. visible 함수는 CSS visibility 속성을 설정하여 컴포넌트를 보이거나 숨깁니다.",228
820,"WebSquare.uiplugin.menu는 메뉴를 구성하는 컴포넌트로, TreeView와 같은 형태의 데이터를 사용합니다. class 속성을 이용하여 CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능합니다. dataType 속성을 이용하여 데이터가 tree형태인지 list형태인지 여부를 설정할 수 있습니다. isVertical 속성을 이용하여 메뉴를 세로로 표시할지 가로로 표시할지 결정할 수 있습니다. 메뉴 이벤트 종료 후 1-depth 메뉴의 스타일 유지 여부, 마우스가 메뉴 밖으로 나간 경우 메뉴를 닫을 지를 결정하는 속성 등이 있습니다. 이외에도 다양한 Method와 Event가 제공됩니다.",232
821,"overlapWidth: 부모 노드와 겹치는 폭을 지정하는 속성
selectedMenuIndex: 첫 로딩시 클릭되어져 있도록 CSS를 적용할 메뉴 인덱스
showChildMenu: 하위 메뉴를 표시하는 이벤트, 기본값은 onmouseover
tabIndex: Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서
userData1~3: 사용자 정의 데이터 속성, getUserData(""userData1"") API를 통해 값을 얻어올 수 있음
wmode: 선택 항목 목록을 object 태그보다 상위에 표시하는 속성, object에 가려질 경우 사용
onbranchclick: 브랜치 메뉴를 클릭할 때 발생하는 이벤트
onclick: 마우스로 메뉴를 클릭할 때 발생하는 이벤트
onleafclick: 리프 메뉴를 클릭할 때 발생하는 이벤트
onmousemove: 마우스 포인터가 이동할 때 발생하는 이벤트
onmouseover: 마우스가 지정된 영역이나 링크 위에 놓일 때 발생하는 이벤트
addClass: 컴포넌트에 CSS class를 추가하는 메서드
bind: 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하는 메서드
changeClass: 컴포넌트의 class를 변경하는 메서드
closeMenu: 현재 열려있는 메뉴를 닫는 메서드
focus: 컴포넌트에 포커스를 줌
getDataListInfo: 컴포넌트와 바인딩된 DataList를 반환하는 메서드
getDisabled: 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환하는 메서드
getGenerator: 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환하는 메서드
getID: 웹스퀘어 컴포넌트의 ID를 반환하는 메서드
getInitStyle: 웹스퀘어 컴포넌트의 초기 스타일을 반환하는 메서드
getOpacity: 웹스퀘어 컴포넌트의 불투명도를 반환하는 메서드
getOriginalID: 웹스퀘어 컴포넌트의 originalID를 반환하는 메서드",671
822,"getID() 함수는 웹스퀘어 컴포넌트의 ID를 반환하며, getOriginalID() 함수는 웹스퀘어 컴포넌트가 정의된 XML에서의 ID를 반환한다. getPluginName() 함수는 웹스퀘어 컴포넌트의 이름을 반환하며, getPosition() 함수는 웹스퀘어 컴포넌트의 위치 값을 반환한다. getReadOnly() 함수는 웹스퀘어 컴포넌트의 readOnly 속성 값을 반환하며, getScope() 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환한다. getScopeWindow() 함수는 scope=""true""인 WFrame의 부모 WFrame 객체를 반환하며, 해당 WFrame이 없는 경우 전역 window 객체를 반환한다. getSize() 함수는 웹스퀘어 컴포넌트의 크기 값을 반환하며, getStyle() 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getTitle() 함수는 웹스퀘어 컴포넌트의 title 속성 값을 반환하며, getUdcHome() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUdcRoot() 함수는 UDC 객체가 자신을 정의한 UDC 파일 경로를 반환하며, 파일명을 포함하지 않는 경로를 반환한다. getUserData() 함수는 웹스퀘어 컴포넌트에 설정된 key의 value를 반환한다. hasClass() 함수는 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인하며, hide() 함수는 웹스퀘어 컴포넌트를 화면에서 숨긴다. removeClass() 함수는 웹스퀘어 컴포넌트에서 class를 삭제한다.",490
823,"- removeDefaultClass 속성을 true로 설정하면 removeClass를 통해 class를 삭제할 수 있다.
- setDisabled 함수를 사용하여 웹스퀘어 컴포넌트의 disabled 속성을 설정할 수 있다.
- setEventPause 함수를 사용하여 지정한 이벤트를 중단하거나 중단을 해제할 수 있다.
- setInitStyle 함수를 사용하여 웹스퀘어 컴포넌트의 초기 스타일을 복구할 수 있다.
- setOpacity 함수를 사용하여 웹스퀘어 컴포넌트의 불투명도를 설정할 수 있다.
- setPosition 함수를 사용하여 웹스퀘어 컴포넌트의 위치를 설정할 수 있다.
- setReadOnly 함수를 사용하여 웹스퀘어 컴포넌트의 readOnly 속성을 설정할 수 있다.
- setSelectedMenuIndex 함수를 사용하여 1-depth 메뉴를 클릭 상태로 변경할 수 있다.
- setSize 함수를 사용하여 웹스퀘어 컴포넌트의 크기를 설정할 수 있다.
- setStyle 함수를 사용하여 웹스퀘어 컴포넌트의 CSS 속성을 설정할 수 있다.
- setUserData 함수를 사용하여 웹스퀘어 컴포넌트에 임의의 데이터를 설정할 수 있다.
- setXML 함수를 사용하여 XML 데이터를 메뉴에 설정할 수 있다.
- show 함수를 사용하여 웹스퀘어 컴포넌트를 화면에 표시할 수 있다.
- showChildrenHorizontal 함수를 사용하여 메뉴를 가로로 출력할 수 있다.
- toggleClass 함수를 사용하여 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가할 수 있다.
- trigger 함수를 사용하여 컴포넌트에서 특정 이벤트를 발생시킬 수 있다.
- unbind 함수를 사용하여 컴포넌트에서 이벤트를 제거할 수 있다.",524
824,"unbind() 함수를 사용하여 이벤트 핸들러 함수를 제거할 수 있습니다. 예를 들어, input1.unbind()는 input1에 등록된 모든 이벤트를 제거합니다. input1.unbind(""onviewchange"")는 input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거하며, input1.unbind(""onviewchange"", func1)은 input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거합니다. visible() 함수는 show/hide 혹은 setStyle 사용을 권장하며, CSS visibility 속성을 설정합니다. flag 매개변수는 CSS visibility 속성 값을 설정합니다. true는 visibility: visible;을, false는 visibility: hidden;을 설정합니다.",194
825,"WebSquare.xml은 XML 문서를 다루는 JavaScript 라이브러리입니다. appendChild(), decode(), encode() 등 다양한 메소드를 제공합니다. findNode()는 XPath로 검색하여 일치하는 노드 중 첫번째 노드를 반환하고, findNodes()는 일치하는 노드 목록을 배열로 반환합니다. getAttribute()는 Document 또는 Element를 기준으로 attribute를 조회하며, getCDataNodeValue()는 CData Node 값을 반환합니다. getChildren()는 xpath로 노드를 검색하여 하위 노드를 반환하고, getChildrenByTagName()은 tagName이 일치하는 하위 노드를 반환합니다. getFirstChildElement()는 하위 노드 중 첫번째 element node를 반환하며, getString()은 XPath로 검색한 node element에서 value Attribute 값을 조회합니다. getTextNodeValue()는 Text Node 값을 반환합니다.",225
826,"elementObjectYDocument Element(node)를 기준으로 XPath로 조회한 node의 attribute나 text노드의 값을 조회하는 함수입니다. getValue( doc , key , attribute )는 첫번째 인자로 주어진 Document 또는 Element를 기준으로 XPath로 조회한 node의 attribute나 text노드의 값을 조회합니다. hasChildElement( domNode )는 element가 하위 노드를 가지는지 여부를 반환합니다. indent( obj , type )는 XML Document를 XML String으로 변환합니다. parse( obj , namespace )는 XML String을 XML Document로 변환합니다. serialize( dom )은 XML Document를 XML String으로 변환합니다. setAttribute( doc , key , value1 , value2 )는 첫번째 인자로 주어진 Document 또는 Element를 기준으로 attribute를 설정합니다. setString( doc , key , value )는 XPath로 검색한 node element에서 value Attribute 값을 설정합니다. setValue( doc , key , value1 , value2 )는 첫번째 인자로 주어진 Document 또는 Element를 기준으로 XPath로 조회한 node에 attribute나 text노드를 추가합니다.",268
827,"WebSquare.date는 날짜 및 시간 관리용 API를 제공합니다. dateAdd(), dateDiff(), dateTimeAdd() 등의 메서드를 사용하여 날짜 및 시간을 계산할 수 있습니다. getCurrentServerDate() 메서드를 사용하면 서버의 현재 시간을 반환할 수 있습니다. getDay() 메서드를 사용하면 ""yyyyMMdd"" 형태의 날짜를 입력받아 해당 요일을 반환합니다. getFormattedDate() 메서드를 사용하면 Date 객체를 받아서 지정된 format으로 시간을 반환합니다. getIOFormatDate() 메서드와 getIOUnFormatDate() 메서드는 날짜 값과 ioFormat 그리고 calendarValueType을 입력 받아서 각각의 calendarValueType에 맞는 ioFormat 형식으로된 날짜 값을 반환합니다. getMaxMinYear() 메서드는 maxYear와 minYear 프로퍼티를 포함한 오브젝트를 반환합니다. isValidDate() 메서드는 ""yyyyMMdd"" 형태의 날짜값을 받아서 유효한 날짜인지를 확인하여 boolean을 반환합니다. parseDate() 메서드는 날짜 형식 포맷을 Date로 변환합니다. toLunar() 메서드는 ""yyyyMMdd"" 형태의 양력 날짜를 입력으로 받아 해당하는 음력 날짜의 string을 반환합니다.",346
828,"함수 toLunar는 양력 날짜를 음력 날짜로 변환합니다. 파라미터 solar은 ""yyyyMMdd"" 형식의 양력 날짜입니다. 반환값은 ""yyyyMMdd"" 형식의 음력 날짜입니다. 
함수 toSolar는 음력 날짜를 양력 날짜로 변환합니다. 파라미터 lunar은 ""yyyyMMdd"" 형식의 음력 날짜입니다. 반환값은 ""yyyyMMdd"" 형식의 양력 날짜입니다. 
함수 toTimestampString은 JavaScript date 객체를 파라미터로 받아 yyyy-mm-dd hh:mm:ss.fffffffff 형식의 string을 반환합니다. 반환값은 java.sql.Timestamp에서 사용됩니다.",181
829,"WebSquare.uiplugin.pageList는 페이지 수 출력 및 페이지 선택을 지원하는 컴포넌트로, 실제 페이징 처리는 수행하지 않고 페이지 수 설정 및 페이지 선택용 UI만 지원합니다. accessibility 옵션을 통해 웹접근성을 위해 좌우 버튼의 Tag를 <a>에서 <button>으로 변경할 수 있습니다. displaySearchbox 옵션을 통해 페이지 번호 입력란을 추가할 수 있으며, displaySelectedIndex 옵션을 통해 페이지 입력창에 현재 페이지 번호를 표시할 수 있습니다. 또한, naviType 옵션을 통해 페이지 이동 관련 옵션을 설정할 수 있습니다. 이외에도 다양한 옵션과 이벤트, 메소드를 제공합니다.",208
830,"웹스퀘어 컴포넌트의 trigger(type, array)는 특정 이벤트를 발생시키고, unbind(type, function)는 이벤트를 제거합니다. visible(flag)는 웹접근성을 위해 좌우 버튼의 Tag를 <button>에서 <a>로 변경합니다. buttonShowType은 페이지 이동 버튼 타입을 결정하며, class는 HTML의 class 속성과 동일한 기능을 제공합니다. displaySearchbox는 페이지 번호 입력란을 추가하고, displaySelectedIndex는 페이지 입력창에 현재 페이지 번호를 표시합니다. renderType은 렌더링되는 레이아웃 구조를 지정하며, useDelim은 구분자 사용 여부를 결정합니다. addClass(className)는 컴포넌트에 CSS class를 추가하고, bind(eventType, function)은 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당합니다.",260
831,"웹스퀘어 컴포넌트의 다양한 함수들을 소개한다. 함수들은 각각의 기능에 따라 다른 파라미터와 반환값을 가진다. 예를 들어, changeClass 함수는 컴포넌트의 class를 변경하는데, oldClassName과 newClassName을 파라미터로 받고, 반환값은 없다. 반면, getDisabled 함수는 현재 컴포넌트의 disabled 속성 값을 반환하는데, 파라미터는 없고, 반환값은 Boolean이다. 이와 같이 각 함수의 파라미터와 반환값을 이해하고 사용해야 한다.",171
832,"getSize( sizeName ) : 컴포넌트의 크기 값을 반환한다. getStyle( propertyName ) : 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다. getStyleValue( style ) : 웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환한다. getTitle() : 컴포넌트의 title 속성 값을 반환한다. getUdcHome() : UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환한다. getUdcRoot() : UDC 객체가 자신을 정의한 UDC 파일 경로를 반환한다. getUserData( key ) : 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환한다. hasClass( className ) : 웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인한다. hide() : 웹스퀘어 컴포넌트를 화면에서 숨긴다. moveLeft() : 선택된 인덱스를 ""1""만큼 감소시킨다. moveRight() : 선택된 인덱스를 ""1""만큼 증가시킨다. pageLeft() : pageSize 기준으로 이전 페이지 번호의 첫번째 페이지를 선택한다. pageRight() : pageSize 기준으로 다음 페이지 번호의 첫번째 페이지를 선택한다. removeClass( className ) : 웹스퀘어 컴포넌트에서 class를 삭제한다. setCount( count , flag ) : PageList의 전체 페이지 수를 새로 지정한다. setDisabled( disabled ) : 웹스퀘어 컴포넌트의 disabled 속성을 설정한다. setEventPause( evList , flag ) : 지정한 이벤트를 중단한다. setIdxClass( idx ) : 선택하려는 인덱스를 설정한다. setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구한다.",537
833,"initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다. propertyStringN CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구). setOpacity( value ) 웹스퀘어 컴포넌트의 불투명도를 설정. setPosition( left , top , mode ) 웹스퀘어 컴포넌트의 위치(left, top)를 설정. setReadOnly( readOnly ) 웹스퀘어 컴포넌트의 readOnly 속성을 설정. setSelectedIndex( idx ) 페이지의 선택된 인덱스를 변경. setSize( width , height ) 웹스퀘어 컴포넌트의 크기(width, height)를 설정. setStyle( propertyName , value ) 웹스퀘어 컴포넌트의 CSS 속성을 설정. setUserData( key , value ) 웹스퀘어 컴포넌트에 임의의 데이터를 설정. setValue( value ) setSelectedIndex와 같은 역할을 하는 함수. show( displayType ) 웹스퀘어 컴포넌트를 화면에 표시. toggleClass( className ) 웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. trigger( type , array ) 컴포넌트에서 특정 이벤트를 발생시킴. unbind( type , function ) 컴포넌트에서 이벤트를 제거. visible( flag ) [deprecated] show/hide 혹은 setStyle 사용을 권장.",413
834,"WebSquare.uiplugin.chart는 XML 정보를 차트로 표시하는 컴포넌트로, ColumnChart, BarChart, LineChart, RadialChart, PieChart 등 다양한 타입을 지원한다. 또한, 2중 차트도 지원하며, 모바일 환경에서는 FusionChart 컴포넌트 사용을 권장한다. 이 컴포넌트는 HTML의 <div>를 사용하며, 다양한 태그를 사용하여 구성된다. 속성으로는 type, axis3dBackgroundColor, axis3dBorderColor, backgroundBorderColor, backgroundBorderWidth, backgroundGradient, bgColorPalette, dataAxisChanged, displayFormat, displayFormatter, displayXAxis, displayYAxis, elementTitle, fitGuidLine, gradientColorPalette, guidLineStyle, id, labelData, labelNode, labelPerValue, labelSeparator, labelSeries, labelValue, lineStyle, mainGrid, mainGridLineOnly, maxYAxis, minYAxis, ref, rootNode, roundRectangle, seriesBorderColor, seriesBorderWidth, seriesColor, seriesPosition, seriesShow, seriesSymbol, subGrid, tabIndex, tableDisplayFormat, tableDisplayFormatter, tableShow, title, titlePosition, titleShow, titleStyle, tooltip, tooltipLocaleRef, usePopup, valueType, xAxisTitle, xAxisTitleShow, xAxisTitleStyle, y1AxisTitle, y1AxisTitleShow, y1AxisTitleStyle, y1DisplayFormat, y1DisplayFormatter, y2DisplayFormat, y2DisplayFormatter가 있다. 이 컴포넌트의 메소드로는 addClass, appendXML, applySeriesConfig, bind, changeClass, deleteData, excelDownload, focus, getDataListInfo, getDisabled, getGenerator, getID, getInitStyle, getOpacity, getOriginalID, getPluginName, getPosition, getReadOnly, getScope, getScopeWindow, getSize, getStyle, getStyleValue, getTitle, getUdcHome가 있다.",447
835,"웹스퀘어 컴포넌트에서 사용할 수 있는 다양한 함수들이 있다. getUdcRoot()는 UDC 파일 경로를 반환하고, getUserData(key)는 설정한 key의 value나 페이지 소스(XML)에 정의된 value를 반환한다. hasClass(className)는 특정 class를 포함하는지 확인하고, hide()는 컴포넌트를 화면에서 숨긴다. redraw()는 차트를 다시 그리고, removeClass(className)는 class를 삭제한다. setAccessibility(flag)는 접근성을 지원하고, setChartType(chartType)는 차트의 타입을 변경한다. setDataCollection(dataList, labelId, append, modify)는 dataCollection 형태의 data를 차트에 반영하고, setDisabled(disabled)는 disabled 속성을 설정한다. setEventPause(evList, flag)는 지정한 이벤트를 중단하고, setInitStyle(property)는 초기 스타일을 복구한다. setMaxYAxis(maxYaxis)와 setMinYAxis(minYaxis)는 각각 max YAxis와 min YAxis 값을 설정하고 출력한다. setOpacity(value)는 불투명도를 설정하고, setPosition(left, top, mode)는 위치를 설정한다. setReadOnly(readOnly)는 readOnly 속성을 설정하고, setSeriesAxis(seriesAxisChk)는 chart의 draw layer에 보여질 series를 설정한다. setSize(width, height)는 chart의 크기를 설정하고, setTitle(title)은 title 속성을 설정한다. setUserData(key, value)는 임의의 데이터를 설정하고, setValue(value, seriesIndex, dataIndex)는 seriesIndex와 dataIndex를 받아 해당 값을 설정한다. setXML(data, append, modify)는 XML data를 차트에 반영하고, show(displayType)는 컴포넌트를 화면에 표시한다. toggleClass(className)는 class를 추가하거나 제거하고, trigger(type, array)는 특정 이벤트를 발생시킨다. unbind(type, function)은 이벤트를 제거하고, visible(flag)는 표시 여부를 설정한다. 이외에도 다양한 속성들이 있다.",553
836,"이 함수들은 웹스퀘어 차트 컴포넌트에서 사용되는 함수들이다. addClass() 함수는 컴포넌트에 CSS class를 추가하고, appendXML() 함수는 xml data를 입력받아 기존 data에 추가한다. applySeriesConfig() 함수는 차트의 series에 관한 설정을 한다. bind() 함수는 컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당하고, changeClass() 함수는 웹스퀘어 컴포넌트의 class를 변경한다. deleteData() 함수는 차트의 데이터를 지우고, excelDownload() 함수는 차트의 데이터를 엑셀로 내려 받는다. focus() 함수는 웹스퀘어 컴포넌트에 포커스를 준다. getDataListInfo() 함수는 컴포넌트와 바인딩된 DataList를 반환하고, getDisabled() 함수는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환한다. getGenerator() 함수는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환한다. getID() 함수는 웹스퀘어 컴포넌트의 ID를 반환하고, getInitStyle() 함수는 웹스퀘어 컴포넌트의 초기 스타일을 반환한다. getOpacity() 함수는 웹스퀘어 컴포넌트의 불투명도를 반환하고, getOriginalID() 함수는 웹스퀘어 컴포넌트의 originalID를 반환한다.",435
837,이 함수는 웹스퀘어 컴포넌트를 화면에서 숨기는 기능을 수행한다. (웹스퀘어 컴포넌트 공통.),56
838,CSS의 display:none;과 visibility:hidden;을 적용하여 컴포넌트를 숨길 수 있습니다. removeClass()를 사용하여 컴포넌트에서 class를 삭제할 수 있습니다. setAccessibility()를 사용하여 웹스퀘어 차트에 접근성을 지원할 수 있습니다. setChartType()를 사용하여 차트의 타입을 변경할 수 있습니다. setDataCollection()을 사용하여 주어진 dataCollection형태의 data를 차트에 반영할 수 있습니다. setDisabled()를 사용하여 웹스퀘어 컴포넌트의 disabled 속성을 설정할 수 있습니다. setEventPause()를 사용하여 지정한 이벤트를 중단할 수 있습니다. setInitStyle()을 사용하여 웹스퀘어 컴포넌트의 초기 스타일을 복구할 수 있습니다. setMaxYAxis()와 setMinYAxis()를 사용하여 Y축의 최대값과 최소값을 설정할 수 있습니다. setOpacity()를 사용하여 웹스퀘어 컴포넌트의 불투명도를 설정할 수 있습니다. setPosition()을 사용하여 웹스퀘어 컴포넌트의 위치를 설정할 수 있습니다. setReadOnly()를 사용하여 웹스퀘어 컴포넌트의 readOnly 속성을 설정할 수 있습니다. setSeriesAxis()를 사용하여 chart의 draw layer에 보여질 series를 설정할 수 있습니다. setSize()를 사용하여 chart의 크기를 설정할 수 있습니다. setTitle()을 사용하여 컴포넌트의 title 속성을 설정할 수 있습니다. setUserData()를 사용하여 웹스퀘어 컴포넌트에 임의의 데이터를 설정할 수 있습니다.,457
839,"componentId.setUserData(""data"", ""WebSquare""); // 컴포넌트에 설정이 불가능한 key를 입력할 경우, key 설정이 불가능.
componentId.setUserData(""title"", ""WebSquare""); // 로그 출력: !!!WARNING - [title] can't be defined as UserData.
setValue(value, seriesIndex, dataIndex)
- value: chart의 값으로 입력할 value
- seriesIndex: series의 index
- dataIndex: data의 index
setXML(data, append, modify)
- data: chart에 반영할 xml document
- append: 이어쓰기 여부, 기본값은 false. false면 기존 데이터 삭제.
- modify: modify 여부, 기본값은 false. true면 data layer 부분만 다시 그린다. false면 chart 전체를 다시 그린다.
Sample
chart1.setXML(WebSquare.ModelUtil.findInstanceNode(""works""), true, false);
show(displayType)
- displayType: 적용할 CSS display 속성의 값. block : display: block;을 적용. (기본 값) inline : display: inline;을 적용. none : display: none;을 적용. """" : show 수행 이전의 display 속성 값으로 복구.
Sample
componentId.show();
toggleClass(className)
- className: 추가/삭제할 class
Sample
input1.toggleClass(""tmpInputClass"");
trigger(type, array)
- type: 발생시킬 이벤트
- array: 이벤트 핸들러에 전달할 파라미터 배열
Sample
input1.trigger(""onclick"");
input1.trigger(""onviewchange"", [1,2]);
unbind(type, function)
- type: 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)
- function: 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)
Sample
input1.unbind();
input1.unbind(""onviewchange"");
input1.unbind(""onviewchange"", func1);
visible(flag) [deprecated]
- flag: 설정할 CSS visibility 속성 값
- true : visibility: visible;
- false : visibility: hidden;",529
840,"WebSquare.uiplugin.gridView는 대량 데이터를 그리드로 표시하고 수정할 수 있는 컴포넌트이다. 데이터를 담당하는 DataList와 바인딩하여 사용하며, 소계/합계, 동적 그룹핑, 엑셀 파일 업로드/다운로드, 정렬, 필터링 등을 지원한다. GridView 주요 API의 파라메터 중 컬럼(열) id는 body의 column id 혹은 header id를 사용한다. adaptive, autoFit, customFilterBox, dataDragDrop, drawType, dynamic, editModeEvent, enterKeyMove, excludeDeletedRows, excludeModifiedRows 등 다양한 속성을 제공한다.",180
841,"filterBoxvisibleRowNum: 필터링 조건 목록에 표시할 필터링 조건의 수
filterFocusMode: sort 이벤트 발생 시 이벤트 발생 전 body의 cell/row에 선택되어있는 focus를 제거 할지에 대한 속성
filterShowAlways: useFilter=""true"" 컬럼에서 컬럼 너비가 좁을 때 filter 아이콘을 최우선으로 표시
fixedColumn: 틀고정을 적용할 컬럼의 위치
fixedColumnNoMove: fixedColumn 지정된 컬럼의 columnMove 허용 여부
fixedColumnScrollHidden: 틀고정을 할 경우, 고정된 영역의 스크롤을 감춤
fixedColumnWithHidden: fixedColumn 속성의 위치 값에 hiddenColumn을 포함하여 계산할지 여부
fixedRightColumn: 우측에 틀고정할 컬럼의 수
fixedRow: 틀고정을 시킬 행의 위치
focusDefaultColumn: true 설정 시 rowNum 컬럼 및 rowStatus 컬럼이 focus를 받을 수 있는 상태가 된다
focusFlow: 포커스 이동 방향을 설정
focusImage: senseReader 또는 embeddedInput이 true이며 inputType=""image""인 경우 image로 focus 이동할지 여부
focusMode: 셀 선택(포커싱) 시 선택 영역 표현 방법
focusMove: 방향키를 통한 포커스 이동 허용
footerCaption: 바닥글(footer)의 내용
footerSummary: 바닥글(footer)의 내용 요약
groupbyFilterBox: 필터링 기능(groupby)을 사용할 때 필터링 조건 목록의 표시 여부
groupbyFilterBoxFormatter: groupby FilterBox에 추가될 목록의 label을 변경한다(format을 지정)
groupbyFilterBoxLocation: 필터링 조건 목록(groupbyFilterBox)을 표시할 위치
groupbyMaxCount: groupby 가능한 최대 컬럼 개수를 지정
groupbyZone: groupby 기능을 사용
groupbyZoneHeight: groupbyZone의 높이를 설정
groupbyZoneMessage: groupbyZone이 초기 상태일 경우 출력할 메세지를 설정
hammerEnabled: 모바일에서 dblclick 이벤트를 Hammer
hideFilterIconOnNoData: 그리드 데이타 미존재시 웹접근성용 head filter 아이콘을 보여줄지 여부
hideHeader: 헤더 숨기기
hideSortIconOnNoData: 그리드 데이타 미존재시 웹접근성용 head sort 아이콘을 보여줄지 여부
id: 컴포넌트 ID.
ignoreCellClick: 셀 클릭을 무시
ignoreNonEditableCell: 셀 편집이 불가능할 경우, Tab이나 Enter 키 입력을 무시
ignoreToggleOnDisabled: 드릴 다운 시 disabled된 셀인 경우 토글 이미지를 클릭을 무시
initFixedHeightByRowNum: 최초 렌데렁된 GridView의 행의 수를 기준으로 GridView의 높이를 초기화.
keepDefaultColumnWidth: autoFit=""true""인 경우,rowNum 컬럼과 rowStatus 컬럼의 폭을 고정
keyMoveEditMode: Tab이나 Enter 키로 포커스 이동할 때 즉시 수정 모드로 진입할지 여부
labelDelimiter: checkbox나 radio에서 label을 표현할 때 사용하는 구분자.
loadCount: onscrollend 이벤트를 발생에 필요한 남은 행의 수.
mergeCells: 행 또는 열 기준으로 연속적으로 같은 데이터들을 병합함
moveKeyEditMode: 상(Up) 및 하(Down) 방향키로 포커스 이동 시 즉시 편집 모드로 진입 여부
nextTabID: Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID
noResultMessage: 조회 결과가 없을 경우(DataList의 데이터가 0건일 때) 표시할 메세지
noResultMessageClass: 조회 결과 없음(DataList의 데이터가 0건일 때) 메시지에 별도의 스타일을 적용하기 위한 클래스.
noResultMessageStyle: 조회 결과 없음(DataList에 해당 데이터가 없을때) 메시지에 별도의 스타일을 적용.
noResultMessageVisible: 조회 결과가 없을 때(DataList에 데이터가 없을 때) 메시지 표시 여부
noResultMessageVisibleAlways: grid에 row가 하나도 없을 때 메시지 표시 여부
noSelect: 여러 셀을 드래깅하거나 Ctrl (useCtrlKey=""true"") 혹은 Shirt (useShiftKey=""true"") 키를 통해 여러 셀을 선택할 경우, 브라우저 상에서 마우스와 키를 사용을 통한 GridView 상의 셀 선택을 방지.
numberMask: 화폐 단위 변경을 위해 dataType=""number"" 설정이나 changeCurrency(); 함수를 사용할 경우 적용되는 마스킹 값
oddEvenColorDisplay: 짝/홀 수 행 마다 서로 다른 색을 사용
oddRowBackgroundColor: 홀수 행의 배경색
overflowX: 가로 스크롤 표시 여부
overflowY: 세로 스크롤 표시 여부
pasteOption: Ctrl(또는 cmd)+V를 통해 데이터를 클립보드에 붙여넣을 방법을 지정
preventAddRowOnPaste: Ctrl(또는 cmd)+V를 눌러 클립보드에서 그리드로 붙여넣기하는 경우 새로운 행의 추가 여부
preventCopy: Ctrl(또는 cmd)+C 또는 Ctrl(또는 cmd)+X를 눌러 그리드 데이터를 클립보드에 복사나 잘라내는 동작을 방지",1583
842,"GridView는 다양한 옵션을 제공합니다. readOnlyTabIgnore, resize, rowMouseOver, rowNumVisible 등의 옵션은 GridView의 동작을 제어하는 데 사용됩니다. 또한, sortable, tooltipDisplay, useCtrlKey 등의 옵션은 GridView의 기능을 확장하는 데 사용됩니다. 이 외에도, 이벤트 핸들러를 등록하여 GridView의 동작을 커스터마이징할 수 있습니다. onbeforeedit, onafteredit, onbeforesort 등의 이벤트 핸들러를 사용하여 GridView의 동작을 제어할 수 있습니다.",157
843,"이벤트 요약
- oncellindexchange: 셀 선택 또는 API를 통한 focus 변경 시 발생
- oncolumnindexchange: 열 선택 또는 API를 통한 focus 변경 시 발생
- oncolumnwidthchange: 컬럼 길이 변경 시 발생
- oncontextopen: context menu 표시 시 발생
- oncustomcopy: gridView의 copy 이벤트 대체
- oncustompaste: gridView의 paste 이벤트 대체
- ondatadragover: dataDragDrop 옵션 활성화 시, 다른 그리드에 데이터를 오버할 때 발생
- ondatadragstart: dataDragDrop 옵션 활성화 시, 데이터 드래그 시작 시 발생
- ondatadrop: dataDragDrop 옵션 활성화 시, 다른 그리드에 데이터를 드랍할 때 발생
- ondateselect: inputType이 calendar인 경우, 날짜 선택 시 발생
- oneditdblclick: 수정 중인 셀 더블클릭 시 발생
- oneditend: 셀 에디트 종료 시 발생 (onafteredit보다 먼저 발생)
- oneditkeydown: 셀 에디트 중 키를 누를 때 발생
- oneditkeyup: 셀 에디트 중 키를 눌렀다 놓을 때 발생
- onfilereadend: gridView에 엑셀 업로드가 끝난 후 발생
- onfooterclick: footer 클릭 시 발생
- onheaderclick: header 클릭 시 발생
- onheaderdblclick: header 더블클릭 시 발생
- onkeydown: 키보드에서 키를 누를 때 발생
- onkeyup: 키보드에서 키를 눌렀다 놓을 때 발생
- onmonthselect: inputType이 calendar인 경우, 날짜 선택 시 발생
- onrightbuttonclick: body 영역의 셀에서 마우스 오른쪽 버튼 클릭 시 발생
- onrowindexchange: 행 선택 또는 API를 통한 focus 변경 시 발생
- onrownumclick: rowNum Column 클릭 시 발생
- onrowstatusclick: rowStatus Column 클릭 시 발생
- onscrollend: 세로 스크롤이 하단에 닿을 때 발생
- onscrollstart: 세로 스크롤이 상단에 닿을 때 발생
- onscrollx: 가로 스크롤을 움직일 때 발생
- onscrolly: 세로 스크롤을 움직일 때 발생
- onsort: sortable 속성이 적용된 헤더에서 클릭 또는 더블클릭하여 정렬 방식이 변경될 때 발생
- onsubtotalclick: subtotal 클릭 시 발생
- onsubtotaldblclick: subtotal 더블클릭 시 발생
- ontextimageclick: inputType이 textImage인 경우, image 클릭 시 발생
- ontoggleclick: inputType이 drilldown인 경우, 토글 버튼 클릭 시 발생
- onviewchange: 값이 변경될 때 발생 (키보드 또는 마우스 조작)
- onyearselect: inputType이 calendar인 경우, 날짜 선택 시 발생
메소드 요약
- advancedExcelDownload(options, infoArr): 그리드 데이터를 엑셀 파일로 저장
- advancedExcelUpload(options): 엑셀 파일을 읽어 그리드 데이터 설정 (JDK 1.5 이상에서 사용 가능)
- changeCurrency(columnID, dataType, displayFormat, delimiter, decimalDelimiter): 컬럼 단위로 화면에 나타나는 셀 값들의 화폐 단위를 동적으로 변경
- checkAll(colIndex, dataValue): 체크 박스로 이루어진 열을 한 번에 체크하거나 언체크
- clearAutoFit(): autoFit 속성 제거
- clearGroupby(): groupBy 해제
- clearRowVisible(): setRowVisible() API를 이용하여 숨김 처리한 행을 모두 표시하도록 처리
- drillTo(rowIndex): drilldown 사용 시 rowIndex에 해당하는 행을 표현하기 위해 모든 조상 행들을 오픈
- enableAllDate(colIndex): disableAfterDate 및 disableBeforeDate API를 통해 비활성화된 날짜들을 다시 활성화시켜 선택 가능하도록 변경
- getAllDisplayData(): 화면에 보이는 data를 1차원 배열로 반환 (displayFormat 등이 적용된 data)
- getAllDisplayJSON(): 화면에 (displayFormat 등이 적용된) 출력된 데이터를 JSON으로 반환
- getAllDisplayXML(): 화면에 보이는 data를 XML로 반환 (displayFormat 등이 적용된 data)
- getAllFocusedIndex(): 선택된 셀의 rowIndex와 colIndex를 반환
- getAllFocusedRowIndex(): 포커스된 셀들의 rowIndex를 반환
- getAllVisibleData(): 현재 보이는 data를 1차원 배열로 반환
- getAllVisibleJSON(): 화면에 (displayFormat 등이 적용된) 출력된 데이터를 JSON으로 반환
- getAllVisibleXML(): 현재 보이는 data를 XML로 반환
- getAncestorRowIndexArray(rowIndex): drilldown 사용 시 rowIndex에 해당하는 행의 모든 조상 행들의 rowIndex를 반환
- getBottomRowIndex(): 현재 눈에 보여지는 gridView의 최하단 row의 rowIndex를 반환
- getCellBackgroundColor(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀의 배경색을 반환
- getCellChecked(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀의 check 여부를 반환
- getCellClass(rowIndex, colIndex): grid 셀에 동적으로 적용한 사용자 class 이름을 반환
- getCellColor(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀의 글자색을 반환
- getCellDisabled(rowIndex, colIndex): colIndex와 rowIndex에 해당하는 셀의 disabled 속성 값을 반환
- getCellDisplayData(rowIndex, colIndex): rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환
- getCellPosition(row, colIndex, propertyName): 셀의 위치 정보(top 또는 left)를 반환
- getCellReadOnly(rowIndex, colIndex): colIndex와 rowIndex에 해당하는 셀의 readonly 속성 값을 반환
- getCellSize(row, colIndex, sizeName): 셀의 크기 정보(width나 height)를 반환
- getCheckedData(colIndex): colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 배열로 반환
- getCheckedIndex(colIndex): colIndex에 해당하는 열의 inputType 속성이 radio/checkbox인 경우 check된 행의 index를 배열로 반환
- getCheckedJSON(colIndex): colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 JSON Data를 Array에 담아 반환
- getCheckedXML(colIndex): colIndex에 해당하는",1760
844,"getColumnType(colIndex): colIndex에 해당하는 열의 inputType 속성 값을 반환합니다.
getColumnVisible(colIndex): colIndex에 해당하는 열의 visible 여부를 반환합니다.
getDataDragDrop(): 그리드의 컬럼에 dataDragDrop 값을 반환합니다.
getDataLength(): [deprecated] getRowCount()를 사용합니다.
getDataList(): 현재 binding된 dataList의 Id를 반환합니다.
getDataListInfo(): 컴포넌트와 바인딩된 DataList를 반환합니다.
getDataType(colID): 특정 column의 dataType 속성을 반환합니다.
getDescendantRowIndexArray(rowIndex): drilldown 사용시 rowIndex에 해당하는 행의 모든 자손 행들의 rowIndex를 반환합니다.
getDisabled(type, rowIndex, colIndex): type에 따라 세부 disabled 속성을 반환합니다.
getFixedColumnLastIndex(includeDefaultColumn): 그리드에 fixedColumn이 설정되어 있을 경우 fixedColumn 중 맨 오른쪽 끝에 해당하는 column의 index를 반환합니다.
getFixedRightColumnLastIndex(): 그리드에 FixedRightColumn이 설정되어 있을 경우 FixedRightColumn 중 맨 오른쪽 끝에 해당하는 column의 index를 반환합니다.
getFixedRow(): gridView가 가로 틀고정된 경우, 틀고정 위치를 반환합니다.
getFocusedColumnID(): 포커스가 위치한 셀이 속한 column의 ID를 반환합니다.
getFocusedColumnIndex(): 포커스가 위치한 셀의 colIndex를 반환합니다.
getFocusedRowIndex(): 포커스가 위치한 셀의 rowIndex를 반환합니다.
getFocusedRowStatus(): 포커스가 위치한 셀이 속한 row의 상태를 상태문자로 반환합니다.
getFooterData(footerId, display): footerId에 해당하는 footer의 값을 반환합니다.
getFooterStyle(footerId, style): 그리드의 footerId에 해당하는 footer의 스타일 속성값을 가져옵니다.
getFormattedHeaderValue(headerId, value): header에 설정된 displayFormat으로 formatted된 값을 반환합니다.
getGridReadOnly(): gridView 전체에 대한 readOnly 속성을 반환합니다.
getGroupbyData(isJSON): 현재 그룹핑된 정보를 반환합니다.
getHeaderBackgroundColor(headerId): header 셀에 적용된 배경색 값을 반환합니다.
getHeaderClass(headerId): grid header셀에 동적으로 적용한 사용자 class 이름을 반환합니다.
getHeaderColor(headerId): header 셀에 적용된 글씨 색상값을 반환합니다.
getHeaderID(header): header index로 header id를 반환합니다.
getHeaderIndex(header): header id로 header index를 반환합니다.
getHeaderPosition(headerId, propertyName): header 셀의 위치 정보(top이나 left)를 반환합니다.
getHeaderSize(headerId, sizeName): header 셀의 크기 정보(width나 height)를 반환합니다.
getHeaderValue(headerId): header의 값을 반환합니다.
getMaxLength(colIndex): 그리드의 컬럼에 maxLength값을 반환합니다.
getMerged(rowIndex, colIndex): 특정 셀의 병합 여부를 반환합니다.
getOpenStatus(rowIndex): gridView에 drilldown을 적용한 경우 rowIndex에 해당하는 행의 drilldown이 열려있는지 닫혀있는지 여부를 boolean으로 반환합니다.
getOverflowX(): overflowX 속성의 설정값을 반환합니다.
getOverflowY(): overflowY 속성의 설정값을 반환합니다.
getParentRowIndex(rowIndex): drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환합니다.
getReadOnly(type, rowIndex, colIndex): type에 따라 readOnly 속성을 반환합니다.
getRealRowIndex(rowIndex): drilldown을 적용한 경우 화면에 표현된 rowIndex를 기준으로 실제 데이터의 rowIndex를 반환합니다.
getRowBackgroundColor(rowIndex): rowIndex에 해당하는 행의 배경색을 반환합니다.
getRowColor(rowIndex): rowIndex에 해당하는 행의 글자색을 반환합니다.
getRowDisabled(rowIndex): rowIndex에 해당하는 행에 적용된 disabled 속성 값을 반환합니다.
getRowNumVisible(): rowNumVisible 옵션 값을 반환합니다.
getRowReadOnly(rowIndex): rowIndex에 해당하는 행에 적용된 readonly 속성 값을 반환합니다.
getRowVisible(rowIndex): 특정 row를 감추거나 표시합니다.
getSortableArr(): header의 각 컬럼이 sortable한지 여부를 array로 반환합니다.
getSortableStatus(): sorting된 컬럼의 순서대로 해당 컬럼의 header 정보를 담은 object를 array로 반환합니다.
getTopRowIndex(): 현재 화면에 보여지는 최상단 row의 rowIndex를 반환합니다.
getTotalCol(): 전체 컬럼 개수를 반환합니다.
getTotalHeaderCol(options): colIndex에 해당하는 열의 visible 여부를 반환합니다.
getTotalRow(): 행의 개수를 반환합니다.
getUncheckedData(colIndex): colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 배열로 반환합니다.
getUncheckedIndex(colIndex): colIndex에 해당하는 열의 inputType 속성이 radio/checkbox인 경우 uncheck된 행의 index를 배열로 반환합니다.
getUncheckedJSON(colIndex): colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 JSON으로 변환하여 배열에 담아 반환합니다.
getUncheckedXML(colIndex): colIndex에 해당하는 열의 inputType 속성이 radio/checkbox인 경우 uncheck된 행의 data를 XML로 반환합니다.
getVisibleColData(colIndex): colIndex에 해당하는 열의 화면에 보이는 데이터(filter나 sort가 반영된)를 배열로 반환합니다.
getVisibleRowNum(): 현재 화면(눈에 보여지는 영역)에 그려진 row의 수를 반환합니다.
groupby(Options): 둘 이상의 컬럼의 데이터를 그룹핑하여 그룹핑 결과(통계)만 표시합니다.
hasChild(rowIndex): drilldown이 적용된 경우 rowIndex에 해당하는 행이 child row를 가지고 있는지의 여부를 반환합니다.
hideGroupbyZone(): groupbyZone 영역을 숨김 처리합니다.
initGrid(): 전체 데이터 삭제, 필터 삭제, 컬럼 기본 정보(selectbox의 nodeset 등)를 초기화하고 가지고 있던 데이터를 1차원 배열로 반환합니다.
isEditing(): GridView의",1527
845,"그리드의 다양한 속성을 동적으로 변경할 수 있는 함수들이다. 컬럼, 행, 헤더 등의 속성을 설정하거나 변경할 수 있으며, 그리드의 높이, 넓이, 스크롤 위치 등을 조절할 수 있다. 또한, 사용자 지정 필터, 그룹화 영역 등을 표시하거나 숨길 수 있는 기능도 제공한다. 이 함수들을 사용하여 그리드를 보다 효율적으로 제어할 수 있다.",151
846,"toggle(rowIndex) 함수를 사용하면 rowIndex에 해당하는 행의 drilldown을 토글링할 수 있다. Property Detail adaptiveThreshold는 adaptive 모드에서 레이아웃 변경을 위한 임계값을 설정하는데, 기본값은 480이다. alwaysTriggerScrollStart 옵션은 스크롤이 최상단에 위치할 때마다 onscrollstart 이벤트를 발생시킬지 여부를 설정하는데, 기본값은 false이다. applyAllColumnStyle 옵션은 컬럼에 정의된 스타일들을 모두 적용할지 여부를 설정하는데, 기본값은 false이다. arrowMove 옵션은 셀 내부의 첫번째 혹은 마지막 문자열에서 좌우 방향키를 이용한 셀 이동을 허용하는데, 기본값은 false이다. autoFit 옵션은 GridView의 모든 컬럼 폭을 균등하게 배분하여 전체 화면 폭을 채우는 기능을 제공하는데, 기본값은 none이다. autoFitMinWidth 옵션은 autoFit=""allColumn"" 설정을 적용하기 위해 필요한 GridView의 최소 너비를 설정하는데, 기본값은 0이다. senseReader 또는 embeddedInput이 true이며 inputType이 text, secret일때 input의 크기를 자동으로 계산하는 옵션은 기본값이 false이다. captionAuto 옵션은 captionTitle과 헤더의 Title을 조합해서 표 제목으로 표시하는데, 기본값은 false이다. TableLayout 컴포넌트에서 captionAuto 속성을 사용할 경우, tagName=""table""로 지정해야 한다. captionTitle은 표의 각 Header Title 앞에 표시할 내용을 설정하는데, 기본값은 """"이다. cellClickFixScrollX 옵션은 gridView cell 클릭 시 가로 스크롤이 움직이지 않도록 고정하는데, 기본값은 false이다. cellStatusIconPosition 옵션은 각 셀의 상태 아이콘 위치를 설정하는데, 기본값은 right이다. cellStatusVisible 옵션은 각 셀의 상태(추가/수정/삭제)를 좌측 또는 우측 상단에 아이콘으로 표시하는데, 기본값은 false이다. checkAllType 옵션은 헤더의 inputType이 checkbox인 경우, 전체선택 표시할 때 disable이나 readOnly 셀 포함 여부를 설정하는데, 기본값은 include이다. columnMove 옵션은 헤더 드래깅을 통한 컬럼 이동을 허용하는데, 드래깅 시 헤더의 value 속성에 설정된 값이 툴팁으로 표시된다. columnMoveWithFooter 옵션은 컬럼 이동 시 푸터를 함께 이동하는데, groupby() 함수와 함께 사용할 수 없다.",818
847,"- setColumnOrder 함수를 사용하여 컬럼 이동 또는 columnMove=""true"" 설정 시 마우스 드래깅으로 컬럼 이동 가능 (footer가 header 및 body와 병합 구조가 다른 경우 미지원)
- contextMenuAltClick 속성을 사용하여 Alt 키 + 마우스 좌클릭 시 컨텍스트 메뉴 표시 가능
- copyOption 속성을 사용하여 데이터 복사 시 dataList 또는 display 값을 기준으로 복사 가능 (column마다 개별 설정 가능)
- copyType 속성을 사용하여 focus된 cell 전체 또는 drag로 선택한 text만 복사 가능
- useShiftKey 속성을 사용하여 ctrl 키와 shift 키를 번갈아 사용 가능하게 설정 가능
- customFilterBox 속성을 사용하여 groupby() 함수 실행 시 사용자 정의 필터 유지 여부 설정 가능
- dataDragDrop 속성을 사용하여 서로 다른 gridView 간의 데이터 드래그-앤-드롭 가능
- dataDragDropOther 속성을 사용하여 서로 다른 gridView 간의 데이터 드래그-앤-드롭만 가능하게 설정 가능
- dataDragSelect 속성을 사용하여 여러 개의 셀을 드래깅으로 선택 가능
- dataDragSelectAutoScroll 속성을 사용하여 드래깅 시 자동으로 스크롤 가능
- dataList 속성을 사용하여 gridView의 data에 해당하는 DataCollection의 DataList id 설정 가능
- disabledBackgroundColor, disabledFontColor 속성을 사용하여 disabled=""true"" 설정이 적용된 셀 또는 행의 배경색과 글자색 설정 가능
- disabledScrollHidden 속성을 사용하여 disabled인 경우 스크롤도 함께 숨길 수 있음
- dragDisplayColumn 속성을 사용하여 데이터를 드래깅할 때 툴팁으로 표시할 컬럼의 ID 지정 가능
- dragEndFunction 속성을 사용하여 드래그 종료 시 실행될 함수 정의 가능 (드릴-다운인 경우와 그렇지 않은 경우를 구분해서 정의해야 함)",546
848,"드래그 앤 드롭 기능을 구현할 때, dragStartFunction과 dragEndFunction을 사용한다. dragStartFunction은 rowIndex, rowXml, infoObj가 각각 첫번째, 두번째, 세번째 인자로 넘어오며, infoObj는 fromColumnId, fromColumnIndex 정보를 포함한다. dragEndFunction에서는 targetRowIndex에 삽입하고자 하는 row를 삽입하고, 리턴값이 true일 때 처음 dragdrop이 시작됐던 rowIndex에 해당하는 row를 삭제한다. 그리드가 drilldown을 사용하는 경우, setDrillDownDragDrop 함수의 첫번째 인자값으로 true를 주어야 하며, 이 경우 dragStartFunction은 toIndex, rowXml, infoObj가 각각 첫번째, 두번째, 세번째 인자로 넘어온다. 그리드를 그릴 때는 drawType 속성을 사용하여 virtual 또는 native를 선택할 수 있으며, gridView Row별 height가 각각 다른 경우 drawType=""native""를 권장한다. 그리드에서 셀 수정 모드로 진입하기 위해 필요한 마우스 동작 이벤트는 editModeEvent 속성으로 설정할 수 있다. enterKeyMove 속성은 셀에서 Enter 키를 입력할 경우 포커스 이동 방향을 설정할 수 있다. escape 속성은 <>&""를 HTML Escape 문자로 변환하여 화면에 표시한다.",376
849,"filterShowAlways 속성을 true로 설정하면, 컬럼 너비가 좁을 때 filter 아이콘이 최우선으로 표시됩니다. fixedColumn 속성을 사용하여 틀고정을 적용할 컬럼의 위치를 설정할 수 있으며, fixedColumnNoMove 속성을 사용하여 해당 컬럼의 columnMove 허용 여부를 설정할 수 있습니다. fixedColumnScrollHidden 속성을 true로 설정하면, 틀고정을 할 경우 고정된 영역의 스크롤을 감춥니다. fixedColumnWithHidden 속성을 true로 설정하면, hiddenColumn을 포함하여 fixedColumn 속성의 위치 값에 계산합니다. fixedRightColumn 속성을 사용하여 우측에 틀고정할 컬럼의 수를 설정할 수 있습니다. focusDefaultColumn 속성을 true로 설정하면, rowNum 컬럼 및 rowStatus 컬럼이 focus를 받을 수 있는 상태가 됩니다. focusFlow 속성을 사용하여 포커스 이동 방향을 설정할 수 있으며, focusImage 속성을 true로 설정하면, senseReader 또는 embeddedInput이 true이며 inputType=""image""인 경우 image로 focus 이동합니다. focusMode 속성을 사용하여 셀 선택(포커싱) 시 선택 영역 표현 방법을 설정할 수 있습니다. focusMove 속성을 사용하여 방향키를 통한 포커스 이동 허용 여부를 설정할 수 있습니다. footerCaption 속성을 사용하여 바닥글(footer)의 내용을 설정할 수 있으며, footerSummary 속성을 사용하여 바닥글(footer)의 내용 요약을 설정할 수 있습니다. groupbyFilterBox 속성을 사용하여 필터링 기능(groupby)을 사용할 때 필터링 조건 목록의 표시 여부를 설정할 수 있습니다. groupbyFilterBoxLocation 속성을 사용하여 필터링 조건 목록 표시 위치를 설정할 수 있으며, groupbyMaxCount 속성을 사용하여 groupby 가능한 최대 컬럼 개수를 지정할 수 있습니다. groupbyZone 속성을 사용하여 groupby 기능을 사용할 수 있으며, hammerEnabled 속성을 true로 설정하면, 모바일에서 dblclick 이벤트를 Hammer.JS의 press 이벤트로 처리합니다. hideFilterIconOnNoData 속성을 true로 설정하면, 그리드 데이타 미존재시 웹접근성용 head filter 아이콘을 보여주지 않습니다. hideHeader 속성을 true로 설정하면, 헤더를 숨길 수 있습니다. ignoreCellClick 속성을 true로 설정하면, 셀 클릭을 무시합니다. ignoreNonEditableCell 속성을 true로 설정하면, 셀 편집이 불가능할 경우, Tab이나 Enter 키 입력을 무시합니다. initFixedHeightByRowNum 속성을 사용하여 최초 렌더링된 GridView의 행의 수를 기준으로 GridView의 높이를 초기화할 수 있습니다. keepDefaultColumnWidth 속성을 true로 설정하면, autoFit=""true""인 경우,rowNum 컬럼과 rowStatus 컬럼의 폭을 고정합니다. keyMoveEditMode 속성을 사용하여 Tab이나 Enter 키를 눌러서 포커스를 이동할 때 즉시 수정 모드로 진입할지 여부를 설정할 수 있습니다. labelDelimiter 속성을 사용하여 checkbox나 radio에서 label을 표현할 때 사용하는 구분자를 설정할 수 있습니다. loadCount 속성을 사용하여 onscrollend 이벤트를 발생에 필요한 남은 행의 수를 설정할 수 있습니다.",986
850,"onscrollend 이벤트는 세로 스크롤이 하단에 닿을 때마다 발생한다. mergeCells 속성은 행 또는 열 기준으로 연속적으로 같은 데이터들을 병합한다. mergeCells 옵션으로는 ""never"", ""bycol"", ""byrow"", ""bycolrec"", ""byrowrec"", ""byrestriccol"", ""byrestricrow""이 있다. mergeCellsFixedCols와 mergeCellsFixedRows는 각각 fixedColumn과 fixedRow 영역 내에서 행 또는 열 기준으로 같은 데이터들을 병합한다. mergeCol은 mergeCells 속성을 적용할 대상 컬럼을 지정한다. mergeExcludeValue는 병합하지 않을 값을 정의한다. moveKeyEditMode는 상(Up) 및 하(Down) 방향키로 포커스 이동 시 즉시 편집 모드로 진입 여부를 설정한다. moveKeyEditModeAll은 상(Up), 하(Down), 좌(Left), 우(Right) 방향키로 포커스 이동 시 즉시 편집 모드로 진입 여부를 설정한다. noResultMessage는 조회 결과가 없을 때 표시할 메세지를 설정한다. noResultMessageClass는 조회 결과 없음 메시지에 별도의 스타일을 적용하기 위한 클래스를 설정한다. noResultMessageStyle은 조회 결과 없음 메시지에 별도의 스타일을 적용한다. noResultMessageVisible은 조회 결과가 없을 때 메시지 표시 여부를 설정한다. noResultMessageVisibleAlways는 grid에 row가 하나도 없을 때 메시지 표시 여부를 설정한다. noSelect는 여러 셀을 선택하는 것을 방지한다. numberMask는 화폐 단위 변경을 위해 dataType=""number"" 설정이나 changeCurrency() 함수를 사용할 경우 적용되는 마스킹 값을 설정한다. oddEvenColorDisplay는 짝/홀 수 행 마다 서로 다른 색을 사용한다. oddRowBackgroundColor은 홀수 행의 배경색을 설정한다. overflowX와 overflowY는 가로 및 세로 스크롤 표시 여부를 설정한다. pasteOption은 Ctrl(또는 cmd)+V를 통해 데이터를 클립보드에 붙여넣을 방법을 지정한다. preventAddRowOnPaste는 Ctrl(또는 cmd)+V를 눌러 클립보드에서 그리드로 붙여넣기하는 경우 새로운 행의 추가 여부를 설정한다. preventCopy는 Ctrl(또는 cmd)+C 또는 Ctrl(또는 cmd)+X를 눌러 그리드 데이터를 클립보드에 복사나 잘라내는 동작을 방지한다. preventCopyColumn은 Ctrl(또는 cmd)+C를 통해 데이터를 클립보드에 복사하는 동작을 방지할 컬럼의 ID를 지정한다. preventMultisort는 다중 정렬을 방지한다. preventPaste는 Ctrl(또는 cmd)+V를 통해 데이터를 클립보드에 붙여넣는 동작을 방지한다. preventPasteColumn은 Ctrl(또는 cmd)+V를 통해 데이터를 클립보드에 붙여넣는 동작을 방지할 컬럼의 ID를 지정한다. readOnly는 전체 셀을 읽기 전용으로 설정한다.",889
851,"GridView, column, row, cell의 readOnly 속성 적용 우선 순위는 gridView의 readOnlyPriority 속성에 의해 변경 가능하며, readOnlyBackgroundColor, readOnlyBackgroundImg, readOnlyBackgroundImgCSS 속성은 readOnly=""true""인 셀의 배경색과 이미지를 설정한다. readOnlyTabIgnore 속성은 readOnly=""true""인 셀을 무시하고 Tab 키를 누를 때 다음 셀로 이동한다. rowNumVisible, rowNumBackgroundColor, rowNumHeaderValue, rowNumLocaleRef, rowNumWidth, rowStatusVisible, rowStatusLocaleRef, rowStatusWidth, rupeeMask, scrollByColumn, scrollByColumnAdaptive, scrollFocus, scrollXNative, selectedCellColor, selectedCellOverColor, selectedRowColor, selectedRowOverColor, senseReader, setCellInputTypeCustom, showImageTooltip, showSortableImage, showSortableUseFilter, sortable, sortedIconPosition, sortEvent 등의 속성을 설정할 수 있다.",223
852,"sortHeaderDiv 속성은 그리드의 sort 아이콘을 button 태그로 그릴지 여부를 설정하는 속성이며, 기본값은 false이다. sortOrderReverse 속성은 헤더 클릭을 통한 데이터 정렬 시 내림차순 정렬을 먼저 수행하는 속성이다. subtotalStyleFormatter 속성은 subtotal의 값에 따라 style을 다르게 적용하는 기능을 제공하는데, 함수명을 입력하여 사용한다. summary 속성은 웹접근성 준수를 위해 사용하는 속성으로, summaryAuto 속성과 함께 사용하여 GridView table 속성 중 summary 항목에 헤더 컬럼 명을 자동으로 설정할 수 있다. tooltipDisplay 속성은 전체 데이터가 셀에 모두 표시되지 않는 경우, 마우스 오버 시 툴팁으로 데이터를 표시하는 속성이다. tooltipDisplayColumn 속성은 특정 컬럼만 tooltip이 표현되도록 컬럼명을 설정하는 속성이다. useCtrlKey 속성은 Ctrl 키를 통한 복수의 셀 선택을 허용하는 속성이며, 기본값은 true이다. useFilterList 속성은 필터링 대상 값을 목록으로 표시하는 속성으로, 사용자 필터를 클릭하면 사용자 지정 필터 팝업 창이 표시된다. useHeaderContextMenu 속성은 header context menu 사용 여부를 설정하는 속성이다.",418
853,"useLocale: 다국어 사용 여부를 설정하는 옵션으로, label에 표시되는 값을 클라이언트의 다국어 key를 이용하여 표현할지 여부를 결정한다. userData1~3: 사용자 정의 데이터 속성으로, getUserData API를 통해 설정한 값을 얻어올 수 있다. visibleRowNum: 화면에 표시할 행 수를 설정하는 옵션으로, ""all""로 설정 시 모든 행이 스크롤 없이 표시된다. wheelRows: 마우스 휠을 이용하여 세로 스크롤이 이동 될 때 한번 이동하는 행의 수를 설정하는 옵션으로, 기본값은 3이다. onaftercolumnmove: 컬럼이동이 발생한 직후 발생하는 이벤트로, startColumnID, startColumnIndex, endColumnID, endColumnIndex를 포함한 오브젝트를 반환한다. onaftercolumnresize: 컬럼 리사이즈 직후 발생하는 이벤트로, colIndex, oldWidth, newWidth를 포함한 오브젝트를 반환한다. onafteredit: 셀의 수정이 끝나서 포커스가 빠져나온 경우 발생하는 이벤트로, rowNumber, colNumber, value를 반환한다. onbeforecolumnmove: 컬럼이동이 발생하기 직전에 발생하는 이벤트로, startColumnID, startColumnIndex, endColumnID, endColumnIndex를 포함한 오브젝트를 반환한다. onbeforeedit: 셀 수정모드로 들어가기 전에 발생하는 이벤트로, rowNumber, colNumber, value를 반환한다. onbeforesort: 컬럼 정렬 직전에 발생하는 이벤트로, headerId, bodyColId, sortOrder를 포함한 오브젝트를 반환한다. onblankclick: gridView 영역 내의 빈 화면을 클릭할 때 발생하는 이벤트로, event 객체를 반환한다. onbodymouseout: 그리드의 body에 마우스가 벗어난 경우 발생하는 이벤트로, rowIndex, colIndex를 포함한 오브젝트를 반환한다. onbodymouseover: 그리드의 body에 마우스가 오버된 경우 발생하는 이벤트로, rowIndex, colIndex를 포함한 오브젝트를 반환한다. oncellclick: 셀이 클릭 된 경우 발생하는 이벤트로, rowNumber, colNumber, colId를 반환한다. oncelldblclick: 셀이 더블 클릭된 경우 발생하는 이벤트로, rowNumber, colNumber, colId를 반환한다. oncellindexchange: 셀을 선택하여 선택 된 셀이 변경되었을 때 발생하는 이벤트로, rowNumber, colNumber, oldRowNumber, oldColNumber를 반환한다. oncolumnindexchange: 셀을 선택하여 선택 된 셀의 열이 변경되었을 때 발생하는 이벤트로, colNumber, oldColNumber를 반환한다. oncolumnwidthchange: 컬럼 길이가 변하는 경우 발생하는 이벤트로, columnIndex, columnID, oldWidth, newWidth를 포함한 오브젝트를 반환한다. oncontextopen: context menu 가 표시될 때 발생하는 이벤트로, rowIndex를 반환한다.",867
854,"클릭된 셀의 열 index와 focusedCellArraybody의 focused cell의 정보(rowIndex, colIndex)를 담은 1차원 배열 infoJSON 헤더인 경우 헤더 정보를 반환하는 함수는 scwin.gridView1_oncontextopen이다. gridView의 copy, paste, data drag & drop, date select, edit double click, edit end, edit key down, edit key up, file read end, footer click, header click, header double click, key down, key up, month select, right button click, row index change, row num click, row status click, scroll end, scroll start, scroll x, scroll y, sort, subtotal click, subtotal double click, text image click 이벤트가 있다. 각 이벤트에 대한 설명과 파라미터는 위와 같다.",188
855,"advancedExcelDownload() 메소드는 그리드의 데이터를 엑셀 파일로 저장하는 기능을 제공한다. 이 메소드는 JDK 1.5 이상에서 사용 가능하며, options와 infoArr 두 개의 파라미터를 받는다. options는 JSON 형태로 저장된 그리드의 엑셀 다운로드 옵션을 설정하며, 파일 정보 관련 옵션, 다운로드 요청 관련 옵션, 다운로드 데이터 관련 옵션, Excel 파일 관련 옵션 등이 있다. infoArr은 출력 작업을 위한 파라미터로, options.lazyInfoArr가 true인 경우에만 사용된다. 이 메소드를 사용하면 그리드 데이터를 엑셀 파일로 쉽게 저장할 수 있다.",200
856,"Excel 파일 다운로드를 위한 옵션들이다. maxCellCount와 maxRowCount는 다운로드를 제한할 셀과 행의 개수를 설정하는 옵션이다. displayGridlines는 Excel 파일 전체 셀의 눈금선을 제거하는 옵션이다. freezePane은 틀고정을 위한 좌표값을 설정하는 옵션이다. rowNumVisible은 행 번호 표시 컬럼의 유무를 설정하는 옵션이다. useHeader는 Header를 출력할지 여부를 설정하는 옵션이다. useSubTotal은 SubTotal을 출력할지 여부를 설정하는 옵션이다. 이 외에도 Header, Body, SubTotal, Footer 등의 스타일을 설정할 수 있는 옵션이 있다. 대용량 다운로드를 위한 Provider Package, 줄바꿈 기능, 출력 화면 관련 옵션 등이 있다.",240
857,"options.useFooter: [기본값: true] 다운로드시 Footer 출력 여부 (""true""면 출력, ""false""면 미출력)
options.colMerge: [기본값: false] colMerge된 컬럼을 Merge해서 출력할지 여부
options.colMergeValue: [기본값: false] colMerge된 컬럼을 다운로드한 Excel 파일에서 병합을 취소할 경우 모든 셀에 데이터를 채우는 기능
options.colMergeTextAlign: [기본값: center] colMerge된 컬럼의 textAlign 설정 (bottom, center, top)
options.mergeCell: [기본값: false] gridView mergeCell API로 cell 머지시, excel에도 동일하게 머지되어 다운로드 할지 여부
options.columnMove: [기본값: false] 그리드 컬럼이동시 이동된 상태로 다운로드 유무
options.columnOrder: Excel 다운로드시 다운로드되는 컬럼 순서를 지정 할 수 있는 속성
options.headerAutoFilter: [기본값: false] Header에 filter를 적용할지 여부
options.trim: [기본값: false] gridView 데이터를 좌우 공백 적용유무
options.chart: JSON 형태로 저장된 chart 관련 설정
options.printSet: JSON 형태로 저장된 Excel Printer 관련 설정
options.useEuroLocale: [기본값: false] 다운로드시 유로화 처리 기능
options.optionParam: DRM 연계시 사용자 정의 class에 HashMap 인자로 전달할 값
infoArr: 그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열
advancedExcelUpload(options): 엑셀 파일을 읽어 그리드의 데이터를 설정
- 업로드 정보 관련 옵션: popupUrl, delim, status, pwd
- 업로드 데이터 관련 옵션: type, sheetNo, sheetName, activeSheet",504
858,"options.startRowIndex : [default: 0] - 그리드의 데이터가 시작되는 행의 번호(헤더 포함)  
options.startColumnIndex: [default: 0] - 그리드의 데이터가 시작되는 열의 번호  
options.endColumnIndex : [default: 0] - 그리드의 데이터가 끝나는 열의 index ( 엑셀컬럼수가 그리드 컬럼수 보다 작은 경우 그리드 컬럼 수를 설정)  
options.append : [default: 0] - 가져온 데이터를 그리드에 append시킬지 여부 (1이면 현재 그리드에 데이터를 추가로 넣어줌 0이면 현재 그리드의 데이터를 삭제하고 넣음)  
options.hidden : [default: 0] - 읽어들이려는 Excel 파일에 hidden column이 저장되어 있는지 여부를 설정하는 int형 숫자 (0이면 엑셀파일에 hidden 데이터가 없으므로 그리드 hidden column에 빈 데이터를 삽입 1 : 엑셀파일에 hidden 데이터가 있으므로 엑셀 파일로부터 hidden 데이터를 삽입)  
options.fillHidden : [default: 0] - Grid에 hiddenColumn에 빈 값을 넣을지를 결정하기 위한 int형 숫자 (1이면 hidden Column에 빈 값을 저장하지 않음,0이면 hidden column이 저장되어있지 않은 Excel File이라 간주하고 hidden Column에 빈 값을 넣어줌)(hidden이 0인 경우에는 fillhidden은 영향을 끼치지 않음)  
options.skipSpace : [default: 0] - 공백무시 여부(1이면 무시 0이면 포함)  
options.useMaxByteLength : [default: false] - ignoreChar 속성으로 설정한 문자를 제외하고 maxByteLength 속성으로 설정한 길이만큼의 데이터만 업로드.  
options.byteCheckEncoding : [default: EUC-KR] - useMaxByteLength 설정되어 있는경우 byte처리시 지정할 인코딩.  
options.dateFormat : [default: yyyy-MM-dd] - 엑셀의 셀포맷이 날짜형식으로 되어 있는경우 format.  
options.decimal : [default: 4] - 셀의 데이터가 소수인 경우, 최종 소수점 자리수. (기본값: 4)  
options.headerExist : [default: 0] - Excel 파일에서 그리드의 데이터에 header가 있는지 여부(1이면 header 존재 0이면 없음)  
options.footerExist : [default: 1] - Excel 파일에서 그리드의 데이터에 footer가 있는지 여부(1이면 footer 존재 0이면 없음 기본값은 1 그리드에 footer가 없으면 적용되지 않음)  
options.trim : [default: 0] - 엑셀 각각의 셀데이터 좌, 우에 공백이 있는 경우 제거할지 여부 (1이면 제거, 0이면 유지)  
options.insertColumns : - radio, checkbox와 같은 컬럼을 엑셀에서 받아 오지 않고, 사용자 컬럼 설정 으로 업로드 ( 데이터 구조 : [ { columnIndex:1, columnValue:""1"" } ] )  
options.removeColumns : [default: 없음] - 저장 하지 않을 column index, 여러컬럼인 경우 콤마(,)로 구분해서 정의.  
options.useModalDisable : [default: false] - 업로드 팝업창이 활성화 될때 부모창의 컴포넌트 disabled 처리 유무.  
options.features - upload화면이 뜰 때 string 형식의 스타일 정보.  
options.optionParam : [default: 없음] - DRM 연계시 사용자 정의 class에 HashMap 인자로 전달할 값.  
options.cellDataConvertor : [default: """"] - 컬럼값을 사용자가 수정할수 있는 연계 클래스의 전체 패키지명.  
changeCurrency( columnID , dataType , displayFormat , delimiter , decimalDelimiter ) - 컬럼 단위로 화면에 나타나는 셀 값들의 화폐 단위를 동적으로 변경.  
checkAll( colIndex , dataValue ) - 체크 박스로 이루어진 열을 한번에 체크하거나 언체크.  
clearAutoFit( ) - autoFit 속성을 제거. 그리드 컬럼의 너비를 autoFit 적용 이전으로 초기화.  
clearGroupby( ) - groupBy를 해제.  
clearRowVisible( ) - setRowVisible(); API를 이용하여 숨김 처리한 행을 모두 표시하도록 처리.  
drillTo( rowIndex ) - drilldown 사용시 rowIndex에 해당하는 행을 표현하기 위해 모든 조상 행들을 오픈.  
enableAllDate( colIndex ) - disableAfterDate 및 disableBeforeDate API를 통해서 비활성화된 날짜들을 다시 활성화시켜 선택 가능하도록 변경.  
getAllDisplayData( ) - 화면에 보이는 data를 1차원 배열로 반환한다.(displayFormat등이 적용 된 data)  
getAllDisplayJSON( ) - 화면에 (displayFormat 등이 적용되어)출력된 데이터를 JSON으로 반환.  
getAllDisplayXML( ) - 화면에 보이는 data를 XML로 반환한다.(displayFormat등이 적용 된 data)  
getAllFocusedIndex( ) - 선택 된 셀의 rowIndex와 colIndex를 반환. 보통 ctrl키를 이용하여 다중 cell이 선택 된 경우 사용.",1462
859,"선택된 셀의 rowIndex와 colIndex 정보가 담긴 JSON을 담은 배열을 반환하는 getAllFocusedIndex()와 포커스된 셀들의 rowIndex를 반환하는 getAllFocusedRowIndex() 메소드, 현재 보이는 데이터를 1차원 배열로 반환하는 getAllVisibleData() 메소드, 화면에 출력된 데이터를 JSON으로 반환하는 getAllVisibleJSON() 메소드, 현재 보이는 데이터를 XML로 반환하는 getAllVisibleXML() 메소드, drilldown 사용시 rowIndex에 해당하는 행의 모든 조상 행들의 rowIndex를 배열로 반환하는 getAncestorRowIndexArray() 메소드, 현재 눈에 보여지는 gridView의 최하단 row의 rowIndex를 반환하는 getBottomRowIndex() 메소드, rowIndex와 colIndex에 해당하는 셀의 배경색을 반환하는 getCellBackgroundColor() 메소드, rowIndex와 colIndex로 해당하는 셀의 check 여부를 반환하는 getCellChecked() 메소드, grid 셀에 동적으로 적용한 사용자 class 이름을 반환하는 getCellClass() 메소드, rowIndex와 colIndex에 해당하는 셀의 글자색을 반환하는 getCellColor() 메소드, colIndex와 rowIndex 해당하는 셀의 disabled 속성 값을 반환하는 getCellDisabled() 메소드, rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환하는 getCellDisplayData() 메소드, 셀의 위치 정보(top 또는 left)를 반환하는 getCellPosition() 메소드, colIndex와 rowIndex에 해당하는 셀의 readonly 속성 값을 반환하는 getCellReadOnly() 메소드, 셀의 크기 정보(width나 height)를 반환하는 getCellSize() 메소드, colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 배열로 반환하는 getCheckedData() 메소드, colIndex에 해당하는 열의 inputType 속성이 radio/checkbox인 경우 check된 행의 index를 배열로 반환하는 getCheckedIndex() 메소드, colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 JSON Data를 Array에 담아 반환하는 getCheckedJSON() 메소드, colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 XML로 반환하는 getCheckedXML() 메소드, drilldown 사용시 rowIndex에 해당하는 행의 자식(1 depth 하위)행들의 rowIndex를 배열로 반환하는 getChildrenRowIndexArray() 메소드가 있다.",593
860,"함수명: getColIdByHeaderId(headerId)
- headerId에 해당하는 columnId를 반환하는 함수
- Parameter: headerId(String) - header의 ID
- Return type: String - body의 columnId
함수명: getColumnBackgroundColor(colIndex)
- colIndex에 해당하는 열의 배경색을 반환하는 함수
- Parameter: colIndex(String 또는 Number) - 배경색을 반환할 열 index 또는 id
- Return type: String - 해당 열에 지정된 배경색, API로 별도의 backgroundColor를 지정하지 않은 경우 """"(empty string)을 반환
함수명: getColumnClass(colIndex)
- colIndex에 해당하는 column에 동적으로 적용된 사용자 class를 반환하는 함수
- Parameter: colIndex(Number) - 컬럼의 열번호 또는 컬럼 아이디
- Return type: String - 컬럼에 적용된 사용자 class 이름, 적용된 class가 없으면 undefined를 반환
함수명: getColumnColor(colIndex)
- colIndex에 해당하는 열의 글자색을 반환하는 함수
- Parameter: colIndex(String 또는 Number) - 글자색을 반환할 열 index 또는 id
- Return type: String - 해당 열에 지정된 글자색, API로 별도의 글자색을 지정하지 않은 경우 """"(empty string)을 반환
함수명: getColumnDataListInfo(colIndex)
- colIndex에 해당하는 컬럼에 바인딩된 데이터리스트정보를 반환하는 함수
- inputType=""selectbox"", ""autoComplete"", 혹은 ""checkcombobox"" 컬럼만 지원
- Parameter: colIndex(Number) - 컬럼의 index
- Return type: Object - dataList id
함수명: getColumnDisabled(colIndex)
- colIndex에 해당하는 열에 disabled속성 값을 반환하는 함수
- 별도로 disable을 지정하지 않은 경우 """"(empty string)을 반환
- Parameter: colIndex(String 또는 Number) - disabled속성을 가져올 열 index 또는 id
- Return type: Boolean - 해당 열에 적용된 disabled속성값
함수명: getColumnID(colIndex)
- colIndex에 해당하는 컬럼의 id를 반환하는 함수
- Parameter: colIndex(Number) - 컬럼의 index
- Return type: String - 컬럼의 ID
함수명: getColumnIdListMultiRow()
- 그리드의 모든 컬럼의 ID를 2차원 배열 형태로 반환
- 첫 번째 차원에는 각 multiRow에 해당하는 rowIndex가 할당됨
- 두 번째 차원에는 각 multiRow에 해당하는 column의 ID가 배열 형태로 할당됨
- 단일 row인 경우에도 2차원 배열로 반환하며 이 때 첫번째 차원의 크기는 1이다.
- Return type: Array - 그리드의 모든 컬럼의 ID값을 담은 2차원 배열
함수명: getColumnIndex(colIndex)
- 컬럼 id를 입력받아 해당하는 컬럼의 index를 반환하는 함수
- Parameter: colIndex(String) - 컬럼 id
- Return type: Number - 컬럼의 index
함수명: getColumnNodeSet(colIndex)
- colIndex에 해당하는 컬럼의 NodeSet정보를 담은 객체를 반환하는 함수
- inputType = ""select"" 또는 ""autoComplete""인 경우, 연결된 NodeSet 정보를 반환
- setColumnNodeSet API와 대응
- Parameter: colIndex(String 또는 Number) - 컬럼 ID 혹은 Index
- Return type: Object - itemsetObj
- 해당 객체는 nodeset, label, value 등을 포함
함수명: getColumnOrder(byName)
- 현재 컬럼 순서를 배열로 반환한다.
- 기본적으로는 컬럼 index를 담은 배열을 반환하고, byName이 true인 경우 id를 담은 배열을 반환한다.
- Parameter: byName(Boolean) - 반환 할 컬럼의 순서에서 컬럼 index 대신 컬럼 id를 사용할지 여부
- Return type: Array - 현재 컬럼 순서를 차례대로 담고 있는 배열
함수명: getColumnReadOnly(colIndex)
- colIndex에 해당하는 열에 적용된 readonly속성 값을 반환하는 함수
- 별도의 readonly가 지정되지 않은 경우 """"(empty string)을 반환
- Parameter: colIndex(String 또는 Number) - 열 index 또는 id
- Return type: Boolean - 해당 열에 적용된 readonly속성값
함수명: getColumnType(colIndex)
- colIndex에 해당하는 열의 inputType 속성 값을 반환하는 함수
- Parameter: colIndex(String 또는 Number) - column id 또는 index
- Return type: String - colIndex에 해당하는 컬럼의 타입
함수명: getColumnVisible(colIndex)
- colIndex에 해당하는 열의 visible여부를 반환하는 함수
- Parameter: colIndex(Number 또는 String) - visible여부를 반환할 colunm의 index 또는 id
- Return type: Boolean - column의 visible여부
함수명: getDataType(colID)
- 특정 column의 dataType 속성을 반환하는 함수
- Parameter: colID(String) - column의 id
- Return type: String - 해당 column의 dataType 속성값
함수명: getDescendantRowIndexArray(rowIndex)
- drilldown 사용시 rowIndex에 해당하는 행의 모든 자손 행들의 rowIndex를 반환하는 함수
- Parameter: rowIndex(Number) - 자손을 찾으려는 행의 index
- Return type: Array - rowIndex가 담긴 1차원 배열
함수명: getDisabled(type, rowIndex, colIndex)
- type에 따라 세부 disabled 속성을 반환하는 함수
- type에 따른 세부 내용
  - ""all"" : gridView 전체, row, column, cell 에 지정된 disabled 속성값들을 전부 체크하여 해당 cell에 적용된 실제 disabled 속성",1496
861,"이 API 목록은 그리드뷰에서 사용 가능한 다양한 메서드를 설명합니다. 초기상태, footer 데이터, header 스타일, 그리드 읽기 전용 여부, 그룹화된 정보, 셀 병합 여부, drilldown 여부, 행 속성, 정렬 여부 등을 반환합니다. 각 메서드는 필요한 매개변수를 받아 해당 값을 반환합니다. 예를 들어, getHeaderBackgroundColor() 메서드는 header 셀에 적용된 배경색 값을 반환합니다. getRowVisible() 메서드는 특정 row를 감추거나 표시합니다. 이러한 메서드를 사용하여 그리드뷰의 데이터를 더욱 효율적으로 관리할 수 있습니다.",206
862,"getTotalCol( ) : 최상단 row의 rowIndex를 제외한 전체 컬럼 개수를 반환합니다.
getTotalHeaderCol( options ) : colIndex에 해당하는 열의 visible 여부를 반환합니다. rowNum 및 rowStatus 컬럼을 제외한 전체 컬럼 개수를 반환합니다.
getTotalRow( ) : 행의 개수를 반환합니다.
getUncheckedData( colIndex ) : colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 배열로 반환합니다.
getUncheckedIndex( colIndex ) : colIndex에 해당하는 열의 inputType 속성이 radio/checkbox인 경우 uncheck된 행의 index를 배열로 반환합니다.
getUncheckedJSON( colIndex ) : colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 JSON으로 변환하여 배열에 담아 반환합니다.
getUncheckedXML( colIndex ) : colIndex에 해당하는 열의 inputType 속성이 radio/checkbox인 경우 uncheck된 행의 data를 XML로 반환합니다.
getVisibleColData( colIndex ) : colIndex에 해당하는 열의 화면에 보이는 데이터(filter나 sort가 반영 된)를 배열로 반환합니다.
getVisibleRowNum( ) : 현재 화면(눈에 보여지는 영역)에 그려진 row의 수를 반환합니다. subTotal 및 footer는 제외합니다.
groupby( Options ) : 둘 이상의 컬럼의 데이터를 그룹핑하여 그룹핑 결과(통계)만 표시합니다.
hasChild( rowIndex ) : drilldown이 적용 된 경우 rowIndex에 해당하는 행이 child row를 가지고 있는지의 여부를 반환합니다.
hideGroupbyZone( ) : groupbyZone 영역을 숨김 처리합니다.
initGrid( ) : 전체 데이터 삭제, 필터 삭제, 컬럼 기본정보(selectbox의 nodeset 등)를 초기화하고 가지고 있던 데이터를 1차원 배열로 반환합니다.
isEditing( ) : GridView의 현재 편집 상태를 반환합니다.
mergeByCol( options ) : 같은 column 내에서 같은 데이터가 연속적으로 나타나는 경우 이들을 모두 병합합니다. (세로 병합)
mergeByColRec( options ) : mergeByCol을 수행하고, 그 후에 병합되지 않은 cell들을 대상으로 mergeByRow를 수행합니다. 세로 병합이 더 우선순위가 높습니다.
mergeByRestriCol( options ) : 같은 column 내에서 연속적으로 데이터가 같으면서 동시에 자신의 왼쪽에 위치한 column이 merge된 경우 해당 row들을 병합합니다. n+1컬럼에서 n컬럼을 upperColumn으로 지정한 형태입니다.
mergeByRestricRow( options ) : 같은 row 내에서 연속적으로 데이터가 같으면서 동시에 자신의 위쪽에 위치한 row가 merge된 경우 해당 row들을 병합합니다. n+1행에서 n행을 upperRow으로 지정한 형태입니다.
mergeByRow( options ) : 같은 row 내에서 같은 데이터가 연속적으로 나타나는 경우 이들을 모두 병합합니다. (가로 병합)",833
863,"mergeByRowRec( options ) : 가로 병합을 먼저 수행하고, 그 후에 병합되지 않은 cell들을 대상으로 mergeByCol을 수행한다. 
mergeCell( mergeInfo ) : 동적으로 셀을 병합한다. 병합 대상 셀의 정보를 포함한 객체 (rowIndex, colIndex, colSpan, rowSpan)를 입력한다.
mergeCells( mergeOptionStr , options ) : 행 또는 열 기준으로 연속적으로 같은 데이터들을 병합한다. 자동 병합 방식을 지정할 수 있으며, 설정 관련 string은 never, bycol, byrow, bycolrec, byrowrec이 있다.
mergeCellsFixedCols( mergeOptionStr , options ) : fixedColumn 영역 내에서 mergeCells를 실행한다. 자동 병합 방식을 지정할 수 있으며, 이 API를 호출할 경우 keepMerge 속성이 강제로 ""true""로 설정되고, fixedCols 속성이 강제로 ""true""로 설정된다.
mergeCellsFixedRows( mergeOptionStr , options ) : fixedRow 영역 내에서 mergeCells를 실행한다. 자동 병합 방식을 지정할 수 있으며, 이 API를 호출할 경우 keepMerge 속성이 강제로 ""true""로 설정되고, fixedRows 속성이 강제로 ""true""로 설정된다.
mergeClear( ) : 동적으로 병합된 셀들의 병합을 모두 해제한다. mergeCell 또는 mergeCells 등의 API에 의해 동적으로 병합된 셀들의 병합만 해제한다.
mergeCol( colIndex , flag ) : 데이터를 통해 자동으로 merge하는 기능을 사용할 때 특정 컬럼을 제외하기 위해 사용한다. 대상 column과 자동으로 merge하는 기능을 사용할지 말지를 지정한다.
mergeFocusedCell( ) : 현재 포커스된 셀만 병합한다.
mergeRow( rowIndex , flag ) : 데이터를 통해 자동으로 merge하는 기능을 사용할 때 특정 행을 제외하기 위해 사용한다. 대상 row와 자동으로 merge하는 기능을 사용할지 말지를 지정한다.
mergeSplitFocusedCell( ) : 포커스를 받은 셀의 병합을 분리한다.
modifyCheckedStatus( colIndex , status ) : col에 해당하는 열의 inputType이 checkbox일 때 check된 행의 상태코드값을 일괄 변경한다. 체크 여부를 검사할 컬럼의 index 혹은 컬럼 id와 변경할 상태코드값을 입력한다.",686
864,"gridView1.modifyCheckedStatus(""chk"",""D""); //1번째 row의 checkbox가 체크된 경우, 1번째 row의 상태코드값을 가져온다. (반환 예) ""D"" //2번째 row의 checkbox가 체크되지 않은 경우, 2번째 row의 상태코드값을 가져온다. (반환 예) ""R"" modifyUncheckStatus( col , status ) : col에 해당하는 열의 inputType이 checkbox일 때, uncheck된 행의 상태코드값을 일괄 변경. readCSV( options ) : csv 파일을 읽어 그리드의 데이터를 설정. (JDK 1.5이상에서 사용 가능) redrawColumn( colIndex , valid ) : col에 해당하는 열을 다시 그림. (Reset.) refreshCell( rowIndex , colIndex ) : 해당 인덱스의 cell을 다시 렌더링. refreshColumn( colIndex ) : 해당 인덱스의 column을 다시 렌더링. refreshColumnItemset( col ) : inputType이 select인 경우에만 동작하며, col에 해당하는 컬럼의 itemset을 갱신. refreshRow( rowIndex ) : 해당 인덱스의 row를 다시 렌더링. removeCellClass( rowIndex , colIndex ) : grid 셀에 적용된 사용자 class를 삭제. removeColumnClass( colIndex ) : column에 동적으로 적용된 사용자 class를 삭제. removeFocusedCell( ) : 셀에 적용된 모든 포커스(선택되어있는 셀)를 제거. removeFocusedMultiCell( startRow , startCol , endRow , endCol ) : 직사각형 영역만큼 cell의 focus를 해제. removeHeaderClass( headerId , 삭제할 ) : grid Header 셀에 적용된 사용자 class를 삭제. saveCSV( options ) : 데이터를 CSV 파일로 저장.",474
865,"saveCSV(options)
- Parameter
  - options: JSON 형태로 저장된 그리드의 csv 다운로드 옵션
    - options.fileName: [default: csvfile.csv] 엑셀 파일 선택 대화상자가 나타날 때 기본으로 지정될 파일 이름
    - options.delim: [default: ';'] CSV 파일에서 데이터를 구분할 구분자
    - options.type: [default: 1, 0] 사용할 데이터. GridView 컬럼의 inputType이 SelectBox, AutoComplete, 혹은 CheckComboBox인 경우 해당. 0: value 값 사용. 1: label 값 사용. 2: 해당 컬럼의 displayMode 설정에 따라 ""value delim label"" 혹은 ""label delim value"" 값을 사용.
    - options.removeColumns: [default: 없음] 저장하지 않을 columns index, 여러 컬럼인 경우 콤마(,)로 구분해서 정의.
    - options.header: [default: 1, 0] Grid의 숨겨진 Column에 대한 저장 여부(0이면 저장하지 않음, 1이면 저장)
    - options.hidden: [default: 0, 1] Grid의 숨겨진 Column에 대한 저장 여부(0이면 저장하지 않음, 1이면 저장)
    - options.checkButton: [default: 1, 0] Grid의 Control(Check, Radio, Button) Column에 대해 히든 여부 (0이면 control Column 히든, 1이면 보여줌)
    - options.saveList: [default: 없음] hidden에 관계없이 최우선순위로 저장할 column id들의 array
    - options.aposPrefixOnNum: [default: 0, 1] dataType이 number이고 length가 12자리 이상인 경우 '(apos)를 붙일지 여부 (0 이면 apos를 붙이지 않음, 1이면 붙임)
    - options.removeQuotation: [default: 0, 1] value에 "", ' 가 들어있는 경우 "", '를 지울지 여부 (0이면 지원하지 않음, 1이면 지움)
    - options.removeNewLine: [default: 1, 0] value 내에 이 있을 경우 삭제 유무 (0이면 지원하지 않음, 1이면 지움)
    - options.columnMove: [default: false] 그리드 컬럼 이동시 이동된 상태로 다운로드 유무 (""true""인 경우 컬럼 이동 순서대로 출력)
    - options.columnOrder: [default: 없음] csv 다운로드시 다운로드되는 컬럼 순서를 지정 할 수 있는 속성 (ex) ""0,3,2,1""로 지정시 지정한 순서로 다운로드됨.)
    - options.spanAll: [default: false] drilldown gridView인 경우 전체 목록을 펼쳐서 다운로드 할 수 있는 속성. (true이면 전체 출력, false면 보여지는 목록만 출력)
    - options.ignoreSpan: [default: 0, 1] span되어 있는 경우 span을 무시하고 데이터를 채울지 여부. (0이면 저장하지 않음, 1이면 저장)
    - options.optionParam: [default: 없음] DRM 연계시 사용자 정의 class에 HashMap 인자로 전달할 값. key는 ""optionParam""으로 참조.
setAutoFit(options)
- Parameter
  - options: JSON 형태로 저장된 그리드의 setAutoFit 옵션
    - options.type: autoFit 옵션 값(lastColumn일 경우 마지막 컬럼의 폭만 변경, allcolumn일 경우 전체 컬럼의 폭을 균일하게 변경)
    - options.minWidth: 그리드의 최소 넓이의 px값 (lastColumn일 때는 적용되지 않음)
setBlockSelect(colIndex, flag)
- Parameter
  - colIndex: 컬럼의 index 또는 id
  - flag: 컬럼에 적용할 값
setBottomRowIndex(bottomRowIndex)
- Parameter
  - bottomRowIndex: 최하단에 위치할 rowIndex
setCaption(htmlStr)
- Parameter
  - htmlStr: caption의 값으로 순수 텍스트 이외 HTML Tag을 조합한 문자열도 가능
setCaptionAuto(captionTitle)
- Parameter
  - captionTitle: captionTitle 값을 표 제목으로 설정
setCellAllowChar(rowIndex, colIndex, allowChar)
- Parameter
  - rowIndex: 변경하려는 셀의 index
  - colIndex: 변경하려는 컬럼의 index
  - allowChar: 변경하려는 allowChar 속성
setCellBackgroundColor(rowIndex, colIndex, color)
- Parameter
  - rowIndex: 배경색을 설정할 행 index
  - colIndex: 배경색을 설정할 열 index 또는 id
  - color: 배경색으로 설정할 색
setCellChecked(rowIndex, colIndex, flag)
- Parameter
  - rowIndex: 셀의 행의 index
  - colIndex: 셀의 열의 id 또는 index
  - flag: 셀의 체크 여부
setCellClass(rowIndex, colIndex, className)
- Parameter
  - rowIndex: 셀의 행번호
  - colIndex: 셀의 열번호 혹은 컬럼 아이디
  - className: td에 적용할 class의 이름
setCellColor(rowIndex, colIndex, color)
- Parameter
  - rowIndex: 글자색을 설정할 행 index
  - colIndex: 글자색을 설정할 열 index 또는 id
  - color: 글자색으로 설정할 색
setCellCustomFormatter(rowIndex, colIndex, formatter)
- Parameter
  - rowIndex: 변경하려는 셀의 index
  - colIndex: 변경하려는 컬럼의 index
  - formatter: 변경하려는 customFormatter 함수 이름
setCellDataType(rowIndex, colIndex, dataType)
- Parameter
  - rowIndex: 변경하려는 셀의 index
  - colIndex: 변경하려는 컬럼의 index
  - dataType: 변경하려는 dataType 속성
setCellDisabled(rowIndex, colIndex, disabled)
- Parameter
  - rowIndex: disabled",1534
866,"setCellDisplayFormat(rowIndex, colIndex, displayFormat): 특정 셀의 displayFormat 속성을 변경한다. inputType이 ""custom""일 경우에만 동작한다.
setCellDisplayFormatter(rowIndex, colIndex, formatter): 특정 셀의 displayFormatter 속성을 변경한다. inputType이 ""custom""일 경우에만 동작한다.
setCellInputType(rowIndex, colIndex, info): rowIndex와 colIndex에 해당하는 셀의 inputType을 변경한다. inputType이 ""custom""일 경우 사용한다. gridView 속성에 setCellInputTypeCustom=""true"" 설정을 추가해야 동작한다.
setCellMaxLength(rowIndex, colIndex, maxLength): 특정 셀의 maxLength 속성을 변경한다. inputType이 ""custom""일 경우에만 동작한다.
setCellReadOnly(rowIndex, colIndex, readOnly): colIndex와 rowIndex에 해당하는 셀의 readonly 속성 값을 설정한다.
setColumnBackgroundColor(colIndex, color): colIndex에 해당하는 열의 배경색을 일괄 설정한다.
setColumnChooseOption(colIndex, chooseOptionValue, chooseOptionLabel): gridView column의 inputType이 select인 경우, selectBox의 chooseOption 속성의 value 및 label 값을 변경한다.
setColumnClass(colIndex, className): column에 동적으로 사용자 class를 추가한다. 복수 클래스 지정시 띄어쓰기("" "")를 구분자로 사용한다.
setColumnColor(colIndex, color): colIndex에 해당하는 열의 글자색을 일괄 설정한다.
setColumnDisabled(colIndex, disabled): colIndex에 해당하는 열에 disabled 속성을 일괄 설정한다.
setColumnDisableEdit(rowIndex, onoff): inputType이 autoComplete인 경우 column의 disableEdit 속성을 변경한다.
setColumnDisplayFormat(colIndex, displayFormat): 컬럼의 displayFormat 속성을 설정한다.
setColumnDisplayFormatter(colIndex, displayFormatter): 컬럼의 displayFormatter 속성을 설정한다.
setColumnEnableColumn(gridColumnId, enableColumnId, enableColumnFalseValue): 지정한 GridView 컬럼이 선택 목록을 표시하는 경우, 일부 선택 목록을 disable 처리할 수 있는 기능. 해당 GridView 컬럼의 inputType이 select, autoComplete, checkcombobox인 경우에만 해당한다.
setColumnGridItemset(colIndex, obj): inputType이 ""select""이고 gridViewItemset을 사용하는 경우 gridViewItemset을 동적으로 변경한다.
setColumnIoFormat(colIndex, ioFormat, dateMast): 컬럼의 ioFormat 속성을 설정한다. dataType이 date인 경우에만 동작한다.
setColumnNodeSet(colIndex, nodeset, label, value): itemset을 설정할 수 있는 컬럼의 nodeset을 설정한다.",648
867,"gridView에서 사용 가능한 API 목록입니다. select, autoComplete, checkcombobox 세 개의 inputType만 지원하며, 각 API의 파라미터와 사용 예시가 포함되어 있습니다. API를 사용하여 gridView를 보다 효율적으로 제어할 수 있습니다.",74
868,"gridView1.setFocusedMultiCell(3,2,4,3); // 실행결과 : (3,2), (3,3), (4,2), (4,3)셀이 포커스 처리됨.
gridView의 footer 테이블의 caption의 innerHTML 값을 설정하는 함수: setFooterCaption(htmlStr)
footer의 inputType이 text인 경우 data를 footer에 설정하는 함수: setFooterData(footerId, data)
footer의 displayFormat을 설정하는 함수: setFooterDisplayFormat(footerId, displayFormat)
footer cell의 스타일 속성을 설정하는 함수: setFooterStyle(footerId, style, value)
gridView의 footer 테이블의 summary 값을 설정하는 함수: setFooterSummary(str)
footer의 inputType이 text인 경우만 적용되며 data의 값을 footer에 설정하는 함수: setFooterValue(footerId, data)
gridView의 높이를 설정하는 함수: setGridHeight(height)
gridView 전체에 readOnly 속성을 설정하는 함수: setGridReadOnly(readOnly)
gridView의 높이와 넓이를 설정하는 함수: setGridSize(width, height)
gridView의 넓이를 설정하는 함수: setGridWidth(width)
header 셀의 배경 색상을 설정하는 함수: setHeaderBackgroundColor(headerId, color)
grid header 셀에 동적으로 사용자 class를 적용하는 함수: setHeaderClass(headerId, className)
header 셀의 글씨 색상을 설정하는 함수: setHeaderColor(headerId, color)
header의 disalbled를 설정하는 함수: setHeaderDisabled(headerId, disabled)
header의 hidden 여부를 설정하는 함수: setHeaderHide(hide)
header의 inputType이 select의 경우 적용되며 list의 nodeSet을 설정하는 함수: setHeaderNodeSet(headerId, nodeset, label, value)
header의 sort 이미지를 설정하는 함수: setHeaderSortImage(headerId, orderNum, sortOrd)
그리드의 headerId에 해당하는 header cell의 스타일을 설정하는 함수: setHeaderStyle(headerId, style, value)
displayFormat에 따라 포맷된 값을 헤더에 설정하는 함수: setHeaderValue(headerId, value, useFormat)
inputType이 textimage인 image를 동적으로 변경하는 함수: setImageSrc(colIndex, src)
그리드의 컬럼의 maxLength 값을 설정하는 함수: setMaxLength(colIndex, len)
gridView에 데이터가 없을 경우 표시할 문자열을 설정하는 함수: setNoResultMessage(message)
noResultMessageVisible 값을 동적으로 설정하는 함수: setNoResultMessageVisible(visible)
eadOnly 속성값을 설정하는 함수: setReadOnly(type, rowIndex, colIndex, readOnlyFlag)
owIndex에 해당하는 행의 배경색을 설정하는 함수: setRowBackgroundColor(rowIndex, color)
owIndex에 해당하는 행의 글자색을 설정하는 함수: setRowColor(rowIndex, color)
colIndex에 해당하는 행의 disabled속성을 설정하는 함수: setRowDisabled(rowIndex, disableFlag)
owNum 컬럼의 폭을 변경하는 함수: setRowNumColumnWidth(size)
owIndex에 해당하는 행의 readonly 속성을 설정하는 함수: setRowReadOnly(rowIndex, readOnly)
owStatus컬럼의 폭을 변경하는 함수: setRowStatusColumnWidth(size)
특정 행의 표시/숨김 여부를 설정하는 함수: setRowVisible(rowIndex, flag)",796
869,"clearRowVisible(rowIndex, flag): rowIndex에 해당하는 행의 표시 여부를 flag 값으로 설정하는 함수.
setScrollLeft(left): 그리드의 가로 스크롤 위치를 left 값만큼(px) 이동하는 함수.
setScrollTop(top): 그리드의 세로 스크롤을 감싸는 div의 스타일의 top을 top 값으로 설정하는 함수.
setSortable(headerId, sortable): headerId에 해당하는 컬럼의 sortable 속성을 동적으로 설정하는 함수.
setStartRowNumber(rowIndex): rowNum 컬럼에 표현되는 행번호의 시작되는 숫자의 index를 rowIndex 값으로 설정하는 함수.
setStyleAll(styleObj): 그리드의 스타일을 지정하는 함수.
setSubtotalVisible(flag): subtotal을 숨기거나 다시 표시하는 함수.
setSummary(str): gridView의 HTML summary 속성값을 설정하는 함수.
setTopRowIndex(topRowIndex, noEvent, autoFocus): 세로 스크롤의 위치를 옮겨 topRowIndex에 해당하는 row가 첫번째 row에 보여지도록 설정하는 함수.
setUseFilter(colId, flag): gridView 특정 header의 useFilter 속성을 동적으로 변경하는 함수.
setUseFilterList(flag): gridView의 useFilterList 속성을 동적으로 제어하는 함수.
setVisibleRowNum(rowCount): visibleRowNum을 동적으로 설정하는 함수.
showChooseOption(colIndex, chooseOption): gridView 컬럼의 inputType이 select일 때 selectbox의 chooseOption 속성 설정하는 함수.
showCustomFilter2(headerID): 사용자 필터를 지정할 수 있는 ""사용자 지정 필터"" 팝업 창을 표시하는 함수.
showCustomFilterReset(): 사용자 필터를 초기화시킬 수 있는 버튼을 출력하는 함수.
showGroupbyZone(): groupbyZone 영역을 다시 표시하는 함수.
spanAll(openFlag): drilldown을 사용하는 gridView에서 전체 데이터를 모두 펼치거나 모두 접는 기능을 하는 함수.
toggle(rowIndex): drilldown을 적용한 경우 rowIndex에 해당하는 행에 drilldown을 토글링하는 함수.",530
870,"WebSquare.uiplugin.treeview는 계층형 데이터를 Tree 형태로 출력하는 컴포넌트이다. 각 노드에 체크박스와 아이콘을 추가할 수 있으며, 마우스 드래그-앤-드롭을 통한 데이터(노드) 교환을 지원한다. 컴포넌트의 속성으로는 웹접근성 모드의 사용 여부, 초기에 child 노드를 전부 표현할지의 여부, 노드의 Depth가 설정값보다 작은 노드만 먼저 그릴지의 여부 등이 있다. 또한, 이벤트와 메소드를 제공하며, 사용자 정의 데이터 속성도 설정 가능하다.",210
871,"주어진 함수들은 웹스퀘어 컴포넌트에서 사용되는 함수들이다. 이 함수들은 주어진 인자를 기반으로 노드를 찾거나, 노드의 정보를 반환하거나, 노드의 속성을 설정하는 등의 역할을 한다. 이 함수들은 각각의 기능에 따라 이름이 지정되어 있으며, 사용자가 원하는 기능에 따라 해당 함수를 호출하여 사용할 수 있다. 또한, 이 함수들은 각각의 인자를 받아 처리하며, 이를 통해 원하는 결과를 얻을 수 있다. 이 함수들은 웹스퀘어 컴포넌트의 다양한 기능을 구현하는 데에 사용된다.",212
872,"dataType는 데이터의 포맷이 tree 형태인지 list 형태인지를 정의한다. DataCollection으로 적용할 경우 listed로 설정한다. defaultImage 노드에 보여질 기본 아이콘의 이미지 경로를 설정한다. disabled 컴포넌트는 비활성화 여부를 설정한다. dynamicAppend는 동적 트리 추가 사용 여부를 설정한다. escape는 <>&""를 HTML Escape 문자로 변환하여 화면에 표시할지 여부를 설정한다. expandedImage는 노드(폴더)가 확장되었을 때의 이미지 경로를 설정한다. falseValue는 chckbox의 false 값이다. hierarchy는 하위 노드가 선택되었을 때, 상위 노드를 체크할지 여부를 설정한다. id는 컴포넌트 ID를 설정한다. labelclass는 노드의 label에 적용할 class명을 설정한다. lineShow는 노드 사이에 선을 적용할 지의 여부를 설정한다. moveSibling은 moveNode API 사용시에 bAppendChild가 false일 때, srcIndex노드의 자식 노드도 같이 이동시킬지 여부를 설정한다. refreshCheckboxDisableModel은 checkbox의 disable이 변경된 경우 model 영역에 실시간 반영할지 여부를 설정한다. renderType은 treeView를 렌더링하는 방식을 설정한다. rowHeight는 트리 노드의 높이 값을 설정한다. scrollFix는 노드를 click할 경우 포커스를 주지 않도록 하여 스크롤을 고정시킬지(true), 해당 노드에 포커스를 주어 스크롤이 움직이게 할지(false)의 여부를 설정한다. showCheckbox는 노드에 checkbox의 표시 여부를 설정한다. showTreeDepth는 초기 로딩시 확장되어 보여질 노드의 depth값을 설정한다. tabIndex는 Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서를 설정한다. title은 마우스 오버 시, title로 저장한 값이 툴팁으로 표시되는 HTML의 title 속성과 동일하다. toggleButtonEvent는 toggleButton(toggleImage)을 마우스로 클릭할 때 toggle할 것인지, 또는 마우스를 누르는 순간 바로 toggle될 것인지를 설정한다. toggleEvent는 노드에 마우스 이벤트를 적용하여 리스트를 펼치고 접을 때의 적용하고자 하는 이벤트를 설정한다. tooltip은 사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트를 설정한다. tooltipClass는 툴팁에 적용할 스타일 class를 설정한다. tooltipDisplay는 노드의 label이 화면에 다 보여지지 않을 경우 해당 label을 tooltip으로 표현할지의 여부를 설정한다. tooltipFormatter는 tooltipDisplay 속성이 true일 때 데이터를 표현 할 tooltip의 내용을 변경할 사용자 함수명을 설정한다. tooltipGroupClass는 tooltip에 w2group 스타일을 포함시킬지(true)의 여부를 설정한다. tooltipLocaleRef는 tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key를 설정한다. tooltipShowAlways는 데이터에 대한 tooltip을 마우스 over 시 항상 보여줄지에 대한 여부를 설정한다. tooltipTime은 툴팁 표시 시간을 설정한다. trueValue는 checkbox의 true 값이다. useDrag은 drag의 사용 여부를 설정한다. useHirarchySelect는 하위 노드를 선택했을 때 상위 노드도 같이 선택할지의 여부를 설정한다. userData1, userData2, userData3는 사용자 정의 데이터 속성을 설정한다. onchange는 선택된 노드가 변경될 경우 발생하는 이벤트이다. oncheckboxclick는 checkbox가 클릭된 경우 발생하는 이벤트이다. onclick는 label, checkbox, icon, toggle 버튼(+,-버튼)을 클릭했을 때 발생하는 이벤트이다. ondblclick는 label을 더블클릭했을 때 발생하는 이벤트이다. ondragleave는 useDrag 속성이 true이고 drag하는 도중에 마우스 위치가 노드의 순수 label 영역(icon 영역 미포함)을 벗어난 경우 발생하는 이벤트이다. ondragover는 useDrag 속성이 true이고 drag하는 도중에 마우스의 위치가 노드의 위에 있을 때 발생하는 이벤트이다. ondrop은 useDrag 속성이 true이고 다른 treeview의 노드가 drag되어 본 treeview의 노드 위에서 drop 되었을 때 발생하는 이벤트이다.",1312
873,"TreeView 이벤트와 메소드
dragNode: drag 중인 TreeView의 노드 정보를 담은 객체
- dragNode.label: drag된 노드의 label
- dragNode.value: drag된 노드의 value
- dragNode.depth: drag된 노드의 depth
- dragNode.element: drag된 노드의 element 객체
dropNode: drop된 위치에 해당하는 TreeView의 노드 정보를 담은 객체
- dropNode.label: drop된 노드의 label
- dropNode.value: drop된 노드의 value
- dropNode.depth: drop된 노드의 depth
- dropNode.element: drop된 노드의 element 객체
dragControlTreeView: drag가 발생한 TreeView 객체
dropControlTreeView: drop된 위치에 해당하는 TreeView 객체
oneditend: 레이블 편집모드를 종료한 직후에 발생하는 이벤트
- info: 편집 전/후의 레이블값과 편집 대상이 된 노드의 index 정보를 담은 객체
- info.index: 편집 대상이 되는 node의 index
- info.oldValue: 편집 전의 label값
- info.newValue: 편집 후의 label값
onimageclick: 노드의 icon을 클릭한 경우 발생하는 이벤트
- value: 클릭된 노드의 value
- node: 클릭된 node object
- node.checked: checkbox의 check 여부
- node.depth: 노드의 depth
- node.depthIndex: 부모 노드를 기준으로 한 index
- node.index: 전체 노드를 기준으로 한 index
- node.label: 노드의 label
- node.value: 노드의 value
- node.parentNode: 부모 노드 객체
- index: 클릭된 노드의 index 문자열
onlabelclick: 노드의 label을 클릭한 경우 발생하는 이벤트
- value: 클릭된 노드의 value
- node: 클릭된 node object
- node.checked: checkbox의 check 여부
- node.depth: 노드의 depth
- node.depthIndex: 부모 노드를 기준으로 한 index
- node.index: 전체 노드를 기준으로 한 index
- node.label: 노드의 label
- node.value: 노드의 value
- node.parentNode: 부모 노드 객체
- index: 클릭된 노드의 index 문자열
onlabelover: TreeView label에 마우스를 올렸을 때 발생하는 이벤트
- index: 마우스를 올린 노드의 index 문자열
- node: 클릭된 node object
- node.checked: checkbox의 check 여부
- node.depth: 노드의 depth
- node.depthIndex: 부모 노드를 기준으로 한 index
- node.index: 전체 노드를 기준으로 한 index
- node.label: 노드의 label
- node.value: 노드의 value
- node.parentNode: 부모 노드 객체
- value: 마우스를 올린 노드의 value 문자열
onrightbuttonclick: 노드의 영역에서 마우스 오른쪽 버튼이 클릭된 경우 발생하는 이벤트
- node: 오른쪽 버튼 클릭이 발생한 위치에 해당하는 node
- node.checked: checkbox의 check 여부
- node.depth: 노드의 depth
- node.depthIndex: 부모 노드를 기준으로 한 index
- node.index: 전체 노드를 기준으로 한 index
- node.label: 노드의 label
- node.value: 노드의 value
- node.parentNode: 부모 노드 객체
- leftPosition: 클릭된 마우스 좌표의 left(x)값
- topPosition: 클릭된 마우스 좌표의 top(y)값
ontoggleclick: toggle 이미지(아이콘)이 클릭된 경우 발생하는 이벤트
- node: 클릭된 node object
- node.checked: checkbox의 check 여부
- node.depth: 노드의 depth
- node.depthIndex: 부모 노드를 기준으로 한 index
- node.index: 전체 노드를 기준으로 한 index
- node.label: 노드의 label
- node.value: 노드의 value
- node.parentNode: 부모 노드 객체
- index: 클릭된 노드의 index 문자열
- isRendered: 하위 노드의 렌더링 유무
addClass(className): 컴포넌트에 CSS class를 추가하는 메소드
- className: 추가할 class의 이름
appendData(index, xmlArray): index에 해당하는 노드 하위에 사용자 데이터를 기반으로 노드를 추가하는 메소드
- index: 노드의 index
- xmlArray: 추가할 노드의 XML 데이터가 담긴 1차원 배열
appendNode(parentNode, childNode): parentNode 하위에 childNode를 추가하는 메소드
- parentNode: 기준 Node
- childNode: 추가할 Node
※ dynamicAppend 속성이 true로 설정되어야 함
onviewchange: 키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생하는 이벤트
- info: 이전/현재 노드의 객체를 포함한 JSON을 반환
- info.oldNode: 이전 노드의 객체 (index, label, value, checked 등의 정보를 담고 있음)
- info.newNode: 현재 선택된 노드의 객체 (index, label, value, checked 등의 정보를 담고 있음)",1451
874,"TreeView에서 노드(항목)를 추가, 삭제, 변경, 선택, 확장, 접기, checkbox 설정 등을 할 수 있는 API들을 설명하고 있다. 또한, 이벤트 핸들러 함수를 동적으로 할당하거나, class를 변경하는 API도 제공한다. 예제 코드를 통해 각 API의 사용법을 설명하고 있다.",100
875,"treeview1.expandNode(""menu1-2"", true);는 초기 로딩 시 설정된 index를 기반으로 노드를 반환하고, 두 번째 인자가 true인 경우 해당 노드를 선택합니다. findNodeByIndex(index, select)는 index를 기반으로 노드를 반환하며, 두 번째 인자가 true인 경우 해당 노드를 선택합니다. findNodeByValue(value, select)는 value를 기반으로 노드를 찾아서 해당 노드를 반환하며, 두 번째 인자가 true인 경우 해당 노드를 선택합니다. focus()는 웹스퀘어 컴포넌트에 포커스를 줍니다. getCheckedIndexes(options)는 checkbox가 체크된 노드들의 index를 배열에 담아 반환합니다. getCheckedLabels(options)는 checkbox가 체크된 노드들의 label을 배열에 담아 반환합니다. getCheckedNodes(options)는 checkbox가 체크된 노드들을 배열에 담아 반환합니다. getCheckedValues(options)는 checkbox가 체크된 노드들의 value를 배열에 담아 반환합니다. getChildNodes(value, hierarchy)는 value에 해당하는 node의 자식 node들을 반환합니다. getDataListInfo()는 컴포넌트와 바인딩된 DataList를 반환합니다. getDisabled()는 현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환합니다. getGenerator()는 컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환합니다. getID()는 웹스퀘어 컴포넌트의 ID를 반환합니다. getInitStyle(CSS)는 컴포넌트의 초기 스타일을 반환합니다. getLastChildIndex(srcIndex)는 srcIndex에 해당하는 노드의 최종 자식 노드의 index를 반환합니다. getOpacity()는 웹스퀘어 컴포넌트의 불투명도를 반환합니다. getOriginalID()는 웹스퀘어 컴포넌트의 originalID를 반환합니다.",546
876,"- 웹스퀘어 컴포넌트의 공통 함수들을 설명하고 있다.
- originalID는 Scope 기능을 사용할 경우 존재하며, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + ""_"")가 추가되는 방식으로 변경된다.
- getParentValue 함수는 value를 기반으로 부모 노드를 찾아 value를 반환한다.
- getPluginName 함수는 웹스퀘어 컴포넌트의 이름(pluginName)을 반환한다.
- getPosition 함수는 웹스퀘어 컴포넌트의 위치(left, top)를 반환한다.
- getReadOnly 함수는 현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환한다.
- getScope 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환한다.
- getScopeWindow 함수는 scope=""true""인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환하며, 아닌 경우 전역 window 객체를 반환한다.
- getSelectedIndex 함수는 선택된 노드의 index(초기 로딩시 설정 된 값)를 반환한다.
- getSelectedLabel 함수는 선택된 노드의 label을 반환한다.
- getSelectedNode 함수는 선택된 노드객체를 반환한다.
- getSelectedValue 함수는 선택된 노드의 value를 반환한다.
- getSize 함수는 웹스퀘어 컴포넌트의 크기(width, height)를 반환한다.
- getStyle 함수는 웹스퀘어 컴포넌트의 CSS 속성 값을 반환한다.",449
877,"함수명typerequireddescription 
styleStringY반환하려는 CSS 속성. 
getTitle( )String컴포넌트의 title 속성 값을 반환. 
getUdcHome( )StringUDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. 
getUdcRoot( )StringUDC 객체가 자신을 정의한 UDC 파일 경로를 반환. 
getUserData(key)StringsetUserData로 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. 
getXPathByValue(value)Stringvalue에 해당하는 노드의 XPath를 반환한다. 
hasClass(className)Boolean웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. 
hide( )-웹스퀘어 컴포넌트를 화면에서 숨김. 
isLeaf( )Boolean선택된 노드가 leaf인지(자식노드가 없는지)의 여부를 반환한다. 
isOpen(index)Nodeindex에 상응하는 노드가 열려있는지 닫혀있는지 여부를 반환한다. 
notifyDataChanged( )-treeview와 dataList를 전체적으로 동기화한다. 
emoveClass(className)-웹스퀘어 컴포넌트에서 class를 삭제. 
emoveNode(node)-노드 객체를 기반으로 노드(자식노드 포함)를 삭제한다. 
emoveNodeList(nodeList)-노드 객체를 기반으로 다건의 노드(자식노드 포함)를 삭제한다. 
setCustomFormatter(userFunction)-사용자가 지정한 함수를 treeview의 node를 돌면서 각각 한번씩 호출합니다. 
setEventPause(evList, flag)-지정한 이벤트를 중단함.",478
878,"input1.setEventPause(""onclick"", true); // (예제 2) // onfocus 및 onblur 이벤트의 중단을 해제. input1.setEventPause(""onfocus,onblur"", false); // (예제 3) // input1에 등록된 모든 사용자 이벤트를 중단. input1.setEventPause(null, true); 
setInitStyle( property ) : 컴포넌트의 초기 스타일을 복구한다. 
setLabelByIndex( index , label ) : 노드의 index를 기반으로 label을 변경한다. 
setLabelByValue( value , label ) : 노드의 value를 기반으로 label을 변경한다. 
setLabelStyle( index , styleName , styleValue , applyChildNodes ) : 해당 node의 label style을 변경한다. 
setNodeSet( nodeset , columnInfo ) : treeView와 연동된 dataList를 다른 dataList로 변경한다. 
setOpacity( value ) : 웹스퀘어 컴포넌트의 불투명도를 설정한다. 
setPosition( left , top , mode ) : 웹스퀘어 컴포넌트의 위치(left, top)를 설정한다. 
setReadOnly( readOnly ) : 웹스퀘어 컴포넌트의 readOnly 속성을 설정한다. 
setShowCheckBox( ) : showCheckbox 값을 동적으로 설정한다. 
setSize( width , height ) : 웹스퀘어 컴포넌트의 크기(width, height)를 설정한다. 
setStyle( propertyName , value ) : 웹스퀘어 컴포넌트의 CSS 속성을 설정한다. 
setUserData( key , value ) : 웹스퀘어 컴포넌트에 임의의 데이터를 설정한다. 
setValueByIndex( index , value ) : 노드의 index 기반으로 value을 변경한다. 
show( displayType ) : 웹스퀘어 컴포넌트를 화면에 표시한다. 
spanAll( openCloseFlag ) : openCloseFlag에 따라서 모든 자식 노드를 span시켜 준다. 
spanNode( nodeIndex , openCloseFlag , applyChildNodes ) : 옵션에 해당하는 node를 span시켜 준다.",565
879,"treeview1.spanNode(nodeIndex, openCloseFlag, applyChildNodes) : 트리뷰에서 특정 노드를 접거나 확장할 때 사용하는 함수. nodeIndex는 노드의 인덱스, openCloseFlag는 노드를 접을지 확장할 지의 여부, applyChildNodes는 자식 노드까지 같이 확장할 지의 여부를 나타낸다. nodeDepth를 사용하여 깊이에 따른 노드 접기/확장도 가능하다.
toggleClass(className) : 웹스퀘어 컴포넌트에서 특정 class를 추가하거나 제거할 때 사용하는 함수. className은 추가/삭제할 class를 나타낸다. removeDefaultClass 설정을 추가하여 컴포넌트의 속성으로 직접 정의된 class를 삭제할 수 있다.
trigger(type, array) : 컴포넌트에서 특정 이벤트를 발생시킬 때 사용하는 함수. type은 발생시킬 이벤트, array는 이벤트 핸들러에 전달할 파라미터 배열을 나타낸다.
unbind(type, function) : 컴포넌트에서 이벤트를 제거할 때 사용하는 함수. type은 제거할 이벤트, function은 제거할 이벤트의 핸들러 함수를 나타낸다. type과 function을 모두 생략하면 해당 컴포넌트의 모든 이벤트를 제거한다.
visible(flag) : [deprecated] show/hide 혹은 setStyle 사용을 권장한다. 엔진 내부적으로 CSS visibility 속성을 설정한다. flag는 설정할 CSS visibility 속성 값으로, true는 visibility: visible, false는 visibility: hidden을 나타낸다.",467
880,"TableLayout 컴포넌트는 <colgroup>, <tr>, <td>, <th> 태그를 추가하여 <table> 태그로 묶은 형태의 컴포넌트입니다. adaptivetagname 속성은 적응형 웹 모드를 설정하며, adaptiveThreshold 속성은 레이아웃 변경을 위한 breakpoint를 설정합니다. tableLayout 컴포넌트를 생성하려면 palet창에서 클릭하면 생성 대화창이 뜨며, th 및 td를 선택한 후 엔터를 누르면 textbox처럼 직접 입력 가능한 대화창이 나옵니다. td 영역에 컴포넌트를 그리려면 inputbox를 드래그해서 td 그룹에 넣으면 됩니다. 셀 병합은 Ctrl을 누르고 선택하거나 component 창에서 해당 그룹을 멀티 선택한 후 마우스 오른쪽을 눌러 셀 병합을 선택합니다. Table 컬럼의 가로 값은 colgroup 안 col의 style에 width=""가로값""을 수정하여 맞춰주면 됩니다.",314
881,"Span27 컴포넌트는 HTML span 태그와 같은 역할을 하며, Span27.Span27.1SpanText를 출력합니다. 이 컴포넌트는 Textbox와 유사한 기능을 가지고 있지만, tagname 속성은 포함되어 있지 않습니다. 이 컴포넌트는 접근성과 상관없이 사용할 수 있습니다.",109
882,"SelectBox26.SelectBox26.1SelectBox는 “component”, “native”, “select” 세 가지 renderType 속성을 지원합니다. renderType 속성값에 따라 사용법이 달라지며, 각각의 속성값에 대한 접근성 지침이 있습니다. renderType=”component”와 tableRender=”ul” 속성을 함께 사용하면 드롭다운 목록형태의 리스트(ul, li)태그로 랜더링되어 css3의 appearance 속성을 지원하지 않는 브라우저에서도 동일한 디자인을 적용할 수 있습니다. renderType=”native”는 모든 브라우저 환경에서 완벽하게 동일한 모양과 기능을 제공하며 label이나 title 속성을 제공한다면 접근성 지원에도 전혀 문제가 없습니다. renderType=”select”는 일반적인 selectbox와 동일하게 렌더링됩니다. 모든 renderType에서 포커스 상태의 테두리(outline)가 명확하게 나타나는지, selectbox에 대응하는 title 또는 label을 제공하고 있는지, Onchange, onViewChange 등의 이벤트에 사용자가 의도하지 않은 동작이 실행되지 않는지 확인해야 합니다.",364
883,"Tag 컴포넌트는 웹스퀘어5에서 html을 직접 사용할 수 있도록 지원합니다. Tag 컴포넌트는 데이터를 바인딩하지 않고 사용자가 지정한 tagName을 그대로 by pass 해주는 방식입니다. 따라서 데이터 바인딩이 필요한 경우에는 다른 컴포넌트와 함께 사용해야 합니다. Tag 컴포넌트는 Source 편집기로 이동하여 직접 Attribute를 입력해야 하며, 개발자가 파싱된 컴포넌트에 대해 핸들링이 되지 않아 사용시 개발자 혹은 기술지원 담당자와 상의해야 합니다. Form 태그는 화면에 보여져야 할 경우가 적기에 Source 편집기에서 직접 코딩하여도 상관이 없습니다. 하지만 웹 표준 및 접근성과 같은 이유로 form 태그 안에 hidden이 아닌 InputBox와 같은 폼 요소의 컴포넌트를 사용해야 할 시에는 Tag 컴포넌트를 사용하여 Design View에 반영이 되게끔 코딩합니다. Tag 컴포넌트를 사용하지 않고 코딩을 하게 되면 소스를 직접 보지 않고서는 Design View와 Component View에 반영이 되지 않아 유지보수에 어려움이 있을 수 있습니다.",407
884,"웹 디자인은 반응형(RWD)과 적응형(AWD)으로 구분됩니다. 적응형은 구현이 복잡하고 개발 기간이 길지만, RWD에 비해 더 많은 장점을 제공합니다. WebSquare5는 간단한 속성 설정으로 적응형 웹 디자인을 구현할 수 있습니다. 적응형은 디자인을 장치 종류와 OS에 따라 실시간으로 변경하며, 초기 디자인 작업이 용이하고 유지보수가 용이합니다. 하지만 디자인이 복잡할 경우 모바일 환경에서 가독성이 떨어질 수 있으며, 웹 사이트의 서비스 속도에 영향을 줄 수 있습니다. 예제 파일을 다운로드하여 적용할 수 있으며, GridView, TabControl, TableLayout 컴포넌트에서 적용 가능합니다.",277