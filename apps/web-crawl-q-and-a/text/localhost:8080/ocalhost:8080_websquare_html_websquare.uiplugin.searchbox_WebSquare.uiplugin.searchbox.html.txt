


WebSquare.uiplugin.searchbox 









PropertyEventMethod찾아보기

WebSquare.uiplugin.searchbox - 5.0_5.4826M.20230213.171915





서치 박스. InputBox의 확장 컴포넌트.
 우측에 텍스트 삭제용 "X" 아이콘을 표시.
 InputBox와 동일한 기능을 제공. 
 우측의 "X" 아이콘은 텍스트가 입력된 경우에만 표시됨.
 (주의!)
 IE10 이상의 브라우저는 HTML <input> 태그에 "X" 아이콘을 기본적으로 제공. 
 "X" 아이콘의 이중 표시를 막으려면 아래와 같이 브라우저의 "X" 아이콘을 해제해야 함.
 (브라우저의 "X" 아이콘 해제를 위한 CSS 예시)
 (예시 1) input[type=text]::-ms-clear { display: none; } 
 (예시 2) ::-ms-clear { display: none; }
 본 컴포넌트의 최상위는 HTML <input> 태그를 사용.

Type


uiplugin

Property Summary




allowChar

허용 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다



alwaysRefresh

바인딩된 DataList의 값이 바뀔 경우, SearchBox의 값도 즉시 갱신



applyFormat

[default:display, all] formated 된 value의 값의 적용 범위로 all의 경우, value와 display된 값이 동일하게 적용되며 입력하는 동안에 format이 적용된다.



ariaLabel

접근성을 위해 컴포넌트에 aria-label 제공



class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.



dataType

컴포넌트 value의 data type. [default: text, number, date, time, bigDecimal]



dateMask

dataType이 date일 경우에만 적용되며 display 할 format을 정의한다. 예시)yyyy-MM-dd, yyyy.MM.dd



disabled

[default:false, true] 컴포넌트 비활성 여부



displayFormat

엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며 excel의 서식을 적용하는 방식처럼 value의 format을 적용 할 수 있다.



displayFormatter

컴포넌트의 value를 포맷하는 함수 명. 



displaymessage

[default:false, true] validate API의 검증 결과가 실패일 경우, 결과 메세지를 표시.



editType

[default:focus, select] 사용자가 컴포넌트 클릭 시 결과 동작 지정



id

컴포넌트 ID. 



ignoreChar

무시 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다



invalidMessage

validate API의 검증 결과가 실패일 경우 표시할 메시지. displaymessage="true"일 경우만 유효.



invalidMessageFunc

validate API의 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름. 



mandatory

[default:false, true] 필수 선택 적용 여부. validate 함수를 통해 입력값을 검증할 경우 필수 입력을 확인. 
 (옵션 설명)
 "false" (기본 값) 필수 선택 적용하지 않음. 
 "true" 필수 선택 적용. </xmp></xmp>



maxByteLength

입력 가능한 최대 Byte길이로 엔진에서 maxByteLength 이상의 글자를 입력하면 자동으로 잘라낸다.



maxlength

입력 가능한 최대길이로 엔진에서 maxLength 이상의 글자를 입력하면 자동으로 잘라낸다.



minByteLength

validate API를 호출 할 때 엔진에서 최소 Byte길이 체크 시에 참조한다.



minlength

validate API를 호출 할 때 엔진에서 최소길이 체크 시에 참조한다



nextTabID

Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID



onFocusClass

onFocus시 적용할 class명



preventCopyPaste

[default:false, true]컴포넌트의 value에 대해 copy&paste 방지 여부



readOnly

[default:false, true]readonly의 여부로 HTML의 readonly속성과 동일한 기능을 제공한다



readOnlyClass

readOnly 상태 일때 적용할 class명



ref

DataCollection의 value 경로. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용. 



refSync

SearchBox가 ref와 연동된 경우, key가 입력되는 즉시 ref를 갱신. [default:false, true]



resetBtnAriaLabel

접근성을 위해 컴포넌트의 resetButton에 aria-label 제공



resetButtonDisplay

[default:show] focus 여부에 따라 resetButton의 display를 설정할 수 있다



tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. 



timeMask

dataType이 time일 경우에만 적용되며 display 할 format을 정의한다. 예시)hh:mm:ss



title

HTML의 title 속성과 동일



tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트



tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.



userData1

사용자 정의 데이터 속성



userData2

사용자 정의 데이터 속성



userData3

사용자 정의 데이터 속성



validator

유효성 체크 함수 이름.



Event Summary




onblur

포커스를 잃었을 때 발생한다



onchange

component의 value가 변경되었을 때 발생하는 이벤트로 focus out 시점에 발생한다.



onclick

마우스로 component를 클릭했을 때 발생한다



ondblclick

마우스로 component를 더블 클릭했을 때 발생한다



onfocus

포커스를 얻었을 때 발생한다



onkeydown

키보드에서 키를 눌렀을 때 발생한다



onkeypress

키보드에서 키를 눌렀을 때(누르고 있는 동안에도) 발생한다



onkeyup

키보드에서 키를 눌렀다 놓았을 때 발생한다



onmousedown

마우스를 클릭 했을 때(마우스를 누르는 순간) 발생한다



onmousemove

마우스 포인터가 이동될 때 발생한다



onmouseout

마우스가 지정된 영역이나 링크 위에서 벗어났을 때 발생한다



onmouseover

마우스가 지정된 영역이나 링크 위에 놓일 때 발생한다



onmouseup

마우스 버튼을 눌렀다 놓을 때 발생한다



onresetclick

searchbox의 reset버튼을 눌렀을 때 발생한다



onviewchange

키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생.


Method Summary




addClass(
									  className
										)
								

컴포넌트에 CSS class를 추가



bind(
									  eventType
									       , 
									       function
										)
								

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당



changeClass(
									  oldClassName
									       , 
									       newClassName
										)
								

웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) 



commit(
									  
										)
								

searchboxt이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수 



focus(
									  
										)
								

컴포넌트로 포커스를 이동



getDataListInfo(
									  
										)
								

컴포넌트와 바인딩된 DataList를 반환



getDataType(
									  
										)
								

dataType 속성 값을 반환



getDisabled(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환



getDisplayFormat(
									  
										)
								

현재 컴포넌트에 설정 된 displayFormat을 반환한다



getDisplayFormatter(
									  
										)
								

현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다



getDisplayValue(
									  
										)
								

현재 보여지는(format이 적용 된) 값을 반환한다



getFormattedValue(
									  
										)
								

formatted된 searchbox의 값을 반환한다



getGenerator(
									  
										)
								

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환



getID(
									  
										)
								

웹스퀘어 컴포넌트의 ID를 반환



getInitStyle(
									  CSS
										)
								

컴포넌트의 초기 스타일을 반환



getOpacity(
									  
										)
								

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)



getOriginalID(
									  
										)
								

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)



getPluginName(
									  
										)
								

웹스퀘어 컴포넌트의 이름(pluginName)을 반환



getPosition(
									  positionName
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 



getReadOnly(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환



getScope(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  



getScopeWindow(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)



getSize(
									  sizeName
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) 



getStyle(
									  propertyName
										)
								

웹스퀘어 컴포넌트의 CSS 속성 값을 반환



getStyleValue(
									  style
										)
								

[deprecated]



getTitle(
									  
										)
								

컴포넌트의 title 속성 값을 반환



getUdcHome(
									  
										)
								

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)



getUdcRoot(
									  
										)
								

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)



getUserData(
									  key
										)
								

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환



getValue(
									  
										)
								

컴포넌트의 value를 반환한다



hasClass(
									  className
										)
								

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인



hide(
									  
										)
								

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)



removeClass(
									  className
										)
								

웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)



setDisabled(
									  disabled
										)
								

웹스퀘어 컴포넌트의 disabled 속성을 설정



setDisplayFormat(
									  format
										)
								

컴포넌트의 displayFormat 속성을 설정한다



setDisplayFormatter(
									  formatter
										)
								

컴포넌트의 displayFormatter 속성을 설정한다



setEventPause(
									  evList
									       , 
									       flag
										)
								

지정한 이벤트를 중단함



setInitStyle(
									  property
										)
								

컴포넌트의 초기 스타일을 복구한다



setOpacity(
									  value
										)
								

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)



setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 설정



setReadOnly(
									  readOnly
										)
								

웹스퀘어 컴포넌트의 readOnly 속성을 설정



setRef(
									  ref
										)
								

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함.



setSize(
									  width
									       , 
									       height
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 설정



setStyle(
									  propertyName
									       , 
									       value
										)
								

웹스퀘어 컴포넌트의 CSS 속성을 설정



setUserData(
									  key
									       , 
									       value
										)
								

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 



setValue(
									  value
										)
								

컴포넌트의 value를 설정



show(
									  displayType
										)
								

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)



toggleClass(
									  className
										)
								

웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)



trigger(
									  type
									       , 
									       array
										)
								

컴포넌트에서 특정 이벤트를 발생시킴



unbind(
									  type
									       , 
									       function
										)
								

컴포넌트에서 이벤트를 제거



validate(
									  
										)
								

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행



visible(
									  flag
										)
								

[deprecated] 



Property Detail




allowChar

허용 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다.


alwaysRefresh

바인딩된 DataList의 값이 바뀔 경우, SearchBox의 값도 즉시 갱신.[default:false, true] 
(옵션 설명)
 "true" 즉시 갱신. 
 "false" (기본 값) 즉시 갱신하지 않음.


applyFormat

[default:display, all] formated 된 value의 값의 적용 범위로 all의 경우, value와 display된 값이 동일하게 적용되며 입력하는 동안에 format이 적용된다.display의 경우, 입력이 종료될때 format 적용


ariaLabel

접근성을 위해 컴포넌트에 aria-label 제공. 미입력시 "검색서식"이 해당 값에 기입.


class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.Engine 내부에서 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어 가능.


dataType

컴포넌트 value의 data type. [default: text, number, date, time, bigDecimal]해당 값은 엔진에서 제공하는 displayFormat등의 속성에서 참조.


dateMask

dataType이 date일 경우에만 적용되며 display 할 format을 정의한다. 예시)yyyy-MM-dd, yyyy.MM.dd사용자의 입력 순서가 format와 다른 경우 ioFormat을 함께 적용한다.


disabled

[default:false, true] 컴포넌트 비활성 여부. 
 (옵션 설명)
 "false" (기본 값) 컴포넌트를 비활성화 하지 않음. 
 "true" 컴포넌트를 비활성화 함.


displayFormat

엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며 excel의 서식을 적용하는 방식처럼 value의 format을 적용 할 수 있다.displayFormatter와 동시적용이 불가하다.예시)dateType이 number일 경우 #,###.#0 으로 적용하면 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현된다.


displayFormatter

컴포넌트의 value를 포맷하는 함수 명. 해당 함수는 엔진에서 파라미터로 넘겨준 value에 대해 포매팅을 수행한 후, 화면에 표현할 최종 값을 반환함. 
(예시)
 전역 스크립트에 function fn_inputFormat (tmpVal){ return tmpVal+" 님" }; 을 정의
 본 속성을 displayFormatter="fn_inputFormat"으로 설정.


displaymessage

[default:false, true] validate API의 검증 결과가 실패일 경우, 결과 메세지를 표시.기본적으로 Engine에서 정의된 메세지가 표현됨. 단, invalidMessageFunc 속성을 이용하면 별도의 메시지를 정의 가능. 
(관련 API)
 validate();


editType

[default:focus, select] 사용자가 컴포넌트 클릭 시 결과 동작 지정. 
 (옵션 설명)
 "select" (기본 값) 포커스가 발생할 때 선택된 텍스트를 선택.  
 "focus" 텍스트의 맨 끝으로 커서를 이동.


id

컴포넌트 ID. 컴포넌트 ID는 전역 객체로 할당됨. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능.


ignoreChar

무시 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다.


invalidMessage

validate API의 검증 결과가 실패일 경우 표시할 메시지. displaymessage="true"일 경우만 유효.invalidMessageFunc과 동시 적용 불가.
(관련 API)
 validate();
 displaymessage="true"
 invalidMessageFunc 속성과 동시 적용 불가.


invalidMessageFunc

validate API의 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름. displaymessage="true"일 경우만 유효. invalidMessage와 동시 적용 불가. 
(사용자 정의 함수 예)
 // 아래 type에 대한 검증 실패 시, 메시지를 동적으로 생성하는 예.
 // mandatory, allowChar, ignoreChar, minLength, maxLength, minByteLength, maxByteLength

 function fn_msg(){ 
    var tmpType = checkbox1.getType(); 
    var tmpValue = checkbox1.getValue(); 
    if(tmpType == "mandatory")
        { return "필수 검증 항목입니다."; } 
    }
(관련 API)
 validate();
 displaymessage="true"
 invalidMessage 속성과 동시 적용 불가.


mandatory

[default:false, true] 필수 선택 적용 여부. validate 함수를 통해 입력값을 검증할 경우 필수 입력을 확인. 
 (옵션 설명)
 "false" (기본 값) 필수 선택 적용하지 않음. 
 "true" 필수 선택 적용. 
 (관련 함수)
 validate();


maxByteLength

입력 가능한 최대 Byte길이로 엔진에서 maxByteLength 이상의 글자를 입력하면 자동으로 잘라낸다.maxLength속성의 값과 본 속성에 지정한 값 중 더 작은 수가 우선 순위로 적용된다.config.xml 파일의 byteCheckEncoding 설정 값이 euc-kr이면 한글은 2byte로 utf-8이면 3byte로 계산한다.


maxlength

입력 가능한 최대길이로 엔진에서 maxLength 이상의 글자를 입력하면 자동으로 잘라낸다.maxByteLength속성의 값과 본 속성에 지정한 값 중 더 작은 수가 우선 순위로 적용된다.


minByteLength

validate API를 호출 할 때 엔진에서 최소 Byte길이 체크 시에 참조한다.config.xml 파일의 byteCheckEncoding 설정 값이 euc-kr이면 한글은 2byte로 utf-8이면 3byte로 계산한다.


minlength

validate API를 호출 할 때 엔진에서 최소길이 체크 시에 참조한다.


nextTabID

Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID.


onFocusClass

onFocus시 적용할 class명.


preventCopyPaste

[default:false, true]컴포넌트의 value에 대해 copy&paste 방지 여부.


readOnly

[default:false, true]readonly의 여부로 HTML의 readonly속성과 동일한 기능을 제공한다.


readOnlyClass

readOnly 상태 일때 적용할 class명.


ref

DataCollection의 value 경로. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용. "data:" prefix를 추가하여 data:[DataCollection ID].[Key id 또는 Column id] 형태로 지정해야 함. DataList와 바인딩된 경우, GridView에서 선택된 행의 값이 바인딩됨.
 (작성 예)
 data:dataMap1.deptInstance Data와 연동 할 경우 연동 할 XML 데이터의 XPath를 명시해야 함. 
 (작성 예)
 res/userInfo/dept/@value


refSync

SearchBox가 ref와 연동된 경우, key가 입력되는 즉시 ref를 갱신. [default:false, true]SearchBox가 DataMap과 ref로 연동되고 refSync="true"인 경우, onkeydown 이벤트에서 dataMap1.get("key1")를 실행하면 입력된 값이 그대로 반환됨.
옵션 설명)
 "true" 즉시 갱신. 
 "false" (기본 값) 즉시 갱신하지 않음. 
(제약사항) 
 Enter키와 Tab키만 지원하며, commit() API를 사용해야 함. 
 (예) searchbox1.commit();(버전 정보: 5.0_2.2777B.20170904.121217 버전에서 추가)


resetBtnAriaLabel

접근성을 위해 컴포넌트의 resetButton에 aria-label 제공. 미입력시 "입력내용 삭제"가 해당 값에 기입.


resetButtonDisplay

[default:show] focus 여부에 따라 resetButton의 display를 설정할 수 있다.
옵션 설명)
 "hide" 속성 자체를 숨김 처리한다.
 "show" (기본 값) focus 여부와 상관 없이 계속 reset 버튼이 보인다.
 "toggle" focus가 빠질때 reset버튼을 숨기고, focus가 들어오면 값이 존재하는 경우 reset버튼이 나타난다.


tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. HTML의 tabindex 속성과 동일.


timeMask

dataType이 time일 경우에만 적용되며 display 할 format을 정의한다. 예시)hh:mm:ss사용자의 입력 순서가 format순서와 다른 경우 ioFormat을 함께 적용한다.


title

HTML의 title 속성과 동일. 마우스 오버 시, title로 저장한 값이 툴팁으로 표시됨. 일반적으로 웹접근성 지원용으로 설정.


tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트. 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시.


tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.key에 해당하는 텍스트가 없을 경우 "global_undefined"가 화면에 표시됨.


userData1

사용자 정의 데이터 속성. getUserData("userData1") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData1");


userData2

사용자 정의 데이터 속성. getUserData("userData2") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData2");


userData3

사용자 정의 데이터 속성. getUserData("userData3") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData3");


validator

유효성 체크 함수 이름.컴포넌트에서 blur가 발생하는 시점에 본 속성에 정의한 함수가 실행됨. 즉, onblur 이벤트 이전에 실행되며, blur가 발생하는 시점에 유효성을 확인하며 return을 통해 value를 변경 할 수 있음.
(구현 예시)
 function fn_idValid(tmpVal){ //tmpVal에는 본 컴포넌트의 value값이 담겨있다. 
                              //sync로 동작하는 중복 ID 체크 submisison등을 호출하여 commObj.idCheck에 중복 여부값을 담는다. 
                              if(commObj.idCheck === true)
                                   { return tmpVal; }
                              else{ alert("중복 된 ID가 있습니다."); 
                                    return ""; } 
                             };





Event Detail




onblur

포커스를 잃었을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onchange

component의 value가 변경되었을 때 발생하는 이벤트로 focus out 시점에 발생한다.스크립트를 통해 값이 변경 된 경우에도 발생하며, 이전값/이후값을 비교 할 때는 onviewchage 이벤트를 사용한다.



onclick

마우스로 component를 클릭했을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





ondblclick

마우스로 component를 더블 클릭했을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onfocus

포커스를 얻었을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onkeydown

키보드에서 키를 눌렀을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onkeypress

키보드에서 키를 눌렀을 때(누르고 있는 동안에도) 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onkeyup

키보드에서 키를 눌렀다 놓았을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onmousedown

마우스를 클릭 했을 때(마우스를 누르는 순간) 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onmousemove

마우스 포인터가 이동될 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onmouseout

마우스가 지정된 영역이나 링크 위에서 벗어났을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onmouseover

마우스가 지정된 영역이나 링크 위에 놓일 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onmouseup

마우스 버튼을 눌렀다 놓을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onresetclick

searchbox의 reset버튼을 눌렀을 때 발생한다.

Parameter

nametypedescription


eObject이벤트 객체





onviewchange

키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생.스크립트를 통해 값이 변경된 경우에는 발생하지 않음. (native onchange 이벤트와 유사함.)

Parameter

nametypedescription


infoJSONoldValue, newValue를 포함한 JSON을 반환한다.
 info.oldValue : 이전 값
 info.newValue : 변경된 값


Sample
<![CDATA[
    var oldValue = info.oldValue;
    var newValue = info.newValue;
]]>



Method Detail




addClass(
									  className
										)
							

컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY추가할 class의 이름



Sample
// (예제)
// input1 컴포넌트에 oddClass라는 class를 추가    
input1.addClass("oddClass");


bind(
									  eventType
									       , 
									       function
										)
							

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


eventTypeStringY할당할 이벤트


functionFunctionY이벤트에 대한 핸들러 함수.



Sample
// (예제 1)
// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. 
input1.bind("onclick", function(e){ alert(input1.getValue();}));

// (예제 2)
// 미리 commObj.ev_click 함수를 정의.
var commObj = {};
commObj.ev_click = function(e){
    alert("click :: "+this.id);
};

// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. 
input1.bind("onclick", commObj.ev_click );


changeClass(
									  oldClassName
									       , 
									       newClassName
										)
							

웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) 기본적으로 addClass를 통해 추가된 class만 변경 가능. 웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. 
// config.xml에 아래 설정을 추가. 
<removeDefaultClass value="true" />


Parameter

nametyperequireddescription


oldClassNameStringY변경할 class


newClassNameStringY새로 사용할 class



Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.


// config.xml 파일에 아래를 추가.

    <removeDefaultClass value="true" />


// class를 변경 가능. 
// (tmpInputClass class를 tmpInputWarninClass로 변경.)
input1.changeClass("tmpInputClass","tmpInputWarninClass");


commit(
									  
										)
							

searchboxt이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수 모든키의 실시간 적용은 지원하지 않으며, Enter키와 tab키 동작일 경우만 사용가능


Sample

 scwin.searchbox_onkeydown = function(e) { 
    if((e.charCode || e.keyCode) === 13) { 
        searchbox.commit(); // searchbox에 현재 입력된 값을 dataMap1.key1에 반영한다. 이를 생략할 경우 key1값을 꺼냈을 때 searchbox에 입력되기 이전의 값을 얻게 된다. 
        dataMap1.get("key1");
    }
 }


focus(
									  
										)
							

컴포넌트로 포커스를 이동.


Sample

searchbox1.focus();


getDataListInfo(
									  
										)
							

컴포넌트와 바인딩된 DataList를 반환.



Return

typedescription


Objectnodeset, label, value id를 객체로 반환


Sample
// 사용 예
searchbox1.getDataListInfo();


getDataType(
									  
										)
							

dataType 속성 값을 반환. [default: text]



Return

typedescription


Stringsearchbox의 dataType


Sample
//아래와 같이 searchbox를 정의 된 경우


var returnValue = searchbox1.getDataType();
// (반환 예) "number"


getDisabled(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Booleandisabled 속성 값


Sample
// 컴포넌트의 disabled 속성 값 확인 예제
var returnValue = componentId.getDisabled();
// (반환 값 예시) false


getDisplayFormat(
									  
										)
							

현재 컴포넌트에 설정 된 displayFormat을 반환한다.



Return

typedescription


String현재 설정된 displayFormat


Sample
//dataType이 number이고 displayFormat을 #,###으로 적용 한 경우
var returnValue = searchBox1.getDisplayFormat();
//return 예시 ) "#,###"


getDisplayFormatter(
									  
										)
							

현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다.



Return

typedescription


String현재 컴포넌트에 설정된 format용 함수


Sample
//searchBox1 컴포넌트의 displayFormatter="eduObj.fn_numFormat" 설정 시
var returnValue = searchBox1.getDisplayFormatter();
return 예시 ) "eduObj.fn_numFormat"


getDisplayValue(
									  
										)
							

현재 보여지는(format이 적용 된) 값을 반환한다.



Return

typedescription


Stringforamt이 적용되어진 값


Sample
//searchBox1컴포넌트의 dataType이 number이고 displayFormat을 "#,###"으로 적용하고 1000000을 입력 한 경우
var returnValue = searchBox1.getDisplayValue();
//return 예시 )"1,000,000"


getFormattedValue(
									  
										)
							

formatted된 searchbox의 값을 반환한다.



Return

typedescription


Stringformatted된 searchbox의 값


Sample
//searchBox1컴포넌트의 dataType이 number이고 displayFormat을 "#,###"으로 적용하고 1000000을 입력 한 경우
var returnValue = searchBox1.getFormattedValue();
//return 예시 )"1,000,000"


getGenerator(
									  
										)
							

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Object부모 Generator 객체


Sample
//부모 Generator가 자식으로 Trigger를 생성한 예제
  

// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. 
 scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} 



getID(
									  
										)
							

웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트 ID


Sample
// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.
function fn_validCheck(tmpObj){
    var compID = tmpObj.getID();
}
// 위의 예제 에서 tmpObj가 "input1" ID를 가지고 있는 경우,
// (반환 값) "input1"


getInitStyle(
									  CSS
										)
							

컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


CSSStringN속성 (지정하지 않으면 모든 정보 출력)






getOpacity(
									  
										)
							

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS의 opacity 속성 값을 반환.



Return

typedescription


IntegerOpacity 값


Sample
// inputBox 컴포넌트에 opacity CSS를 적용.

        
// inputBox 컴포넌트의 opacity 값을 반환. 
var returnValue = input1.getOpacity(); 
// returnValue는 0 ~ 1 사이의 실수.
// (반환 값) "0.2"


getOriginalID(
									  
										)
							

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)originalID는 Scope 기능을 사용할 경우 존재. scope="true"인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + "_")가 추가되는 방식으로 변경됨.  originalID는 이 때, prefix가 추가되기 전 ID를 의미.



Return

typedescription


String컴포넌트의 originalID


Sample
// WFrame을 사용하는 다중 화면 구조 예시

// WFrame을 포함한 메인 화면 (main.xml) 
 

// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)


// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.
// getID 실행 
textbox1.getID(); // 실행 결과는 "wframe1_textbox1"
 
// getOriginalID 실행 
textbox1.getOriginalID(); // 실행 결과는 "textbox1"


getPluginName(
									  
										)
							

웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트의 이름 (pluginName)


Sample
// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.
var commObj = {};

commObj.fn_makeReqData = function(tmpObj){
    var tmpID = tmpObj.getID(); // 컴포넌트 ID
    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름

    if(tmpCompType == "input"){
        //..로직..
    }else if(tmpCompType == "gridView"){
        //..로직 ..
    }else{
        //..로직..
    }
};


getPosition(
									  positionName
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


positionNameStringY[left, top] 위치 종류




Return

typedescription


Number컴포넌트의 위치 값


Sample
// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,


// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     
var returnValue = input1.getPosition("top"); 

// 픽셀 단위의 위치 값이 반환됨.

// (반환 값) 10


getReadOnly(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Boolean현재 설정되어있는 readOnly 속성


Sample
// 컴포넌트의 readOnly 속성 값 확인 예제
var returnValue = componentId.getReadOnly();
// (반환 값 예시) false


getScope(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.



Return

typedescription


ObjectWFrame 객체 또는 null


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
textbox1.getScope(); 
// (반환 값) wframe11 객체


getScopeWindow(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.



Return

typedescription


ObjectWFrame 객체의 scope 객체 또는 전역 window 객체


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
var scope = textbox1.getScopeWindow();
scope.wframe11 === textbox1.getScope(); // true


getSize(
									  sizeName
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


sizeNameStringY크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고. 
height : element.clientHeight
innerHeight : element.clientHeight + padding
outerHeight : element.clientHeight + padding + border
outerMarginHeight : element.clientHeight + padding + border + margin
width : element.clientWidth
innerWidth : element.clientWidth + padding
outerWidth : element.clientWidth + padding + border
outerMarginWidth : element.clientWidth + padding + border + margin




Return

typedescription


Number컴포넌트의 크기 값


Sample
var returnValue = componentId.getSize("width");
// (반환 예) 100 
// 픽셀 단위의 크기 값이 반환됨. 
// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.


getStyle(
									  propertyName
										)
							

웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY반환할 CSS 속성




Return

typedescription


StringCSS 속성 값


Sample
//아래와 같이 input 컴포넌트가 정의 된 경우


// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   
var returnValue = input1.getStyle("width");

// (반환 값) "144px"


getStyleValue(
									  style
										)
							

[deprecated]getStyle 사용 권장.웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.


Parameter

nametyperequireddescription


styleStringY반환하려는 CSS 속성.




Return

typedescription


Stringstyle 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)





getTitle(
									  
										)
							

컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Stringtitle 속성 값.


Sample
// 아래와 같이 input 컴포넌트의 title 속성이 "이름 입력"으로 정의된 경우


var tmpTitle = input1.getTitle();
// (반환 값 예시) "이름 입력"


getUdcHome(
									  
										)
							

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome(); 
// (실행 결과) /a/b/udc.xml


getUdcRoot(
									  
										)
							

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome();    
// (실행 결과) /a/b/


getUserData(
									  key
										)
							

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


keyStringY데이터의 key




Return

typedescription


Stringkey에 해당하는 value


Sample
// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제


// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("setTest");
// (반환 값) "Hello"

//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. 
input1.setUserData("valueTest","WebSquare");

// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("WebSquare");
// (반환 값) "WebSquare"


getValue(
									  
										)
							

컴포넌트의 value를 반환한다.



Return

typedescription


Stringsearchbox의 값


Sample
//사용자가 searchBox1 컴포넌트에 "WebSquare"를 입력 한 경우
searchBox1.getValue();
//return 예시 ) "WebSquare"


hasClass(
									  className
										)
							

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY검색할 class 이름




Return

typedescription


Booleanclass의 포함 여부


Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.

        
var returnValue = input1.hasClass("tmpInputClass");
// (반환 값) true


hide(
									  
										)
							

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)display:none; 및 visibility:hidden; CSS를 적용.


Sample
// (예제) 컴포넌트를 숨김
componentId.hide();


removeClass(
									  className
										)
							

웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)기본적으로 addClass를 통해 추가된 class만 삭제 가능. 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. 
 // config.xml 파일에 아래 설정 추가 
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY삭제 할 class명



Sample
// inputBox의 속성으로 class가 직접 정의된 경우,


// config.xml 파일에 아래 항목을 추가.

    <removeDefaultClass value="true" />


// removeClass를 통해 삭제 가능. 
input1.removeClass("tmpInputClass");


setDisabled(
									  disabled
										)
							

웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


disabledBooleanYdisabled 상태. 
true: disabled 속성 활성화
false: disabled 속성 비활성화



Sample
// 컴포넌트의 disabled 속성을 활성화.
componentId.setDisabled(true);


setDisplayFormat(
									  format
										)
							

컴포넌트의 displayFormat 속성을 설정한다.


Parameter

nametyperequireddescription


formatStringY새로 설정할 displayFormat



Sample
//아래와 같이 searchBox 컴포넌트가 정의 된 경우


//searchBox 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.
searchBox.setDisplayFormat("#,###.#0");

//사용자가 1000000 을 입력 할 경우 1,000,000.00 로 표현.


setDisplayFormatter(
									  formatter
										)
							

컴포넌트의 displayFormatter 속성을 설정한다.


Parameter

nametyperequireddescription


formatterStringY새로 설정할 format용 함수



Sample
//아래와 같이 searchBox가 정의 된 경우


//전역스크립트에 아래와 같이 input의 format Function을 정의 한다.(value의 값을 대문자로 치환) 
var commObj = {}; 
commObj.fn_setUpper = function(value){
    value = value.toUpperCase();
    return value;
};

//searchbox1컴포넌트의 displayFormatter를 설정.
searchbox1.setDisplayFormatter("commObj.fn_setUpper");

//표현 예시 ) 사용자가 'hong gil dong'을 입력시 'HONG GIL DONG'로 표현 된다.


setEventPause(
									  evList
									       , 
									       flag
										)
							

지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


evListStringN중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)


flagBooleanY이벤트 중단 여부. 
true: 중단
false: 중단 해제.



Sample
// (예제 1)
// onclick 이벤트를 중단. 
input1.setEventPause("onclick", true); 

// (예제 2)
// onfocus 및 onblur 이벤트의 중단을 해제.
input1.setEventPause("onfocus,onblur", false); 

// (예제 3)
// input1에 등록된 모든 사용자 이벤트를 중단.
input1.setEventPause(null, true);


setInitStyle(
									  property
										)
							

컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyStringNCSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)



Sample
// (예제)
group1.setInitStyle();


setOpacity(
									  value
										)
							

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.


Parameter

nametyperequireddescription


valueNumberYOpacity 값 (0과 1 사이의 실수)



Sample
// (예제) 불투명도를 0.45로 설정
componentId.setOpacity(0.45);


setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


leftNumberY설정할 left 위치 값 또는 null.


topNumberY설정할 top 위치 값 또는 null.


modeStringN위치 설정 방법. [default: absolute, delta] 
absolute: 입력된 값을 위치로 설정.
delta: 현재 위치에 입력된 left 및 top 값을 추가.



Sample
// (예제) 컴포넌트의 top만 100px로 설정.
componentId.setPosition(null, 100);


setReadOnly(
									  readOnly
										)
							

웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


readOnlyBooleanYreadOnly 속성 활성화 여부. ( "true" : 활성화, "false" : 비활성화)



Sample
// 컴포넌트의 readOnly 속성을 true로 설정하는 예.
componentId.setReadOnly(true);


setRef(
									  ref
										)
							

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함.명시하지 않을 경우, InstanceData의 XPath로 인식됨.


Parameter

nametyperequireddescription


refStringY설정할 ref의 경로






setSize(
									  width
									       , 
									       height
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


widthNumberY새로 설정할 컴포넌트의 width 값 또는 null


heightNumberY새로 설정할 컴포넌트의 height 값 또는 null



Sample
// (예제) 컴포넌트의 height만 100px로 설정.
componentId.setSize(null,100);


setStyle(
									  propertyName
									       , 
									       value
										)
							

웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY설정할 CSS 속성


valueStringY해당 CSS 속성에 적용할 값



Sample
// (예제 1) 컴포넌트의 width를 200px로 설정
componentId.setStyle("width", "200px");

// (예제 2) 배경색을 olive로 변경
componentId.setStyle("background-color","olive");


setUserData(
									  key
									       , 
									       value
										)
							

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.


Parameter

nametyperequireddescription


keyStringY설정할 데이터의 key


valueStringY설정한 데이터의 value



Sample
// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.

componentId.setUserData("data", "WebSquare");

// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. 
 
componentId.setUserData("title", "WebSquare");
// 아래와 같이 로그가 출력됨. 
// !!!WARNING - [title] can't be defined as UserData.


setValue(
									  value
										)
							

컴포넌트의 value를 설정.


Parameter

nametyperequireddescription


valueStringY설정하려는 value



Sample

searchBox1.setValue("WebSquare");


show(
									  displayType
										)
							

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)CSS display 속성을 주어진 값으로 설정하고 "visibility: show;"를 적용.


Parameter

nametyperequireddescription


displayTypeStringN적용할 CSS display 속성의 값.   
block : display: block;을 적용. (기본 값)
inline : display: inline;을 적용.
none : display: none;을 적용.
"" : show 수행 이전의 display 속성 값으로 복구.



Sample
// (예제) display: block; CSS를 설정.
componentId.show();  

// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.
componentId.show("");


toggleClass(
									  className
										)
							

웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. 웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. 기본적으로 addClass를 통해 추가된 class만 삭제 가능. 웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. 
 // config.xml 파일에 아래 설정 추가
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY추가/삭제할 class



Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.


//config.xml 파일에 아래를 추가.

    <removeDefaultClass value="true" />


// tmpInputClass class를 삭제.
input1.toggleClass("tmpInputClass");

// (위에서 삭제된) tmpInputClass class를 다시 추가.
input1.toggleClass("tmpInputClass");


trigger(
									  type
									       , 
									       array
										)
							

컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringY발생시킬 이벤트


arrayArrayN이벤트 핸들러에 전달할 파라미터 배열



Sample
// (예제 1)
// input1 컴포넌트에 onclick 이벤트를 발생시킴.
input1.trigger("onclick");

// (예제 2)
// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.
input1.trigger("onviewchange", [1,2]);


unbind(
									  type
									       , 
									       function
										)
							

컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringN제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)


functionFunctionN제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)



Sample
// (예제 1)
// input1에 등록된 모든 이벤트를 제거.
input1.unbind();

// (예제 2)
// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.
input1.unbind("onviewchange");

// (예제 3)
// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.
input1.unbind("onviewchange", func1);


validate(
									  
										)
							

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.
(관련 속성)
 displaymessage="true"
(유효성 관련 속성)
 mandatory
 minLength
 maxLength
 minByteLength
 maxByteLength



Return

typedescription


Boolean유효성 검사 결과 값


Sample
//아래와 같이 searchbox 컴포넌트에 mandatory 속성을 정의했을 경우


var returnValue = searchbox1.validate();
// (반환 값 - searchbox의 값이 없을 경우) false
// (반환 값 - searchbox의 값이 있을 경우) true

// displaymessage="true" 설정을 사용하면 유효성 검사에서 false가 반환될 경우 엔진에서 설정된 메세지가 alert으로 표시됨.
// (alert 메세지 예시) 필수 입력 항목입니다


visible(
									  flag
										)
							

[deprecated] show/hide 혹은 setStyle 사용을 권장.엔진 내부적으로 CSS visibility 속성을 설정.


Parameter

nametyperequireddescription


flagBooleanY설정할 CSS visibility 속성 값 
true : visibility: visible;
false : visibility: hidden;










Copyrights Inswave Systems Co., Ltd.



