
디버깅 가이드5.디버깅 가이드5.1PC용 브라우저 디버깅웹스퀘어를 사용하다 보면 디자인 수정 뿐 아니라 작업한 내용과는 상이한 결과물을 얻는 이상 현상 또는 자바스크립트 수행 시, 원하는 결과가 나오지 않을때가 있을 수 있습니다. 이를 확인하기 위해 브라우저에서 제공되는 개발자도구 툴을 활용하여 코딩의 과정을 단축 시킬 수 있습니다.5.1.1개발자 도구5.1.1.1Internet ExplorerIE6와 IE7은 자체적으로는 개발자 도구가 없어 MS 사이트에서 제공하는 developer를 설치한 후에 사용해야 합니다. 하지만, 이후 버전에서 제공되는 개발자도구에 비해 제공되지 않는 기능들이 있습니다. IE6과 IE7에서는 microsoft script editor를 사용하면 break point등을 사용할 수 있으며 실시간 디버깅이 가능하며 지역변수 및 조사식들을 볼 수 있습니다.IE8 이후 버전은 브라우저 설치시 사용자가 수동으로 옵션을 제거하지 않았다면 개발자도구가 포함되어 설치됩니다. 브라우저 화면의 하단에 위치시킬 수 있으며 별도의 개별 화면으로 분리시킬 수도 있습니다. 단축키 <F12>로 쉽게 개발자도구 창을 열 수 있습니다.그림 5-1.Internet Explorer 개발자 도구5.1.1.2ChromeChrome에는 내장된 개발자 도구가 포함되어 있으며, 도구 아이콘을 클릭한 후 Tools(도구)에서 개발자 도구를 선택하여 활성화 시킵니다. <Ctrl+Shift+I>또는 해당 화면에 우측 마우스를 누르고 '요소검사'를 선택하면 개발자 도구가 활성화 되고, 선택된 영역을 하이라이트 합니다.그림 5-2.Chrome 개발자도구5.1.1.3SafariSafri에는 내장된 개발자 도구가 포함되어 있으며 도구 아이콘을 클릭한 후 기본설정을 클릭해서 설정 팝업을 띄웁니다.고급 탭으로 이동한 후 '메뉴 막대에서 개발자용 메뉴 보기' 를 선택합니다.팝업을 닫은 후 다시 도구 아이콘 옆 페이지 아이콘을 클릭하면 '개발자용'이라는 메뉴가 생긴 것을 알 수 있습니다.개발자용 내에 '웹 속성 보기'를 클릭하면 개발자 도구를 활성화 시킨거나 해당 화면에 우측 마우스를 누르고 '구성 요소 점검' 을 선택하면 선택된 영역으로 이동된 개발자 도구가 활성화됩니다.그림 5-3.Safari 개발자도구5.1.1.4FirefoxFirefox는 부가 기능(플러그인) 방식으로 개발자도구를 추가해서 사용할 수 있도록 되어 있습니다.[도구]-[부가기능] 에서 검색하여 유사한 기능들을 설치해서 사용하면 된다. 대표적으로 firebug가 많이 사용됩니다.해당 화면에 우측 마우스를 누르고 '요소검사'를 선택하면 선택된 영역으로 이동된 개발자 도구가 활성화되거나 최신 버전 firebug 1.6.1 에서는 단축키(F12)와 여러 기능들이 확장 되었습니다.그림 5-4.Firefox 개발자도구5.1.1.5OperaOpera 최신버전에는 Dragonfly라 부르는 개발자 도구가 있으며 최신버전은 개발자도구가 포함되어 있습니다.[메뉴]-[페이지]-[개발자도구]-[Opera Dragonfly]를 선택하거나 해당 화면에 우측 마우스를 누르고 '요소검사'를 선택하면 선택된 영역으로 이동된 개발자 도구가 활성화됩니다. Dragonfly의 사이트는http://www.opera.com/dragonfly/에서 확인할 수 있습니다.그림 5-5.Opera 개발자도구5.1.2CSS 확인하기개발자도구를 이용하여 스타일을 확인하고 수정하는 방법을 소개합니다. Internet Explorer와 Chrome를 기준으로 소개합니다.5.1.2.1Internet Explorer단축키 <F12> 버튼을 이용하거나 도구의 개발자도구를 선택하면 개발자도구를 호출한 후 왼쪽 버튼을 이용하여 브라우저에 보여지는 요소를 선택하여 CSS를 확인 및 직접 수정이 가능합니다.그림 5-6.Ie_debug_css1 : 브라우저 화면에 표시된 요소를 선택합니다. : 브라우저에 저장된 캐싱정보를 삭제합니다. : 브라우저에 렌더링된 HTML tag 내용을 파일로 저장합니다. : 브라우저의 화면이 변경되거나 HTML tag 정보를 재로딩할때 사용합니다. : HTML tag를 직접 편집할 경우 선택하여 HTML tag를 편집창에서 편집할 수 있습니다.개발자도구 HTML tag창에서 더블클릭을 이용하여 직접 편집하거나 오른쪽에 위치한 각 view에서 css를 수정이 가능합니다.그림 5-7.Ie_debug_css_view1선택한 요소의 스타일 정보가 표시되어 상위 객체에서 상속(inherited)받은 css 정보와 선택한 요소에 적용된 class와 inline형식으로 직접 지정된 css를 확인할 수 있습니다.가로줄로 표현된 css는 동일한 css 속성에 대하여 css 우선순위에 따라 무시된 css 정보를 표시합니다.체크박스를 선택해제하여 css 적용/제거가 가능하며 속성의 값을 더블클릭하여 직접편집도 가능합니다.그림 5-8.Ie_debug_css_view2요소에 적용된 css 속성별로 적용된 값의 trace를 확인할 수 있습니다.체크박스를 선택해제하여 css 적용/제거가 가능하며 속성의 값을 더블클릭하여 직접편집도 가능합니다.그림 5-9.Ie_debug_css_view3선택한 요소의 랜더링 정보를 간단하게 표시합니다.그림 5-10.Ie_debug_css_view4요소에 적용된 스타일을 확인할 수 있으며 스타일의 정확한 이름이나 값을 모르는 경우 자동완성 형식으로 도움을 받아 추가적으로 입력할 수 있습니다.그림 5-11.Ie_debug_style_change화면 URL을 주소창에 입력하여 브라우저에 화면을 표시합니다.<F12>버튼 또는 도구 메뉴의 개발자도구를 선택하여 개발자도구를 활성화 시킵니다.이메일 입력필드에 값을 입력합니다.화살표 버튼을 이용하여 이메일의 입력필드를 선택합니다.오른쪽에 표시된 값에서 font의 값을 더블클릭한 뒤 size를 20으로 수정하면 입력된 값의 글자 크기가 변경되는 것을 확인할 수 있습니다.5.1.3스크립트 디버깅5.1.3.1debugger스크립트 명령어로 소스내에서 debugger;를 추가하여 작성하면 Runtime시 잠시 정지하여 해당 값이나 로직의 진행 과정들을 볼 수 있게 해주는 역할을 합니다.디버깅 시작상태에서 아래와 같은 버튼을 이용할 수 있습니다. : 스크립트 실행이 중지된 상태에서 활성화되며 클릭시 중지된 스크립트 실행을 재실행시킵니다. : 실행중인 스크립트를 모두 중지합니다. : 스크립트 수행중에 오류가 발생하는 경우 스크립트 수행을 일시 중지합니다. : 스크립트를 한단계씩 차례로 수행합니다. : 프로시져 단위로 스크립트를 수행합니다. 예를들어 function에서 function을 호출하는 경우 호출되는 function의 내부는 한단위씩 수행하지 않습니다. : 프로시져 내부에서 프로시져 내부는 한단위씩 수행하지 않고 프로시져 호출 다음 스크립트로 이동합니다. : 스크립트 디버깅 모드를 수행/중지합니다. 디버깅 모드 수행시 페이지가 재로딩 됩니다.그림 5-12.Ie_script_debug_window소스에서 중지하고자 하는 위치에 debugger; 스크립트를 추가한 후 저장합니다.화면 URL을 주소창에 입력하여 브라우저에 화면을 표시합니다.<F12>버튼 또는 도구 메뉴의 개발자도구를 선택하여 개발자도구를 활성화 시킵니다.그림 5-13.Ie_script_debug_window1스크립트 탭의 디버깅 시작 버튼을 클릭하면 디버깅 시작을 위해 화면이 재로딩 됩니다.debugger 스크립트를 추가한 function을 호출할 수 있도록 화면에서 이벤트를 수행합니다.debugger 스크립트가 수행되면 스크립트 창에 debugger 부분이 선택되면서 나타납니다.그림 5-14.Ie_script_debug_window2스크립트 입력창에서 "testValue"를 입력하고 Enter를 클릭하면 콘솔창에 입력한 스트링이 나오고 아래줄에 해당값의 결과값이 출력됩니다.그림 5-15.Ie_script_debug_window3다음 스크립트로 한 단계씩 코드 실행 버튼을 클릭하거나 <F11> 버튼을 클릭하면 WebSquare.ModelUtil.executeSubmission api의 내부스크립트로 이동합니다.프로시저 단위 실행 버튼을 클릭하거나 <F10> 버튼을 클릭하면 WebSquare.ModelUtil.executeSubmission api 수행 완료 단계로 이동합니다.또는 한 단계씩 코드실행 버튼을 클릭하여 내부 api로 들어간경우 해당 프로시저를 완료한 상태로 이동하기 위해서는 프로시저 나가기 버튼을 클릭하거나 <Shift+F11> 버튼을 클릭합니다.그림 5-16.Ie_script_debug_window4스크립트 입력창에 "testValue = testValue + 5;를 입력하고 Enter를 클릭하면 현재 1값에 5를 더한 6이 출력됩니다.그림 5-17.Ie_script_debug_window5한 단계씩 코드실행 버튼을 클릭하여 console.log를 수행하도록 하면 스크립트 콘솔 View에 testValue의 값이 출력됩니다.console.log는 스크립트 콘솔 View에 출력할 수 있는 api입니다.스크립트를 끝까지 진행하고자 하는 경우 계속 버튼을 클릭하면 다음 중지 포인트까지 진행합니다.5.1.3.2breakpointbreakpoint는 소스 수정 없이 디버깅 창에서 해당 소스를 선택하여 디버깅 할 위치에 중단점을 체크하면 중단점이 설정된 위치를 Runtime시 잠시 정지하여 해당 값이나 로직의 진행 과정들을 볼 수 있게 해주는 역할을 합니다.5.2모바일용 브라우저 디버깅5.2.1Console View5.2.1.1Android 개발환경console.log api를 이용하여 소스의 javascript에 로그로 출력할 내용을 추가합니다.console.log"======test debug message=======”);Open Perspective 창을 열어 DDMS를 선택합니다.그림 5-18.Android_console1그림 5-19.Android_console2Run으로 App을 빌드한 후, DDMS 화면으로 이동합니다.좌측 상단에서 App이 실행된 디바이스 또는 에뮬레이터를 선택합니다.그림 5-20.Android_console3하단의 LogCat View에서 + 아이콘을 클릭하여 filter를 생성합니다.Filter Name과 by Log Tag에 'web console'을 입력합니다.그림 5-21.Android_console4그림 5-22.Android_console5Saved Filters 항목에 추가한 web console을 선택하면 웹 콘솔에 출력되는 로그를 확인할 수 있습니다.추가한 console.log를 실행할 수 있도록 이벤트를 수행합니다.로그 출력부분에 추가한 api가 동작하여 로그 메시지가 출력됩니다.그림 5-23.Android_console65.2.1.2iOS 개발환경console.log api를 이용하여 소스의 javascript에 로그로 출력할 내용을 추가합니다.console.log"======test debug message=======”);Scheme 및 Device 설정 후 Run 버튼을 클릭합니다.Log navigator 버튼을 클릭하면 좌측은 빌드 및 로그 history 목록이 우측은 로그창이 조회됩니다.그림 5-24.IOS_console1그림 5-25.IOS_console2추가한 console.log를 실행할 수 있도록 이벤트를 수행합니다.로그 출력부분에 추가한 api가 동작하여 로그 메시지가 출력됩니다.그림 5-26.IOS_console3안드로이드와는 달리 filter 기능이 없으므로 로그 내용이 많아질 경우 디버그 메시지를 찾기 어려우므로 find 기능을 사용하여 로그를 검색할 수 있습니다.키보드의 커맨드키(사과모양키) + f를 입력하고 상단의 검색창에서 출력 메시지 일부를 입력하여 검색합니다.그림 5-27.IOS_console45.2.2Weinre대부분의 inspector는 브라우저 내장 또는 플러그인 형태로 제공합니다. Weinre (WEb INspector REmote)는 inspector를 활용하기 어려운 환경에서 유용하게 사용할 수 있습니다. 동작 원리와 세부적인 매뉴얼은 공식 페이지(http://www.phonegap.github.com/weinre)에서 확인 가능합니다. 단, Webkit 엔진을 사용하므로 Chrome 또는 Safari 브라우저 등 Webkit 엔진이 포함된 브라우저를 사용해야 합니다. http://trac.webkit.org/wiki/WebInspector에서 weinre.zip 또는 weinre-src.zip 을 구할 수 있습니다.그림 5-28.Weinre_debug15.2.2.1Phonegap의 공개서버를 이용한 디버깅브라우저에서 http://debug.phonegap.com으로 접속합니다.Step 1에 사용하고자 하는 ID를 입력하고 Step 2에 생성된 script를 카피합니다.그림 5-29.Weinre_debug2카피한 스크립트 내용을 디버깅이 필요한 소스에 추가합니다.websquare.html : 해당 html로 호출되는 모든 웹스퀘어 페이지에서 디버깅이 가능합니다.개별 xml page : 스크립트를 추가한 xml page가 load될 때만 디버깅이 가능합니다.그림 5-30.Weinre_debug3페이지 실행 후 http://debug.phonegap.com/client/#자기ID로 접속하면 target을 확인할 수 있는 목록이 조회됩니다.여러 사람이 같은 ID로 접속하거나 Page가 여러개일 경우 target이 여러 개 나타납니다.원하는 target을 클릭한 후 Element tab을 클릭합니다.그림 5-31.Weinre_debug4Webkit 개발자도구처럼 inspection이 가능합니다.그림 5-32.Weinre_debug5웹 개발자도구처럼 console 및 Style의 변경도 가능합니다.그림 5-33.Weinre_debug65.2.2.2로컬서버를 이용한 디버깅다운로드 받은 weinre.jar를 java.exe를 이용하여 실행합니다. 실행시 사용할 수 있는 옵션은 다음과 같습니다.    C:\Windows\System32\java.exe -jar D:\apache-tomcat-7.0.8\weinre.jar --httpPort 8081 --boundHost -all-Options available are :
 
--help (or -? or -h) 
Display this help. 
 
--httpPort [portNumber] 
The port to run the HTTP server on. 
Default: 8080 
 
--boundHost [hostname | ip address | -all-] 
The ip address to bind the server to. 
Default: localhost
 
With the default of localhost, you won't be able to access the server from any machine other than the one the server is running on.
You will need to bind to another hostname / ip address to make the server accessible to other machines. 
You can use the value -all- to indicate that you want to bind to all interfaces available on the current machine.
 
Use ifconfig on Linux or the Mac, and ipconfig on Windows, to get the ip addresses available on your machine.
 
--verbose [true | false] 
Causes jibberish to be written to stdout 
Default: false 
 
--debug [true | false] 
Causes even more jibberish to be written to stdout 
Default: false 
 
--readTimeout [seconds] 
The number of seconds the server will wait for a message to be available to send to the target or client.
Default: 5
 
Can probably be set larger, but then your browser may time out. 
Probably don't want to set it much lower than this as it will cause additional network traffic 
when no messages are being sent (it will cause more "empty" messages to be sent).
 
--deathTimeout [seconds] 
The number of seconds to wait to hear back from a debug client or target before declaring them dead.
Default: 3 * readTimeout
 
Normally the default will be fine. However, if you're debugging weinre itself, you may wish to set it much longer.아래의 스크립트 내용을 디버깅이 필요한 소스에 추가합니다.websquare.html : 해당 html로 호출되는 모든 웹스퀘어 페이지에서 디버깅이 가능합니다.개별 xml page : 스크립트를 추가한 xml page가 load될 때만 디버깅이 가능합니다.<script src"http://localhost:8081/target/target-script-min.js"></script>페이지 실행 후 http://localhost:8081/client로 접속하면 target을 확인할 수 있는 목록이 조회됩니다.target을 선택하고 Element tab을 선택하여 디버깅툴을 사용합니다.5.3WebSquare 로그 콘솔브라우저에서 웹스퀘어 페이지가 로딩되는 로그 및 사용자의 디버그 로그를 확인할 수 있는 창을 호출할 수 있습니다.config.xml의 debug의 value를 false로 지정하여 운영환경에서 로그 콘솔을 사용할 수 없도록 지정할 수 있습니다.브라우저에 로딩된 웹스퀘어 페이지에서 <ctrl+마우르 오른쪽 버튼>을 클릭하여 웹스퀘어 퀵메뉴에서 로그보기 메뉴를 선택하여 로그콘솔창을 호출할 수 있습니다.5.3.1기본 엔진 로딩 순서웹스퀘어엔진은 java servelt과 js로 구성되어있으면 초기 로딩의 시작은 websquare.html에서 javascript.wq?q=/bootloader를 호출하며 시작됩니다.javascript.wq?q=/bootloader를 요청하였을 때 servelt에서의 구조는 bootloader.js를 내려준다. bootloader.js가 로딩된 후의 순서는 다음과 같습니다.그림 5-34.기본 엔진 로딩 순서5.3.2컴포넌트 로딩 순서화면 xml이 파싱된 후에는 controlFactory를 통해서 각각의 컴퍼넌트를 로딩합니다. 로딩 순서는 다음과 같습니다.intialize(element) 초기값을 설정합니다. 주로 컴퍼넌트의 xml을 이용하여 작업할 것이 있는 경우에 이 함수안에 작성합니다.setLayout() initialize와 toHTML사이에 동작해야할 것이 있는 경우에 이 함수안에서 실행됩니다.컴퍼넌트의 html구조를 스트링으로 만들어줍니다.컴퍼넌트가 rendering된 후에 필요한 작업들을 수행합니다.5.3.3웹스퀘어 가동 순서그림 5-35.웹스퀘어 기동 순서에 따른 로그Runtime Engine을 로딩합니다.외부 리소스(XML, Skin CSS, 사용자 CSS, JS)를 로딩합니다.WebSquare객체를 생성합니다.HTML객체를 Rendering합니다.이벤트를 활성화 합니다.XML에 정의되어 있는 전역 스크립트를 실행합니다.5.3.4로그 스탭별 웹스퀘어 로딩 순서[step1] -> 엔진의 로딩이 시작될 때 찍히는 로그(config.xml 로딩과 bootloader의 기본적인 부분의 로딩이 끝난 후에)[step2] -> 서블릿으로 부터 리소스를 가지고 오는 과정이 끝났을 때 찍히는 로그[step3] -> XML, Skin, CSS, JS등 외부 리소스의 로딩이 끝나고 xml의 파싱이 끝난 경우[step4] -> 파싱된 XML을 가지고 컴퍼넌트 객체생성이 끝난 경우[step5] -> 각 컴퍼넌트의 HTML로딩이 끝난 경우[step6] -> 이벤트를 붙이고 컴퍼넌트별로 필요한 초기로딩이 끝난 경우[step7] -> 사용자 스크립트 부분의 실행이 끝난 경우5.3.5로그보기 메뉴5.3.5.1기본내용"로그출력시간 | 현재로그시간-이전로그시간 | 현재까지소요시간 | 로그출력객체명"이 기본으로 출력됩니다.첫번째 라인은 XML parsing에 사용되는 dom paser 버전을 출력합니다.두번째 라인은 웹스퀘어의 엔진버전을 출력합니다기동순서에 따른 각 스탭완료시 스탭 종료 로그를 출력합니다엔진기동 및 사용자의 글로벌 스크립트 수행의 총 시간과 각 스탭별 소요시간을 출력합니다15:02:50.097 00000 000000 BootLoader] XHR : MSXML2.XMLHTTP.6.0, XMLDOM : MSXML2.DOMDocument.6.0
15:02:50.097 00000 000000 BootLoader] WebSquare Runtime Engine Version : 2.0_1.1949A.20120410.171114_1.5
15:02:50.098 00001 000001 BootLoader]     Copyright 2009  INSWAVE Systems Co., Ltd. All Rights Reserved.
15:02:50.098 00000 000001 BootLoader] [STEP1] Loading Runtime Engine.
15:02:50.098 00000 000001 BootLoader] engineLoadingMode : 0 - Download & Evaluation WebSquare Engine.[download & eval at once]
15:02:50.197 00099 000100 BootLoader] WebSquare Engine Type : 1 - Default engine with debugging information.15:02:50.221 00024 000124 BootLoader] WebSquare.BootLoader.imports [ext][message/ko.js]
15:02:50.251 00030 000154 BootLoader] [STEP2] Runtime Engine Load complete. Time:166ms15:02:50.257 00006 000160 websquare] w2xDocumentRoot[]
15:02:50.257 00000 000160 websquare] w2xHome        [/grid/]
15:02:50.257 00000 000160 websquare] w2xPath        [/grid/grid_dynamicGird.xml]
15:02:50.263 00006 000166 BootLoader] [STEP3] Resource(XML, Skin, CSS, JS) Load Complete. Time:12ms
15:02:50.267 00004 000170 BootLoader] [STEP4] WebSquare Object Creation Complete. Time:4ms
15:02:50.272 00005 000175 BootLoader] controlCollection.toHTML - before15:02:50.280 00008 000183 BootLoader] controlCollection.toHTML - after
15:02:50.281 00001 000184 BootLoader] [STEP5] HTML Rendering Complete. Time:14ms
15:02:50.298 00017 000201 BootLoader] [STEP6] Event Activation. Time:17ms
15:02:50.298 00000 000201 BootLoader] [STEP7] JS load and Global Script Execution Completed. Time:0ms
15:02:50.298 00000 000201 BootLoader] [STEP SUMMARY] Initial procedures completed. Duration : 213, 시간 요약 : 166    12    4    14    17    0    2135.3.5.2사용자 로그 출력웹스퀘어에서는 WebSquare.logger.printLog를 이용하여 스크립트 수행 중간에 로그를 출력하여 로그창에서 확인할 수 있습니다.WebSquare.loggerprintLog"사용자 로그 내용";5.3.6로그창의 기능로그보기창은 상단에 로그 출력 상태를 확인할 수 있고 하단에 로그출력 기능을 선택할 수 있는 하단 버튼이 존재합니다.그림 5-36.Log Viewer Windowclose로그창을 닫기.read로그내용에 출력된 마지막 로그 이후에 로그내용이 더 있는 경우 append하여 로그내용 출력.clear로그에 기록된 내용을 삭제.pause/resume로그 출력을 중시/재시작 버튼으로 로그출력을 Manual Refresh로 read버튼을 이용하여 추가적인 로그를 확인하거나 Auto Refresh로 추가적인 로그 내용이 있는 경우 자동으로 출력하는 기능 선택.5.4WebSquare 피들5.4.1WebSquare Fiddle 개요WebSquare Fiddle은 웹스퀘어 XML 파일을 웹브라우저에서 직접 편집하여 실행 할 수 있는 웹기반의 개발도구 입니다. WebSquare Fiddle은 JSFiddle(http://jsfiddle.net)에서 영감을 얻어 만들어 졌습니다.5.4.2WebSquare Fiddle 사용방법개발 환경에서는 WebSquare Fiddle을 사용할 수 있는데 다음과 같은 두가지 방법으로 실행 가능합니다.웹스퀘어 화면에서 Ctrl+마우스 오른쪽 버튼을 클릭하여 Fiddle 보기를 선택합니다.그림 5-37.Websquare_fiddle1그림 5-38.WebSquare_Fiddle-Fiddle_보기 : xml 탭에 있는 웹스퀘어 화면 소스를 브라우저에 띄운 결과를 표시합니다. : xml 탭에 있는 웹스퀘어 화면 소스를 새로운 브라우저를 호출하여 결과를 표시합니다. : xml 탭에 있는 소스를 수정 전 상태로 새로 갱신합니다. : 소스의 indent를 정리해서 가독성을 높여줍니다. : JSLint를 이용하여 스크립트를 검사합니다. : RUN 버튼을 클릭하여 수행한 기록을 조회하는 창을 호출하여 선택시 이전 실행에 대한 정보를 재조회할 수 있습니다. : XML 탭을 창전체로 키우거나 실행결과를 창전체로 키우는 화면모드를 선택할 수 있습니다.그림 5-39.RUN 실행결과그림 5-40.실행결과 History 조회그림 5-41.JSLint 실행결과5.4.3WebSquare Fiddle의 제약 사항WebSquare Fiddle은 xml을 직접 읽는 방식이 아니라 편집기에 있는 내용을 w2x.jsp 파일을 통해 읽어들이는 방식을 사용하여 xml 파일의 경로를 상대 경로로 참조하는 로직이 있는 경우 정상 동작하지 않을 수 있습니다.5.4.4사용시 주의 사항WebSquare Fiddle은 웹브라우저에서 웹스퀘어 파일을 직접 작성해서 실행하는 프로그램으로 배포된 소스를 수정하여 수행할 수 있으므로 반드시 운영환경에 반영되면 안됩니다.운영환경에는 fiddle폴더를 삭제하는 것을 권장하며, fiddle폴더가 삭제되지 않아도 config.xml의 debugMenu를 block로 설정하면 동작하지 않습니다.
