
CSS 기본 문법1.CSS 기본 문법1.1CSS 표기 방법css는 내부 스타일시트, 외부 스타일시트, 인라인 스타일시트 등의 세 가지 종류가 있습니다. 실제로 외부 css를 많이 시용하는 편이지만, 간단한 스타일은 내부 스타일시트로도 많이 사용하고 있으며 인라인 스타일 시트는 가장 우선순위가 높아 꼭 필요할 때 편리하게 사용할 수 있습니다.내부 스타일시트 : 문서의 표현(문서의 디자인적 꾸밈, css)를 위한 명령들을 문서 안에 스타일 태그로 기재하여 스타일이 문서 내부에 함께 저장되는 형태입니다.그림 1-1.내부 스타일시트외부 스타일시트 : 문서의 표현을 위한 명령들을 따로 CSS파일로 저장하여 문서에 파일명으로 연결해주는 형태입니다.그림 1-2.외부 스타일시트인라인 스타일시트 : css 구문을 직접 요소(Element)의 style 속성(Attribute)으로 직접 입력하는 방법입니다.그림 1-3.인라인 스타일시트우선순위 : 스타일 시트의 우선순위는 인라인 스타일시트>문서 내부 스타일시트>외부 참조 스타일시트 입니다. 외부 참조 스타일 시트에는 Websquare 컴포넌트들에 기본적으로 들어가는 CSS class인 stylesheet.css도 포함되며, 사용자가 추가한 외부 참조 CSS 파일이 있으면 그 스타일 시트가 stylesheet.css를 재정의 하여 우선순위가 더 높게 됩니다.링크 확인사용자가 정의한 레벨의 CSS가 적용 될 때에는 위에서 앞서 말한 스타일 시트 적용 우선순위를 따르며 외부·내부 스타일 문법에 대해서는 선택자 개별성에 의한 우선순위, 부모-자식의 관계에서의 상속이 적용됩니다.1.2CSS 선택자 (CSS Selector)웹스퀘어 컴포넌트는 기본적으로 엔진에서 Css Class를 자동 생성해줍니다. (w2로 시작하는 class..) 하여 사용자정의 Class를 만들어서 기존엔진에서 랜더링 되어나온 클래스를 오버라이딩 하셔야합니다.CSS 선택자란 말 그대로 어떤 식의 문서 꾸밈을 해야하는지의 서술할 대상을 css 상에서 가르키는 방법입니다.각 선택자는 우선순위가 달라 같은 요소(Element)더라도 선택자를 달리써서 표현을 다르게할 수 있습니다.타입 선택자 : 태그 이름으로 지칭해 해당 엘리먼트를 지정하는 선택자 입니다. 엘리먼트 선택자 또는 단순 선택자라고도 부릅니다.그림 1-4.타입 선택자하위 선택자 : 엘리먼트 묶음이 하위에 나오는 엘리먼트를 지정할 수 있습니다. 두 개의 선택자를 공백으로 분리해서 지정합니다.위의 코드는 li 엘리먼트 하위에 나오는 a 엘리먼트에만 해당 스타일이 적용됩니다. 따라서 다른 엘리먼트 안에 속해있는 앵커 태그에는 스타일이 적용되지 않습니다.그림 1-5.하위 선택자ID, 클래스 선택자 : ID나 클래스 이름으로 원하는 엘리먼트를 저장할 수 있습니다. ID는 샵문자(#)를 사용하고 클래스 선택자는 점 문자(.)를 사용합니다.해당 코드는 wrap을 ID로 갖고 있는 요소 하위 자식 요소(Element) 중 bg620이란 클래스를 갖는 요소를 선택하여 background와 height를 적용 시키는 예입니다.그림 1-6.ID, 클래스 선택자타입 선택자와 하위 선택자는 사이트 전체에 걸쳐 사용되는 일반적인 스타일을 적용하는 데 적합하고, 좀 더 세밀하게 엘리먼트를 선택할 경우엔 ID나 클래스 선택자를 사용하면 됩니다.속성 선택자 : 속성 존재 여부나 속성값에 따라서 엘리먼트를 지정하는데 사용합니다.그림 1-7.속성 선택자1.3선택자의 우선순위선택자의 지정순위(개별성)가 높을수록 해당 규칙이 우선 적용됩니다. 지정순위가 똑같을 경우 앞선 규칙보다 나중에 정의된 규칙이 우선순위를 가지게 됩니다.각 규칙의 지정순위를 계산하기 위해 선택자 유형별로 점수가 존재합니다. 그렇기에 한 레벨의 선택자 개수가 10개 이상이 되더라도 그보다 높은 레벨의 선택자 순위보다 높게 계산되지는 않습니다. 이 규칙에 따라 각 스타일의 개별성은 다음과 같이 계산합니다.선택자에 포함된 id의 수(=a), 100점선택자에 포함된 가상 클래스와 속성(class 포함)의 수(=b), 10점선택자에 포함된 요소명의 수(=c), 1점가상 요소(:hover, :active 등)는 계산에 포함하지 않는다.이러한 계산 규칙으로 다음과 같은 상황에서의 개별성 계산 예제입니다.*{...}                       /*a=0, b=0, c=0. 개별성=0 */ 
ul{...}                      /* a=0, b=0, c=1. 개별성=1 */
ul+ol{...}                 /* a=0, b=0, c=2. 개별성=2 */
ul+ol li{...}               /* a=0, b=0, c=3. 개별성=3 */
li[class="num"] {...}  /* a=0, b=1, c=1. 개별성=11 */
ul+ol li.num {...}      /* a=0, b=1, c=3. 개별성=13 */
li.num.com {...}       /* a=0, b=2, c=1. 개별성=21 */
#get{...}                /* a=1, b=0, c=0. 개별성=100 */
p#attn {...}            /* a=1, b=0, c=1. 개별성=101 */이렇게 같은 요소를 지칭하는 선택자가 많이 있더라도, 개별성이 높은 선택자 구문의 스타일이 적용되어 표현되게 됩니다.
