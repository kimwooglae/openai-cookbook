


WebSquare.uiplugin.input 









PropertyEventMethod찾아보기

WebSquare.uiplugin.input - 5.0_5.4826M.20230213.171915





인풋 박스. HTML의 <input type="text" >와 유사. 
 기본 텍스트 입력 외에 추가적으로 포맷 지정, 입력 가능 문자 지정, 입력값 검증 등의 기능을 제공.

Type


uiplugin

Property Summary




adjustMaxLength

dataType이 number이며 제일 처음이 부호(-, +)일때 maxlength값 조절 여부



allowChar

허용 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다



applyFormat

[default:display, all] formated 된 value의 값의 적용 범위로 all의 경우, value와 display된 값이 동일하게 적용되며 입력하는 동안에 format이 적용된다.



autocomplete

HTML5의 자동완성 기능 사용 여부.



autoFocus

nextTabID가 지정되어 있는 경우, maxByteLength 지정값과 일치할 경우 자동으로 focus를 이동시킬지 유무.



byteCheckIgnoreChar

maxByteLength를 사용하여 입력값의 길이를 계산할 때, 제외할 문자를 지정.



class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.



customModelFormatter

[default: ""] dataCollection과 바인딩 시, dataCollection에 값이 저장되기 전에 실행되는 사용자 정의 함수.



customModelUnformatter

[default: ""] dataCollection과 바인딩 시, dataCollection에서 값을 읽어올 때 값을 반환하기 전에 실행되는 사용자 정의 함수.



dataType

컴포넌트 value의 dataType을 명시



disabled

[default:false, true] 컴포넌트 비활성 여부



displayFormat

엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며 excel의 서식을 적용하는 방식처럼 value의 format을 적용 할 수 있다.



displayFormatter

컴포넌트의 value를 포맷하는 함수 명. 



displaymessage

validate(); 검증 결과가 실패일 경우, 메세지를 표시. [default: false, true]



editType

[default:focus, select] 사용자가 컴포넌트 클릭 시 결과 동작 지정



enterBlur

[default:true, false]엔터키 입력시 blur시키고 blur이벤트를 발생 시킬지의 여부



escape

[true, false] <>&"를 HTML Escape 문자로 변환하여 화면에 표시



euroMask

화폐단위 변경을 위해 dataType = "euro" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값



fireEventOnInvalid

[default:false] validation에 실패했을 때 이벤트를 발생시킬지의 여부



id

컴포넌트 ID. 



ignoreChar

무시 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다



imeMode

ime-mode(css) 값을 설정한다



initValue

초기의 input에 설정된 초기값



inputMode

웹표준 속성으로 데이터 유형에 따른 키보드유형을 제공 (주로 모바일에서 사용)



invalidMessage

displaymessage="true"이고 validate(); 검증 결과가 실패인 경우 표시되는 메시지.



invalidMessageFunc

validate(); 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름. 



ioFormat

[defulat:yyyyMMdd]사용자가 data를 입력하는 순서와 format 매칭시켜주는 기능이다.



ltrim

[false, true] 문자열 왼쪽 공백 제거 여부



mandatory

[default:false, true] 필수 선택 적용 여부. validate 함수를 통해 입력값을 검증할 경우 필수 입력을 확인. 
 (옵션 설명)
 "false" (기본 값) 필수 선택 적용하지 않음. 
 "true" 필수 선택 적용. </xmp></xmp>



maskFormat

[default: ""] jQuery Mask Plugin과 유사한 기능을 제공하며 # 대신 숫자를 대신 바꾼다. 



maskFormatModelExcludeChar

maskFormat을 사용하고 dataCollection과 바인딩 시, dataCollection에 저장할 때 제외할 char을 지정한다.



maskFormatModelExcludeCharValue

[default: false] maskFormatModelExcludeChar가 적용되어 있을 때 getValue() 실행 시 헤딩 문자열을 제외하고 결과값을 리턴할지에 대한 여부



maxByteLength

입력 가능한 최대 Byte길이로 엔진에서 maxByteLength 이상의 글자를 입력하면 자동으로 잘라낸다.



maxlength

입력 가능한 최대길이로 엔진에서 maxLength 이상의 글자를 입력하면 자동으로 잘라낸다.



minByteLength

validate API를 호출 할 때 엔진에서 최소 Byte길이 체크 시에 참조한다.



minlength

validate API를 호출 할 때 엔진에서 최소길이 체크 시에 참조한다



nextTabByEnter

nextTabID가 지정되어 있는 경우, Enter키 입력시 nextTabID-컴포넌트로 포커스를 이동시킬지에 대한 여부



nextTabID

Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID



numberMask

화폐단위 변경을 위해 dataType = "number" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값



onFocusClass

onFocus시 적용할 class명



placeholder

HTML5의 placeholder와 동일한 기능을 제공. 사용자에게 알려줘야 할 힌트 문구 등을 명시. 



preventCopyPaste

[default:false, true]컴포넌트의 value에 대해 copy&paste 방지 여부



readOnly

[default:false, true]readonly의 여부로 HTML의 readonly속성과 동일한 기능을 제공한다



readOnlyClass

readOnly 상태 일때 적용할 class명



readOnlyFocusEvent

[default:false, true]input객체가 readOnly 상태일 때 focus 이벤트를 발생시킬지에 대한 여부



ref

바인딩한 DataMap의 Key 혹은 DataList의 Column.   



refSync

Input이 ref와 연동된 경우, key가 입력되는 즉시 ref를 갱신. [default: false, true]



rtrim

[false, true] 문자열 오른쪽 공백 제거 여부



rupeeMask

화폐단위 변경을 위해 dataType = "rupee" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값



showPlaceHolderOnReadOnly

읽기전용 모드(readOnly="true" 또는 disabled="true")에서도 placeholder 속성으로 지정된 값을 표시.



tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. 



tengeMask

화폐단위 변경을 위해 dataType = "tenge" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값



title

HTML의 title 속성과 동일



tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트



tooltipFormatter

tooltip 값을 변환에 사용될 사용자 함수명을 정의



tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.



trim

[false, true] 문자열 양쪽 공백 제거 여부



type

HTML의 type속성과 동일한 기능으로 일반적으로 별도 지정을하진 않으며 HTML5에서의 data Type을 반영한 UI를 구현하고자 할 때 사용된다.



useMonthYearFormat

[default:false] dataType = "date"이고 useMonthYearFormat 속성이 적용된 inputCalendar와 바인딩 시 동일한 기능이



userData1

사용자 정의 데이터 속성



userData2

사용자 정의 데이터 속성



userData3

사용자 정의 데이터 속성



useVerticalAlign

IE에서 verticalAlign을 script를 통해 조절할지에 대한 여부



validateOnCheckMaxByteLength

[default:false] ignoreChar 및 allowChar 설정을 통해 허락된 문자만 maxByteLength만큼 검증. 



validateOnInput

[default:false] oninput 이벤트 시점에 input 컴포넌트의 유효성을 검사할지의 여부. (oninput 이벤트를 지원하는 IE9이상 브라우저 지원)



validator

유효성 체크 함수 이름.



Event Summary




onblur

포커스를 잃었을 때 발생한다



onchange

컴포넌트의 value가 변경되었을 때 발생하는 이벤트로 focus out 시점에 발생한다.



onclick

마우스로 컴포넌트를 클릭했을 때 발생한다



ondblclick

마우스로 컴포넌트를 더블 클릭했을 때 발생한다



oneditenter

엔터키를 키를 눌렀을 때 발생



oneditfull

maxByteLength 값이 있을 경우, 입력된 값이 maxByteLength과 같을 경우 발생.



oneditkeyup

키보드에서 키를 눌렀다 놓았을 때 발생한다



onfocus

포커스를 얻었을 때 발생한다



oninputinvalid

validation에 실패했을 때 발생하는 이벤트



onkeydown

키보드에서 키를 눌렀을 때 발생한다



onkeypress

키보드에서 키를 눌렀을 때(누르고 있는 동안에도) 발생한다



onkeyup

키보드에서 키를 눌렀다 놓았을 때 발생한다



onmousedown

마우스를 클릭 했을 때(마우스를 누르는 순간) 발생한다



onmousemove

마우스 포인터가 이동될 때 발생한다



onmouseout

마우스가 지정된 영역이나 링크 위에서 벗어났을 때 발생한다



onmouseover

마우스가 지정된 영역이나 링크 위에 놓일 때 발생한다



onmouseup

마우스 버튼을 눌렀다 놓을 때 발생한다



ontooltiphide

툴팁이 사라질 때 발생



ontooltipshow

툴팁이 나타날 때 발생



onviewchange

키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생.


Method Summary




addClass(
									  className
										)
								

컴포넌트에 CSS class를 추가



bind(
									  eventType
									       , 
									       function
										)
								

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당



changeClass(
									  oldClassName
									       , 
									       newClassName
										)
								

웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) 



commit(
									  
										)
								

input이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수 



focus(
									  
										)
								

웹스퀘어 컴포넌트에 포커스를 줌



focusNextTabOrder(
									  
										)
								

nextTabID가 설정되어 있는 경우, nextTabID에 해당하는 컴포넌트로 포커스를 이동한다



focusPreTabOrder(
									  
										)
								

자신이 nextTabID로 설정되어 있는 경우, 자신을 nextTabID로 지정한 컴포넌트로 포커스를 이동한다



getDataListInfo(
									  
										)
								

컴포넌트와 바인딩된 DataList를 반환



getDataType(
									  
										)
								

dataType 속성값을 반환



getDisabled(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환



getDisplayFormat(
									  
										)
								

현재 컴포넌트에 설정 된 displayFormat을 반환한다



getDisplayFormatter(
									  
										)
								

현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다



getDisplayValue(
									  
										)
								

현재 보여지는(format이 적용 된) 값을 반환한다



getFormattedValue(
									  
										)
								

formatted된 input의 값을 반환한다



getGenerator(
									  
										)
								

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환



getID(
									  
										)
								

웹스퀘어 컴포넌트의 ID를 반환



getInitStyle(
									  CSS
										)
								

컴포넌트의 초기 스타일을 반환



getNextTabID(
									  
										)
								

nextTabID 속성의 설정 값을 반환



getOpacity(
									  
										)
								

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)



getOriginalID(
									  
										)
								

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)



getPluginName(
									  
										)
								

웹스퀘어 컴포넌트의 이름(pluginName)을 반환



getPosition(
									  positionName
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 



getReadOnly(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환



getScope(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  



getScopeWindow(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)



getSize(
									  sizeName
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) 



getStyle(
									  propertyName
										)
								

웹스퀘어 컴포넌트의 CSS 속성 값을 반환



getStyleValue(
									  style
										)
								

[deprecated]



getTitle(
									  
										)
								

컴포넌트의 title 속성 값을 반환



getUdcHome(
									  
										)
								

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)



getUdcRoot(
									  
										)
								

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)



getUserData(
									  key
										)
								

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환



getValue(
									  
										)
								

컴포넌트의 value를 반환한다



hasClass(
									  className
										)
								

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인



hide(
									  
										)
								

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)



removeClass(
									  className
										)
								

웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)



setAllowChar(
									  allowChar
										)
								

allowChar 속성값을 변경한다



setDefaultValue(
									  initValue
										)
								

컴포넌트의 initValue를 설정한다.



setDisabled(
									  disabled
										)
								

컴포넌트의 disabled 속성을 설정



setDisplayFormat(
									  format
										)
								

컴포넌트의 displayFormat 속성을 설정한다



setDisplayFormatter(
									  formatter
										)
								

컴포넌트의 displayFormatter 속성을 설정한다



setEventPause(
									  evList
									       , 
									       flag
										)
								

지정한 이벤트를 중단함



setInitStyle(
									  property
										)
								

컴포넌트의 초기 스타일을 복구한다



setIoFormat(
									  ioFormat
									       , 
									       displayFormat
										)
								

input의 ioFormat 속성을 설정한다



setMaxByteLength(
									  maxByteLength
										)
								

maxByteLength를 동적으로 설정합니다



setMaxLength(
									  maxLength
										)
								

maxLength를 설정



setNextTabID(
									  componentID
									       , 
									       componentScope
										)
								

nextTabID 속성을 설정.



setOpacity(
									  value
										)
								

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)



setPlaceholder(
									  placeholderStr
										)
								

placeholder 속성값을 변경한다



setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 설정



setReadOnly(
									  readOnly
										)
								

readOnly 속성값을 설정한다



setRef(
									  ref
										)
								

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함.



setSize(
									  width
									       , 
									       height
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 설정



setStyle(
									  propertyName
									       , 
									       value
										)
								

웹스퀘어 컴포넌트의 CSS 속성을 설정



setUserData(
									  key
									       , 
									       value
										)
								

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 



setValue(
									  value
										)
								

컴포넌트의 value를 설정한다



show(
									  displayType
										)
								

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)



toggleClass(
									  className
										)
								

웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)



trigger(
									  type
									       , 
									       array
										)
								

컴포넌트에서 특정 이벤트를 발생시킴



unbind(
									  type
									       , 
									       function
										)
								

컴포넌트에서 이벤트를 제거



unbindRef(
									  
										)
								

ref 바인딩을 해제



validate(
									  
										)
								

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행



validateObject(
									  
										)
								

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행



visible(
									  flag
										)
								

[deprecated] 



Property Detail




adjustMaxLength

dataType이 number이며 제일 처음이 부호(-, +)일때 maxlength값 조절 여부


allowChar

허용 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다.


applyFormat

[default:display, all] formated 된 value의 값의 적용 범위로 all의 경우, value와 display된 값이 동일하게 적용되며 입력하는 동안에 format이 적용된다.display의 경우, 입력이 종료될때 format 적용. dataType = "text"인 경우는 applyFormat = "display"만 가능하다.


autocomplete

HTML5의 자동완성 기능 사용 여부.해당 속성을 사용하는 브라우저에서는 동작하며, 브라우저마다의 동작 방식이 상이할 수 있다.


autoFocus

nextTabID가 지정되어 있는 경우, maxByteLength 지정값과 일치할 경우 자동으로 focus를 이동시킬지 유무.단, 한글이 마지막으로 입력된 경우에는 글자가 완성된 이후 추가 입력이 일어났을 때 focus를 이동시킨다. (한글은 글자가 완성되기 전에 maxByte에 도달하므로 글자가 완성된 이후 추가 입력이 발생하여 maxByte를 넘길때 이동시킨다.)


byteCheckIgnoreChar

maxByteLength를 사용하여 입력값의 길이를 계산할 때, 제외할 문자를 지정.관련 속성: maxByteLength


class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.Engine 내부에서 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어 가능.


customModelFormatter

[default: ""] dataCollection과 바인딩 시, dataCollection에 값이 저장되기 전에 실행되는 사용자 정의 함수.사용자 정의 함수를 실행하고 해당 함수에서 반환하는 값으로 dataCollection에 저장한다.


customModelUnformatter

[default: ""] dataCollection과 바인딩 시, dataCollection에서 값을 읽어올 때 값을 반환하기 전에 실행되는 사용자 정의 함수.예를들어서 getCellDisplayData API를 실행하면, 해당 속성으로 정의한 사용자 정의 함수를 실행한 결과 값을 반환한다.


dataType

컴포넌트 value의 dataType을 명시. 해당 값은 엔진에서 제공하는 displayFormat 등의 속성에서 참조. [default: text, number, float, date, time, bigDecimal,euro]


disabled

[default:false, true] 컴포넌트 비활성 여부. 
 (옵션 설명)
 "false" (기본 값) 컴포넌트를 비활성화 하지 않음. 
 "true" 컴포넌트를 비활성화 함.


displayFormat

엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며 excel의 서식을 적용하는 방식처럼 value의 format을 적용 할 수 있다.displayFormatter와 동시적용이 불가하다.예시)dateType이 number일 경우 #,###.#0 으로 적용하면 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현된다.


displayFormatter

컴포넌트의 value를 포맷하는 함수 명. 해당 함수는 엔진에서 파라미터로 넘겨준 value에 대해 포매팅을 수행한 후, 화면에 표현할 최종 값을 반환함. 
(예시)
 전역 스크립트에 function fn_inputFormat (tmpVal){ return tmpVal+" 님" }; 을 정의
 본 속성을 displayFormatter="fn_inputFormat"으로 설정.


displaymessage

validate(); 검증 결과가 실패일 경우, 메세지를 표시. [default: false, true]기본적으로 엔진 내부에 정의된 메시지를 표시. 단, invalidMessage 속성이 정의된 경우, 해당 속성으로 정의된 메시지를 표시. 
(옵션 설명)
 "true" : 검증 실패 시, 결과 메시지를 표시. 
 "false" (기본 값) :  검증 실패 시, 결과 메시지를 표시하지 않음.  

(관련 API)
 validate(); (함수)
 invalidMessage (속성)


editType

[default:focus, select] 사용자가 컴포넌트 클릭 시 결과 동작 지정. 
 (옵션 설명)
 "select" (기본 값) 포커스가 발생할 때 선택된 텍스트를 선택.  
 "focus" 텍스트의 맨 끝으로 커서를 이동.


enterBlur

[default:true, false]엔터키 입력시 blur시키고 blur이벤트를 발생 시킬지의 여부.


escape

[true, false] <>&"를 HTML Escape 문자로 변환하여 화면에 표시.
(옵션 설명)
 "true" (기본 값) : Escape 문자로 변환하지 않음.
 "false" : Escape 문자로 변환하여 화면에 표시.


euroMask

화폐단위 변경을 위해 dataType = "euro" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값. [default: ""]


fireEventOnInvalid

[default:false] validation에 실패했을 때 이벤트를 발생시킬지의 여부


id

컴포넌트 ID. 컴포넌트 ID는 전역 객체로 할당됨. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능.


ignoreChar

무시 할 문자로 내부적으로 JavaScript의 RegExp로 구현되어있으며 한글/한자등의 경우 blur시점에 적용된다.


imeMode

ime-mode(css) 값을 설정한다. (ime-mode가 지원 가능한 일부 브라우저(IE)에서만 동작함)


initValue

초기의 input에 설정된 초기값


inputMode

웹표준 속성으로 데이터 유형에 따른 키보드유형을 제공 (주로 모바일에서 사용)


invalidMessage

displaymessage="true"이고 validate(); 검증 결과가 실패인 경우 표시되는 메시지.invalidMessageFunc 속성과 동시 적용 불가.
(관련 API)
 validate();
 displaymessage="true"

(!주의!)
 invalidMessageFunc 속성과 동시 적용 불가.


invalidMessageFunc

validate(); 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름. invalidMessage 속성과 동시 적용 불가. 
// (사용자 정의 함수 예)
// 아래 type에 대한 검증 실패 시, 메시지를 동적으로 생성하는 예.
// mandatory, minlength, minByteLength
 scwin.fn_msg = function(){ 
 var invalidType = this.getType();  // invalid type 
 var invalidValue = this.getValue(); // invalid value
 switch (invalidType) {
            case "mandatory" :
                msg = "Information is required.";
                break;
            case "minLength" :
                msg = "Minimum " + invalidValue + " digits are required.";
                break;
            case "minByteLength" :
                msg = "Minimum " + invalidValue + " bytes are required.";
                break;
            default :
                msg = "Not valid.";
                break;
        }

        alert(msg);
        return msg;
 }  
(관련 API)
 validate();
 invalidMessage 속성과 동시 적용 불가.


ioFormat

[defulat:yyyyMMdd]사용자가 data를 입력하는 순서와 format 매칭시켜주는 기능이다.dataType 속성이 date이고 displayFormat이 MM.dd.yyyy 일 경우 본 속성에 MMddyyyy으로(delimiter 제거 후) 정의해야 정상동작 된다.


ltrim

[false, true] 문자열 왼쪽 공백 제거 여부


mandatory

[default:false, true] 필수 선택 적용 여부. validate 함수를 통해 입력값을 검증할 경우 필수 입력을 확인. 
 (옵션 설명)
 "false" (기본 값) 필수 선택 적용하지 않음. 
 "true" 필수 선택 적용. 
 (관련 함수)
 validate();


maskFormat

[default: ""] jQuery Mask Plugin과 유사한 기능을 제공하며 # 대신 숫자를 대신 바꾼다. default: displayFormat에 적용된 마스킹 값을 왼쪽부터 숫자로 바꾼다.reverse: displayFormat에 적용된 마스킹 값을 오른쪽부터 숫자로 바꾼다.applyFormat은 항상 all로 적용된다.applyFormat과는 다르게 DataCollection에는 maskFormat이 적용된 값이 들어가며, getValue API 호출 시에도 maskFormat이 적용된 값이 반환된다.displayFormat 속성 예시) ###-###-####, ##-###dataType 속성은 text와 number를 지원하며, number일 경우 0으로도 마스킹이 가능하다. (#은 입력할 때 표시되지 않지만, 0은 입력할 때 표시됨)필수 속성: displayFormat, dataType


maskFormatModelExcludeChar

maskFormat을 사용하고 dataCollection과 바인딩 시, dataCollection에 저장할 때 제외할 char을 지정한다.dataCollection에는 maskFormatModelExcludeChar를 제외한 문자열이 저장된다.


maskFormatModelExcludeCharValue

[default: false] maskFormatModelExcludeChar가 적용되어 있을 때 getValue() 실행 시 헤딩 문자열을 제외하고 결과값을 리턴할지에 대한 여부


maxByteLength

입력 가능한 최대 Byte길이로 엔진에서 maxByteLength 이상의 글자를 입력하면 자동으로 잘라낸다.maxLength속성의 값과 본 속성에 지정한 값 중 더 작은 수가 우선 순위로 적용된다.config.xml 파일의 byteCheckEncoding 설정 값이 euc-kr이면 한글은 2byte로 utf-8이면 3byte로 계산한다.


maxlength

입력 가능한 최대길이로 엔진에서 maxLength 이상의 글자를 입력하면 자동으로 잘라낸다.maxByteLength속성의 값과 본 속성에 지정한 값 중 더 작은 수가 우선 순위로 적용된다.


minByteLength

validate API를 호출 할 때 엔진에서 최소 Byte길이 체크 시에 참조한다.config.xml 파일의 byteCheckEncoding 설정 값이 euc-kr이면 한글은 2byte로 utf-8이면 3byte로 계산한다.


minlength

validate API를 호출 할 때 엔진에서 최소길이 체크 시에 참조한다.


nextTabByEnter

nextTabID가 지정되어 있는 경우, Enter키 입력시 nextTabID-컴포넌트로 포커스를 이동시킬지에 대한 여부.


nextTabID

Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID.


numberMask

화폐단위 변경을 위해 dataType = "number" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값. [default: ""]


onFocusClass

onFocus시 적용할 class명.


placeholder

HTML5의 placeholder와 동일한 기능을 제공. 사용자에게 알려줘야 할 힌트 문구 등을 명시. InputBox의 값이 비어 있을 때 placeholder로 설정한 값이 표시되며, 값을 입력하는 순간 사라짐. 브라우저 별로 동작 방식이 상이. (예: IE는 포커싱을 할 경우 문구가 사라지지만, Chrome은 텍스트 입력 시 문구가 사라짐.)


preventCopyPaste

[default:false, true]컴포넌트의 value에 대해 copy&paste 방지 여부.


readOnly

[default:false, true]readonly의 여부로 HTML의 readonly속성과 동일한 기능을 제공한다.


readOnlyClass

readOnly 상태 일때 적용할 class명.


readOnlyFocusEvent

[default:false, true]input객체가 readOnly 상태일 때 focus 이벤트를 발생시킬지에 대한 여부


ref

바인딩한 DataMap의 Key 혹은 DataList의 Column.   "data:" prefix를 추가하여 data:[DataCollection ID].[Key id 또는 Column id] 형태로 지정해야 함. DataList와 바인딩된 경우, GridView에서 선택된 행의 값이 바인딩됨.
(작성 예)
 data:dataMap1.dept
 data:dataList1.CityInstance Data와 연동 할 경우 연동 할 XML 데이터의 XPath를 명시해야 함. 
(작성 예)
 res/userInfo/dept/@value


refSync

Input이 ref와 연동된 경우, key가 입력되는 즉시 ref를 갱신. [default: false, true]Input이  DataMap과 ref로 연동되고 refSync="true"인 경우, onkeydown 이벤트에서 dataMap1.get("key1")를 실행하면 입력된 값이 그대로 반환됨.
(옵션 설명)
 "true" 즉시 갱신. 
 "false" (기본 값) 즉시 갱신하지 않음. 
(제약사항) 
 Enter키와 Tab키만 지원하며, commit() API를 사용해야 함. 
 (예) input1.commit();


rtrim

[false, true] 문자열 오른쪽 공백 제거 여부


rupeeMask

화폐단위 변경을 위해 dataType = "rupee" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값. [default: ""]


showPlaceHolderOnReadOnly

읽기전용 모드(readOnly="true" 또는 disabled="true")에서도 placeholder 속성으로 지정된 값을 표시.true: 표시. false (기본 값): 표시하지 않음. 관련 속성: readOnly, disabled, placeholder


tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. HTML의 tabindex 속성과 동일.


tengeMask

화폐단위 변경을 위해 dataType = "tenge" 로 설정한 경우나 changeCurrency API를 사용했을 때 적용되는 마스킹 값. [default: ""]


title

HTML의 title 속성과 동일. 마우스 오버 시, title로 저장한 값이 툴팁으로 표시됨. 일반적으로 웹접근성 지원용으로 설정.


tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트. 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시.


tooltipFormatter

tooltip 값을 변환에 사용될 사용자 함수명을 정의. (해당 사용자 함수는 별도의 스크립트로 작성해야 함.)


tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.key에 해당하는 텍스트가 없을 경우 "global_undefined"가 화면에 표시됨.


trim

[false, true] 문자열 양쪽 공백 제거 여부


type

HTML의 type속성과 동일한 기능으로 일반적으로 별도 지정을하진 않으며 HTML5에서의 data Type을 반영한 UI를 구현하고자 할 때 사용된다.예를 들어 type을 number로 지정 할 경우 모바일 브라우저에서 type을 보고 number key 패드를 올리게 할 수있다.그외 color로 지정 할 경우 colorPicker를 사용하지 않고 색을 선택 할수 있는 기능이 제공되나 해당 기능은 HTML5를 지원하는 브라우저에서만 작동되며 브라우저마다의 표현방법이 다르다.


useMonthYearFormat

[default:false] dataType = "date"이고 useMonthYearFormat 속성이 적용된 inputCalendar와 바인딩 시 동일한 기능이제공될 수 있도록 설정.inputCalendar의 useMonthYearFormat 기능 : 달력 및 입력창에서 보여지는 값의 표현방식이 연도/월의 순서를 월/연도로 변경함.dataCollection과 연동 시 dataCollection에 저장되는 값은 한국식 표현인 "연" > "월" > "일" 순서로 저장됨.


userData1

사용자 정의 데이터 속성. getUserData("userData1") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData1");


userData2

사용자 정의 데이터 속성. getUserData("userData2") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData2");


userData3

사용자 정의 데이터 속성. getUserData("userData3") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData3");


useVerticalAlign

IE에서 verticalAlign을 script를 통해 조절할지에 대한 여부. 하위호환을 위한 옵션입니다.


validateOnCheckMaxByteLength

[default:false] ignoreChar 및 allowChar 설정을 통해 허락된 문자만 maxByteLength만큼 검증. true: 최대 바이트수까지의 허락된 문자를 검증.false (기본 값): 최대 바이트수까지의 모든 문자를 검증. (복사한 문자들 중 허락된 문자만 최대 바이트 수까지 InputBox에 붙여넣을 때 복사할 때 유용.) 관련 속성: ignoreChar, allowChar, maxByteLength


validateOnInput

[default:false] oninput 이벤트 시점에 input 컴포넌트의 유효성을 검사할지의 여부. (oninput 이벤트를 지원하는 IE9이상 브라우저 지원)true: oninput 시점에 유효성 검사를 수행함. (한글 값에 대해서도 유효성을 검증할 수 있음)false (기본 값): oninput 시점에 유효성 검사를 수행하지 않음.


validator

유효성 체크 함수 이름.컴포넌트에서 blur가 발생하는 시점에 본 속성에 정의한 함수가 실행됨. 즉, onblur 이벤트 이전에 실행되며, blur가 발생하는 시점에 유효성을 확인하며 return을 통해 value를 변경 할 수 있음.
 (구현 예제)
 function fn_idValid(tmpVal){ // tmpVal는 컴포넌트의 value를 담는다. 
                              // sync로 동작하는 중복 ID 체크 submisison 등을 호출하여 commObj.idCheck에 중복 여부를 담는다. 
                              if(commObj.idCheck === true){ return tmpVal; }
                              else{ alert("중복 된 ID가 있습니다."); 
                                    return ""; 
                                   } 
                             };





Event Detail




onblur

포커스를 잃었을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onchange

컴포넌트의 value가 변경되었을 때 발생하는 이벤트로 focus out 시점에 발생한다.스크립트를 통해 값이 변경 된 경우에도 발생한다.

Parameter

nametypedescription


infoJSONoldValue, newValue를 포함한 JSON을 반환한다.
 info.oldValue : 이전 값
 info.newValue : 변경된 값


Sample
// 컴포넌트 태그 안에 event가 있는 경우
<![CDATA[
    var oldValue = info.oldValue;
    var newValue = info.newValue;
]]>


onclick

마우스로 컴포넌트를 클릭했을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





ondblclick

마우스로 컴포넌트를 더블 클릭했을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





oneditenter

엔터키를 키를 눌렀을 때 발생.
Sample

scwin.input1_oneditenter = function(e) {
    var keyCode = (e.charCode) ? e.charCode : e.keyCode;   
    var logStr = "keyCode=" + keyCode;
    logger.printLog(logStr);
    console.log(logStr);
}


oneditfull

maxByteLength 값이 있을 경우, 입력된 값이 maxByteLength과 같을 경우 발생.마지막 글자가 한글인 경우에는 미지원.
Sample

scwin.input1_oneditfull = function() {

}


oneditkeyup

키보드에서 키를 눌렀다 놓았을 때 발생한다. oldValue, newValue, keyCode를 포함한 JSON객체가 인자로 추가로 넘어온다.

Parameter

nametypedescription


infoJSONoldValue, newValue, keyCode를 포함한 JSON을 반환한다.
 info.oldValue : 키가 입력되기 이전의 input값
 info.newValue : 키가 입력된 후의 input값
 info.keyCode : 입력된 키의 코드값


eEventevent 객체


Sample

scwin.input1_oneditkeyup = function(info, e) {
    var logStr = "oldValue=" + info.oldValue + ", newValue=" + info.newValue + ", keyCode=" + info.keyCode;
    logger.printLog(logStr);
    console.log(logStr);
}


onfocus

포커스를 얻었을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





oninputinvalid

validation에 실패했을 때 발생하는 이벤트

Parameter

nametypedescription


infoJSONcallerId, detail, type, value를 포함한 JSON을 반환한다.
 info.callerId : validation 대상이 되는 input 컴포넌트의 id
 info.type : validator 이름 ( maxlength, float, maxbytesize 등.. )
 info.value : validation에 실패한 value 값
 info.detail : validation 실패정보





onkeydown

키보드에서 키를 눌렀을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onkeypress

키보드에서 키를 눌렀을 때(누르고 있는 동안에도) 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onkeyup

키보드에서 키를 눌렀다 놓았을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onmousedown

마우스를 클릭 했을 때(마우스를 누르는 순간) 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onmousemove

마우스 포인터가 이동될 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onmouseout

마우스가 지정된 영역이나 링크 위에서 벗어났을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onmouseover

마우스가 지정된 영역이나 링크 위에 놓일 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





onmouseup

마우스 버튼을 눌렀다 놓을 때 발생한다.

Parameter

nametypedescription


eObjectEvent 객체





ontooltiphide

툴팁이 사라질 때 발생



ontooltipshow

툴팁이 나타날 때 발생



onviewchange

키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생.스크립트를 통해 값이 변경된 경우에는 발생하지 않음. (native onchange 이벤트와 유사함.)

Parameter

nametypedescription


infoJSONoldValue, newValue를 포함한 JSON을 반환한다.
 info.oldValue : 이전 값
 info.newValue : 변경된 값


Sample
// 컴포넌트 태그 안에 event가 있는 경우
<![CDATA[
    var oldValue = info.oldValue;
    var newValue = info.newValue;
]]>



Method Detail




addClass(
									  className
										)
							

컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY추가할 class의 이름



Sample
// (예제)
// input1 컴포넌트에 oddClass라는 class를 추가    
input1.addClass("oddClass");


bind(
									  eventType
									       , 
									       function
										)
							

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


eventTypeStringY할당할 이벤트


functionFunctionY이벤트에 대한 핸들러 함수.



Sample
// (예제 1)
// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. 
input1.bind("onclick", function(e){ alert(input1.getValue();}));

// (예제 2)
// 미리 commObj.ev_click 함수를 정의.
var commObj = {};
commObj.ev_click = function(e){
    alert("click :: "+this.id);
};

// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. 
input1.bind("onclick", commObj.ev_click );


changeClass(
									  oldClassName
									       , 
									       newClassName
										)
							

웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) 기본적으로 addClass를 통해 추가된 class만 변경 가능. 웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. 
// config.xml에 아래 설정을 추가. 
<removeDefaultClass value="true" />


Parameter

nametyperequireddescription


oldClassNameStringY변경할 class


newClassNameStringY새로 사용할 class



Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.


// config.xml 파일에 아래를 추가.

    <removeDefaultClass value="true" />


// class를 변경 가능. 
// (tmpInputClass class를 tmpInputWarninClass로 변경.)
input1.changeClass("tmpInputClass","tmpInputWarninClass");


commit(
									  
										)
							

input이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수 모든키의 실시간 적용은 지원하지 않으며, Enter키와 tab키 동작일 경우만 사용가능


Sample

 scwin.input1_onkeydown = function(e) { 
    if((e.charCode || e.keyCode) === 13) { 
        input1.commit(); // input에 현재 입력된 값을 dataMap1.key1에 반영한다. 이를 생략할 경우 key1값을 꺼냈을 때 input에 입력되기 이전의 값을 얻게 된다. 
        dataMap1.get("key1");
    }
 }


focus(
									  
										)
							

웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)





focusNextTabOrder(
									  
										)
							

nextTabID가 설정되어 있는 경우, nextTabID에 해당하는 컴포넌트로 포커스를 이동한다.


Sample

input1.focusNextTabOrder();


focusPreTabOrder(
									  
										)
							

자신이 nextTabID로 설정되어 있는 경우, 자신을 nextTabID로 지정한 컴포넌트로 포커스를 이동한다.


Sample

input1.focusPreTabOrder();


getDataListInfo(
									  
										)
							

컴포넌트와 바인딩된 DataList를 반환.



Return

typedescription


Objectnodeset, label, value id를 객체로 반환


Sample
// 사용 예
input1.getDataListInfo();


getDataType(
									  
										)
							

dataType 속성값을 반환. [default: text]



Return

typedescription


Stringinput의 dataType


Sample
//아래와 같이 input이 정의 된 경우


var returnValue = input1.getDataType();
//return 예시 ) "number"


getDisabled(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Booleandisabled 속성 값


Sample
// 컴포넌트의 disabled 속성 값 확인 예제
var returnValue = componentId.getDisabled();
// (반환 값 예시) false


getDisplayFormat(
									  
										)
							

현재 컴포넌트에 설정 된 displayFormat을 반환한다.



Return

typedescription


String현재 설정 된 displayFormat


Sample
//dataType이 number이고 displayFormat을 #,###으로 적용 한 경우
var returnValue = input1.getDisplayFormat();
//return 예시 ) "#,###"
 
//dataType이 date이고 dateMask를 yyyy-MM이고 ioFormat을 yyyyMM로 적용 한 경우
var returnValue = input1.getDisplayFormat();
//return 예시 ) "yyyy-MM"


getDisplayFormatter(
									  
										)
							

현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다.



Return

typedescription


StringdisplayFormatter에 설정 된 함수


Sample
//input1 컴포넌트의 displayFormatter="eduObj.fn_numFormat" 설정 시
var returnValue = input1.getDisplayFormatter();
return 예시 ) "eduObj.fn_numFormat"


getDisplayValue(
									  
										)
							

현재 보여지는(format이 적용 된) 값을 반환한다.



Return

typedescription


Stringforamt이 적용 된 값


Sample
//input1컴포넌트의 dataType이 number이고 displayFormat을 "#,###"으로 적용하고 1000000을 입력 한 경우
var returnValue = input1.getDisplayValue();
//return 예시 )"1,000,000"


getFormattedValue(
									  
										)
							

formatted된 input의 값을 반환한다.



Return

typedescription


Stringformatted된 input의 값


Sample
//input1컴포넌트의 dataType이 number이고 displayFormat을 "#,###"으로 적용하고 1000000을 입력 한 경우
var returnValue = input1.getFormattedValue();
//return 예시 )"1,000,000"


getGenerator(
									  
										)
							

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Object부모 Generator 객체


Sample
//부모 Generator가 자식으로 Trigger를 생성한 예제
  

// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. 
 scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} 



getID(
									  
										)
							

웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트 ID


Sample
// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.
function fn_validCheck(tmpObj){
    var compID = tmpObj.getID();
}
// 위의 예제 에서 tmpObj가 "input1" ID를 가지고 있는 경우,
// (반환 값) "input1"


getInitStyle(
									  CSS
										)
							

컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


CSSStringN속성 (지정하지 않으면 모든 정보 출력)






getNextTabID(
									  
										)
							

nextTabID 속성의 설정 값을 반환.
(관련 속성)
nextTabID


Sample
// 사용 예
var nextTabID = input1.getNextTabID();


getOpacity(
									  
										)
							

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS의 opacity 속성 값을 반환.



Return

typedescription


IntegerOpacity 값


Sample
// inputBox 컴포넌트에 opacity CSS를 적용.

        
// inputBox 컴포넌트의 opacity 값을 반환. 
var returnValue = input1.getOpacity(); 
// returnValue는 0 ~ 1 사이의 실수.
// (반환 값) "0.2"


getOriginalID(
									  
										)
							

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)originalID는 Scope 기능을 사용할 경우 존재. scope="true"인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + "_")가 추가되는 방식으로 변경됨.  originalID는 이 때, prefix가 추가되기 전 ID를 의미.



Return

typedescription


String컴포넌트의 originalID


Sample
// WFrame을 사용하는 다중 화면 구조 예시

// WFrame을 포함한 메인 화면 (main.xml) 
 

// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)


// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.
// getID 실행 
textbox1.getID(); // 실행 결과는 "wframe1_textbox1"
 
// getOriginalID 실행 
textbox1.getOriginalID(); // 실행 결과는 "textbox1"


getPluginName(
									  
										)
							

웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트의 이름 (pluginName)


Sample
// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.
var commObj = {};

commObj.fn_makeReqData = function(tmpObj){
    var tmpID = tmpObj.getID(); // 컴포넌트 ID
    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름

    if(tmpCompType == "input"){
        //..로직..
    }else if(tmpCompType == "gridView"){
        //..로직 ..
    }else{
        //..로직..
    }
};


getPosition(
									  positionName
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


positionNameStringY[left, top] 위치 종류




Return

typedescription


Number컴포넌트의 위치 값


Sample
// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,


// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     
var returnValue = input1.getPosition("top"); 

// 픽셀 단위의 위치 값이 반환됨.

// (반환 값) 10


getReadOnly(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Boolean현재 설정되어있는 readOnly 속성


Sample
// 컴포넌트의 readOnly 속성 값 확인 예제
var returnValue = componentId.getReadOnly();
// (반환 값 예시) false


getScope(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.



Return

typedescription


ObjectWFrame 객체 또는 null


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
textbox1.getScope(); 
// (반환 값) wframe11 객체


getScopeWindow(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.



Return

typedescription


ObjectWFrame 객체의 scope 객체 또는 전역 window 객체


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
var scope = textbox1.getScopeWindow();
scope.wframe11 === textbox1.getScope(); // true


getSize(
									  sizeName
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


sizeNameStringY크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고. 
height : element.clientHeight
innerHeight : element.clientHeight + padding
outerHeight : element.clientHeight + padding + border
outerMarginHeight : element.clientHeight + padding + border + margin
width : element.clientWidth
innerWidth : element.clientWidth + padding
outerWidth : element.clientWidth + padding + border
outerMarginWidth : element.clientWidth + padding + border + margin




Return

typedescription


Number컴포넌트의 크기 값


Sample
var returnValue = componentId.getSize("width");
// (반환 예) 100 
// 픽셀 단위의 크기 값이 반환됨. 
// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.


getStyle(
									  propertyName
										)
							

웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY반환할 CSS 속성




Return

typedescription


StringCSS 속성 값


Sample
//아래와 같이 input 컴포넌트가 정의 된 경우


// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   
var returnValue = input1.getStyle("width");

// (반환 값) "144px"


getStyleValue(
									  style
										)
							

[deprecated]getStyle 사용 권장.웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.


Parameter

nametyperequireddescription


styleStringY반환하려는 CSS 속성.




Return

typedescription


Stringstyle 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)





getTitle(
									  
										)
							

컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Stringtitle 속성 값.


Sample
// 아래와 같이 input 컴포넌트의 title 속성이 "이름 입력"으로 정의된 경우


var tmpTitle = input1.getTitle();
// (반환 값 예시) "이름 입력"


getUdcHome(
									  
										)
							

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome(); 
// (실행 결과) /a/b/udc.xml


getUdcRoot(
									  
										)
							

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome();    
// (실행 결과) /a/b/


getUserData(
									  key
										)
							

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


keyStringY데이터의 key




Return

typedescription


Stringkey에 해당하는 value


Sample
// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제


// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("setTest");
// (반환 값) "Hello"

//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. 
input1.setUserData("valueTest","WebSquare");

// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("WebSquare");
// (반환 값) "WebSquare"


getValue(
									  
										)
							

컴포넌트의 value를 반환한다.



Return

typedescription


String컴포넌트의 value


Sample
//사용자가 input1 컴포넌트에 "WebSquare"를 입력 한 경우
input1.getValue();
//return 예시 ) "WebSquare"


hasClass(
									  className
										)
							

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY검색할 class 이름




Return

typedescription


Booleanclass의 포함 여부


Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.

        
var returnValue = input1.hasClass("tmpInputClass");
// (반환 값) true


hide(
									  
										)
							

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)display:none; 및 visibility:hidden; CSS를 적용.


Sample
// (예제) 컴포넌트를 숨김
componentId.hide();


removeClass(
									  className
										)
							

웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)기본적으로 addClass를 통해 추가된 class만 삭제 가능. 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. 
 // config.xml 파일에 아래 설정 추가 
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY삭제 할 class명



Sample
// inputBox의 속성으로 class가 직접 정의된 경우,


// config.xml 파일에 아래 항목을 추가.

    <removeDefaultClass value="true" />


// removeClass를 통해 삭제 가능. 
input1.removeClass("tmpInputClass");


setAllowChar(
									  allowChar
										)
							

allowChar 속성값을 변경한다.


Parameter

nametyperequireddescription


allowCharStringY변경할 allowChar 속성 값



Sample
input1.setAllowChar("5-9");


setDefaultValue(
									  initValue
										)
							

컴포넌트의 initValue를 설정한다.주요 활용은 본 컴포넌트 상위의 group 컴포넌트의 init API를 사용 할 때 컴포넌트의 value를 ''(empty string) 대신 개발자가 설정한 초기값, 즉 initValue의 값으로 설정 할 때 쓰인다.


Parameter

nametyperequireddescription


initValueStringY새로 설정 할 initValue



Sample
//아래와 같이 group과 input 컴포넌트를 정의.




//input 컴포넌트의 초기값 설정.
input1.setDefaultValue("WebSquare");

//group의 init API 호출
group1.init();
//이후 input1의 value가 ''이 아닌 'WebSquare'로 설정 됨.


setDisabled(
									  disabled
										)
							

컴포넌트의 disabled 속성을 설정.


Parameter

nametyperequireddescription


disabledBooleanYdisabled 상태
true: disabled 속성 활성화
false: disabled 속성 비활성화



Sample
//컴포넌트에 disabled 설정
componentId.setDisabled(true);


setDisplayFormat(
									  format
										)
							

컴포넌트의 displayFormat 속성을 설정한다.


Parameter

nametyperequireddescription


formatStringY새로 설정할 displayFormat



Sample
//아래와 같이 input 컴포넌트가 정의 된 경우


//input1 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.
input1.setDisplayFormat("#,###.#0");

//사용자가 1000000 을 입력 할 경우 1,000,000.00 로 표현.


setDisplayFormatter(
									  formatter
										)
							

컴포넌트의 displayFormatter 속성을 설정한다.


Parameter

nametyperequireddescription


formatterStringY새로 설정 할 format용 함수명



Sample
//아래와 같이 input이 정의 된 경우


//전역스크립트에 아래와 같이 input의 format Function을 정의 한다.(value의 값을 대문자로 치환) 
var commObj = {}; 
commObj.fn_setUpper = function(value){
    value = value.toUpperCase();
    return value;
};

//input1컴포넌트의 displayFormatter를 설정.
input1.setDisplayFormatter("commObj.fn_setUpper");

//표현 예시 ) 사용자가 'hong gil dong'을 입력시 'HONG GIL DONG'로 표현 된다.


setEventPause(
									  evList
									       , 
									       flag
										)
							

지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


evListStringN중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)


flagBooleanY이벤트 중단 여부. 
true: 중단
false: 중단 해제.



Sample
// (예제 1)
// onclick 이벤트를 중단. 
input1.setEventPause("onclick", true); 

// (예제 2)
// onfocus 및 onblur 이벤트의 중단을 해제.
input1.setEventPause("onfocus,onblur", false); 

// (예제 3)
// input1에 등록된 모든 사용자 이벤트를 중단.
input1.setEventPause(null, true);


setInitStyle(
									  property
										)
							

컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyStringNCSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)



Sample
// (예제)
group1.setInitStyle();


setIoFormat(
									  ioFormat
									       , 
									       displayFormat
										)
							

input의 ioFormat 속성을 설정한다. dataType이 date인 경우에만 동작한다.


Parameter

nametyperequireddescription


ioFormatStringY새로 설정할 ioFormat


displayFormatStringN새로 설정할 displayFormat (dateMask)



Sample
//아래와 같이 input 컴포넌트가 정의 된 경우

input1.setIoFormat("ddMMyyyy", "dd/mm/yyyy"); // ioFormat및  displayFormat을 새로 설정한다.
// input에 값이 설정되어 있을 경우, ioFormat이 기존과 달라지게 되면 input값이 ioFormat에 맞게 자동으로 변경된다. 값이 변할경우 onchange이벤트 발생.


setMaxByteLength(
									  maxByteLength
										)
							

maxByteLength를 동적으로 설정합니다.


Parameter

nametyperequireddescription


maxByteLengthNumberY설정할 maxByteLength 속성 값



Sample
input1.setMaxByteLength(7);


setMaxLength(
									  maxLength
										)
							

maxLength를 설정.


Parameter

nametyperequireddescription


maxLengthNumberY설정할 maxLength 값



Sample
// 사용 예
input1.setMaxLength(7); // 최대값을 "7"로 지정.
input1.setMaxLength(""); // maxLength 제한을 해제.


setNextTabID(
									  componentID
									       , 
									       componentScope
										)
							

nextTabID 속성을 설정.두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.
(관련 속성)
nextTabID


Parameter

nametyperequireddescription


componentIDStringYnextTabID로 설정할 컴포넌트의 ID


componentScopeStringNnextTabID로 설정할 컴포넌트의 scope



Sample
// 사용 예
input1.setNextTabID("input2", "wframe1");


setOpacity(
									  value
										)
							

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.


Parameter

nametyperequireddescription


valueNumberYOpacity 값 (0과 1 사이의 실수)



Sample
// (예제) 불투명도를 0.45로 설정
componentId.setOpacity(0.45);


setPlaceholder(
									  placeholderStr
										)
							

placeholder 속성값을 변경한다.


Parameter

nametyperequireddescription


placeholderStrStringY변경할 placeholder의 값



Sample

input1.setPlaceholder("이름을 입력하세요");


setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


leftNumberY설정할 left 위치 값 또는 null.


topNumberY설정할 top 위치 값 또는 null.


modeStringN위치 설정 방법. [default: absolute, delta] 
absolute: 입력된 값을 위치로 설정.
delta: 현재 위치에 입력된 left 및 top 값을 추가.



Sample
// (예제) 컴포넌트의 top만 100px로 설정.
componentId.setPosition(null, 100);


setReadOnly(
									  readOnly
										)
							

readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.


Parameter

nametyperequireddescription


readOnlyBooleanYreadOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false



Sample
//컴포넌트의 readonly 적용.
componentId.setReadOnly(true);


setRef(
									  ref
										)
							

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함.명시하지 않을 경우, InstanceData의 XPath로 인식됨.


Parameter

nametyperequireddescription


refStringY설정할 ref의 경로



Sample
//dataMap1의 name key와 input1 컴포넌트의 value를 binding 하는 경우
input1.setRef("data:dataMap1.name");

//InstanceData의 res/userData/name 과 연동 할 경우.
input1.setRef("res/userData/name");


setSize(
									  width
									       , 
									       height
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


widthNumberY새로 설정할 컴포넌트의 width 값 또는 null


heightNumberY새로 설정할 컴포넌트의 height 값 또는 null



Sample
// (예제) 컴포넌트의 height만 100px로 설정.
componentId.setSize(null,100);


setStyle(
									  propertyName
									       , 
									       value
										)
							

웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY설정할 CSS 속성


valueStringY해당 CSS 속성에 적용할 값



Sample
// (예제 1) 컴포넌트의 width를 200px로 설정
componentId.setStyle("width", "200px");

// (예제 2) 배경색을 olive로 변경
componentId.setStyle("background-color","olive");


setUserData(
									  key
									       , 
									       value
										)
							

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.


Parameter

nametyperequireddescription


keyStringY설정할 데이터의 key


valueStringY설정한 데이터의 value



Sample
// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.

componentId.setUserData("data", "WebSquare");

// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. 
 
componentId.setUserData("title", "WebSquare");
// 아래와 같이 로그가 출력됨. 
// !!!WARNING - [title] can't be defined as UserData.


setValue(
									  value
										)
							

컴포넌트의 value를 설정한다.


Parameter

nametyperequireddescription


valueStringYinput의 value 값



Sample

input1.setValue("WebSquare");


show(
									  displayType
										)
							

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)CSS display 속성을 주어진 값으로 설정하고 "visibility: show;"를 적용.


Parameter

nametyperequireddescription


displayTypeStringN적용할 CSS display 속성의 값.   
block : display: block;을 적용. (기본 값)
inline : display: inline;을 적용.
none : display: none;을 적용.
"" : show 수행 이전의 display 속성 값으로 복구.



Sample
// (예제) display: block; CSS를 설정.
componentId.show();  

// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.
componentId.show("");


toggleClass(
									  className
										)
							

웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. 웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. 기본적으로 addClass를 통해 추가된 class만 삭제 가능. 웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. 
 // config.xml 파일에 아래 설정 추가
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY추가/삭제할 class



Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.


//config.xml 파일에 아래를 추가.

    <removeDefaultClass value="true" />


// tmpInputClass class를 삭제.
input1.toggleClass("tmpInputClass");

// (위에서 삭제된) tmpInputClass class를 다시 추가.
input1.toggleClass("tmpInputClass");


trigger(
									  type
									       , 
									       array
										)
							

컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringY발생시킬 이벤트


arrayArrayN이벤트 핸들러에 전달할 파라미터 배열



Sample
// (예제 1)
// input1 컴포넌트에 onclick 이벤트를 발생시킴.
input1.trigger("onclick");

// (예제 2)
// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.
input1.trigger("onviewchange", [1,2]);


unbind(
									  type
									       , 
									       function
										)
							

컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringN제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)


functionFunctionN제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)



Sample
// (예제 1)
// input1에 등록된 모든 이벤트를 제거.
input1.unbind();

// (예제 2)
// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.
input1.unbind("onviewchange");

// (예제 3)
// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.
input1.unbind("onviewchange", func1);


unbindRef(
									  
										)
							

ref 바인딩을 해제.





validate(
									  
										)
							

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.
(관련 속성)
 displaymessage="true"
(유효성 검증 속성)
 mandatory
 minlength
 maxlength
 minByteLength
 maxByteLength



Return

typedescription


Boolean유효성 검사 결과 값


Sample
// mandatory 속성을 지정.


var returnValue = input1.validate();
// (반환 값) - false (input의 값이 없을 경우) 
// (반환 값) - true (input의 값이 있을 경우) 

// displaymessage="true" 속성을 지정하고 유효성 검사에서 false가 반환될 경우,
// 엔진에서 내부에서 설정한 "필수 입력 항목입니다"가 표시됨.


validateObject(
									  
										)
							

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.
(관련 속성)
 displaymessage="true"
(유효성 관련 속성)
 mandatory
 minLength
 maxLength 
 minByteLength
 maxByteLength



Return

typedescription


Objectobject 유효성 검사 결과 객체
    object.callerId 유효성 검사 대상 컴포넌트 ID
    object.type 유효성 검사 항목
   object.value 유효성 검사 결과 값


Sample
//아래와 같이 input 컴포넌트에 mandatory 속성을 정의했을 경우


var returnObj = input1.validateObject();
// (반환 값 - input의 값이 없을 경우 )returnObj 객체 반환

returnObj.callerId = "input1" returnObj.type = "mandatory" returnObj.value = ""   
// (반환 값 - input의 값이 있을 경우)비어있는 객체가 반환 

// displaymessage="true" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨.
// (alert 메세지 예시) 필수 입력 항목입니다


visible(
									  flag
										)
							

[deprecated] show/hide 혹은 setStyle 사용을 권장.엔진 내부적으로 CSS visibility 속성을 설정.


Parameter

nametyperequireddescription


flagBooleanY설정할 CSS visibility 속성 값 
true : visibility: visible;
false : visibility: hidden;










Copyrights Inswave Systems Co., Ltd.



