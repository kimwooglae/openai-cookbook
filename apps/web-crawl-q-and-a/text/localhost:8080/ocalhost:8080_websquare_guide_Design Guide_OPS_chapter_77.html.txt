
Textbox77.Textbox수정 일자 버전 (SP2)WebSquare5 Studio : 20180117_1349_x86_BWebSquare5 Engine : 5.0_2.2982B.20180223.154326_1.5Textbox는 문자열을 출력할수 있는 컴포넌트입니다. group처럼 웹스퀘어엔진을 통해서 렌더링된 html코드에서는 div 태그로 그려집니다.<a><span></span></a>와 같은 코드를 그리려면 안쪽의 자식 요소가 되는 컴포넌트(textbox 혹은 span태그)를 먼저 그리고, 오른쪽 클릭으로 컨텍스트 메뉴를 호출하여 'Group으로 감싸기'를 수행하여 Group 컴포넌트로 감싸 나아가면 더 빠르고 수월하게 코딩을 할 수 있습니다. Anchor와 폼 요소 이외에 명확한 마크업이 필요하다면, 마지막 자식 요소를 Textbox로 그리고 group으로 감싸 나아가면 됩니다.Text를 출력하는 컴포넌트로 HTML div Tag로 표현되며 Output컴포넌트의 경량화 버전이다. 웹스퀘어 컴포넌트로 제공되지 않는 HTML Tag(li,dt,dd,h1,p 등)들을 tagname 속성을 이용하여 표현 할 수 있으며 Textbox가 child를 가질 수 없는 컴포넌트임으로 컨테이너성 Tag의 경우 Group컴포넌트와 함께 사용한다.77.1PropertyPropertyDescriptionclassHTML의 class속성과 동일한 기능을 제공하며 css파일 또는 style블럭에 정의 한 class를 1개 또는 공백(space)를 이용하여 다중 적용이 가능하다.dataType[default:text, number, date, time, link]컴포넌트 value의 data type을 명시하며 해당 값은 엔진에서 제공하는 displayFormat등의 속성에서 참조한다.displayFormat엔진 내부에서 dataType 속성에 정의한 type에 따라 동작되며 excel의 서식을 적용하는 방식처럼 value의 format을 적용 할 수 있다.displayFormatter와 동시적용이 불가하다. 예시)dateType이 number일 경우 #,###.#0 으로 적용하면 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현된다.escape<>&"를 HTML Escape 문자로 변환하여 화면에 표시한다.for컴포넌트(label)가 click 됐을 때 focus를 주고자하는 컴포넌트의 id를 정의한다.본 속성이 정의 된 경우 HTML label Tag로 출력되며 tagname 속성은 무시된다.id컴포넌트의 ID로 전역객체로 할당되며 script에서 본 id로 컴포넌트에 접근이 가능하다.label컴포넌트의 value로 화면에 출력하고자 하는 text를 정의한다.styleInputBox의 style 속성tabIndex SP2Tab Key를 이용 한 컴포넌트의 포커스 순서로 HTML의 tabindex속성과 동일한 기능을 제공한다.tagname기본적으로 Textbox컴포넌트는 div Tag로 표현며 div가 아닌 다른 Tag로 표현하고자 할 때 사용한다. 일반적으로 value값을 표현해야하는 Tag에 사용되며 자식 Tag(Element)를 가질 수 없다.toolTip SP2웹스퀘어에서 만든 toolTip으로 컴포넌트의 추가정보를 명시한다. 마우스 over시 표현된다.tooltipFormatter SP2tooltipDisplay속성이 true일 때 데이터를 표현 할 tooltip의 내용을 변경 할 사용자 함수명. 사용자 함수에서는 componentId, label을 인자로 받아 tooltip에 표현 할 string을 return한다.html attributes해당 테그에 대응하는 속성을 추가한다.77.2class 적용과 스타일 변경Textbox를 활용하여 가로형 테이블 형태의 디자인을 입혀보겠습니다.테이블 데이터 셀의 헤더가 될 부분, 테이블 데이터 셀을 포함하고 있는 2행의 형태로 Design view에 Textbox를 활용하여 그립니다. 한가지 주의할 점은 행을 표현하기 위해서는 데이터 셀의 헤더와 데이터 셀이 그룹핑이 되어야 한다는 점입니다. 앞서 본 group 컴포넌트로 쉽게 감싸는 방법(링크)을 이용해 그룹핑이 필요한 곳에 group으로 감싸주어야 합니다.우선 셀이 될 4개의 텍스트 박스를 그립니다. 각 Textbox의 텍스트는 해당 Textbox 컴포넌트를 Design view에서 더블클릭 또는 label에서 수정합니다.전화번호 헤더와 전화번호 데이터가 같은 첫번째 행이 되어야 하므로, 두 Textbox 컴포넌트를 선택하고 group으로 감쌉니다.그림 77-1.첫번째 행의 셀들이 그룹핑이 된 Design View 모습주소 헤더와 주소데이터도 첫번째 행 다음으로 두번째 행이 되어야 하므로, 두 Textbox 컴포넌트를 선택하고group으로 감쌉니다.그림 77-2.두번째 행의  셀들이 그룹핑이 된 Design View 모습이 행들은 한 테이블 안에 존재하는 행들이므로, 그룹핑 헀던 행들도 한번 더 그룹핑을 해주어야 합니다.그림 77-3.행들을 그룹핑했을때의 Design View 모습다음으로 이 테이블을 꾸밀 CSS를 작성합니다. CSS 코드가 Deisgn View에 반영되는 것을 보기 위해 먼저 style 창에 인라인으로 데이터 헤더, 데이터 셀, 데이터 행, 데이터 테이블의 CSS를 입력합니다.그림 77-4.테이블 데이터  헤더의 스타일 입력그림 77-5.테이블 데이터  셀의 스타일 입력그림 77-6.테이블 데이터  행의 스타일 입력그림 77-7.테이블의 스타일  입력Style 창의 스타일 입력이 끝나면, 외부 스타일 시트로 작성을 하고 컴포넌트에 적용할 CSS Class를 Property 창에 해당 CSS Class를 입력합니다. Group 컴포넌트와 동일하게 외부 스타일 시트 작성이 더 수월하면 Style 창에 스타일 입력을 건너띄어도 무방합니다.그림 77-8.작성한 외부 CSS그림 77-9.데이터 헤더에  해당되는 스타일의 클래스 삽입그림 77-10.데이터 셀에  해당되는 스타일의 클래스 삽입그림 77-11.데이터 행에  해당되는 스타일의 클래스 삽입그림 77-12.테이블에 해당되는  스타일의 클래스 삽입. 두가지 이상의 클래스를 합성 하고 싶을 경우에는 html 코딩과 동일하게 class 속성에 클래스 사이를 공백으로  띄어 적용할 수 있다.그림 77-13.파싱된 구조테이블 관련 요소가 될 컴포넌트에 스타일을 적용시키고 브라우저 개발자 도구로 확인을 해봅니다. 개발자 도구를 통해서 본 파싱된 결과물은 스타일 시트에 의해테이블의 형태를 취하고 있고, 각 요소들이 테이블과 유사한 부모-자식간의 관계가 되어있지만, 파싱된 마크업이 div로 (div는 division으로 영역을 나누는(레이아웃) 용도의 태그) 의미있는 마크업이 아니기에 문서상의 테이블을 의미하는 코딩을 했다고 할 수 없을 것입니다. 여기까지 만들어진 샘플을 토대로 tagname 변경으로 간단한 테이블 마크업을 해보겠습니다.77.3마크업 변경과 속성 추가하기WebSquare의 컴포넌트 중 가장 빈번히 사용되는 컴포넌트인 Group과 Textbox 컴포넌트는 tagname 속성을 제공하여 파싱될 마크업을 변경하여 사용자가 원하는 대로 마크업을 할 수 있습니다. 두 컴포넌트 모두 tagname 변경 방법은 동일합니다. Group 컴포넌트와 같은 방법으로 해당 Textbox 컴포넌트를 Design View에서 선택하고, Property창의 tagname을 변경하면 됩니다.전 챕터(2.1.1)에서 만들었던 디자인을 적용한 샘플을 복사하여 tagname 변경을 해보도록 하겠습니다. WebSqaure는 컴포넌트를 쉽고 빠르게 복사하여 생산성을 높일 수 있습니다. Component 창에서 복사할 컴포넌트를 오른쪽 클릭하여'복사'를 누른 후, 원하는 위치(부모가 될 컴포넌트)를 선택한 후 오른쪽 클릭하여 붙여넣기를 선택하면 됩니다. id는 WebSquare 에서 자동으로 1씩 증가한 만큼 넣어주어 id 중복 문제가 일어나지 않도록 해줍니다.그림 77-14.56비교적 명확한 요소 이름을 가진 데이터의 헤더 부터 tagname 부터 적용해 보겠습니다.<table> 예제는 tableLayout을 사용하는 것을 권장하며 개별적으로 작성하기 위한 방법으로 아래 방법을 참고하겠습니다. HTML 페이지를 작성하는 것과 같이 <table>에 대한 스타일 시트를 따로 작성하겠습니다.그림 77-15.새로 작성한 table 관련 스타일 시트<table>에 관한 스타일 시트가 완성되었으니, 복사한 컴포넌트에 CSS Class를 입력합니다. 입력한 후에 Design View에 적용이 안되는 이유는 스타일 시트 작성이 요소 선택자로 tr, th, td 에 대한 스타일이기 때문에 파싱될 마크업(tagname 속성)이 설정되어있지 않아 div로 표현되어서 그렇습니다. 그렇다면, 스타일 적용을 확인하기 위해 각각 그룹핑 되어있는 컴포넌트들을 table 코딩이었을 때에 매치되는 마크업으로 변경해 보도록 하겠습니다.브라우저에 파싱될 마크업을 수정하는 것은 Group 컴포넌트와 동일하게 Property 창에서 tagname 속성을 수정하면 됩니다. 제일 명확한 마크업인 데이터의 헤더인 th 부분을 먼저 수정해 보겠습니다. Design View에서 데이터 헤더에 해당되는 컴포넌트를 선택하고, Property창의 tagname을 선택하여 'th'를 직접입력 하거나찾아넣습니다.그림 77-16.데이터 헤더  셀이 될 컴포넌트에 th를 입그림 77-17.데이터 셀이  될 컴포넌트에 td를 입그림 77-18.테이블의 행이  될 컴포넌트에 tr을 입력그림 77-19.테이블이 될  컴포넌트에 table을 입력그림 77-20.브라우저에서의  화면 확인 및 파싱 결과 확인tagname을 수정하여 마크업이 결정되었습니다. 이제 가로형 테이블이니, 데이터 헤더에 대한 제목 범위를 지정하는 'scope' 속성을 추가하면 기본적인 table 마크업이 완성됩니다. 'scope' 속성이 없어도 정상적으로 브라우저 화면에서 나오나, 접근성 작업시 'scope' 속성은 반드시 넣어주셔야 합니다.Textbox 컴포넌트의 속성 추가는 Group 컴포넌트의 속성 추가와 같은 방법으로 'scope' 속성을 추가하기 위해서 th와 매칭되는 Textbox 컴포넌트를 Component 창에서 선택하고 오른쪽 클릭하여 '속성 태그 수정'을 선택하여 추가합니다.그림 77-21.tagname을 th로 준  컴포넌트의 scope 속성 추가그림 77-22.속성을 추가한  뒤에 브라우저에서 결과 확인접근성을 위해 <caption>코딩, summary Attibute 삽입하고 싶다면, 이전 코딩 방법과 동일하게 Table이 될 Group 컴포넌트에 Textbox 컴포넌트를 삽입하고 tagname을 caption으로 직접 입력하여 바꾸고, 속성 추가하기 컨텍스트 메뉴로 추가할 수 있습니다.더 세밀한 웹표준과 웹접근성을 준수하는 table 코딩 및 내용이 정적·동적인 table 을 하기 위해서는 여러가지 컴포넌트의 조합이 필요한 경우가 있기에, 다음 장인 다른 어떤 컴포넌트와 Group 컴포넌트, Textbox 컴포넌트의 조합 파트를 참고하시기 바랍니다.77.4CSS Overriding그림 77-23.02NoClassDescription1w2textboxw2textbox은 웹스퀘어 엔진에서 정의된 클래스입니다, 브라우저가 파싱할때 자동으로 부여됩니다.2inlinewebsquare의 style 편집기에서 해당 style을 직접 수정합니다.77.5주의사항 및 TipProperty > for 속성은 컴포넌트(Label)가 클릭 됐을때 Focus를 주고 자 하는 컴포넌트 ID를 정의한다.해당속성을 활성화 할 경우 textbox 컴포넌트는 tagname을 무시하고 html 랜더링 시 div 혹은 사용자정의 태그가 아닌 label 태그로 고정된다.
