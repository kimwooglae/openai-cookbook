


WebSquare.uiplugin.multiselect 









PropertyEventMethod찾아보기

WebSquare.uiplugin.multiselect - 5.0_5.4826M.20230213.171915





멀티 셀렉트. 사용자의 다중 선택을 지원. 
 SelectBox 형태로 다중 선택을 지원하는 컴포넌트.

Type


uiplugin

Property Summary




appearance

선택 항목 표현 방식



class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.



dataListAutoRefresh

SelectBox의 선택 대상 목록이 DataList와 바인딩된 경우, addItem 혹은 deleteItem 함수 실행에 따른 DataList 자동 갱신 여부



defaultClass

기본적으로 적용할 class



disabled

컴포넌트 비활성 상태



displaymessage

validate API의 검증 결과가 실패일 경우, 결과 메세지 표시 여부. [default:false, true] 



escape

<>&"를 HTML Escape 문자로 변환하여 화면에 표시



id

컴포넌트 ID. 



invalidMessage

validate API의 검증 결과가 실패일 경우 표시할 메시지. displaymessage="true"일 경우만 유효.



invalidMessageFunc

validate API의 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름. 



mandatory

필수 선택 적용 여부. [default: false, true] 



nextTabID

Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID



ref

model instance의 바인딩 정보



renderType

브라우저에 표현될 레이아웃 구조



separator

선택 된 항목들이 여러 개인 경우 구분자로 사용할 문자



tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. 



tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트



tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.



useItemLocale

아이템 목록 다국어 사용 여부



useLocale

다국어 사용.



userData1

사용자 정의 데이터 속성



userData2

사용자 정의 데이터 속성



userData3

사용자 정의 데이터 속성



validator

유효성 체크 함수 이름.



Event Summary




onblur

포커스를 잃었을 때 발생



onchange

입력되거나 선택된 값을 바꿀 때 발생



onclick

마우스로 MultiSelect를 클릭했을 때 발생



ondblclick

마우스로 MultiSelect를 더블 클릭했을 때 발생



onfocus

포커스를 얻었을 때 발생



onrowclick

아이템 클릭시 이벤트 발생



onviewchange

키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생.


Method Summary




addClass(
									  className
										)
								

컴포넌트에 CSS class를 추가



addItem(
									  value
									       , 
									       label
									       , 
									       index
									       , 
									       refresh
										)
								

선택 항목을 추가



bind(
									  eventType
									       , 
									       function
										)
								

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당



changeClass(
									  oldClassName
									       , 
									       newClassName
										)
								

웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) 



deleteItem(
									  index
										)
								

주어진 index에 해당하는 항목을 삭제



deleteSelectedItems(
									  
										)
								

선택되어 있는 항목을 삭제합니다



focus(
									  
										)
								

웹스퀘어 컴포넌트에 포커스를 줌



getAllValue(
									  
										)
								

모든 항목의 value를 반환



getDisabled(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환



getGenerator(
									  
										)
								

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환



getID(
									  
										)
								

웹스퀘어 컴포넌트의 ID를 반환



getIdxValue(
									  index
										)
								

해당 index의 항목의 value를 반환



getInitStyle(
									  CSS
										)
								

컴포넌트의 초기 스타일을 반환



getItemCount(
									  
										)
								

선택 항목 개수를 반환



getOpacity(
									  
										)
								

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)



getOriginalID(
									  
										)
								

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)



getPluginName(
									  
										)
								

웹스퀘어 컴포넌트의 이름(pluginName)을 반환



getPosition(
									  positionName
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 



getReadOnly(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환



getScope(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  



getScopeWindow(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)



getSelectedIndex(
									  separator
										)
								

선택된 항목의 인덱스를 반환. 여러 항목이 선택된 경우, separator를 사용하여 반환함.



getSize(
									  sizeName
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) 



getStyle(
									  propertyName
										)
								

웹스퀘어 컴포넌트의 CSS 속성 값을 반환



getStyleValue(
									  style
										)
								

[deprecated]



getText(
									  separator
										)
								

현재 선택된 항목의 label을 반환.



getTitle(
									  
										)
								

컴포넌트의 title 속성 값을 반환



getUdcHome(
									  
										)
								

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)



getUdcRoot(
									  
										)
								

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)



getUserData(
									  key
										)
								

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환



getValue(
									  separator
										)
								

컴포넌트의 선택된 항목들의 value를 반환.



hasClass(
									  className
										)
								

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인



hide(
									  
										)
								

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)



removeClass(
									  className
										)
								

웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)



setDisabled(
									  disabled
										)
								

웹스퀘어 컴포넌트의 disabled 속성을 설정



setEventPause(
									  evList
									       , 
									       flag
										)
								

지정한 이벤트를 중단함



setInitStyle(
									  property
										)
								

컴포넌트의 초기 스타일을 복구한다



setOpacity(
									  value
										)
								

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)



setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 설정



setReadOnly(
									  readOnly
										)
								

웹스퀘어 컴포넌트의 readOnly 속성을 설정



setRef(
									  path
										)
								

ref 속성을 설정. 



setSelectedIndex(
									  idx
										)
								

주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행



setSize(
									  width
									       , 
									       height
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 설정



setStyle(
									  propertyName
									       , 
									       value
										)
								

컴포넌트의 propertyName에 해당하는 style의 값을 설정



setText(
									  label
										)
								

인자로 넘겨진 label에 해당하는 항목을 선택.



setUserData(
									  key
									       , 
									       value
										)
								

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 



setValue(
									  value
										)
								

컴포넌트에 인자로 넘겨진 value에 해당하는 항목을 선택하고 model에 반영



show(
									  displayType
										)
								

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)



toggleClass(
									  className
										)
								

웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)



trigger(
									  type
									       , 
									       array
										)
								

컴포넌트에서 특정 이벤트를 발생시킴



unbind(
									  type
									       , 
									       function
										)
								

컴포넌트에서 이벤트를 제거



unbindRef(
									  
										)
								

ref 바인딩을 해제



validate(
									  
										)
								

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행



validateObject(
									  
										)
								

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행



visible(
									  flag
										)
								

[deprecated] 



Property Detail




appearance

선택 항목 표현 방식.
(옵션 설명)
 "minimal" : 선택 항목을 한 개씩 표시. 사용자는 방향키를 이용하여 선택 항목 변경 가능.  
 "full" (기본 값) : 전체 선택 항목을 표시


class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.Engine 내부에서 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어 가능.


dataListAutoRefresh

SelectBox의 선택 대상 목록이 DataList와 바인딩된 경우, addItem 혹은 deleteItem 함수 실행에 따른 DataList 자동 갱신 여부. [default: false, true]  
(옵션 설명) 
 "true" : 자동 갱신. 
 "false" (기본 값) : 자동 갱신하지 않음.
(비고)
 하위 호환을 위한 설정으로 true를 권장. (config.xml 파일에 설정하여 일괄 적용.)


defaultClass

기본적으로 적용할 class.


disabled

컴포넌트 비활성 상태. [default: false, true]  
(옵션 설명)
 "false" (기본 값) : 컴포넌트를 비활성화 하지 않음. 
 "true" : 컴포넌트를 비활성화 함.


displaymessage

validate API의 검증 결과가 실패일 경우, 결과 메세지 표시 여부. [default:false, true] 기본적으로 Engine에서 정의된 메세지가 표현됨. 단, invalidMessageFunc 속성을 이용하면 별도의 메시지를 정의 가능.
(옵션 설명)
 "false" (기본 값) :  결과 메시지를 표시하지 않음. 
 "true" : 결과 메시지를 표시. 
 
(관련 API)
 validate(); (함수)
 invalidMEssageFunc (속성)


escape

<>&"를 HTML Escape 문자로 변환하여 화면에 표시.
(옵션 설명)
 "true" (기본 값) : Escape 문자로 변환하지 않음.
 "false" : Escape 문자로 변환하여 화면에 표시.


id

컴포넌트 ID. 컴포넌트 ID는 전역 객체로 할당됨. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능.


invalidMessage

validate API의 검증 결과가 실패일 경우 표시할 메시지. displaymessage="true"일 경우만 유효.invalidMessageFunc 속성과 동시 적용 불가.
(관련 API)
 validate();
 displaymessage="true"

(!주의!)
 invalidMessageFunc 속성과 동시 적용 불가.


invalidMessageFunc

validate API의 검증 결과가 실패일 경우, 결과 메시지를 동적으로 표시할 사용자 정의 함수 이름. displaymessage="true"일 경우만 유효. invalidMessage와 동시 적용 불가. 
(사용자 정의 함수 예)
 // 아래 type에 대한 검증 실패 시, 메시지를 동적으로 생성하는 예.
 // mandatory, allowChar, ignoreChar, minLength, maxLength, minByteLength, maxByteLength

 function fn_msg(){ 
    var tmpType = checkbox1.getType(); 
    var tmpValue = checkbox1.getValue(); 
    if(tmpType == "mandatory")
        { return "필수 검증 항목입니다."; } 
    }

(관련 API)
 validate();
 displaymessage="true"

(!주의!)
 invalidMessage 속성과 동시 적용 불가.


mandatory

필수 선택 적용 여부. [default: false, true] validate 함수를 통해 입력값을 검증할 경우 필수 입력을 확인. 
(옵션 설명)
 "false" (기본 값) : 필수 선택 적용하지 않음. 
 "true" : 필수 선택 적용.
 
(관련 함수)
 validate();


nextTabID

Tab 키로 이동할 경우, Tab 키를 누를 때 선택되는 컴포넌트의 ID.


ref

model instance의 바인딩 정보


renderType

브라우저에 표현될 레이아웃 구조. [default: component, native]
(옵션 설명) 
 "component" : 최상위 <div> 태그 하위에 table 태그를 사용하여 항목을 표현.
 "native" : group으로 감싼 <ul> 태그를 사용하여 항목을 표현. table태그를 사용하지 않음.


separator

선택 된 항목들이 여러 개인 경우 구분자로 사용할 문자. 기본 값은 공백(space). [default: " "(space)]


tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. HTML의 tabindex 속성과 동일.


tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트. 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시.


tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.key에 해당하는 텍스트가 없을 경우 "global_undefined"가 화면에 표시됨.


useItemLocale

아이템 목록 다국어 사용 여부.


useLocale

다국어 사용.(세부 내용은 다국어 설정 가이드 - 클라이언트 편을 참고.)
(옵션 설명)
 "false" (기본 값): 클라이언트의 다국어 key를 이용하지 않음. 
 "true" : 클라이언트의 다국어 key를 이용하여 다국어 지원.


userData1

사용자 정의 데이터 속성. getUserData("userData1") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData1");


userData2

사용자 정의 데이터 속성. getUserData("userData2") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData2");


userData3

사용자 정의 데이터 속성. getUserData("userData3") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData3");


validator

유효성 체크 함수 이름.컴포넌트에서 blur가 발생하는 시점에 본 속성에 정의한 함수가 실행됨. 즉, onblur 이벤트 이전에 실행되며, blur가 발생하는 시점에 유효성을 확인하며 return을 통해 value를 변경 할 수 있음.
(관련 이벤트)
 onblur





Event Detail




onblur

포커스를 잃었을 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





onchange

입력되거나 선택된 값을 바꿀 때 발생.



onclick

마우스로 MultiSelect를 클릭했을 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





ondblclick

마우스로 MultiSelect를 더블 클릭했을 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





onfocus

포커스를 얻었을 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





onrowclick

아이템 클릭시 이벤트 발생.

Parameter

nametypedescription


infoObjectoldValue, newValue, oldSelectedIndex, newSelectedIndex를 포함한 오브젝트를 반환.
 info.oldValue : 이전 value
 info.newValue : 현재 value
 info.oldSelectedIndex : 이전 index 
 info.newSelectedIndex : 현재 index


Sample
<![CDATA[
    var oldValue = info.oldValue;
    var newValue = info.newValue;
    var oldIndex = info.oldSelectedIndex;
    var newIndex = info.newSelectedIndex;
]]>


onviewchange

키보드 또는 마우스 조작을 통해 값이 변경된 경우 발생.스크립트를 통해 값이 변경된 경우에는 발생하지 않음. (native onchange 이벤트와 유사함.)

Parameter

nametypedescription


infoObjectoldValue, newValue, oldSelectedIndex, newSelectedIndex를 포함한 오브젝트를 반환.
 info.oldValue : 이전 value
 info.newValue : 변경된 value
 info.oldSelectedIndex : 이전 index 
 info.newSelectedIndex : 변경된 index


Sample
<![CDATA[
    var oldValue = info.oldValue;
    var newValue = info.newValue;
    var oldIndex = info.oldSelectedIndex;
    var newIndex = info.newSelectedIndex;
]]>



Method Detail




addClass(
									  className
										)
							

컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY추가할 class의 이름



Sample
// (예제)
// input1 컴포넌트에 oddClass라는 class를 추가    
input1.addClass("oddClass");


addItem(
									  value
									       , 
									       label
									       , 
									       index
									       , 
									       refresh
										)
							

선택 항목을 추가. index를 지정하지 않으면 하위로 추가됨.


Parameter

nametyperequireddescription


valueStringY항목의 value


labelStringY항목의 label


indexNumberN항목의 index


refreshBooleanN항목이 dataList(또는 instance)와 연동된 경우, dataList(instance)를 자동으로 갱신할지에 대한 여부. 값이 명시되지 않은 경우(undefined) dataListAutoRefresh 속성값을 따름.




Return

typedescription


Number추가된 항목의 index


Sample
// 아래와 같이 하나의 항목만 가진 multiSelect의 경우



S
서울




// index를 지정하지 않고 항목 추가
multiselect1.addItem( 'N', '뉴욕' );  //"서울" 항목 하위로(제일 마지막에) 추가된다. 항목의 순서는 "서울","뉴욕" 가 된다.
// (반환 값) 1

//index를 0으로 지정하여 항목 추가
multiselect1.addItem( 'R', '런던', 0 );   //0번째에 항목이 추가되어 "서울" 항목 위에 추가된다. 항목의 순서는 "런던","서울","뉴욕" 가 된다.
// (반환 값) 0


bind(
									  eventType
									       , 
									       function
										)
							

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


eventTypeStringY할당할 이벤트


functionFunctionY이벤트에 대한 핸들러 함수.



Sample
// (예제 1)
// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. 
input1.bind("onclick", function(e){ alert(input1.getValue();}));

// (예제 2)
// 미리 commObj.ev_click 함수를 정의.
var commObj = {};
commObj.ev_click = function(e){
    alert("click :: "+this.id);
};

// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. 
input1.bind("onclick", commObj.ev_click );


changeClass(
									  oldClassName
									       , 
									       newClassName
										)
							

웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) 기본적으로 addClass를 통해 추가된 class만 변경 가능. 웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. 
// config.xml에 아래 설정을 추가. 
<removeDefaultClass value="true" />


Parameter

nametyperequireddescription


oldClassNameStringY변경할 class


newClassNameStringY새로 사용할 class



Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.


// config.xml 파일에 아래를 추가.

    <removeDefaultClass value="true" />


// class를 변경 가능. 
// (tmpInputClass class를 tmpInputWarninClass로 변경.)
input1.changeClass("tmpInputClass","tmpInputWarninClass");


deleteItem(
									  index
										)
							

주어진 index에 해당하는 항목을 삭제.


Parameter

nametyperequireddescription


indexStringY삭제할 항목의 index




Return

typedescription


Object삭제된 항목 오브젝트
 {
     label : new String(),
     value : new String(),
     xml : new Object()
 };


Sample
 var returnValue = multiselect1.deleteItem(0);
 // returnValue.label은 '빨강'이다.
 // returnValue.value는 '#ff0000'이다.
 // returnValue.xml은 [XML Object]이다.
 // WebSquare.xml.serialize( returnVal.xml )로 XML String을 확인한다.


deleteSelectedItems(
									  
										)
							

선택되어 있는 항목을 삭제합니다.


Sample
 예 : 첫번째, 네번째 항목이 선택되어 있는 경우
      var returnValue1 = multiselect1.deleteSelectedItems(); 
      첫번째, 네번째 항목이 삭제된다.


focus(
									  
										)
							

웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)





getAllValue(
									  
										)
							

모든 항목의 value를 반환. 선택된 항목들은 공백으로 구분된 문자열로 반환.



Return

typedescription


String모든 항목들의 value


Sample
//(예제)
// 첫번째, 네번째 항목이 선택되어 있는 경우. 
// (아이템 이름(라벨)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.)
var returnValue = multiselect1.getAllValue();
// (반환 값) '#ff0000 #000000 #00ff00 #0000ff ...'


getDisabled(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Booleandisabled 속성 값


Sample
// 컴포넌트의 disabled 속성 값 확인 예제
var returnValue = componentId.getDisabled();
// (반환 값 예시) false


getGenerator(
									  
										)
							

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Object부모 Generator 객체


Sample
//부모 Generator가 자식으로 Trigger를 생성한 예제
  

// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. 
 scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} 



getID(
									  
										)
							

웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트 ID


Sample
// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.
function fn_validCheck(tmpObj){
    var compID = tmpObj.getID();
}
// 위의 예제 에서 tmpObj가 "input1" ID를 가지고 있는 경우,
// (반환 값) "input1"


getIdxValue(
									  index
										)
							

해당 index의 항목의 value를 반환.


Parameter

nametyperequireddescription


indexNumberY해당 항목의 인덱스




Return

typedescription


String해당 index의 항목의 value


Sample
// (예제)
// 첫번째, 네번째 항목이 선택되어 있는 경우. 
// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.
var returnValue = multiselect1.getIdxValue(0);
// (반환 값) '#ff0000'


getInitStyle(
									  CSS
										)
							

컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


CSSStringN속성 (지정하지 않으면 모든 정보 출력)






getItemCount(
									  
										)
							

선택 항목 개수를 반환.



Return

typedescription


Number선택 항목 개수


Sample

 var returnValue = multiselect1.getItemCount();


getOpacity(
									  
										)
							

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS의 opacity 속성 값을 반환.



Return

typedescription


IntegerOpacity 값


Sample
// inputBox 컴포넌트에 opacity CSS를 적용.

        
// inputBox 컴포넌트의 opacity 값을 반환. 
var returnValue = input1.getOpacity(); 
// returnValue는 0 ~ 1 사이의 실수.
// (반환 값) "0.2"


getOriginalID(
									  
										)
							

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)originalID는 Scope 기능을 사용할 경우 존재. scope="true"인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + "_")가 추가되는 방식으로 변경됨.  originalID는 이 때, prefix가 추가되기 전 ID를 의미.



Return

typedescription


String컴포넌트의 originalID


Sample
// WFrame을 사용하는 다중 화면 구조 예시

// WFrame을 포함한 메인 화면 (main.xml) 
 

// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)


// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.
// getID 실행 
textbox1.getID(); // 실행 결과는 "wframe1_textbox1"
 
// getOriginalID 실행 
textbox1.getOriginalID(); // 실행 결과는 "textbox1"


getPluginName(
									  
										)
							

웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트의 이름 (pluginName)


Sample
// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.
var commObj = {};

commObj.fn_makeReqData = function(tmpObj){
    var tmpID = tmpObj.getID(); // 컴포넌트 ID
    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름

    if(tmpCompType == "input"){
        //..로직..
    }else if(tmpCompType == "gridView"){
        //..로직 ..
    }else{
        //..로직..
    }
};


getPosition(
									  positionName
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


positionNameStringY[left, top] 위치 종류




Return

typedescription


Number컴포넌트의 위치 값


Sample
// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,


// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     
var returnValue = input1.getPosition("top"); 

// 픽셀 단위의 위치 값이 반환됨.

// (반환 값) 10


getReadOnly(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Boolean현재 설정되어있는 readOnly 속성


Sample
// 컴포넌트의 readOnly 속성 값 확인 예제
var returnValue = componentId.getReadOnly();
// (반환 값 예시) false


getScope(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.



Return

typedescription


ObjectWFrame 객체 또는 null


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
textbox1.getScope(); 
// (반환 값) wframe11 객체


getScopeWindow(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.



Return

typedescription


ObjectWFrame 객체의 scope 객체 또는 전역 window 객체


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
var scope = textbox1.getScopeWindow();
scope.wframe11 === textbox1.getScope(); // true


getSelectedIndex(
									  separator
										)
							

선택된 항목의 인덱스를 반환. 여러 항목이 선택된 경우, separator를 사용하여 반환함.separator를 설정하지 않을 경우, 공백(space)이 구분자로 사용됨.


Parameter

nametyperequireddescription


separatorStringN항목 간 구분자




Return

typedescription


String선택된 항목의 인덱스가 담긴 문자열.


Sample
 // 첫번째, 네번째 항목이 선택되어 있는 경우
      var returnValue1 = multiselect1.getSelectedIndex(",");  // returnValue1은 '0,3'
      var returnValue2 = multiselect1.getSelectedIndex(); // returnValue2는 '0 3'


getSize(
									  sizeName
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


sizeNameStringY크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고. 
height : element.clientHeight
innerHeight : element.clientHeight + padding
outerHeight : element.clientHeight + padding + border
outerMarginHeight : element.clientHeight + padding + border + margin
width : element.clientWidth
innerWidth : element.clientWidth + padding
outerWidth : element.clientWidth + padding + border
outerMarginWidth : element.clientWidth + padding + border + margin




Return

typedescription


Number컴포넌트의 크기 값


Sample
var returnValue = componentId.getSize("width");
// (반환 예) 100 
// 픽셀 단위의 크기 값이 반환됨. 
// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.


getStyle(
									  propertyName
										)
							

웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY반환할 CSS 속성




Return

typedescription


StringCSS 속성 값


Sample
//아래와 같이 input 컴포넌트가 정의 된 경우


// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   
var returnValue = input1.getStyle("width");

// (반환 값) "144px"


getStyleValue(
									  style
										)
							

[deprecated]getStyle 사용 권장.웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.


Parameter

nametyperequireddescription


styleStringY반환하려는 CSS 속성.




Return

typedescription


Stringstyle 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)





getText(
									  separator
										)
							

현재 선택된 항목의 label을 반환.항목이 여러 개인 경우, separator를 구분자로 하여 반환.separator를 설정하지 않은 경우 space를 구분자로 사용.


Parameter

nametyperequireddescription


separatorStringN항목 구분자




Return

typedescription


String선택된 항목들의 label


Sample
// 첫번째, 네번째 항목이 선택되어 있는 경우.
// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.
var returnValue = multiselect1.getText(',');
// (반환 값) '빨강,파랑'


getTitle(
									  
										)
							

컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Stringtitle 속성 값.


Sample
// 아래와 같이 input 컴포넌트의 title 속성이 "이름 입력"으로 정의된 경우


var tmpTitle = input1.getTitle();
// (반환 값 예시) "이름 입력"


getUdcHome(
									  
										)
							

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome(); 
// (실행 결과) /a/b/udc.xml


getUdcRoot(
									  
										)
							

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome();    
// (실행 결과) /a/b/


getUserData(
									  key
										)
							

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


keyStringY데이터의 key




Return

typedescription


Stringkey에 해당하는 value


Sample
// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제


// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("setTest");
// (반환 값) "Hello"

//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. 
input1.setUserData("valueTest","WebSquare");

// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("WebSquare");
// (반환 값) "WebSquare"


getValue(
									  separator
										)
							

컴포넌트의 선택된 항목들의 value를 반환.항목이 여러 개인 경우, separator를 구분자로 하여 반환.separator를 설정하지 않은 경우 space를 구분자로 사용.


Parameter

nametyperequireddescription


separatorStringN항목 구분자




Return

typedescription


String선택된 항목들의 value


Sample
// 첫번째, 네번째 항목이 선택되어 있는 경우.
// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.
var returnValue = multiselect1.getValue(',');
// (반환 값) '#ff0000,#0000ff'


hasClass(
									  className
										)
							

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY검색할 class 이름




Return

typedescription


Booleanclass의 포함 여부


Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.

        
var returnValue = input1.hasClass("tmpInputClass");
// (반환 값) true


hide(
									  
										)
							

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)display:none; 및 visibility:hidden; CSS를 적용.


Sample
// (예제) 컴포넌트를 숨김
componentId.hide();


removeClass(
									  className
										)
							

웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)기본적으로 addClass를 통해 추가된 class만 삭제 가능. 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. 
 // config.xml 파일에 아래 설정 추가 
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY삭제 할 class명



Sample
// inputBox의 속성으로 class가 직접 정의된 경우,


// config.xml 파일에 아래 항목을 추가.

    <removeDefaultClass value="true" />


// removeClass를 통해 삭제 가능. 
input1.removeClass("tmpInputClass");


setDisabled(
									  disabled
										)
							

웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


disabledBooleanYdisabled 상태. 
true: disabled 속성 활성화
false: disabled 속성 비활성화



Sample
// 컴포넌트의 disabled 속성을 활성화.
componentId.setDisabled(true);


setEventPause(
									  evList
									       , 
									       flag
										)
							

지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


evListStringN중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)


flagBooleanY이벤트 중단 여부. 
true: 중단
false: 중단 해제.



Sample
// (예제 1)
// onclick 이벤트를 중단. 
input1.setEventPause("onclick", true); 

// (예제 2)
// onfocus 및 onblur 이벤트의 중단을 해제.
input1.setEventPause("onfocus,onblur", false); 

// (예제 3)
// input1에 등록된 모든 사용자 이벤트를 중단.
input1.setEventPause(null, true);


setInitStyle(
									  property
										)
							

컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyStringNCSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)



Sample
// (예제)
group1.setInitStyle();


setOpacity(
									  value
										)
							

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.


Parameter

nametyperequireddescription


valueNumberYOpacity 값 (0과 1 사이의 실수)



Sample
// (예제) 불투명도를 0.45로 설정
componentId.setOpacity(0.45);


setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


leftNumberY설정할 left 위치 값 또는 null.


topNumberY설정할 top 위치 값 또는 null.


modeStringN위치 설정 방법. [default: absolute, delta] 
absolute: 입력된 값을 위치로 설정.
delta: 현재 위치에 입력된 left 및 top 값을 추가.



Sample
// (예제) 컴포넌트의 top만 100px로 설정.
componentId.setPosition(null, 100);


setReadOnly(
									  readOnly
										)
							

웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


readOnlyBooleanYreadOnly 속성 활성화 여부. ( "true" : 활성화, "false" : 비활성화)



Sample
// 컴포넌트의 readOnly 속성을 true로 설정하는 예.
componentId.setReadOnly(true);


setRef(
									  path
										)
							

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함. 명시하지 않을 경우, InstanceData의 XPath로 인식됨.


Parameter

nametyperequireddescription


pathStringYref의 경로






setSelectedIndex(
									  idx
										)
							

주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행.


Parameter

nametyperequireddescription


idxNumberY선택하려는 항목의 인덱스



Sample
// 첫번째, 네번째 항목이 선택되어 있는 경우, 아래를 수행하면 두번째 항목도 추가로 선택됨.
      multiselect1.setSelectedIndex(1);


setSize(
									  width
									       , 
									       height
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


widthNumberY새로 설정할 컴포넌트의 width 값 또는 null


heightNumberY새로 설정할 컴포넌트의 height 값 또는 null



Sample
// (예제) 컴포넌트의 height만 100px로 설정.
componentId.setSize(null,100);


setStyle(
									  propertyName
									       , 
									       value
										)
							

컴포넌트의 propertyName에 해당하는 style의 값을 설정.


Parameter

nametyperequireddescription


propertyNameStringY바꾸고 싶은 style 값의 이름


valueStringY설정할 style의 값



Sample
// width 변경
componentId.setStyle("width", 100); 
// 픽셀 단위를 기본으로 하며, componentId.setStyle("width", "100px"); 과 동일.
// %단위의 표현은 componentId.setStyle("width", "100%"); 로 명시.


setText(
									  label
										)
							

인자로 넘겨진 label에 해당하는 항목을 선택.여러 항목을 선택할 경우 label을 공백으로 구분하여 인자로 넘겨야 함.


Parameter

nametyperequireddescription


labelStringY선택하고자 하는 항목의 label



Sample
// 첫번째, 네번째 항목이 선택되어 있는 경우.
// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.
multiselect1.setText("검정");
// 첫번째와 네번째 항목이 선택 해제되고, 검정색 항목만 선택됨.
// 여러 항목을 선택할 경우, 공백(space)을 구분자로 한 문자열을 사용.
var colorArr = [];
    colorArr[0] = "빨강" ; 
    colorArr[1] = "파랑" ; 
    colorArr[2] = "초록" ; 
multiselect1.setValue(colorArr.join(" ")); 
// (결과) 빨강, 파랑, 초록색이 선택됨.


setUserData(
									  key
									       , 
									       value
										)
							

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.


Parameter

nametyperequireddescription


keyStringY설정할 데이터의 key


valueStringY설정한 데이터의 value



Sample
// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.

componentId.setUserData("data", "WebSquare");

// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. 
 
componentId.setUserData("title", "WebSquare");
// 아래와 같이 로그가 출력됨. 
// !!!WARNING - [title] can't be defined as UserData.


setValue(
									  value
										)
							

컴포넌트에 인자로 넘겨진 value에 해당하는 항목을 선택하고 model에 반영.


Parameter

nametyperequireddescription


valueStringY선택하고자 하는 항목의 value



Sample
// 첫번째, 네번째 항목이 선택되어 있는 경우.
// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.
multiselect1.setValue("#000000");
// 첫번째와 네번째 항목이 선택 해제되고, 검정색 항목만 선택됨.
// 여러 항목을 선택하려면, 공백(space)을 구분자로 사용.
var colorArr = [];
    colorArr[0] = "#ff0000" ; //빨강
    colorArr[1] = "#0000ff" ; //파랑
    colorArr[2] = "#00ff00" ; //초록
multiselect1.setValue(colorArr.join(" ")); 
// (결과) 빨강, 파랑, 초록색이 선택됨.


show(
									  displayType
										)
							

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)CSS display 속성을 주어진 값으로 설정하고 "visibility: show;"를 적용.


Parameter

nametyperequireddescription


displayTypeStringN적용할 CSS display 속성의 값.   
block : display: block;을 적용. (기본 값)
inline : display: inline;을 적용.
none : display: none;을 적용.
"" : show 수행 이전의 display 속성 값으로 복구.



Sample
// (예제) display: block; CSS를 설정.
componentId.show();  

// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.
componentId.show("");


toggleClass(
									  className
										)
							

웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. 웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. 기본적으로 addClass를 통해 추가된 class만 삭제 가능. 웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. 
 // config.xml 파일에 아래 설정 추가
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY추가/삭제할 class



Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.


//config.xml 파일에 아래를 추가.

    <removeDefaultClass value="true" />


// tmpInputClass class를 삭제.
input1.toggleClass("tmpInputClass");

// (위에서 삭제된) tmpInputClass class를 다시 추가.
input1.toggleClass("tmpInputClass");


trigger(
									  type
									       , 
									       array
										)
							

컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringY발생시킬 이벤트


arrayArrayN이벤트 핸들러에 전달할 파라미터 배열



Sample
// (예제 1)
// input1 컴포넌트에 onclick 이벤트를 발생시킴.
input1.trigger("onclick");

// (예제 2)
// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.
input1.trigger("onviewchange", [1,2]);


unbind(
									  type
									       , 
									       function
										)
							

컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringN제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)


functionFunctionN제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)



Sample
// (예제 1)
// input1에 등록된 모든 이벤트를 제거.
input1.unbind();

// (예제 2)
// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.
input1.unbind("onviewchange");

// (예제 3)
// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.
input1.unbind("onviewchange", func1);


unbindRef(
									  
										)
							

ref 바인딩을 해제.





validate(
									  
										)
							

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행. MultiSelect는 필수입력 여부만 확인.
(관련 속성)
 mandatory="true"


Sample
// 모든 항목이 선택 해제되어 있는 경우,
var returnValue = multiselect1.validate();
// (반환 값) false
// 한 항목이라도 선택되어 있는 경우, true가 반환됨.


validateObject(
									  
										)
							

컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.
(관련 속성)
 displaymessage="true"

(유효성 관련 속성)
 mandatory
 minLength
 maxLength 
 minByteLength
 maxByteLength



Return

typedescription


Objectobject 유효성 검사 결과 객체
    object.callerId 유효성 검사 대상 컴포넌트 ID
    object.type 유효성 검사 항목
   object.value 유효성 검사 결과 값


Sample
//아래와 같이 multiselect 컴포넌트에 mandatory 속성을 정의했을 경우









var returnObj = multiselect.validateObject();
// (반환 값 - multiselect 값이 없을 경우)returnObj 객체 반환

returnObj.callerId = "multiselect" returnObj.type = "mandatory" returnObj.value = ""  
// (반환 값 - multiselect 값이 있을 경우) 비어있는 객체가 반환 

// displaymessage="true" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨. 
// (alert 메세지 예시) 필수 입력 항목입니다


visible(
									  flag
										)
							

[deprecated] show/hide 혹은 setStyle 사용을 권장.엔진 내부적으로 CSS visibility 속성을 설정.


Parameter

nametyperequireddescription


flagBooleanY설정할 CSS visibility 속성 값 
true : visibility: visible;
false : visibility: hidden;










Copyrights Inswave Systems Co., Ltd.



