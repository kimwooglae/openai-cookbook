


WebSquare.uiplugin.textbox 









PropertyEventMethod찾아보기

WebSquare.uiplugin.textbox - 5.0_5.4826M.20230213.171915





텍스트 박스. 간단한 텍스트를 출력.
 Output 컴포넌트의 경량화 버전.
 Output과 비교 속도의 이점이 있으나, Formatter, Validator, Align 등은 지원하지 않음.
 HTML <div> 태그로 표현됨. 
 WebSquare에서 제공하지 않은 HTML 태그(li,dt,dd,h1,p 등)는 tagname 속성을 이용하여 표현 가능. 
 TextBox는 자식을 가질 수 없음. 자식을 포함하는 태그의 경우 Group 컴포넌트와 함께 사용해야 함.

Type


uiplugin

Property Summary




class

HTML의 class 속성과 동일한 기능을 제공. 



dataType

컴포넌트 value의 데이터 타입. [default: text, number, date, time, link] 



displayFormat

Excel의 서식처럼 value의 표시 형태를 지정. 



displayFormatter

컴포넌트의 value를 포맷하는 함수 명. 



escape

[true, false] <>&"를 HTML Escape 문자로 변환하여 화면에 표시



escapeFormatter

사용자가 정의한 포맷 변환 함수 명. 



for

컴포넌트(label)를 클릭할 때 포커스를 주려는 컴포넌트의 ID. 



id

컴포넌트 ID. 



label

컴포넌트의 value로 화면에 출력하려는 텍스트



localeRef

클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key. 



ref

DataCollection의 value 경로. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용. 



tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. 



tagname

div 태그가 아닌 다른 태그를 사용할 때 지정. 



tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트. 



tooltipDisplay

데이터가 width보다 긴 경우, 마우스-오버 시 해당 데이터를 툴팁으로 표시



tooltipFormatter

tooltipDisplay="true"인 경우, 툴팁 내용을 변경할 사용자 함수명.



tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.



tooltipPositionX

tooltipDisplay="true"인 경우, 툴팁의 X 좌표. (단위: px) [default: 20] 



tooltipPositionY

tooltipDisplay="true"인 경우, 툴팁의 Y 좌표. (단위: px) [default: height+3] 



tooltipShowAlways

데이터가 width보다 긴 경우가 아니더라도 마우스-오버 시 해당 데이터를 툴팁으로 표시



tooltipTime

툴팁 표시 시간. (단위: 초)



useLocale

다국어 사용.



userData1

사용자 정의 데이터 속성. 



userData2

사용자 정의 데이터 속성. 



userData3

사용자 정의 데이터 속성. 



Event Summary




onclick

마우스로 클릭할 때 발생



ondblclick

마우스로 더블-클릭할 때 발생



onmouseout

마우스가 컴포넌트 영역 위에서 벗어날 때 발생



onmouseover

마우스가 컴포넌트 영역 위에 놓일 때 발생



ontooltiphide

툴팁이 사라질 때 발생



ontooltipshow

툴팁이 나타날 때 발생


Method Summary




addClass(
									  className
										)
								

컴포넌트에 클래스를 추가



bind(
									  eventType
									       , 
									       function
										)
								

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당



changeClass(
									  oldClassName
									       , 
									       newClassName
										)
								

oldClassName 클래스를 newClassName 클래스로 변경.



focus(
									  
										)
								

웹스퀘어 컴포넌트에 포커스를 줌



getAttributeNode(
									  attributeName
										)
								

tagname 속성 확장용인 HTML attributes(스튜디오에서의 명칭)를 이용하여 정의된 속성값을 반환.



getDataListInfo(
									  
										)
								

컴포넌트와 바인딩된 DataList를 반환



getDataType(
									  
										)
								

dataType 속성 값을 반환



getDisabled(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환



getFormatValue(
									  
										)
								

format이 적용된 값을 반환



getGenerator(
									  
										)
								

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환



getID(
									  
										)
								

웹스퀘어 컴포넌트의 ID를 반환



getInitStyle(
									  CSS
										)
								

컴포넌트의 초기 스타일을 반환



getOpacity(
									  
										)
								

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)



getOriginalID(
									  
										)
								

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)



getPluginName(
									  
										)
								

웹스퀘어 컴포넌트의 이름(pluginName)을 반환



getPosition(
									  positionName
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 



getReadOnly(
									  
										)
								

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환



getScope(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  



getScopeWindow(
									  
										)
								

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)



getSize(
									  sizeName
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) 



getStyle(
									  propertyName
										)
								

웹스퀘어 컴포넌트의 CSS 속성 값을 반환



getStyleValue(
									  style
										)
								

[deprecated]



getTitle(
									  
										)
								

컴포넌트의 title 속성 값을 반환



getUdcHome(
									  
										)
								

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)



getUdcRoot(
									  
										)
								

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)



getUserData(
									  key
										)
								

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환



getValue(
									  
										)
								

포맷이 적용되지 않은 value(label 속성 값)를 반환



hasClass(
									  className
										)
								

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인



hide(
									  
										)
								

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)



removeAttributeNode(
									  nodeName
										)
								

nodeName에 해당하는 하위 노드를 삭제.



removeClass(
									  className
										)
								

컴포넌트에서 className 클래스를 삭제. 



setAttributeNode(
									  nodeName
									       , 
									       nodeValue
										)
								

nodeName에 해당하는 하위 노드에 값을 설정.



setDisabled(
									  disabled
										)
								

웹스퀘어 컴포넌트의 disabled 속성을 설정



setDisplayFormat(
									  format
										)
								

컴포넌트의 displayFormat 속성을 설정



setDisplayFormatter(
									  formatter
										)
								

컴포넌트의 displayFormatter 속성을 설정



setEventPause(
									  evList
									       , 
									       flag
										)
								

지정한 이벤트를 중단함



setInitStyle(
									  property
										)
								

컴포넌트의 초기 스타일을 복구한다



setLocaleRef(
									  localeRef
										)
								

localeRef 속성값을 설정한다



setOpacity(
									  value
										)
								

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)



setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
								

웹스퀘어 컴포넌트의 위치(left, top)를 설정



setReadOnly(
									  readOnly
										)
								

웹스퀘어 컴포넌트의 readOnly 속성을 설정



setRef(
									  설정할
										)
								

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함.



setSize(
									  width
									       , 
									       height
										)
								

웹스퀘어 컴포넌트의 크기(width, height)를 설정



setStyle(
									  propertyName
									       , 
									       value
										)
								

웹스퀘어 컴포넌트의 CSS 속성을 설정



setTitle(
									  title
										)
								

컴포넌트의 title 속성을 설정



setUserData(
									  key
									       , 
									       value
										)
								

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 



setValue(
									  label
										)
								

화면에 출력될 text인 value(label 속성에 정의 된 값)를 설정한다



show(
									  displayType
										)
								

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)



toggleClass(
									  className
										)
								

className 클래스를 제거하거나 추가. 



trigger(
									  type
									       , 
									       array
										)
								

컴포넌트에서 특정 이벤트를 발생시킴



unbind(
									  type
									       , 
									       function
										)
								

컴포넌트에서 이벤트를 제거



unbindRef(
									  
										)
								

ref 바인딩을 해제



visible(
									  flag
										)
								

[deprecated] 



Property Detail




class

HTML의 class 속성과 동일한 기능을 제공. CSS 파일이나 style 블럭에 정의한 여러 개의 class를 공백으로 구분하여 적용 가능.Engine 내부에서 각 컴포넌트 별로 지정된 class를 적용하나, class 속성을 이용하여 컴포넌트의 CSS를 제어 가능.


dataType

컴포넌트 value의 데이터 타입. [default: text, number, date, time, link] 해당 값은 displayFormat 등의 속성에서 참조.
(관련 속성)
 displayFormat


displayFormat

Excel의 서식처럼 value의 표시 형태를 지정. dataType 속성에 따라 동작. 
(예시)
 dataType="number" displayFormat="#,###.#0"
 // 위와 같이 설정할 경우, 숫자 3자리 수마다 ,가 표시되고 소수점 2자리까지 표현됨. 
(!주의!)
 displayFormatter와 동시 적용 불가.


displayFormatter

컴포넌트의 value를 포맷하는 함수 명. 해당 함수는 엔진에서 파라미터로 넘겨준 value에 대해 포매팅을 수행한 후, 화면에 표현할 최종 값을 반환함. 
(예시)
 전역 스크립트에 function fn_inputFormat (tmpVal){ return tmpVal+" 님" }; 을 정의
 본 속성을 displayFormatter="fn_inputFormat"으로 설정.


escape

[true, false] <>&"를 HTML Escape 문자로 변환하여 화면에 표시.
(옵션 설명)
 "true" (기본 값) : Escape 문자로 변환하지 않음.
 "false" : Escape 문자로 변환하여 화면에 표시.


escapeFormatter

사용자가 정의한 포맷 변환 함수 명. 보안을 위해 허용하지 않는 값(html 태그 및 javascript:alert류의 값들)을 제어할 수 있음. displayFormatter와 동작은 동일하지만, escapeFormatter가 formatter 중 가장 먼저 적용됨.화면 XML에 해당 속성에 대한 함수를 정의할 경우 아래와 같이 script lazy="false" 영역에 정의해야함.
(예제)
 // 전역 스크립트에 아래와 같이 정의. 
 function fn_escapeFormat (tmpVal){ return tmpVal.replace(//g, "") }; 
 // escapeFormatter="fn_escapeFormat" 설정을 추가.


for

컴포넌트(label)를 클릭할 때 포커스를 주려는 컴포넌트의 ID. 본 속성이 정의 된 경우 HTML label 태그로 tagname 속성은 무시됨.


id

컴포넌트 ID. 컴포넌트 ID는 전역 객체로 할당됨. 각 컴포넌트 ID를 통해 Script에서 해당 컴포넌트에 접근 가능.


label

컴포넌트의 value로 화면에 출력하려는 텍스트.


localeRef

클라이언트 다국어 적용시 화면에 출력하는 텍스트의 key. 세부 적용 방법은 사용자 가이드 참조. 설정이 올바르지 않을 경우 "global_undefined"와 같은 텍스트가 화면에 표시됨.


ref

DataCollection의 value 경로. DataCollection의 value와 웹스퀘어 컴포넌트를 바인딩할 때 사용. "data:" prefix를 추가하여 data:[DataCollection ID].[Key id 또는 Column id] 형태로 지정해야 함. DataList와 바인딩된 경우, GridView에서 선택된 행의 값이 바인딩됨.
 (작성 예)
 data:dataMap1.deptInstance Data와 연동 할 경우 연동 할 XML 데이터의 XPath를 명시해야 함. 
 (작성 예)
 res/userInfo/dept/@value


tabIndex

Tab 키를 이용하여 포커스를 변경할 경우, 해당 컴포넌트에 포커스를 주는 순서. HTML의 tabindex 속성과 동일.


tagname

div 태그가 아닌 다른 태그를 사용할 때 지정. 기본적으로 TextBox컴포넌트는 div 태그로 표현됨. 일반적으로 value값을 표현해야하는 태그에 사용되며, 자식 태그를 가질 수 없음.


tooltip

사용자가 컴포넌트에 마우스-오버할 때 표시되는 텍스트. 웹스퀘어가 제공하는 툴팁으로, 컴포넌트의 추가 정보를 명시.


tooltipDisplay

데이터가 width보다 긴 경우, 마우스-오버 시 해당 데이터를 툴팁으로 표시. [default: false, true]


tooltipFormatter

tooltipDisplay="true"인 경우, 툴팁 내용을 변경할 사용자 함수명.사용자 함수는 componentId, label을 인자로 받아 툴팁으로 표시할 스트링을 반환.
(관련 속성)
 tooltipDisplay="true"


tooltipLocaleRef

tooltip 문구가 정의되어 있을 경우 클라이언트 다국어 적용시 툴팁에 출력하는 텍스트의 key.key에 해당하는 텍스트가 없을 경우 "global_undefined"가 화면에 표시됨.


tooltipPositionX

tooltipDisplay="true"인 경우, 툴팁의 X 좌표. (단위: px) [default: 20] 마우스 오버된 엘리먼트의 왼쪽 끝이 원점이며 px 단위로 계산됨. width(폭)과 height(높이)를 이용하여 좌표를 계산하는 수식도 사용 가능. 
(예제) 
 // body의 중앙을 툴팁의 x축 시작점으로 사용.
 tooltipPositionX="width/2"


tooltipPositionY

tooltipDisplay="true"인 경우, 툴팁의 Y 좌표. (단위: px) [default: height+3] 마우스 오버된 엘리먼트의 왼쪽 상단이 원점이며 px 단위로 계산됨. width(폭)과 height(높이)를 이용하여 좌표를 계산하는 수식도 사용 가능. (주의!) margin-top이 style에 사용된 경우, Y축이 영향을 받음. 
(예제) 
 // body가 끝나는 위치가 Y축의 시작점이 됨. 
 tooltipPositionX="height"


tooltipShowAlways

데이터가 width보다 긴 경우가 아니더라도 마우스-오버 시 해당 데이터를 툴팁으로 표시. [default: false, true]


tooltipTime

툴팁 표시 시간. (단위: 초)툴팁을 표시할 경우(tooltipDisplay="true")에만 유효. 
 (관련 속성)
 tooltipDisplay="true"


useLocale

다국어 사용.선택 항목의 label에 표현되는 값을 클라이언트의 다국어 key를 이용하여 표현.(세부 내용은 다국어 설정 가이드 - 클라이언트 편을 참고.)
(옵션 설명)
 "false" (기본 값): 클라이언트의 다국어 key를 이용하지 않음. 
 "true" : 클라이언트의 다국어 key를 이용하여 다국어 지원.


userData1

사용자 정의 데이터 속성. getUserData("userData1") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData1");


userData2

사용자 정의 데이터 속성. getUserData("userData2") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData2");


userData3

사용자 정의 데이터 속성. getUserData("userData3") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData3");





Event Detail




onclick

마우스로 클릭할 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





ondblclick

마우스로 더블-클릭할 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





onmouseout

마우스가 컴포넌트 영역 위에서 벗어날 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





onmouseover

마우스가 컴포넌트 영역 위에 놓일 때 발생.

Parameter

nametypedescription


eObject이벤트 객체





ontooltiphide

툴팁이 사라질 때 발생.



ontooltipshow

툴팁이 나타날 때 발생.




Method Detail




addClass(
									  className
										)
							

컴포넌트에 클래스를 추가.


Parameter

nametyperequireddescription


classNameStringY추가할 클래스 명.



Sample
 componentId.addClass("selected");
 컴포넌트에 selected 라는 class를 추가.


bind(
									  eventType
									       , 
									       function
										)
							

컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


eventTypeStringY할당할 이벤트


functionFunctionY이벤트에 대한 핸들러 함수.



Sample
// (예제 1)
// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. 
input1.bind("onclick", function(e){ alert(input1.getValue();}));

// (예제 2)
// 미리 commObj.ev_click 함수를 정의.
var commObj = {};
commObj.ev_click = function(e){
    alert("click :: "+this.id);
};

// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. 
input1.bind("onclick", commObj.ev_click );


changeClass(
									  oldClassName
									       , 
									       newClassName
										)
							

oldClassName 클래스를 newClassName 클래스로 변경.addClass(); 함수를 통해 추가된 클래스만 변경 가능. 직접 정의된 클래스를 삭제하는 경우 config.xml 파일에 아래 설정을 추가해야 함. 
// config.xml 파일에 아래를 추가
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


oldClassNameStringY삭제 할 class의 이름.


newClassNameStringY추가 할 class의 이름.



Sample
//아래와 같이 input 컴포넌트에 class를 정의한 경우


//config.xml 파일에 아래와 같이 정의.

    <removeDefaultClass value="true" />


//tmpInputClass class를 tmpInputWarninClass로 변경
input1.changeClass("tmpInputClass","tmpInputWarninClass");


focus(
									  
										)
							

웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)





getAttributeNode(
									  attributeName
										)
							

tagname 속성 확장용인 HTML attributes(스튜디오에서의 명칭)를 이용하여 정의된 속성값을 반환.정의한 tagname의 태그가 갖는 HTML 속성 또한 반환 가능. 예를 들어 id,class,style등의 속성은 반환되나 tagname과 같은 속성 값은 반환되지 않음.


Parameter

nametyperequireddescription


attributeNameStringY속성명



Sample
//아래와 같이 tagname속성을 이용하여 attribute를 추가 한 경우


#



ui_btnLogin.getAttributeNode("href");
// (반환 예) "#"

ui_btnLogin.getAttributeNode("id");
// (반환 예) "ui_btnLogin"

ui_btnLogin.getAttributeNode("tagname");
// (반환 예) null


getDataListInfo(
									  
										)
							

컴포넌트와 바인딩된 DataList를 반환.



Return

typedescription


Objectnodeset, label, value id를 객체로 반환


Sample
// 사용 예
textbox1.getDataListInfo();


getDataType(
									  
										)
							

dataType 속성 값을 반환.


Sample
//아래와 같이 textbox가 정의 된 경우


var returnValue = textbox1.getDataType();
// (반환 예) "text"


getDisabled(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Booleandisabled 속성 값


Sample
// 컴포넌트의 disabled 속성 값 확인 예제
var returnValue = componentId.getDisabled();
// (반환 값 예시) false


getFormatValue(
									  
										)
							

format이 적용된 값을 반환.



Return

typedescription


String포맷이 적용된 값


Sample
// 아래와 같이 displayFormat을 적용.


var returnValue = textbox1.getFormatValue();
// (반환 값) "100,000.00"


getGenerator(
									  
										)
							

컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Object부모 Generator 객체


Sample
//부모 Generator가 자식으로 Trigger를 생성한 예제
  

// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. 
 scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} 



getID(
									  
										)
							

웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트 ID


Sample
// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.
function fn_validCheck(tmpObj){
    var compID = tmpObj.getID();
}
// 위의 예제 에서 tmpObj가 "input1" ID를 가지고 있는 경우,
// (반환 값) "input1"


getInitStyle(
									  CSS
										)
							

컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


CSSStringN속성 (지정하지 않으면 모든 정보 출력)






getOpacity(
									  
										)
							

웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS의 opacity 속성 값을 반환.



Return

typedescription


IntegerOpacity 값


Sample
// inputBox 컴포넌트에 opacity CSS를 적용.

        
// inputBox 컴포넌트의 opacity 값을 반환. 
var returnValue = input1.getOpacity(); 
// returnValue는 0 ~ 1 사이의 실수.
// (반환 값) "0.2"


getOriginalID(
									  
										)
							

웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)originalID는 Scope 기능을 사용할 경우 존재. scope="true"인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + "_")가 추가되는 방식으로 변경됨.  originalID는 이 때, prefix가 추가되기 전 ID를 의미.



Return

typedescription


String컴포넌트의 originalID


Sample
// WFrame을 사용하는 다중 화면 구조 예시

// WFrame을 포함한 메인 화면 (main.xml) 
 

// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)


// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.
// getID 실행 
textbox1.getID(); // 실행 결과는 "wframe1_textbox1"
 
// getOriginalID 실행 
textbox1.getOriginalID(); // 실행 결과는 "textbox1"


getPluginName(
									  
										)
							

웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


String웹스퀘어 컴포넌트의 이름 (pluginName)


Sample
// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.
var commObj = {};

commObj.fn_makeReqData = function(tmpObj){
    var tmpID = tmpObj.getID(); // 컴포넌트 ID
    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름

    if(tmpCompType == "input"){
        //..로직..
    }else if(tmpCompType == "gridView"){
        //..로직 ..
    }else{
        //..로직..
    }
};


getPosition(
									  positionName
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) 위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


positionNameStringY[left, top] 위치 종류




Return

typedescription


Number컴포넌트의 위치 값


Sample
// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,


// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     
var returnValue = input1.getPosition("top"); 

// 픽셀 단위의 위치 값이 반환됨.

// (반환 값) 10


getReadOnly(
									  
										)
							

현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Boolean현재 설정되어있는 readOnly 속성


Sample
// 컴포넌트의 readOnly 속성 값 확인 예제
var returnValue = componentId.getReadOnly();
// (반환 값 예시) false


getScope(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.



Return

typedescription


ObjectWFrame 객체 또는 null


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
textbox1.getScope(); 
// (반환 값) wframe11 객체


getScopeWindow(
									  
										)
							

scope="true"인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)scope="true"인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.



Return

typedescription


ObjectWFrame 객체의 scope 객체 또는 전역 window 객체


Sample
// (예제)
// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. 
// 그리고, wframe11 내부에 textbox1이 존재.
   
var scope = textbox1.getScopeWindow();
scope.wframe11 === textbox1.getScope(); // true


getSize(
									  sizeName
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) %로 설정된 경우, 픽셀로 변환된 값을 반환.


Parameter

nametyperequireddescription


sizeNameStringY크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고. 
height : element.clientHeight
innerHeight : element.clientHeight + padding
outerHeight : element.clientHeight + padding + border
outerMarginHeight : element.clientHeight + padding + border + margin
width : element.clientWidth
innerWidth : element.clientWidth + padding
outerWidth : element.clientWidth + padding + border
outerMarginWidth : element.clientWidth + padding + border + margin




Return

typedescription


Number컴포넌트의 크기 값


Sample
var returnValue = componentId.getSize("width");
// (반환 예) 100 
// 픽셀 단위의 크기 값이 반환됨. 
// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.


getStyle(
									  propertyName
										)
							

웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY반환할 CSS 속성




Return

typedescription


StringCSS 속성 값


Sample
//아래와 같이 input 컴포넌트가 정의 된 경우


// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   
var returnValue = input1.getStyle("width");

// (반환 값) "144px"


getStyleValue(
									  style
										)
							

[deprecated]getStyle 사용 권장.웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.


Parameter

nametyperequireddescription


styleStringY반환하려는 CSS 속성.




Return

typedescription


Stringstyle 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)





getTitle(
									  
										)
							

컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)



Return

typedescription


Stringtitle 속성 값.


Sample
// 아래와 같이 input 컴포넌트의 title 속성이 "이름 입력"으로 정의된 경우


var tmpTitle = input1.getTitle();
// (반환 값 예시) "이름 입력"


getUdcHome(
									  
										)
							

UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome(); 
// (실행 결과) /a/b/udc.xml


getUdcRoot(
									  
										)
							

UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.UDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.



Return

typedescription


StringUDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)


Sample
// 예제
// UDC 파일 경로는 /a/b/udc.xml 
// 화면 XML은  /a/c/main.xml 
// UDC 객체의 ID는 udc1
  
udc1.getUdcHome();    
// (실행 결과) /a/b/


getUserData(
									  key
										)
							

setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


keyStringY데이터의 key




Return

typedescription


Stringkey에 해당하는 value


Sample
// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제


// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("setTest");
// (반환 값) "Hello"

//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. 
input1.setUserData("valueTest","WebSquare");

// 위에서 설정한 setTest을 값을 반환하는 예제. 
input1.getUserData("WebSquare");
// (반환 값) "WebSquare"


getValue(
									  
										)
							

포맷이 적용되지 않은 value(label 속성 값)를 반환.



Return

typedescription


Stringtextbox의 value(label 속성의 값)


Sample
// 아래와 같이 textbox1이 정의 된 경우


var returnValue = textbox1.getValue();
// (반환 예)"Pinocchio"


hasClass(
									  className
										)
							

웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


classNameStringY검색할 class 이름




Return

typedescription


Booleanclass의 포함 여부


Sample
// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.

        
var returnValue = input1.hasClass("tmpInputClass");
// (반환 값) true


hide(
									  
										)
							

웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)display:none; 및 visibility:hidden; CSS를 적용.


Sample
// (예제) 컴포넌트를 숨김
componentId.hide();


removeAttributeNode(
									  nodeName
										)
							

nodeName에 해당하는 하위 노드를 삭제.nodeName으로 사용할 수 있는 값은 config.xml의 attributes 설정을 참조.


Parameter

nametyperequireddescription


nodeNameStringY삭제할 하위 노드의 이름






removeClass(
									  className
										)
							

컴포넌트에서 className 클래스를 삭제. 기본 설정은 addClass API를 통해 추가 된 클래스만 삭제 가능. 직접 정의된 클래스를 삭제할 경우, config.xml 파일에 아래 설정을 추가해야 함. 
// config.xml 파일에 아래 설정을 추가. 
| <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY삭제 할 class명



Sample
// 아래와 같이 input 컴포넌트에 class를 정의한 경우


// config.xml 파일에 아래와 같이 정의.

    <removeDefaultClass value="true" />


// tmpInputClass class 삭제
input1.removeClass("tmpInputClass");


setAttributeNode(
									  nodeName
									       , 
									       nodeValue
										)
							

nodeName에 해당하는 하위 노드에 값을 설정.nodeName으로 사용할 수 있는 값은 config.xml의 attributes 설정을 참고.


Parameter

nametyperequireddescription


nodeNameStringY값을 설정할 하위 노드의 이름


nodeValueStringY노드에 설정할 값






setDisabled(
									  disabled
										)
							

웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


disabledBooleanYdisabled 상태. 
true: disabled 속성 활성화
false: disabled 속성 비활성화



Sample
// 컴포넌트의 disabled 속성을 활성화.
componentId.setDisabled(true);


setDisplayFormat(
									  format
										)
							

컴포넌트의 displayFormat 속성을 설정.


Parameter

nametyperequireddescription


formatStringY새로 설정할 displayFormat



Sample
//아래와 같이 textbox가 정의 된 경우


// (출력 예) 1,000,000

//textbox1 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.
textbox1.setDisplayFormat("#,###.#0");

// (출력 예) 1,000,000.00


setDisplayFormatter(
									  formatter
										)
							

컴포넌트의 displayFormatter 속성을 설정.


Parameter

nametyperequireddescription


formatterStringY새로 설정 할 formatter 함수명



Sample
// 아래와 같이 textbox가 정의 된 경우


// 전역스크립트에 아래와 같이 textbox1의 format Function을 정의 한다.(value의 값을 대문자로 치환)
var commObj = {}; 
commObj.fn_setUpper = function(value){
    value = value.toUpperCase();
    return value;
};

// textbox1컴포넌트의 displayFormatter를 설정.
textbox1.setDisplayFormatter("commObj.fn_setUpper");

// (출력 예) HONG GIL DONG


setEventPause(
									  evList
									       , 
									       flag
										)
							

지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


evListStringN중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)


flagBooleanY이벤트 중단 여부. 
true: 중단
false: 중단 해제.



Sample
// (예제 1)
// onclick 이벤트를 중단. 
input1.setEventPause("onclick", true); 

// (예제 2)
// onfocus 및 onblur 이벤트의 중단을 해제.
input1.setEventPause("onfocus,onblur", false); 

// (예제 3)
// input1에 등록된 모든 사용자 이벤트를 중단.
input1.setEventPause(null, true);


setInitStyle(
									  property
										)
							

컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyStringNCSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)



Sample
// (예제)
group1.setInitStyle();


setLocaleRef(
									  localeRef
										)
							

localeRef 속성값을 설정한다.


Parameter

nametyperequireddescription


localeRefStringY새로 설정할 localeRef 값



Sample
//아래와 같이 textbox1이 정의 된 경우


//client 다국어 설정의 name key를 적용.
textbox1.setLocaleRef("name");

//만약 다국어 설정이 정상적으로 되어있지 않거나 name 이라는 key가 없는 경우 아래와 같은 text로 표현된다.
//예시 ) global_undefined


setOpacity(
									  value
										)
							

웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.


Parameter

nametyperequireddescription


valueNumberYOpacity 값 (0과 1 사이의 실수)



Sample
// (예제) 불투명도를 0.45로 설정
componentId.setOpacity(0.45);


setPosition(
									  left
									       , 
									       top
									       , 
									       mode
										)
							

웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


leftNumberY설정할 left 위치 값 또는 null.


topNumberY설정할 top 위치 값 또는 null.


modeStringN위치 설정 방법. [default: absolute, delta] 
absolute: 입력된 값을 위치로 설정.
delta: 현재 위치에 입력된 left 및 top 값을 추가.



Sample
// (예제) 컴포넌트의 top만 100px로 설정.
componentId.setPosition(null, 100);


setReadOnly(
									  readOnly
										)
							

웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


readOnlyBooleanYreadOnly 속성 활성화 여부. ( "true" : 활성화, "false" : 비활성화)



Sample
// 컴포넌트의 readOnly 속성을 true로 설정하는 예.
componentId.setReadOnly(true);


setRef(
									  설정할
										)
							

ref 속성을 설정. DataCollection과 연동시 "data:"라는 prefix를 꼭 붙여야 함.명시하지 않을 경우, InstanceData의 XPath로 인식됨.


Parameter

nametyperequireddescription


설정할StringYref의 경로



Sample
//dataMap1의 name key와 textbox1 컴포넌트의 value를 binding 하는 경우
textbox1.setRef("data:dataMap1.name");

//InstanceData의 res/userData/name 과 연동할 경우.
textbox1.setRef("res/userData/name");


setSize(
									  width
									       , 
									       height
										)
							

웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


widthNumberY새로 설정할 컴포넌트의 width 값 또는 null


heightNumberY새로 설정할 컴포넌트의 height 값 또는 null



Sample
// (예제) 컴포넌트의 height만 100px로 설정.
componentId.setSize(null,100);


setStyle(
									  propertyName
									       , 
									       value
										)
							

웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


propertyNameStringY설정할 CSS 속성


valueStringY해당 CSS 속성에 적용할 값



Sample
// (예제 1) 컴포넌트의 width를 200px로 설정
componentId.setStyle("width", "200px");

// (예제 2) 배경색을 olive로 변경
componentId.setStyle("background-color","olive");


setTitle(
									  title
										)
							

컴포넌트의 title 속성을 설정.


Parameter

nametyperequireddescription


titleStringY속성으로 설정할 값.



Sample
 // title 속성을 "test"로 설정하는 예제

 textbox1.setTitle("test");


setUserData(
									  key
									       , 
									       value
										)
							

웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) 컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.


Parameter

nametyperequireddescription


keyStringY설정할 데이터의 key


valueStringY설정한 데이터의 value



Sample
// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.

componentId.setUserData("data", "WebSquare");

// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. 
 
componentId.setUserData("title", "WebSquare");
// 아래와 같이 로그가 출력됨. 
// !!!WARNING - [title] can't be defined as UserData.


setValue(
									  label
										)
							

화면에 출력될 text인 value(label 속성에 정의 된 값)를 설정한다.


Parameter

nametyperequireddescription


labelStringY화면에 출력될 text



Sample

textbox1.setValue("Pinocchio");


show(
									  displayType
										)
							

웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)CSS display 속성을 주어진 값으로 설정하고 "visibility: show;"를 적용.


Parameter

nametyperequireddescription


displayTypeStringN적용할 CSS display 속성의 값.   
block : display: block;을 적용. (기본 값)
inline : display: inline;을 적용.
none : display: none;을 적용.
"" : show 수행 이전의 display 속성 값으로 복구.



Sample
// (예제) display: block; CSS를 설정.
componentId.show();  

// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.
componentId.show("");


toggleClass(
									  className
										)
							

className 클래스를 제거하거나 추가. 기본 설정은 addClass(); 함수를 통해 추가된 클래스만 삭제 가능. 직접 정의된 class를 삭제하는 경우, config.xml 파일에 아래 설정을 추가. 
// config.xml 파일에 아래 설정을 추가 .
 <removeDefaultClass value="true" />


Parameter

nametyperequireddescription


classNameStringY제거하거나 추가할 클래스.



Sample
// 아래와 같이 input 컴포넌트에 class를 정의 한 경우


// config.xml 파일에 아래와 같이 정의.

    <removeDefaultClass value="true" />


// 적용된 tmpInputClass class 삭제
input1.toggleClass("tmpInputClass");

// tmpInputClass class를 다시 추가
input1.toggleClass("tmpInputClass");


trigger(
									  type
									       , 
									       array
										)
							

컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringY발생시킬 이벤트


arrayArrayN이벤트 핸들러에 전달할 파라미터 배열



Sample
// (예제 1)
// input1 컴포넌트에 onclick 이벤트를 발생시킴.
input1.trigger("onclick");

// (예제 2)
// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.
input1.trigger("onviewchange", [1,2]);


unbind(
									  type
									       , 
									       function
										)
							

컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)


Parameter

nametyperequireddescription


typeStringN제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)


functionFunctionN제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)



Sample
// (예제 1)
// input1에 등록된 모든 이벤트를 제거.
input1.unbind();

// (예제 2)
// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.
input1.unbind("onviewchange");

// (예제 3)
// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.
input1.unbind("onviewchange", func1);


unbindRef(
									  
										)
							

ref 바인딩을 해제.





visible(
									  flag
										)
							

[deprecated] show/hide 혹은 setStyle 사용을 권장.엔진 내부적으로 CSS visibility 속성을 설정.


Parameter

nametyperequireddescription


flagBooleanY설정할 CSS visibility 속성 값 
true : visibility: visible;
false : visibility: hidden;










Copyrights Inswave Systems Co., Ltd.



