


WebSquare.uiplugin.dataMap 









PropertyEventMethod찾아보기

WebSquare.uiplugin.dataMap - 5.0_5.4826M.20230213.171915





Data통신 및 화면에서 사용 할 Data로 key와 value로 이루어진 단일 객체이다. JAVA의 MAP 객체와 비슷한 구조를 갖는다.
  DataCollectoin 하위에 생성되며 데이터의 구조를 정의하는 Key Info 영역과 초기값을 정의하는 Data 영역으로 나뉘어 있다.
  Key Info 영역(source : <w2:keyInfo>)은 key의 정보가 있으며 key의 id 속성에 key의 이름을 정의한다.
  Data 영역(source : <w2:data>)은 key의 초기값을 정의하는 곳이며 use data가 체크되어있어야(source : <w2:data use="true">) 초기값이 적용된다.

Type


uiplugin

Property Summary




attributeMap

DataType이 XML 일 경우만 적용이 되는 기능으로 rootNode에 추가 attribute(속성)을 지정하고자 하는 DataMap의 이름



baseNode

[default:map] DataType이 XML 일 경우만 적용되며 데이터를 XML로 변환 시 root 노드로 정의 할 XPath를 명시한다



defaultValue

key의 초기값



firstSet

dataMap에 초기값을 정의하지 않았을 경우 API(setValue 등) 또는 사용자가 최초 입력한 값을 초기값으로 설정 할지의 여부.



firstSetSubmission

dataMap에 setJSON, setXML API를 호출하거나 submission을 날려서 dataMap 데이터가 갱신된 경우 그 갱신된 값을 초기값을 설정할지에 대한 여부



id

DataMap ID.



idAttribute

DataType이 XML 일 경우만 적용이 되는 기능으로 dataMap의 id에 정의 된 값을 id attribute(속성)가 아닌 다른 attribute(본 속성에 정의 한 값)로 정의하고자 할 경우 사용된다



length

컬럼의 데이터 길이



userData1

사용자 정의 데이터 속성



userData2

사용자 정의 데이터 속성



userData3

사용자 정의 데이터 속성



valueAttribute

DataType이 XML 일 경우만 적용되며 실 데이터를 attribute(속성)에 할당 할 때 사용된다



Event Summary




onbeforemodelchange

특정 key에 대한 value가 변경되기 직전에 발생



onkeyset

set API를 호출하는 경우 매번 발생하는 이벤트이다



onmodelchange

특정 key에 대한 value가 변경된 이후에 발생



onsetdata

setJSON 또는 setXML API와 같이 데이터를 set 해줄 때 또는 submission의 target과 연동되어 통신의 결과가 set 될 때 발생하는 이벤트이다.


Method Summary




bind(
									  eventType
									       , 
									       function
										)
								

dataMap의 이벤트를 동적으로 할당한다



get(
									  key
										)
								

KeyInfo에 정의되어있는 Key ID에 할당 된 value를 반환한다



getArray(
									  
										)
								

DataMap 전체 데이터를 KeyInfo에 정의 된 순서대로 array에 담아 반환한다



getCount(
									  
										)
								

DataMap에 정의 된 key의 개수를 반환한다



getID(
									  
										)
								

dataMap 객체의 id를 반환한다



getIndex(
									  keyID
										)
								

key의 ID로 KeyInfo에 정의 된 key의 index를 반환한다



getInfo(
									  
										)
								

dataMap의 세부 정보를 조회한다



getJSON(
									  
										)
								

DataMap 전체 데이터를 JSON으로 반환한다



getKey(
									  keyIndex
										)
								

key의 index를 받아 ID명을 반환한다



getKeyInfo(
									  key
										)
								

dataMap 특정 key의 세부 정보를 조회한다



getModifiedArray(
									  
										)
								

DataMap의 original 데이터와 현재 데이터의 값이 다른 key array와 value array를 JSON으로 반환한다



getModifiedData(
									  
										)
								

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 value를 배열로 반환한다



getModifiedIndex(
									  
										)
								

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 Index를 배열로 반환한다



getModifiedJSON(
									  
										)
								

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 JSON으로 반환합니다



getModifiedKey(
									  
										)
								

DataMap의 original 데이터와 현재 데이터의 값이 다른 Key들을 배열로 반환한다



getModifiedXML(
									  
										)
								

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 XML로 반환합니다



getName(
									  keyID
										)
								

KeyInfo에 정의 된 key의 id로 name에 정의 된 값을 반환한다



getObjectType(
									  
										)
								

dataCollection의 Type을 반환한다



getOption(
									  attr
										)
								

속성명으로 dataMap에 정의 된 속성의 값을 반환한다



getOriginal(
									  KeyID
										)
								

KeyInfo에 정의 된 Key ID에 할당 된 초기값을 반환한다



getScope(
									  
										)
								

컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하는 함수  
 scope=true인 wframe의 자식 컴포넌트가 아닐 경우 null을 반환한다



getScopeWindow(
									  
										)
								

컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope객체를 반환하는 함수  
 scope=true인 wframe의 자식 컴포넌트가 아닐 경우 전역 window객체를 반환한다



getType(
									  KeyID
										)
								

KeyInfo에 정의 된 Key의 dataType 속성 값을 반환한다



getXML(
									  
										)
								

DataMap의 전체 데이터를 XML 형태로 반환한다



initRowStatus(
									  
										)
								

dataMap의 상태를 모두 변경되지않음 상태로 설정한다



modifyKeyStatus(
									  key
									       , 
									       isModified
										)
								

key에 해당하는 상태값을 변경됨(true) 또는 변경되지않음(false) 상태로 조작한다



redo(
									  
										)
								

데이터를 변경된 시점 최근 한단계로 되돌린다



reform(
									  
										)
								

DataMap의 key의 상태를 초기화하고 original값을 현재의 key값으로 변경한다



restore(
									  
										)
								

데이터를 이전 한단계로 되돌린다



set(
									  KeyID
									       , 
									       KeyValue
										)
								

DataMap에 정의 된 Key ID에 value를 셋팅한다



setArray(
									  arrayData
										)
								

DataMap의 전체 데이터를 Array로 셋팅한다



setEmptyValue(
									  
										)
								

key값을 확인하여 빈 값을 셋팅합니다. 디폴트 값이 있는 경우, 디폴트 값으로 셋팅됩니다.



setJSON(
									  jsonData
										)
								

DataMap의 전체 데이터를 JSON으로 셋팅한다



setXML(
									  xmlData
										)
								

DataMap의 전체 데이터를 XML로 셋팅한다



trigger(
									  eventType
									       , 
									       paramArray
										)
								

dataMap에 등록 된 특정 이벤트를 직접 발생시킨다



unbind(
									  eventType
									       , 
									       function
										)
								

dataMap의  정의 된 이벤트를 제거한다



undo(
									  
										)
								

DataMap의 key value를 초기(original)값으로 변경한다



Property Detail




attributeMap

DataType이 XML 일 경우만 적용이 되는 기능으로 rootNode에 추가 attribute(속성)을 지정하고자 하는 DataMap의 이름. 본 속성에 명시 된  DataMap의 key와 value가 rootNode의 attribute(속성)이름과 value로 정의 된다.


baseNode

[default:map] DataType이 XML 일 경우만 적용되며 데이터를 XML로 변환 시 root 노드로 정의 할 XPath를 명시한다.


defaultValue

key의 초기값


firstSet

dataMap에 초기값을 정의하지 않았을 경우 API(setValue 등) 또는 사용자가 최초 입력한 값을 초기값으로 설정 할지의 여부.true로 설정시 빈 값('')으로, false로 설정 한 경우 API(setValue 등) 또는 사용자가 최초 입력한 값이 초기값으로 설정한다.


firstSetSubmission

dataMap에 setJSON, setXML API를 호출하거나 submission을 날려서 dataMap 데이터가 갱신된 경우 그 갱신된 값을 초기값을 설정할지에 대한 여부true설정 시 submission을 날릴 때마다 해당 data를 초기값으로 설정한다.


id

DataMap ID.전역객체로 할당되며 submission 및 각종 API 사용시 data를 구분하기 위한 key로 사용됨.


idAttribute

DataType이 XML 일 경우만 적용이 되는 기능으로 dataMap의 id에 정의 된 값을 id attribute(속성)가 아닌 다른 attribute(본 속성에 정의 한 값)로 정의하고자 할 경우 사용된다.


length

컬럼의 데이터 길이.


userData1

사용자 정의 데이터 속성. getUserData("userData1") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData1");


userData2

사용자 정의 데이터 속성. getUserData("userData2") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData2");


userData3

사용자 정의 데이터 속성. getUserData("userData3") API를 통해 설정한 값을 얻어올 수 있음. 
 // 속성 값 얻어오기 예시
 getUserData("userData3");


valueAttribute

DataType이 XML 일 경우만 적용되며 실 데이터를 attribute(속성)에 할당 할 때 사용된다. (defulat:TextNode)





Event Detail




onbeforemodelchange

특정 key에 대한 value가 변경되기 직전에 발생. 이벤트 핸들러 함수에서 false를 리턴할 경우 변경 동작이 취소된다.

Parameter

nametypedescription


infoObjectkey, oldValue, newValue를 포함한 오브젝트를 반환합니다.


Sample
//dataMap 예시






// dataMap과 ref로 연동된 input 예시

// 이벤트 핸들러 함수 예시. input1의 값에 숫자나 영문자가 아닌 다른 값이 입력된 경우 input1을 이전 값으로 되돌린다. 
scwin.dataMap1_onbeforemodelchange = function(info) {
    if (info.newValue.match(/[^A-Za-z0-9]/g)) {
        return false;
    } else {
        return true;
    }
};


onkeyset

set API를 호출하는 경우 매번 발생하는 이벤트이다.

Parameter

nametypedescription


infoObjectkey, oldValue, newValue를 포함한 오브젝트를 반환합니다.


Sample
<![CDATA[
    var key = info.key;
    var oldValue = info.oldValue;
    var newValue = info.newValue;
    // validation logic
]]>


onmodelchange

특정 key에 대한 value가 변경된 이후에 발생.

Parameter

nametypedescription


infoObjectkey, oldValue, newValue를 포함한 오브젝트를 반환한다.


Sample
//dataMap 예시






// dataMap과 ref로 연동된 input 예시

// 이벤트 핸들러 함수 예시. input1의 값이 변경될 때마다 scwin.dataMap1_onmodelchange 함수가 실행된다. 
scwin.dataMap1_onmodelchange = function(info) {
    console.log(JSON.stringify(info));
};


onsetdata

setJSON 또는 setXML API와 같이 데이터를 set 해줄 때 또는 submission의 target과 연동되어 통신의 결과가 set 될 때 발생하는 이벤트이다.컴포넌트와 바인딩 되어있는 경우 컴포넌트에 값이 셋팅 되기 전에 발생된다.




Method Detail




bind(
									  eventType
									       , 
									       function
										)
							

dataMap의 이벤트를 동적으로 할당한다.


Parameter

nametyperequireddescription


eventTypeStringY동적으로 할당할 이벤트의 이름


functionFunctionY동적으로 할당 할 이벤트의 핸들러 함수.



Sample
//dataMap의 id가 dataMap1 인 경우
dataMap1.bind("onsetdata", function(e){ alert("date setting");});

//event 함수를 commObj.fn_dcDataSet 으로 정의 한 경우
dataMap1.bind("onsetdata", commObj.fn_dcDataSet );


get(
									  key
										)
							

KeyInfo에 정의되어있는 Key ID에 할당 된 value를 반환한다. value의 초기값은 ""(empty string)이다.


Parameter

nametyperequireddescription


keyStringYKey ID.




Return

typedescription


ObjectKey ID에 할당 된 value. ( return type은 일반적으로 String이 대부분이며 초기 셋팅 한 data의 type 형태로 반환된다.)





getArray(
									  
										)
							

DataMap 전체 데이터를 KeyInfo에 정의 된 순서대로 array에 담아 반환한다.



Return

typedescription


ArrayDataMap 전체 데이터가 담긴 1차원 Array.


Sample
//dataMap 예시






웹스퀘어




var tmpArr = dataMap1.getArray();
//return 예시 ) ["웹스퀘어", ""]


getCount(
									  
										)
							

DataMap에 정의 된 key의 개수를 반환한다.



Return

typedescription


NumberDataMap에 정의 된 key의 개수





getID(
									  
										)
							

dataMap 객체의 id를 반환한다. 객체의 id 속성과 동일한 값을 반환한다.



Return

typedescription


StringdataMap 객체의 ID.





getIndex(
									  keyID
										)
							

key의 ID로 KeyInfo에 정의 된 key의 index를 반환한다.


Parameter

nametyperequireddescription


keyIDStringYKeyInfo에 정의 된 id.




Return

typedescription


NumberkeyID의 index.





getInfo(
									  
										)
							

dataMap의 세부 정보를 조회한다.



Return

typedescription


JSON{dataMapInfo : dataMap의 attribute값, keyInfo : 각 key의 attribute들을 모아둔 object} 형태의 json객체


Sample
//
dataMap1.getInfo();



getJSON(
									  
										)
							

DataMap 전체 데이터를 JSON으로 반환한다.


Sample
//dataMap 예시






웹스퀘어




var tmpJSON = dataMap1.getJSON();
//return 예시 - String으로 변환 ) {name: "웹스퀘어", addr: "" }


getKey(
									  keyIndex
										)
							

key의 index를 받아 ID명을 반환한다.


Parameter

nametyperequireddescription


keyIndexNumberYKeyInfo에 정의 된 key의 index.




Return

typedescription


Stringkey의 ID.


Sample
//dataMap 예시






웹스퀘어




var tmpKeyNm = dataMap1.getKey(0);
//return 예시 ) "name"


getKeyInfo(
									  key
										)
							

dataMap 특정 key의 세부 정보를 조회한다.


Parameter

nametyperequireddescription


keyStringY조회하고자 하는 key




Return

typedescription


JSON해당 key의 attribute를 표현한 json 객체


Sample
 //
dataList1.getKeyInfo("key1");



getModifiedArray(
									  
										)
							

DataMap의 original 데이터와 현재 데이터의 값이 다른 key array와 value array를 JSON으로 반환한다. DataMap의 firstSet속성과 연관되어있다.



Return

typedescription


JSONoriginal 데이터와 현재 값이 다른 key array와 value array가 담긴 JSON.


Sample
//name과 addr이 정의 되어있는 dataMap에서 name의 value를 "인스웨이브"로 수정 한 경우
var modJsonArray = dataMap1.getModifiedArray();
//return 예시 - String으로 변환 시 ) { key : ["name"] , value : ["인스웨이브"] }


getModifiedData(
									  
										)
							

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 value를 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.



Return

typedescription


Arrayoriginal 데이터와 현재값이 다른 key들의 value가 담긴 Array.


Sample
//name과 addr이 정의 되어있는 dataMap에서 name의 value를 "인스웨이브"로 수정 한 경우
var modArray = dataMap1.getModifiedData();
//return 예시 ) [ "인스웨이브" ]


getModifiedIndex(
									  
										)
							

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 Index를 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.



Return

typedescription


Arrayoriginal 데이터와 현재값이 다른 key들의  Index가 담긴 Array.


Sample
//name과 addr이 정의 되어있는 dataMap에서 name의 value를 "인스웨이브"로 수정 한 경우
var modArray = dataMap1.getModifiedIndex();
//return 예시 ) [0]


getModifiedJSON(
									  
										)
							

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 JSON으로 반환합니다. DataMap의 firstSet속성과 연관되어있다.



Return

typedescription


JSONDataMap의 original 데이터와 현재 데이터의 값이 다른 key와 value가 담긴 JSON.


Sample
//name과 addr이 정의 되어있는 dataMap에서 name의 value를 "인스웨이브"로 수정 한 경우
var modJSON = dataMap1.getModifiedJSON();
//return 예시 - String으로 변환 시 ) { name: "인스웨이브" }


getModifiedKey(
									  
										)
							

DataMap의 original 데이터와 현재 데이터의 값이 다른 Key들을 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.



Return

typedescription


Arrayoriginal 데이터와 현재값이 다른 key가 담긴 Array.


Sample
//name과 addr이 정의 되어있는 dataMap에서 name의 value를 "인스웨이브"로 수정 한 경우
var modKeyArr = dataMap1.getModifiedKey();
//return 예시 ) ["name"]


getModifiedXML(
									  
										)
							

DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 XML로 반환합니다. DataMap의 firstSet속성과 연관되어있다.



Return

typedescription


XMLDataMap의 original 데이터와 현재 데이터의 값이 다른 key와 value가 담긴 XML.


Sample
//name과 addr이 정의 되어있는 dataMap에서 name의 value를 "인스웨이브"로 수정 한 경우
var modXML = dataMap1.getModifiedXML();
//return 예시 - String으로 변환 시 ) 인스웨이브


getName(
									  keyID
										)
							

KeyInfo에 정의 된 key의 id로 name에 정의 된 값을 반환한다.


Parameter

nametyperequireddescription


keyIDStringYKeyInfo에 정의 된 Key ID.




Return

typedescription


StringKeyInfo에 정의 된 Key  Name.


Sample
//dataMap 예시







var keyName = dataMap1.getName("name");
//return 예시 ) "이름"


getObjectType(
									  
										)
							

dataCollection의 Type을 반환한다.



Return

typedescription


String[dataMap, dataList, linkedDataList] dataCollection의 타입을 반환한다.


Sample
var dataCollectionType = dataMap1.getObjectType(); // dataCollectionType dataMap1의 type인 dataMap를 반환합니다.
return 예시 ) "dataMap"


getOption(
									  attr
										)
							

속성명으로 dataMap에 정의 된 속성의 값을 반환한다.


Parameter

nametyperequireddescription


attrStringY속성명.




Return

typedescription


StringdataMap에 정의 된 속성의 값.


Sample
//dataMap 예시







var tmpAttr = dataMap1.getOption("baseNode");
//return 예시 ) "map"


getOriginal(
									  KeyID
										)
							

KeyInfo에 정의 된 Key ID에 할당 된 초기값을 반환한다.


Parameter

nametyperequireddescription


KeyIDStringYKey ID.




Return

typedescription


ObjectKey ID에 할당 한 초기값. ( return type은 일반적으로 String이 대부분이며 초기 셋팅 한 data의 type 형태로 반환된다.)


Sample
//dataMap 예시





웹스퀘어



//name의 value set.
dataMap1.set("name","inswave");

//name의 value get
//var tmpData = dataMap1.get("name");
//return 예시 ) "inswave"

//name의 초기값 get.    
var tmpOrgData = dataMap1.getOriginal("name");
//return 예시 ) "웹스퀘어"


getScope(
									  
										)
							

컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하는 함수  
 scope=true인 wframe의 자식 컴포넌트가 아닐 경우 null을 반환한다.



Return

typedescription


Objectwframe 객체 또는 null


Sample
 // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 dataMap1이 있는 경우
 dataMap1.getScope(); // wframe11 객체를 반환한다.


getScopeWindow(
									  
										)
							

컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope객체를 반환하는 함수  
 scope=true인 wframe의 자식 컴포넌트가 아닐 경우 전역 window객체를 반환한다.



Return

typedescription


Objectwframe객체의 scope객체 또는 전역window객체


Sample
 // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 dataMap1이 있는 경우
 var scope = dataMap1.getScopeWindow();
 scope.wframe11 === dataMap1.getScope(); // true


getType(
									  KeyID
										)
							

KeyInfo에 정의 된 Key의 dataType 속성 값을 반환한다.


Parameter

nametyperequireddescription


KeyIDStringYKey ID.




Return

typedescription


StringKey의 dataType 속성 값.


Sample
//dataMap 예시






var keyType = dataMap1.getType();
//return 예시 ) "text"


getXML(
									  
										)
							

DataMap의 전체 데이터를 XML 형태로 반환한다.



Return

typedescription


XMLXML 타입의 전체 데이터


Sample
//dataMap 예시






웹스퀘어




var tmpXML = dataMap1.getXML();
//return 예시 )
//
//      웹스퀘어
//      
//


initRowStatus(
									  
										)
							

dataMap의 상태를 모두 변경되지않음 상태로 설정한다.


Sample
 dataMap1.initRowStatus(); // dataMap1의 상태가 모두 변경되지않음 상태로 설정된다. 따라서 이후 dataMap1.getModifiedJSON() 호출 시 빈 객체가 반환된다.


modifyKeyStatus(
									  key
									       , 
									       isModified
										)
							

key에 해당하는 상태값을 변경됨(true) 또는 변경되지않음(false) 상태로 조작한다.


Parameter

nametyperequireddescription


keyStringY상태를 변경할 key


isModifiedBooleanY설정할 상태값. true일 경우 변경됨으로 인식하며, false일 경우 변경되지 않음으로 인식



Sample
dataMap1.modifyKeyStatus("key1", false); // key1 상태를 변경되지않음으로 설정한다. dataMap1.getModifiedJSON 호출 시 key1은 빠지게 된다.
dataMap1.modifyKeyStatus("key1", true); // key1 상태를 변경됨으로 설정한다. dataMap1.getModifiedJSON 호출 시 key1이 포함되게 된다.


redo(
									  
										)
							

데이터를 변경된 시점 최근 한단계로 되돌린다.





reform(
									  
										)
							

DataMap의 key의 상태를 초기화하고 original값을 현재의 key값으로 변경한다.





restore(
									  
										)
							

데이터를 이전 한단계로 되돌린다.





set(
									  KeyID
									       , 
									       KeyValue
										)
							

DataMap에 정의 된 Key ID에 value를 셋팅한다.


Parameter

nametyperequireddescription


KeyIDStringYKey의 ID.


KeyValueStringYKey에 할당 할 value.



Sample
//dataMap 예시







dataMap1.set("name","웹스퀘어");


setArray(
									  arrayData
										)
							

DataMap의 전체 데이터를 Array로 셋팅한다. array의 value index(순서)는 DataMap에 정의 된 Key의 index(순서)와 동일해야한다.


Parameter

nametyperequireddescription


arrayDataArrayYKeyInfo에 정의 된 key 순서/개수와 동일하고 value만 담긴 Array.



Sample
//dataMap 예시







dataMap1.setArray( ["웹스퀘어","서울시"] );    //정상 동작
dataMap1.setArray( ["웹스퀘어"] );  //오류 발생


setEmptyValue(
									  
										)
							

key값을 확인하여 빈 값을 셋팅합니다. 디폴트 값이 있는 경우, 디폴트 값으로 셋팅됩니다.(OriginalData와 현재데이터 모두 빈 값으로 셋팅합니다.)





setJSON(
									  jsonData
										)
							

DataMap의 전체 데이터를 JSON으로 셋팅한다. 전체 Key가 있을 필요는 없으며 DataMap에 정의 된 Key만 셋팅된다.


Parameter

nametyperequireddescription


jsonDataJSONYJSON형태의 DataMap의 전체 데이터.



Sample
//dataMap 예시







var tmpData = { "name" : "웹스퀘어" };
dataMap1.setJSON( tmpData );


setXML(
									  xmlData
										)
							

DataMap의 전체 데이터를 XML로 셋팅한다. 전체 Key가 있을 필요는 없으며 DataMap에 정의 된 Key만 셋팅된다.


Parameter

nametyperequireddescription


xmlDataXMLYXML형태의 DataMap의 전체 데이터.



Sample
//dataMap 예시







var tmpStr = "웹스퀘어";        //XML String.
var tmpXML = WebSquare.xml.parse(tmpStr);   //XML 변환
dataMap1.setXML( tmpXML );


trigger(
									  eventType
									       , 
									       paramArray
										)
							

dataMap에 등록 된 특정 이벤트를 직접 발생시킨다.


Parameter

nametyperequireddescription


eventTypeStringY발생시킬 이벤트 이름


paramArrayArrayN이벤트 핸들러에 전달 할 파라미터 배열



Sample
// dataMap1에 onmodelcahnge이벤트를 발생시키고 핸들러 함수에 {key: "name", oldValue: "WebSquare", newValue: "Inswave"} 인자를 전달하여 호출한다.
 dataMap1.trigger( "onmodelchange" , [ {key: "name", oldValue: "WebSquare", newValue: "Inswave"} ] );


unbind(
									  eventType
									       , 
									       function
										)
							

dataMap의  정의 된 이벤트를 제거한다.


Parameter

nametyperequireddescription


eventTypeStringN제거할 이벤트의 이름. 생략할 경우 모든 이벤트를 제거한다.


functionFunctionN동적으로 event에 function을 할당 한 경우 제거 할 이벤트 핸들러 함수. 생략 할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다.



Sample
// dataMap1에 등록된 onmodelchange 이벤트 제거.
 dataMap1.unbind("onmodelchange");

//dataMap1.bind("onmodelchange", fn_dataMapChage) 와 같이 동적으로 이벤트와 이벤트 핸들러를 등록 한경우 아래와 같이 제거가 가능하다. ( 이벤트에 bind 된 이벤트 핸들러 제거 )
 dataMap1.unbind("onmodelchange", fn_dataMapChage); // dataMap1에 등록된 onmodelchange이벤트의 이벤트 핸들러 함수 중에 fn_dataMapChage를 제거


undo(
									  
										)
							

DataMap의 key value를 초기(original)값으로 변경한다.









Copyrights Inswave Systems Co., Ltd.



