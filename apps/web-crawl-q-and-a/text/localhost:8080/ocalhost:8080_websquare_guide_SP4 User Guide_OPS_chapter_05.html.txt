
Page5.Page5.1원칙WebSquare Page는 웹스퀘어의 SPA 구현 방법론이자 UI 개발의 기본 단위로써 외부에서 접근 가능한 속성, 이벤트, 메소드가 정의된 UI 컴포넌트입니다. 개발자는 WebSquare Page를 이용하여 모델, 뷰, 컨트롤을 포함하는 독립적인 업무 화면이나 단위 모듈로 기능하는 UI 구성 요소를 구현할 수 있습니다.WebSquare Page는 WebSquare5를 통해 구현하는 화면의 최소 단위입니다.WebSquare Page 특징별도의 XML 파일로 저장.단독으로 화면에 표시되거나 컨테이너 컴포넌트(WFrame, IFrame, TabControl, WindowContainer, WidgetContainer, Popup 등)에 포함되어 표현 가능.별도의 Scope 설정 가능. 컴포넌트로 동작.그림 5-1.YouTube 동영상 (https://youtu.be/_hxZ7iKLy5o)5.2ScopeScope 기능을 사용할 경우 개발자는 웹페이지 전체를 하나의 Single Page로 쉽게 구현할 수 있습니다. 보통의 경우 IFrame을 프레임 단위로 사용하지만, IFrame은 매번 사용할 때마다 브라우저가 다시 로딩되기 때문에 메모리 부하가 증가하는 단점이 있었습니다. 독립된 단위로 동작하는 WFrame은 기존의 IFrame을 대체할 수 있으며, 개발자는 IFrame 사용을 최소화하여 웹 어플리케이션의 전반적인 성능을 개선할 수 있습니다.WFrame 권장 외부 솔루션과의 연계 등 브라우저를 다시 로딩하여 메모리를 비워야 하는 것과 같이 특수한 경우에만 IFrame을 사용하십시오. 대부분의 경우, WFrame 사용을 권장합니다.그림 5-2.YouTube 동영상 (https://youtu.be/rdDGRo2gF8I)그림 5-3.YouTube 동영상 (https://youtu.be/958L9UKfYiY)5.3구조다음은 WebSquare5로 생성되는 XML 코드와 일반적인 HTML 코드 구조를 비교한 것입니다.그림 5-4.WebSquare5 코드 vs. HTML 코드표 5-1.WebSquare XML 구성 요소요소설명<head><xf:model><w2:dataCollection>데이터 구조<xf:workflow>submit, submitDone의 실행 순서<xf:submission>서비스 호출에 필요한 submit을 정의각 submit은 고유 ID를 포함<script>글로벌 스크립트 정의컴포넌트의 이벤트 함수 정의<style>스타일 지정<body>컴포넌트, 컴포넌트 속성, 화면 UI 정보 포함5.3.1Model5.3.1.1DataCollection데이터 객체를 정의하는 영역DataMapDataListLinkedDataList서버 통신을 위한 request, response 데이터와 화면에서 사용할 데이터를 정의5.3.1.2Submission서버 통신을 위한 인터페이스용도 별로 여러 개 정의 가능. 통신 방식(동기/비동기) 선택 가능. 통신 전/후에 실행할 함수 정의 가능. 전송할 데이터(request 혹은 ref)와 수신할 데이터(response 혹은 target)를 설정5.3.1.3Workflow여러 개의 Submission을 실행할 경우 사용.실행 순서, 결과 처리 순서, 결과에 따른 이후 Submission의 실행 여부등을 정의.조회(Select) 용도의 통신에 사용할 것을 권장.5.3.2Script업무 로직 구성글로벌 스크립트 정의컴포넌트의 이벤트 함수 정의관련 화면 뷰9.4 Script5.3.3BodyDesign 탭에서 그리는 화면 UI 정보 컴포넌트 배치 및 구성각 컴포넌트 속성관련 화면 뷰9.2 Palette9.7 Outline5.4브라우저 호출WebSquare Studio에서 작성한 화면은 XML 파일로 생성되며, XML 파일은 WebSquare5 엔진이 HTML로 변환하여 브라우저에 표시합니다.브라우저에서 WebSquare5로 개발한 화면을 요청할 경우, 서버 쪽의 websquare.html  파일이 제일 먼저 호출됩니다. 이후, WebSquare5 Engine이 구동되어 해당 화면을 HTML로 변환하여 브라우저에 표현합니다. 아래는 이 과정을 그림으로 표현한 것입니다.그림 5-5.화면 호출 순서그림 5-6.URL 표현5.5스크립트5.5.1scwin.onpageloadonpageload는 WebSquare Page 파일 생성 시 자동 생성되는 이벤트입니다. Script 탭에서 onpageload onpageunload 이벤트를 정의할 수 있으며, onpageload 이벤트는 페이지 로딩 후 실행됩니다.그림 5-7.WebSquare Page 생성그림 5-8.Page 생성 후예제 파일인터넷에서 다운로드 혹은WEBSQUARE_DEV_PACK의 GUIDE 프로젝트에서 보기(/_Page_SP4/onpageload_Page.xml)그림 5-9.YouTube 동영상 (https://youtu.be/Sw4DU7GlCK4)5.5.2<initScript>아래와 같이 config.xml 파일을 설정하여 initScript를 등록할 수 있습니다. 페이지 로딩 직후 실행되며 scwin.onpageload 스크립트 이전에 실행됩니다.코드 5-1.config.xml 설정 예 (initScript)<initScript value="true"/>
...

<wframe>
    <mode value="sync"/>
    <scope value="true"/>
    <initScript value="true">
        <![CDATA[
            alert("initScript");
        ]]>
    </initScript>
</wframe>예제 파일인터넷에서 다운로드 혹은WEBSQUARE_DEV_PACK의 GUIDE 프로젝트에서 보기(/_Page_SP4/initScript_Page/)그림 5-10.YouTube 동영상 (https://youtu.be/54iqywe5iF0)5.5.3<postScript>아래와 같이 config.xml 파일을 설정하여 <postScript>를 등록할 수 있습니다. <postScript>는 페이지 로딩 시 scwin.onpageload 스크립트가 실행된 후에 실행됩니다.코드 5-2.config.xml 설정 예 (postScript)<initScript value="true"/>
<postScript value="true"/>
...
<wframe>
    <mode value="sync"/>
    <scope value="true"/>
    <initScript value="true">
        <![CDATA[
            alert("initScript");
        ]]>
    </initScript>
    <postScript value="true">
        <![CDATA[
            alert("postScript");
        ]]>
    </postScript>
</wframe>예제 파일인터넷에서 다운로드 혹은WEBSQUARE_DEV_PACK의 GUIDE 프로젝트에서 보기(/_Page_SP4/postScript_Page/)그림 5-11.YouTube 동영상 (https://youtu.be/ruLrqseKaNs)5.6스크립트 실행 순서Scope 기능 사용 시 스크립트는 아래의 순서로 동작합니다.외부 JS 파일로컬 스크립트<initScript>onpageload<postScript>메인 페이지가 WFrame을 포함하는 경우, 실행 순서는 아래와 같습니다.표 5-2.스크립트 실행 순서순서대 항목세부 순서세부 항목1외부 JS 파일1-1메인 페이지1-2WFrame2로컬 영역의 스크립트2-1메인 페이지2-2WFrame3<initScript>(config.xml 파일에 정의)3-1메인 페이지3-2WFrame4onpageload4-1메인 페이지4-2WFrame5<postScript>(config.xml 파일에 정의)5-1WFrame5-2메인 페이지5.6.1WFrame이 중첩된 경우메인 화면이 WFrame을 중첩 포함하고 있는 경우, 스크립트 수행 순서는 아래와 같습니다.그림 5-12.스크립트 실행 순서 (initScript, onpageload, postScript)위의 그림의 순서를 표로 나타내면 아래와 같습니다.표 5-3.스크립트 실행 순서화면initScriptonpageloadpostScript메인1718WFrame12815WFrame1-13913WFrame1-241014WFrame251117WFrame2-1612165.6.1.1onpageload 발생 순서예제 파일인터넷에서 다운로드 혹은WEBSQUARE_DEV_PACK의 GUIDE 프로젝트에서 보기(/WFrame/onpageload_execution_sequence_WFrame/)그림 5-13.YouTube 동영상 (https://youtu.be/dhRGB_CQnAw)5.6.1.2onpageload, initScript, postScript 발생 순서예제 파일인터넷에서 다운로드 혹은WEBSQUARE_DEV_PACK의 GUIDE 프로젝트에서 보기(/_Page_SP4/script_execution_sequence_Page/)그림 5-14.YouTube 동영상 (https://youtu.be/r7WapwWZoZw)5.6.2Scope 기능 미적용 시참고로 Scope 기능을 사용하지 않는 경우, 스크립트 수행 순서는 아래와 같습니다.외부 JS 파일:PageInherit 컴포넌트의 외부 JS 파일 로딩.메인 페이지의 외부 JS 파일 로딩.WFrame 컴포넌트의 외부 JS 파일 로딩.메인 페이지:메인 페이지의 initScript (config.xml 파일에 정의된 JS 파일.)메인 페이지의 <script> 영역에 정의된 스크립트. 메인 페이지의 onpageload 이벤트 (화면의 <script> 영역에 정의.)WFrame 컴포넌트:WFrame 컴포넌트의 initScript (config.xml 파일에 정의된 JS 파일.)WFrame 컴포넌트의 <script> 영역에 정의된 스크립트. WFrame 컴포넌트의 onpageload 이벤트 (화면의 <script> 영역에 정의.)postScript:WFrame 컴포넌트의 postScript (config.xml 파일에 정의된 JS 파일.)메인 페이지의 postScript (config.xml 파일에 정의된 JS 파일.)
