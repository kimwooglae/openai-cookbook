


$p.data 









PropertyEventMethod찾아보기

$p.data - 5.0_5.4826M.20230213.171915





DataColletion을 전체적으로 제어하는 기능을 제공.
  복수의 데이터 객체에서 한번에 데이터 꺼내오기, 데이터 설정하기, 혹은 동적 데이터 객제 생성하기 등의 기능을 제공.

Type


engine

Property Summary



Event Summary


Method Summary




create(
									  dataCollectionString
									       , 
									       dataCollectionObject
										)
								

dataList 및 dataMap을 동적으로 생성



get(
									  type
									       , 
									       dcOptions
									       , 
									       returnOptions
										)
								

조건에 의해 다건의 dataList와 dataMap의 객체를 꺼내온다.



getAllDataCollection(
									  type
										)
								

한 화면 내에 있는 모든 DataCollection 정보를 반환



getBroadcast(
									  
										)
								

DataCollection의 broadcast 상태를 가져오는 API



getInfo(
									  idArray
										)
								

DataCollection의 상세 정보(xml에서 입력한 attribute 값)를 조회하는 함수



remove(
									  dataCollectionID
										)
								

dataList, dataMap, linkedDataList를 삭제하는 함수



set(
									  dataType
									       , 
									       dataObject
									       , 
									       idArray
										)
								

생성 되어 있는 여러개의 dataList와 dataMap의 값을 한번에 설정한다.



setBroadcast(
									  flag
										)
								

모든 dataCollection의 broadcast 상태를 설정한다. dataCollection 변경에 따른 화면 갱신을 최소화하기 위해 사용하는 API.  



Property Detail






Event Detail




Method Detail




create(
									  dataCollectionString
									       , 
									       dataCollectionObject
										)
							

dataList 및 dataMap을 동적으로 생성. 아래 예제와 같이 두 가지 방법(XML 및 JSON)으로 생성 가능.


Parameter

nametyperequireddescription


dataCollectionStringStringYdataList, dataMap의 XML 문자열.


dataCollectionObjectObjectYdataList, dataMap의 JSON 객체



Sample
 // dataList 생성 (XML 문자열)
 var dcStr = ' '+ 
                ''+ 
                    ''+
                    ''+
                    ''+
                    ''+
                ''+
            '';
 $p.data.create(dcStr);

 // dataMap 생성 (XML 문자열)
 var dcStr = '' +
               '' +
                 '' +
                 '' +
               '' +
             '';
 $p.data.create(dcStr); 
 
 // dataList 생성 (JSON 객체)
 var option = { 
     "id" : "dataList1",
     "type" : "dataList",
     "option" : { 
         "baseNode": "list",
         "repeatNode": "map"
     },
     "columnInfo" : [ 
         {
             "id" : "Code", 
             "name": "코드그룹", 
             "dataType" :"text" 
         }, {
             "id" :"CodeName", 
             "name" : "코드명", 
             "dataType" :"text"
         }
     ] 
 };
 $p.data.create( option );

 // dataMap 생성 (JSON 객체) 
 var option = {
     "id":"dataMap1",
     "type":"dataMap",
     "option":{
         "baseNode":"map"
     },
     "keyInfo":[
         {
             "id":"column1",
             "name":"column1",
             "dataType":"text"
         },{
             "id":"column2",
             "name":"column2",
             "dataType":"text"
         }
     ]
 };
 $p.data.create( option );


get(
									  type
									       , 
									       dcOptions
									       , 
									       returnOptions
										)
							

조건에 의해 다건의 dataList와 dataMap의 객체를 꺼내온다.return type으로 XML, ARRAY, JSON이 있다.


Parameter

nametyperequireddescription


typeStringY반환 타입명. JSON, XML, ARRAY 가 있다.


dcOptionsArrayY각 DataCollection(DataMap/DataList) ID 또는 검색 조건을 가진 JSON 객체을 담고 있는 Array.


returnOptionsJSONNreturn 객체에 대한 옵션이 담긴 JSON 객체.




Return

typedescription


JSON||XML||Arraytype에 따른 dataCollection의 데이터 객체.


Sample
//dataCollection의 모양이 아래와 같을 경우








 
//별도의 조건이 없이 DataCollection의 ID만 줄 경우.
$p.data.get("JSON",["dataMap1"]);   //단건
$p.data.get("JSON",["dataMap1","dataList1"]);   //다건
//return Data 예시 - 단건 ) { "dataMap1": {"name":"WebSquare","addr":"서울시"} }

//DataCollection의 조건이 있는경우. ( 조건으로는 key , id가 있다. )
$p.data.get("JSON",[{ key : "dl", id : "dataMap1" }]);
//return 예시) {"dl" :  {"name":"WebSquare" , "addr":"서울시"} }

//혼용해서 쓴 경우.
$p.data.get("JSON",["dataMap1",{ key : "dl", id : "dataMap1" }]);

//returnOptions 적용 예시
//꺼내 올 DataCollection의 객체가 1개이고 singleMode(최상위 객체 또는 XML Node를 제거)를 적용하고자 할 때 returnOptions를 이용한다.
$p.data.get("JSON",["dataLMap1"],{"singleMode":true});
//return Data 예시 ) {"name":"WebSquare" , "addr":"서울시"}


getAllDataCollection(
									  type
										)
							

한 화면 내에 있는 모든 DataCollection 정보를 반환. IFrame이나 Popup과 같은 다른 영역에 있는 DataCollection은 제외.


Parameter

nametyperequireddescription


typestringN반환할 DataCollection 정보 타입을 지정. (ID 혹은 객체 자체)




Return

typedescription


ArrayDataCollection의 ID를 담은 배열. type이 "object"인 경우 DataCollection 객체 자체를 담은 배열.


Sample
var ret = $p.data.getAllDataCollection(); // ret == ["dataList1", "dataList2"];
var ret = $p.data.getAllDataCollection("object"); // ret == [dataList1, dataList2];


getBroadcast(
									  
										)
							

DataCollection의 broadcast 상태를 가져오는 API



Return

typedescription


booleanbroadcast 상태 flag값





getInfo(
									  idArray
										)
							

DataCollection의 상세 정보(xml에서 입력한 attribute 값)를 조회하는 함수


Parameter

nametyperequireddescription


idArrayArrayN각 DataCollection(DataMap/DataList) ID를 담고 있는 Array. 값을 지정하지 않을 경우 모든 dataCollection이 대상이 된다.




Return

typedescription


JSON각 dataCollection의 하위 attribute값을 json형태로 표현한 json객체


Sample
$p.data.getInfo(); // 모든 dataCollection의 상세정보 조회
$p.data.getInfo(["dataList1","dataMap1"]); // dataList1, dataMap1에 대한 상세정보 조회


remove(
									  dataCollectionID
										)
							

dataList, dataMap, linkedDataList를 삭제하는 함수. dataList가 remove API를 통해 삭제되면 해당 dataList를 bind하고 있는 linkedDataList도 함께 삭제된다.


Parameter

nametyperequireddescription


dataCollectionIDStringYdataCollection의 ID.



Sample

$p.data.remove("dataMap1");


set(
									  dataType
									       , 
									       dataObject
									       , 
									       idArray
										)
							

생성 되어 있는 여러개의 dataList와 dataMap의 값을 한번에 설정한다.linkedDataList는 미지원한다. ( linkedDataList는 bind로 참조하고 있는 dataList에 셋팅해야 한다. )


Parameter

nametyperequireddescription


dataTypeStringY데이터의 타입으로 XML, ARRAY, JSON이 있다.


dataObjectJSON||XML||ARRAYYsetting 할 데이터 객체.


idArrayArrayN각 DataCollection(DataMap/DataList) ID 또는 셋팅 조건을 가진 JSON 객체을 담고 있는 Array. 값을 지정하지 않을 경우 dataObject에 정의 된 key를 참조하여 데이터가 셋팅 된다.



Sample
//dataCollection의 모양이 아래와 같을 경우









//JSON Type
var tmpJSON = {"name":"WebSquare","addr":"서울시"};
$p.data.set("JSON" , {"dataMap1": tmpJSON } , ["dataMap1"] );
$p.data.set("JSON" , {"dataMap1" : tmpJSON } );

//XML Type
var tmpXML = WebSquare.xml.parse( 'WebSquare서울시' );   //XML 객체 생성
$p.data.set("XML" , tmpXML , ["dataMap1"] );
$p.data.set("XML" , tmpXML );

//ARRAY Type
var tmpArr = ["WebSquare","제주도"];
$p.data.set("ARRAY" , {"dataMap1":tmpArr} , ["dataMap1"]);
$p.data.set("ARRAY" , {"dataMap1":tmpArr} );


setBroadcast(
									  flag
										)
							

모든 dataCollection의 broadcast 상태를 설정한다. dataCollection 변경에 따른 화면 갱신을 최소화하기 위해 사용하는 API.  broadcast가 비활성화 (false) 상태일 경우 dataCollection이 변경되어도 연동된 컴포넌트 ui는 갱신되지 않는다. broadcast가 비활성화 상태에서 활성화 상태로 변경될 경우 dataCollection과 화면이 동기화되는 처리가 저동으로 이루어진다.


Parameter

nametyperequireddescription


flagbooleanYbroadcast 설정 플래그. true시 broadcast 활성화와 동시에 dataCollection 갱신, false시 broadcast 비활성화.



Sample
//아래의 코드는 insertRow의 속도를 최대한 빠르게 만든 코드이다.
$p.data.setBroadcast(false);
for(var i = 0; i < 10; i++){dataList1.insertRow(i)}; // broadcast 비활성화에 의해 dataList를 변경해도 연동된 컴포넌트 ui는 갱신되지 않는다. 
for(var i = 0; i < 10; i++){dataList2.insertRow(i)};
$p.data.setBroadcast(true); // 최종적으로 dataList1, dataList2와 연동된 컴포넌트 ui가 이 시점에서 1회만 갱신된다.






Copyrights Inswave Systems Co., Ltd.



